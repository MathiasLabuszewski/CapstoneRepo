
SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8c8  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800ca00  0800ca00  0000da00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf80  0800cf80  0000e01c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf80  0800cf80  0000df80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf88  0800cf88  0000e01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf88  0800cf88  0000df88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf8c  0800cf8c  0000df8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800cf90  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac8  20000020  0800cfac  0000e020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  0800cfac  0000eae8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000e01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000243a9  00000000  00000000  0000e046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006388  00000000  00000000  000323ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c0  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001953  00000000  00000000  0003a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246e9  00000000  00000000  0003c28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002933a  00000000  00000000  00060974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb3dc  00000000  00000000  00089cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015508a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008950  00000000  00000000  001550d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000020 	.word	0x20000020
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c9e8 	.word	0x0800c9e8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000024 	.word	0x20000024
 8000174:	0800c9e8 	.word	0x0800c9e8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96a 	b.w	8000474 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460c      	mov	r4, r1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14e      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c4:	4694      	mov	ip, r2
 80001c6:	458c      	cmp	ip, r1
 80001c8:	4686      	mov	lr, r0
 80001ca:	fab2 f282 	clz	r2, r2
 80001ce:	d962      	bls.n	8000296 <__udivmoddi4+0xde>
 80001d0:	b14a      	cbz	r2, 80001e6 <__udivmoddi4+0x2e>
 80001d2:	f1c2 0320 	rsb	r3, r2, #32
 80001d6:	4091      	lsls	r1, r2
 80001d8:	fa20 f303 	lsr.w	r3, r0, r3
 80001dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e0:	4319      	orrs	r1, r3
 80001e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f6:	fb07 1114 	mls	r1, r7, r4, r1
 80001fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fe:	fb04 f106 	mul.w	r1, r4, r6
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f104 30ff 	add.w	r0, r4, #4294967295
 800020e:	f080 8112 	bcs.w	8000436 <__udivmoddi4+0x27e>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 810f 	bls.w	8000436 <__udivmoddi4+0x27e>
 8000218:	3c02      	subs	r4, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a59      	subs	r1, r3, r1
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022e:	fb00 f606 	mul.w	r6, r0, r6
 8000232:	429e      	cmp	r6, r3
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x94>
 8000236:	eb1c 0303 	adds.w	r3, ip, r3
 800023a:	f100 31ff 	add.w	r1, r0, #4294967295
 800023e:	f080 80fc 	bcs.w	800043a <__udivmoddi4+0x282>
 8000242:	429e      	cmp	r6, r3
 8000244:	f240 80f9 	bls.w	800043a <__udivmoddi4+0x282>
 8000248:	4463      	add	r3, ip
 800024a:	3802      	subs	r0, #2
 800024c:	1b9b      	subs	r3, r3, r6
 800024e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa6>
 8000256:	40d3      	lsrs	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xba>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb4>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa6>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x150>
 800027a:	42a3      	cmp	r3, r4
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xcc>
 800027e:	4290      	cmp	r0, r2
 8000280:	f0c0 80f0 	bcc.w	8000464 <__udivmoddi4+0x2ac>
 8000284:	1a86      	subs	r6, r0, r2
 8000286:	eb64 0303 	sbc.w	r3, r4, r3
 800028a:	2001      	movs	r0, #1
 800028c:	2d00      	cmp	r5, #0
 800028e:	d0e6      	beq.n	800025e <__udivmoddi4+0xa6>
 8000290:	e9c5 6300 	strd	r6, r3, [r5]
 8000294:	e7e3      	b.n	800025e <__udivmoddi4+0xa6>
 8000296:	2a00      	cmp	r2, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x204>
 800029c:	eba1 040c 	sub.w	r4, r1, ip
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	fa1f f78c 	uxth.w	r7, ip
 80002a8:	2101      	movs	r1, #1
 80002aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ba:	fb07 f006 	mul.w	r0, r7, r6
 80002be:	4298      	cmp	r0, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x11c>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x11a>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2b4>
 80002d2:	4626      	mov	r6, r4
 80002d4:	1a1c      	subs	r4, r3, r0
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e6:	fb00 f707 	mul.w	r7, r0, r7
 80002ea:	429f      	cmp	r7, r3
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x148>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x146>
 80002f8:	429f      	cmp	r7, r3
 80002fa:	f200 80b0 	bhi.w	800045e <__udivmoddi4+0x2a6>
 80002fe:	4620      	mov	r0, r4
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x9c>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa20 fc06 	lsr.w	ip, r0, r6
 8000318:	fa04 f301 	lsl.w	r3, r4, r1
 800031c:	ea43 030c 	orr.w	r3, r3, ip
 8000320:	40f4      	lsrs	r4, r6
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	0c38      	lsrs	r0, r7, #16
 8000328:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800032c:	fbb4 fef0 	udiv	lr, r4, r0
 8000330:	fa1f fc87 	uxth.w	ip, r7
 8000334:	fb00 441e 	mls	r4, r0, lr, r4
 8000338:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800033c:	fb0e f90c 	mul.w	r9, lr, ip
 8000340:	45a1      	cmp	r9, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x1a6>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800034e:	f080 8084 	bcs.w	800045a <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8081 	bls.w	800045a <__udivmoddi4+0x2a2>
 8000358:	f1ae 0e02 	sub.w	lr, lr, #2
 800035c:	443c      	add	r4, r7
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	fa1f f983 	uxth.w	r9, r3
 8000366:	fbb4 f3f0 	udiv	r3, r4, r0
 800036a:	fb00 4413 	mls	r4, r0, r3, r4
 800036e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000372:	fb03 fc0c 	mul.w	ip, r3, ip
 8000376:	45a4      	cmp	ip, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x1d2>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000380:	d267      	bcs.n	8000452 <__udivmoddi4+0x29a>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0x29a>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800038e:	fba0 9302 	umull	r9, r3, r0, r2
 8000392:	eba4 040c 	sub.w	r4, r4, ip
 8000396:	429c      	cmp	r4, r3
 8000398:	46ce      	mov	lr, r9
 800039a:	469c      	mov	ip, r3
 800039c:	d351      	bcc.n	8000442 <__udivmoddi4+0x28a>
 800039e:	d04e      	beq.n	800043e <__udivmoddi4+0x286>
 80003a0:	b155      	cbz	r5, 80003b8 <__udivmoddi4+0x200>
 80003a2:	ebb8 030e 	subs.w	r3, r8, lr
 80003a6:	eb64 040c 	sbc.w	r4, r4, ip
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	431e      	orrs	r6, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c5 6400 	strd	r6, r4, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e750      	b.n	800025e <__udivmoddi4+0xa6>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f103 	lsr.w	r1, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	fa24 f303 	lsr.w	r3, r4, r3
 80003cc:	4094      	lsls	r4, r2
 80003ce:	430c      	orrs	r4, r1
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d8:	fa1f f78c 	uxth.w	r7, ip
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3110 	mls	r1, r8, r0, r3
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x24c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29e>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29e>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb3 f1f8 	udiv	r1, r3, r8
 800040c:	fb08 3311 	mls	r3, r8, r1, r3
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x276>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x296>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x296>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e739      	b.n	80002aa <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f0      	b.n	800021c <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e706      	b.n	800024c <__udivmoddi4+0x94>
 800043e:	45c8      	cmp	r8, r9
 8000440:	d2ae      	bcs.n	80003a0 <__udivmoddi4+0x1e8>
 8000442:	ebb9 0e02 	subs.w	lr, r9, r2
 8000446:	eb63 0c07 	sbc.w	ip, r3, r7
 800044a:	3801      	subs	r0, #1
 800044c:	e7a8      	b.n	80003a0 <__udivmoddi4+0x1e8>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x276>
 8000452:	4603      	mov	r3, r0
 8000454:	e799      	b.n	800038a <__udivmoddi4+0x1d2>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x24c>
 800045a:	46d6      	mov	lr, sl
 800045c:	e77f      	b.n	800035e <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74d      	b.n	8000300 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e70f      	b.n	800028c <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e730      	b.n	80002d4 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000494:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <adcInit>:
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

}


void adcInit(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	@ 0x28
 80004ac:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef fiveVoltRail = {0};
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]

    // Enable the GPIO port clock for PB10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff ffda 	bl	8000478 <LL_AHB2_GRP1_EnableClock>

    // Configure PB10 as output, push-pull, no pull-up/pull-down, and low speed
    fiveVoltRail.Pin = GPIO_PIN_10;
 80004c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004c8:	617b      	str	r3, [r7, #20]
    fiveVoltRail.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
    fiveVoltRail.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
    fiveVoltRail.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOB, &fiveVoltRail);
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4619      	mov	r1, r3
 80004dc:	4842      	ldr	r0, [pc, #264]	@ (80005e8 <adcInit+0x140>)
 80004de:	f002 fe6d 	bl	80031bc <HAL_GPIO_Init>

    // Set PB10 to HIGH to enable the 5V rail
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004e8:	483f      	ldr	r0, [pc, #252]	@ (80005e8 <adcInit+0x140>)
 80004ea:	f003 f895 	bl	8003618 <HAL_GPIO_WritePin>

	GPIO_InitTypeDef threeVoltRail = {0};
 80004ee:	463b      	mov	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]

    // Enable the GPIO port clock for PB10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff ffbb 	bl	8000478 <LL_AHB2_GRP1_EnableClock>

    // Configure PB10 as output, push-pull, no pull-up/pull-down, and low speed
    threeVoltRail.Pin = GPIO_PIN_9;
 8000502:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000506:	603b      	str	r3, [r7, #0]
    threeVoltRail.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
    threeVoltRail.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
    threeVoltRail.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(GPIOA, &threeVoltRail);
 8000514:	463b      	mov	r3, r7
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f002 fe4e 	bl	80031bc <HAL_GPIO_Init>

    // Set PB10 to HIGH to enable the 5V rail
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f003 f875 	bl	8003618 <HAL_GPIO_WritePin>


	hadc.Instance = ADC;
 800052e:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <adcInit+0x144>)
 8000530:	4a2f      	ldr	r2, [pc, #188]	@ (80005f0 <adcInit+0x148>)
 8000532:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000534:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <adcInit+0x144>)
 8000536:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800053a:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800053c:	4b2b      	ldr	r3, [pc, #172]	@ (80005ec <adcInit+0x144>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000542:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <adcInit+0x144>)
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <adcInit+0x144>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b27      	ldr	r3, [pc, #156]	@ (80005ec <adcInit+0x144>)
 8000550:	2204      	movs	r2, #4
 8000552:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <adcInit+0x144>)
 8000556:	2200      	movs	r2, #0
 8000558:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800055a:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <adcInit+0x144>)
 800055c:	2200      	movs	r2, #0
 800055e:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000560:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <adcInit+0x144>)
 8000562:	2200      	movs	r2, #0
 8000564:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8000566:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <adcInit+0x144>)
 8000568:	2201      	movs	r2, #1
 800056a:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800056c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <adcInit+0x144>)
 800056e:	2200      	movs	r2, #0
 8000570:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000574:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <adcInit+0x144>)
 8000576:	2200      	movs	r2, #0
 8000578:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <adcInit+0x144>)
 800057c:	2200      	movs	r2, #0
 800057e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000580:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <adcInit+0x144>)
 8000582:	2200      	movs	r2, #0
 8000584:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <adcInit+0x144>)
 800058a:	2200      	movs	r2, #0
 800058c:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <adcInit+0x144>)
 8000590:	2207      	movs	r2, #7
 8000592:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000594:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <adcInit+0x144>)
 8000596:	2207      	movs	r2, #7
 8000598:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc.Init.OversamplingMode = DISABLE;
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <adcInit+0x144>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005a2:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <adcInit+0x144>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	64da      	str	r2, [r3, #76]	@ 0x4c

	//__HAL_RCC_ADC_CLK_ENABLE();
	//SET_BIT(ADC->CR, ADC_CR_ADVREGEN);
	//MODIFY_REG(ADC->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);

	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005a8:	4810      	ldr	r0, [pc, #64]	@ (80005ec <adcInit+0x144>)
 80005aa:	f001 faad 	bl	8001b08 <HAL_ADC_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <adcInit+0x110>
	{
		while(1){};
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <adcInit+0x10c>
	}

	  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <adcInit+0x144>)
 80005ba:	f002 f838 	bl	800262e <HAL_ADCEx_Calibration_Start>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <adcInit+0x120>
	  {
		/* Calibration Error */
		 while(1);
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <adcInit+0x11c>
	  }

	HAL_ADC_Stop(&hadc);
 80005c8:	4808      	ldr	r0, [pc, #32]	@ (80005ec <adcInit+0x144>)
 80005ca:	f001 fc77 	bl	8001ebc <HAL_ADC_Stop>

	HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	@ 0x64
 80005d0:	f000 fb82 	bl	8000cd8 <HAL_Delay>
	adcRead(&t1, &t2, &t3);
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <adcInit+0x14c>)
 80005d6:	4908      	ldr	r1, [pc, #32]	@ (80005f8 <adcInit+0x150>)
 80005d8:	4808      	ldr	r0, [pc, #32]	@ (80005fc <adcInit+0x154>)
 80005da:	f000 f871 	bl	80006c0 <adcRead>

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	48000400 	.word	0x48000400
 80005ec:	2000003c 	.word	0x2000003c
 80005f0:	40012400 	.word	0x40012400
 80005f4:	200000a4 	.word	0x200000a4
 80005f8:	200000a2 	.word	0x200000a2
 80005fc:	200000a0 	.word	0x200000a0

08000600 <selectChannel11>:

void selectChannel11(){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_11;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <selectChannel11+0x38>)
 8000612:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000618:	2307      	movs	r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4806      	ldr	r0, [pc, #24]	@ (800063c <selectChannel11+0x3c>)
 8000622:	f001 fd21 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <selectChannel11+0x30>
	{
		while(1){};
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <selectChannel11+0x2c>
	}

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2c000800 	.word	0x2c000800
 800063c:	2000003c 	.word	0x2000003c

08000640 <selectChannel2>:

void selectChannel2(){
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <selectChannel2+0x38>)
 8000652:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000658:	2307      	movs	r3, #7
 800065a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4806      	ldr	r0, [pc, #24]	@ (800067c <selectChannel2+0x3c>)
 8000662:	f001 fd01 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <selectChannel2+0x30>
	{
		while(1){};
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <selectChannel2+0x2c>
	}

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	08000004 	.word	0x08000004
 800067c:	2000003c 	.word	0x2000003c

08000680 <selectChannel3>:

void selectChannel3(){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_3;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <selectChannel3+0x38>)
 8000692:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000698:	2307      	movs	r3, #7
 800069a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	4806      	ldr	r0, [pc, #24]	@ (80006bc <selectChannel3+0x3c>)
 80006a2:	f001 fce1 	bl	8002068 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <selectChannel3+0x30>
	{
		while(1){};
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <selectChannel3+0x2c>
	}

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	0c000008 	.word	0x0c000008
 80006bc:	2000003c 	.word	0x2000003c

080006c0 <adcRead>:

void adcRead(uint16_t *val1, uint16_t *val2, uint16_t *val3){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]


	selectChannel11();
 80006cc:	f7ff ff98 	bl	8000600 <selectChannel11>
	HAL_ADC_Start(&hadc);
 80006d0:	481d      	ldr	r0, [pc, #116]	@ (8000748 <adcRead+0x88>)
 80006d2:	f001 fbad 	bl	8001e30 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 80006d6:	2164      	movs	r1, #100	@ 0x64
 80006d8:	481b      	ldr	r0, [pc, #108]	@ (8000748 <adcRead+0x88>)
 80006da:	f001 fc21 	bl	8001f20 <HAL_ADC_PollForConversion>
	*val1 = HAL_ADC_GetValue(&hadc);
 80006de:	481a      	ldr	r0, [pc, #104]	@ (8000748 <adcRead+0x88>)
 80006e0:	f001 fcb5 	bl	800204e <HAL_ADC_GetValue>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 80006ec:	4816      	ldr	r0, [pc, #88]	@ (8000748 <adcRead+0x88>)
 80006ee:	f001 fbe5 	bl	8001ebc <HAL_ADC_Stop>

	selectChannel2();
 80006f2:	f7ff ffa5 	bl	8000640 <selectChannel2>
	HAL_ADC_Start(&hadc);
 80006f6:	4814      	ldr	r0, [pc, #80]	@ (8000748 <adcRead+0x88>)
 80006f8:	f001 fb9a 	bl	8001e30 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 80006fc:	2164      	movs	r1, #100	@ 0x64
 80006fe:	4812      	ldr	r0, [pc, #72]	@ (8000748 <adcRead+0x88>)
 8000700:	f001 fc0e 	bl	8001f20 <HAL_ADC_PollForConversion>
	*val2 = HAL_ADC_GetValue(&hadc);
 8000704:	4810      	ldr	r0, [pc, #64]	@ (8000748 <adcRead+0x88>)
 8000706:	f001 fca2 	bl	800204e <HAL_ADC_GetValue>
 800070a:	4603      	mov	r3, r0
 800070c:	b29a      	uxth	r2, r3
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 8000712:	480d      	ldr	r0, [pc, #52]	@ (8000748 <adcRead+0x88>)
 8000714:	f001 fbd2 	bl	8001ebc <HAL_ADC_Stop>

	selectChannel3();
 8000718:	f7ff ffb2 	bl	8000680 <selectChannel3>
	HAL_ADC_Start(&hadc);
 800071c:	480a      	ldr	r0, [pc, #40]	@ (8000748 <adcRead+0x88>)
 800071e:	f001 fb87 	bl	8001e30 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8000722:	2164      	movs	r1, #100	@ 0x64
 8000724:	4808      	ldr	r0, [pc, #32]	@ (8000748 <adcRead+0x88>)
 8000726:	f001 fbfb 	bl	8001f20 <HAL_ADC_PollForConversion>
	*val3 = HAL_ADC_GetValue(&hadc);
 800072a:	4807      	ldr	r0, [pc, #28]	@ (8000748 <adcRead+0x88>)
 800072c:	f001 fc8f 	bl	800204e <HAL_ADC_GetValue>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <adcRead+0x88>)
 800073a:	f001 fbbf 	bl	8001ebc <HAL_ADC_Stop>

}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000003c 	.word	0x2000003c

0800074c <LL_AHB1_GRP1_EnableClock>:
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000758:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800075a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000768:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4013      	ands	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000770:	68fb      	ldr	r3, [r7, #12]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000780:	2004      	movs	r0, #4
 8000782:	f7ff ffe3 	bl	800074c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ffe0 	bl	800074c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2102      	movs	r1, #2
 8000790:	200f      	movs	r0, #15
 8000792:	f002 f8f2 	bl	800297a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000796:	200f      	movs	r0, #15
 8000798:	f002 f909 	bl	80029ae <HAL_NVIC_EnableIRQ>

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LL_AHB2_GRP1_EnableClock>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c4:	68fb      	ldr	r3, [r7, #12]
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	2002      	movs	r0, #2
 80007e6:	f7ff ffdb 	bl	80007a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2004      	movs	r0, #4
 80007ec:	f7ff ffd8 	bl	80007a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ffd5 	bl	80007a0 <LL_AHB2_GRP1_EnableClock>

  /*Configure LED GPIO pins */
  GPIO_InitStruct.Pin = LED_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_Port, &GPIO_InitStruct);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_GPIO_Init+0x6c>)
 800080c:	f002 fcd6 	bl	80031bc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_Port, LED_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2120      	movs	r1, #32
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <MX_GPIO_Init+0x6c>)
 8000816:	f002 feff 	bl	8003618 <HAL_GPIO_WritePin>


  /*Configure Button GPIO pins */
  GPIO_InitStruct.Pin = BUT_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT_Port, &GPIO_InitStruct);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000830:	f002 fcc4 	bl	80031bc <HAL_GPIO_Init>
}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	48000400 	.word	0x48000400

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 ffbc 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f812 	bl	8000870 <SystemClock_Config>
  adcInit();
 800084c:	f7ff fe2c 	bl	80004a8 <adcInit>
  MX_GPIO_Init();
 8000850:	f7ff ffbe 	bl	80007d0 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000854:	f00a fc29 	bl	800b0aa <MX_SubGHz_Phy_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2102      	movs	r1, #2
 800085c:	2006      	movs	r0, #6
 800085e:	f002 f88c 	bl	800297a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000862:	2006      	movs	r0, #6
 8000864:	f002 f8a3 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000868:	f00a fc27 	bl	800b0ba <MX_SubGHz_Phy_Process>
 800086c:	e7fc      	b.n	8000868 <main+0x28>
	...

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09a      	sub	sp, #104	@ 0x68
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2248      	movs	r2, #72	@ 0x48
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f00c f886 	bl	800c990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000896:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <SystemClock_Config+0xa8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800089e:	4a1e      	ldr	r2, [pc, #120]	@ (8000918 <SystemClock_Config+0xa8>)
 80008a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <SystemClock_Config+0xa8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80008b2:	2328      	movs	r3, #40	@ 0x28
 80008b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008b6:	2301      	movs	r3, #1
 80008b8:	643b      	str	r3, [r7, #64]	@ 0x40
//  RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_HSI;
//  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008be:	2360      	movs	r3, #96	@ 0x60
 80008c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 f97a 	bl	8003bcc <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008de:	f000 f81d 	bl	800091c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80008e2:	234f      	movs	r3, #79	@ 0x4f
 80008e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f003 fce5 	bl	80042d0 <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800090c:	f000 f806 	bl	800091c <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	3768      	adds	r7, #104	@ 0x68
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	58000400 	.word	0x58000400

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <LL_AHB2_GRP1_EnableClock>:
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800097e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4313      	orrs	r3, r2
 8000986:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800098c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000994:	68fb      	ldr	r3, [r7, #12]
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009c4:	68fb      	ldr	r3, [r7, #12]
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a15      	ldr	r2, [pc, #84]	@ (8000a50 <HAL_ADC_MspInit+0x74>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d123      	bne.n	8000a46 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a02:	f7ff ffcd 	bl	80009a0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff ffb2 	bl	8000970 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff ffaf 	bl	8000970 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PA15     ------> ADC_IN11
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f002 fbc7 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a2e:	2318      	movs	r3, #24
 8000a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <HAL_ADC_MspInit+0x78>)
 8000a42:	f002 fbbb 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40012400 	.word	0x40012400
 8000a54:	48000400 	.word	0x48000400

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000ab4:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000ab6:	f004 f8fb 	bl	8004cb0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000a8 	.word	0x200000a8

08000ac4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <DMA1_Channel5_IRQHandler+0x10>)
 8000aca:	f002 fa07 	bl	8002edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000188 	.word	0x20000188

08000ad8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <USART1_IRQHandler+0x10>)
 8000ade:	f004 ff95 	bl	8005a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000f4 	.word	0x200000f4

08000aec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <RTC_Alarm_IRQHandler+0x10>)
 8000af2:	f004 f8a9 	bl	8004c48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000a8 	.word	0x200000a8

08000b00 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000b06:	f004 fc1b 	bl	8005340 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000e0 	.word	0x200000e0

08000b14 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Handle interrupt for GPIO_PIN_0
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f002 fd95 	bl	8003648 <HAL_GPIO_EXTI_IRQHandler>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b2e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000b30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b3e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4013      	ands	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
	...

08000b54 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_SUBGHZ_Init+0x20>)
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_SUBGHZ_Init+0x20>)
 8000b60:	f004 f96c 	bl	8004e3c <HAL_SUBGHZ_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000b6a:	f7ff fed7 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000e0 	.word	0x200000e0

08000b78 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff ffce 	bl	8000b22 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2032      	movs	r0, #50	@ 0x32
 8000b8c:	f001 fef5 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000b90:	2032      	movs	r0, #50	@ 0x32
 8000b92:	f001 ff0c 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000bb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	608b      	str	r3, [r1, #8]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff ffe8 	bl	8000b9e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000bce:	f00b fa3b 	bl	800c048 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <SystemApp_Init+0x38>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000bd8:	f000 f8b6 	bl	8000d48 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000bdc:	f00b fc44 	bl	800c468 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000be0:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <SystemApp_Init+0x3c>)
 8000be2:	f00b fcdd 	bl	800c5a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000be6:	2002      	movs	r0, #2
 8000be8:	f00b fce8 	bl	800c5bc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000bec:	f00a fce6 	bl	800b5bc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f00a fd22 	bl	800b63c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000ec 	.word	0x200000ec
 8000c00:	08000c11 	.word	0x08000c11

08000c04 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000c08:	f00a fd48 	bl	800b69c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00a fde6 	bl	800b7f0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c2a:	9200      	str	r2, [sp, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <TimestampNow+0x3c>)
 8000c2e:	2110      	movs	r1, #16
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 f81d 	bl	8000c70 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fa9e 	bl	8000178 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	0800ca00 	.word	0x0800ca00

08000c50 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000c54:	2101      	movs	r1, #1
 8000c56:	2002      	movs	r0, #2
 8000c58:	f00a fcc0 	bl	800b5dc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2002      	movs	r0, #2
 8000c68:	f00a fcb8 	bl	800b5dc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000c70:	b40c      	push	{r2, r3}
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b084      	sub	sp, #16
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f00a fefd 	bl	800ba88 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c98:	b002      	add	sp, #8
 8000c9a:	4770      	bx	lr

08000c9c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_GetTick+0x24>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000cc2:	f000 f950 	bl	8000f66 <TIMER_IF_GetTimerValue>
 8000cc6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000ec 	.word	0x200000ec

08000cd8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f96d 	bl	8000fc2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <LL_AHB2_GRP1_EnableClock>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000d2e:	4905      	ldr	r1, [pc, #20]	@ (8000d44 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	58000800 	.word	0x58000800

08000d48 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000d4e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d52:	f7ff ffe5 	bl	8000d20 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000d56:	f000 fd53 	bl	8001800 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000d5a:	f000 fd57 	bl	800180c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000d5e:	f000 fd5b 	bl	8001818 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff ffb7 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000d82:	2002      	movs	r0, #2
 8000d84:	f7ff ffb4 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4850      	ldr	r0, [pc, #320]	@ (8000ed4 <DBG_Init+0x18c>)
 8000d94:	f002 fa12 	bl	80031bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	484c      	ldr	r0, [pc, #304]	@ (8000ed4 <DBG_Init+0x18c>)
 8000da4:	f002 fa0a 	bl	80031bc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dae:	4849      	ldr	r0, [pc, #292]	@ (8000ed4 <DBG_Init+0x18c>)
 8000db0:	f002 fc32 	bl	8003618 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dba:	4846      	ldr	r0, [pc, #280]	@ (8000ed4 <DBG_Init+0x18c>)
 8000dbc:	f002 fc2c 	bl	8003618 <HAL_GPIO_WritePin>

  /* HW alternate functions for monitoring RF */

#if (DEBUG_SUBGHZSPI_MONITORING_ENABLED == 1)
  /*spi dbg*/
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8000dc0:	23f0      	movs	r3, #240	@ 0xf0
 8000dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8000dd0:	230d      	movs	r3, #13
 8000dd2:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f7ff ff8b 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de2:	f002 f9eb 	bl	80031bc <HAL_GPIO_Init>
#endif /* DEBUG_SUBGHZSPI_MONITORING_ENABLED */

#if (DEBUG_RF_NRESET_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000de6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000df8:	230d      	movs	r3, #13
 8000dfa:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff ff77 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0a:	f002 f9d7 	bl	80031bc <HAL_GPIO_Init>
#endif /* DEBUG_RF_NRESET_ENABLED */

#if (DEBUG_RF_HSE32RDY_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000e20:	230d      	movs	r3, #13
 8000e22:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff ff63 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e32:	f002 f9c3 	bl	80031bc <HAL_GPIO_Init>
#endif /* DEBUG_RF_HSE32RDY_ENABLED */

#if (DEBUG_RF_SMPSRDY_ENABLED == 1)
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8000e36:	2304      	movs	r3, #4
 8000e38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8000e46:	230d      	movs	r3, #13
 8000e48:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f7ff ff50 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	481f      	ldr	r0, [pc, #124]	@ (8000ed4 <DBG_Init+0x18c>)
 8000e56:	f002 f9b1 	bl	80031bc <HAL_GPIO_Init>
#endif /* DEBUG_RF_SMPSRDY_ENABLED */

#if (DEBUG_RF_LDORDY_ENABLED == 1)
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8000e6a:	230d      	movs	r3, #13
 8000e6c:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f7ff ff3e 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4816      	ldr	r0, [pc, #88]	@ (8000ed4 <DBG_Init+0x18c>)
 8000e7a:	f002 f99f 	bl	80031bc <HAL_GPIO_Init>
#endif /* DEBUG_RF_LDORDY_ENABLED */

#if (DEBUG_RF_DTB1_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000e8e:	230d      	movs	r3, #13
 8000e90:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff ff2c 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <DBG_Init+0x18c>)
 8000e9e:	f002 f98d 	bl	80031bc <HAL_GPIO_Init>
#endif /* DEBUG_RF_DTB1_ENABLED */

#if (DEBUG_RF_BUSY_ENABLED == 1)
  /* Busy */
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8000ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff ff19 	bl	8000cf0 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec6:	f002 f979 	bl	80031bc <HAL_GPIO_Init>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b085      	sub	sp, #20
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	@ (8000f38 <TIMER_IF_SetTimerContext+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	200000f0 	.word	0x200000f0

08000f3c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000f40:	4b02      	ldr	r3, [pc, #8]	@ (8000f4c <TIMER_IF_GetTimerContext+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	200000f0 	.word	0x200000f0

08000f50 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8000f86:	687b      	ldr	r3, [r7, #4]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  return seconds;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  return ret;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  return ret;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <LL_AHB2_GRP1_EnableClock>:
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001048:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800104a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001058:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <LL_APB1_GRP2_EnableClock>:
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001078:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800107a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4313      	orrs	r3, r2
 8001082:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001088:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001090:	68fb      	ldr	r3, [r7, #12]
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <LL_APB2_GRP1_EnableClock>:
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010c0:	68fb      	ldr	r3, [r7, #12]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <LL_APB2_GRP1_DisableClock>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	43db      	mvns	r3, r3
 80010de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010e2:	4013      	ands	r3, r2
 80010e4:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef hlpuart1;;

/* USART2 init function */

void MX_USART1_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart1.Instance = USART1;
 80010f4:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 80010f6:	4a38      	ldr	r2, [pc, #224]	@ (80011d8 <MX_USART1_UART_Init+0xe8>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fa:	4b36      	ldr	r3, [pc, #216]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110e:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001132:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 8001134:	2200      	movs	r2, #0
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001138:	4826      	ldr	r0, [pc, #152]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 800113a:	f004 fac4 	bl	80056c6 <HAL_UART_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001144:	f7ff fbea 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4822      	ldr	r0, [pc, #136]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 800114c:	f006 fc73 	bl	8007a36 <HAL_UARTEx_SetTxFifoThreshold>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001156:	f7ff fbe1 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115a:	2100      	movs	r1, #0
 800115c:	481d      	ldr	r0, [pc, #116]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 800115e:	f006 fca8 	bl	8007ab2 <HAL_UARTEx_SetRxFifoThreshold>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001168:	f7ff fbd8 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800116c:	4819      	ldr	r0, [pc, #100]	@ (80011d4 <MX_USART1_UART_Init+0xe4>)
 800116e:	f006 fc27 	bl	80079c0 <HAL_UARTEx_EnableFifoMode>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001178:	f7ff fbd0 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  hlpuart1.Instance = LPUART1;
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 800117e:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <MX_USART1_UART_Init+0xf0>)
 8001180:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_USART1_UART_Init+0xec>)
 80011c2:	f004 fa80 	bl	80056c6 <HAL_UART_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART1_UART_Init+0xe0>
  {
    Error_Handler();
 80011cc:	f7ff fba6 	bl	800091c <Error_Handler>
  }
  /* USER CODE END USART2_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000f4 	.word	0x200000f4
 80011d8:	40013800 	.word	0x40013800
 80011dc:	200001e8 	.word	0x200001e8
 80011e0:	40008000 	.word	0x40008000

080011e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b096      	sub	sp, #88	@ 0x58
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]



  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2238      	movs	r2, #56	@ 0x38
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f00b fbc3 	bl	800c990 <memset>
  if(uartHandle->Instance==LPUART1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a43      	ldr	r2, [pc, #268]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d123      	bne.n	800125c <HAL_UART_MspInit+0x78>

    /* USER CODE END LPUART1_MspInit 0 */

    /** Initializes the peripherals clocks
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001214:	2320      	movs	r3, #32
 8001216:	60fb      	str	r3, [r7, #12]
      PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fbf7 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_MspInit+0x4c>
      {
        Error_Handler();
 800122c:	f7ff fb76 	bl	800091c <Error_Handler>
      }

      /* Peripheral clock enable */
      __HAL_RCC_LPUART1_CLK_ENABLE();
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff ff1b 	bl	800106c <LL_APB1_GRP2_EnableClock>

      __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2004      	movs	r0, #4
 8001238:	f7ff ff00 	bl	800103c <LL_AHB2_GRP1_EnableClock>
      /**LPUART1 GPIO Configuration
      PC1     ------> LPUART1_TX
      PC0     ------> LPUART1_RX
      */
      GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800123c:	2303      	movs	r3, #3
 800123e:	647b      	str	r3, [r7, #68]	@ 0x44
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	64bb      	str	r3, [r7, #72]	@ 0x48
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	64fb      	str	r3, [r7, #76]	@ 0x4c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	653b      	str	r3, [r7, #80]	@ 0x50
      GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800124c:	2308      	movs	r3, #8
 800124e:	657b      	str	r3, [r7, #84]	@ 0x54
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001254:	4619      	mov	r1, r3
 8001256:	4832      	ldr	r0, [pc, #200]	@ (8001320 <HAL_UART_MspInit+0x13c>)
 8001258:	f001 ffb0 	bl	80031bc <HAL_GPIO_Init>

    /* USER CODE BEGIN LPUART1_MspInit 1 */

    /* USER CODE END LPUART1_MspInit 1 */
  }
  if(uartHandle->Instance==USART1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a30      	ldr	r2, [pc, #192]	@ (8001324 <HAL_UART_MspInit+0x140>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d155      	bne.n	8001312 <HAL_UART_MspInit+0x12e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001266:	2301      	movs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800126a:	4b2f      	ldr	r3, [pc, #188]	@ (8001328 <HAL_UART_MspInit+0x144>)
 800126c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fbce 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_UART_MspInit+0x9e>
    {
      Error_Handler();
 800127e:	f7ff fb4d 	bl	800091c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001282:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001286:	f7ff ff09 	bl	800109c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2002      	movs	r0, #2
 800128c:	f7ff fed6 	bl	800103c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART1_RX_Pin|USART1_TX_Pin;
 8001290:	23c0      	movs	r3, #192	@ 0xc0
 8001292:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a0:	2307      	movs	r3, #7
 80012a2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USART1_Port, &GPIO_InitStruct);
 80012a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012a8:	4619      	mov	r1, r3
 80012aa:	4820      	ldr	r0, [pc, #128]	@ (800132c <HAL_UART_MspInit+0x148>)
 80012ac:	f001 ff86 	bl	80031bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012b2:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <HAL_UART_MspInit+0x150>)
 80012b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012b8:	2212      	movs	r2, #18
 80012ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012be:	2210      	movs	r2, #16
 80012c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d4:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012e6:	4812      	ldr	r0, [pc, #72]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012e8:	f001 fb7e 	bl	80029e8 <HAL_DMA_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80012f2:	f7ff fb13 	bl	800091c <Error_Handler>
//    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
//    {
//      Error_Handler();
//    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012fa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80012fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <HAL_UART_MspInit+0x14c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2102      	movs	r1, #2
 8001306:	2024      	movs	r0, #36	@ 0x24
 8001308:	f001 fb37 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800130c:	2024      	movs	r0, #36	@ 0x24
 800130e:	f001 fb4e 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3758      	adds	r7, #88	@ 0x58
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40008000 	.word	0x40008000
 8001320:	48000800 	.word	0x48000800
 8001324:	40013800 	.word	0x40013800
 8001328:	00030001 	.word	0x00030001
 800132c:	48000400 	.word	0x48000400
 8001330:	20000188 	.word	0x20000188
 8001334:	40020058 	.word	0x40020058

08001338 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0b      	ldr	r2, [pc, #44]	@ (8001374 <HAL_UART_MspDeInit+0x3c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10f      	bne.n	800136a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800134a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800134e:	f7ff febd 	bl	80010cc <LL_APB2_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(USART1_Port, USART1_RX_Pin|USART1_TX_Pin);
 8001352:	21c0      	movs	r1, #192	@ 0xc0
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <HAL_UART_MspDeInit+0x40>)
 8001356:	f002 f891 	bl	800347c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800135e:	4618      	mov	r0, r3
 8001360:	f001 fbea 	bl	8002b38 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001364:	2024      	movs	r0, #36	@ 0x24
 8001366:	f001 fb30 	bl	80029ca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40013800 	.word	0x40013800
 8001378:	48000400 	.word	0x48000400

0800137c <LL_APB2_GRP1_ForceReset>:
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800138a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4313      	orrs	r3, r2
 8001392:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <LL_APB2_GRP1_ReleaseReset>:
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80013a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013b4:	4013      	ands	r3, r2
 80013b6:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
	...

080013c4 <LL_EXTI_EnableIT_0_31>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80013ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80013d2:	4905      	ldr	r1, [pc, #20]	@ (80013e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	58000800 	.word	0x58000800

080013ec <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80013f4:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <vcom_Init+0x28>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80013fa:	f7ff f9bf 	bl	800077c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013fe:	f7ff fe77 	bl	80010f0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001402:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001406:	f7ff ffdd 	bl	80013c4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800140a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000280 	.word	0x20000280

08001418 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800141c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001420:	f7ff ffac 	bl	800137c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8001424:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001428:	f7ff ffb9 	bl	800139e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <vcom_DeInit+0x28>)
 800142e:	f7ff ff83 	bl	8001338 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001432:	200f      	movs	r0, #15
 8001434:	f001 fac9 	bl	80029ca <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001438:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000f4 	.word	0x200000f4

08001444 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	461a      	mov	r2, r3
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4804      	ldr	r0, [pc, #16]	@ (8001468 <vcom_Trace_DMA+0x24>)
 8001458:	f004 fa58 	bl	800590c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800145c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200000f4 	.word	0x200000f4

0800146c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001474:	4a19      	ldr	r2, [pc, #100]	@ (80014dc <vcom_ReceiveInit+0x70>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800147a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800147e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001488:	4815      	ldr	r0, [pc, #84]	@ (80014e0 <vcom_ReceiveInit+0x74>)
 800148a:	f006 fa0c 	bl	80078a6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800148e:	bf00      	nop
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <vcom_ReceiveInit+0x74>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149e:	d0f7      	beq.n	8001490 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80014a0:	bf00      	nop
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <vcom_ReceiveInit+0x74>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014b0:	d1f7      	bne.n	80014a2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <vcom_ReceiveInit+0x74>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <vcom_ReceiveInit+0x74>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80014c0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80014c2:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <vcom_ReceiveInit+0x74>)
 80014c4:	f006 fa4a 	bl	800795c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	4906      	ldr	r1, [pc, #24]	@ (80014e4 <vcom_ReceiveInit+0x78>)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <vcom_ReceiveInit+0x74>)
 80014ce:	f004 f9d1 	bl	8005874 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80014d2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000284 	.word	0x20000284
 80014e0:	200000f4 	.word	0x200000f4
 80014e4:	2000027c 	.word	0x2000027c

080014e8 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a05      	ldr	r2, [pc, #20]	@ (800150c <HAL_UART_TxCpltCallback+0x24>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d103      	bne.n	8001502 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80014fa:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <HAL_UART_TxCpltCallback+0x28>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2000      	movs	r0, #0
 8001500:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40013800 	.word	0x40013800
 8001510:	20000280 	.word	0x20000280

08001514 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <HAL_UART_RxCpltCallback+0x44>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d113      	bne.n	800154e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_UART_RxCpltCallback+0x48>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00a      	beq.n	8001544 <HAL_UART_RxCpltCallback+0x30>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <HAL_UART_RxCpltCallback+0x48>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	2101      	movs	r1, #1
 8001540:	4807      	ldr	r0, [pc, #28]	@ (8001560 <HAL_UART_RxCpltCallback+0x4c>)
 8001542:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	4906      	ldr	r1, [pc, #24]	@ (8001560 <HAL_UART_RxCpltCallback+0x4c>)
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f004 f993 	bl	8005874 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40013800 	.word	0x40013800
 800155c:	20000284 	.word	0x20000284
 8001560:	2000027c 	.word	0x2000027c

08001564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001566:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001568:	f7ff fcb6 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <LoopForever+0xe>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	@ (80015b0 <LoopForever+0x16>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001592:	f00b fa05 	bl	800c9a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001596:	f7ff f953 	bl	8000840 <main>

0800159a <LoopForever>:

LoopForever:
    b LoopForever
 800159a:	e7fe      	b.n	800159a <LoopForever>
  ldr   r0, =_estack
 800159c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80015a8:	0800cf90 	.word	0x0800cf90
  ldr r2, =_sbss
 80015ac:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80015b0:	20000ae8 	.word	0x20000ae8

080015b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>

080015b6 <LL_AHB2_GRP1_EnableClock>:
{
 80015b6:	b480      	push	{r7}
 80015b8:	b085      	sub	sp, #20
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
	...

080015e8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80015fc:	2004      	movs	r0, #4
 80015fe:	f7ff ffda 	bl	80015b6 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001602:	2310      	movs	r3, #16
 8001604:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4812      	ldr	r0, [pc, #72]	@ (8001660 <BSP_RADIO_Init+0x78>)
 8001618:	f001 fdd0 	bl	80031bc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800161c:	2320      	movs	r3, #32
 800161e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	480e      	ldr	r0, [pc, #56]	@ (8001660 <BSP_RADIO_Init+0x78>)
 8001626:	f001 fdc9 	bl	80031bc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800162a:	2308      	movs	r3, #8
 800162c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	480b      	ldr	r0, [pc, #44]	@ (8001660 <BSP_RADIO_Init+0x78>)
 8001634:	f001 fdc2 	bl	80031bc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001638:	2200      	movs	r2, #0
 800163a:	2120      	movs	r1, #32
 800163c:	4808      	ldr	r0, [pc, #32]	@ (8001660 <BSP_RADIO_Init+0x78>)
 800163e:	f001 ffeb 	bl	8003618 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001642:	2200      	movs	r2, #0
 8001644:	2110      	movs	r1, #16
 8001646:	4806      	ldr	r0, [pc, #24]	@ (8001660 <BSP_RADIO_Init+0x78>)
 8001648:	f001 ffe6 	bl	8003618 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 800164c:	2200      	movs	r2, #0
 800164e:	2108      	movs	r1, #8
 8001650:	4803      	ldr	r0, [pc, #12]	@ (8001660 <BSP_RADIO_Init+0x78>)
 8001652:	f001 ffe1 	bl	8003618 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	48000800 	.word	0x48000800

08001664 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d84b      	bhi.n	800170c <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001674:	a201      	add	r2, pc, #4	@ (adr r2, 800167c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167a:	bf00      	nop
 800167c:	0800168d 	.word	0x0800168d
 8001680:	080016ad 	.word	0x080016ad
 8001684:	080016cd 	.word	0x080016cd
 8001688:	080016ed 	.word	0x080016ed
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2108      	movs	r1, #8
 8001690:	4821      	ldr	r0, [pc, #132]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001692:	f001 ffc1 	bl	8003618 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2110      	movs	r1, #16
 800169a:	481f      	ldr	r0, [pc, #124]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800169c:	f001 ffbc 	bl	8003618 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2120      	movs	r1, #32
 80016a4:	481c      	ldr	r0, [pc, #112]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016a6:	f001 ffb7 	bl	8003618 <HAL_GPIO_WritePin>
      break;      
 80016aa:	e030      	b.n	800170e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2108      	movs	r1, #8
 80016b0:	4819      	ldr	r0, [pc, #100]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016b2:	f001 ffb1 	bl	8003618 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80016b6:	2201      	movs	r2, #1
 80016b8:	2110      	movs	r1, #16
 80016ba:	4817      	ldr	r0, [pc, #92]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016bc:	f001 ffac 	bl	8003618 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80016c0:	2200      	movs	r2, #0
 80016c2:	2120      	movs	r1, #32
 80016c4:	4814      	ldr	r0, [pc, #80]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016c6:	f001 ffa7 	bl	8003618 <HAL_GPIO_WritePin>
      break;
 80016ca:	e020      	b.n	800170e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2108      	movs	r1, #8
 80016d0:	4811      	ldr	r0, [pc, #68]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016d2:	f001 ffa1 	bl	8003618 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80016d6:	2201      	movs	r2, #1
 80016d8:	2110      	movs	r1, #16
 80016da:	480f      	ldr	r0, [pc, #60]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016dc:	f001 ff9c 	bl	8003618 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80016e0:	2201      	movs	r2, #1
 80016e2:	2120      	movs	r1, #32
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016e6:	f001 ff97 	bl	8003618 <HAL_GPIO_WritePin>
      break;
 80016ea:	e010      	b.n	800170e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2108      	movs	r1, #8
 80016f0:	4809      	ldr	r0, [pc, #36]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016f2:	f001 ff91 	bl	8003618 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80016f6:	2200      	movs	r2, #0
 80016f8:	2110      	movs	r1, #16
 80016fa:	4807      	ldr	r0, [pc, #28]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80016fc:	f001 ff8c 	bl	8003618 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001700:	2201      	movs	r2, #1
 8001702:	2120      	movs	r1, #32
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001706:	f001 ff87 	bl	8003618 <HAL_GPIO_WritePin>
      break;
 800170a:	e000      	b.n	800170e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 800170c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	48000800 	.word	0x48000800

0800171c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 800173c:	2301      	movs	r3, #1
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001756:	230f      	movs	r3, #15
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e001      	b.n	8001760 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800175c:	2316      	movs	r3, #22
 800175e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001770:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a03      	ldr	r2, [pc, #12]	@ (8001784 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6053      	str	r3, [r2, #4]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e0042000 	.word	0xe0042000

08001788 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a03      	ldr	r2, [pc, #12]	@ (80017a0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	6053      	str	r3, [r2, #4]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	e0042000 	.word	0xe0042000

080017a4 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6053      	str	r3, [r2, #4]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	e0042000 	.word	0xe0042000

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ca:	2003      	movs	r0, #3
 80017cc:	f001 f8ca 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80017d0:	f002 ff42 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_Init+0x3c>)
 80017d8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017da:	200f      	movs	r0, #15
 80017dc:	f7ff fa5e 	bl	8000c9c <HAL_InitTick>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ec:	f7ff f8f0 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000

08001800 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8001804:	f7ff ffb2 	bl	800176c <LL_DBGMCU_EnableDBGSleepMode>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001810:	f7ff ffba 	bl	8001788 <LL_DBGMCU_EnableDBGStopMode>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 800181c:	f7ff ffc2 	bl	80017a4 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2107      	movs	r1, #7
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	401a      	ands	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	431a      	orrs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2107      	movs	r1, #7
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	210f      	movs	r1, #15
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	f003 010f 	and.w	r1, r3, #15
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	0219      	lsls	r1, r3, #8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	400b      	ands	r3, r1
 800199e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80019a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019a6:	431a      	orrs	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80019c6:	f023 0317 	bic.w	r3, r3, #23
 80019ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a12:	f023 0317 	bic.w	r3, r3, #23
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a38:	f023 0317 	bic.w	r3, r3, #23
 8001a3c:	f043 0202 	orr.w	r2, r3, #2
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <LL_ADC_IsEnabled+0x18>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <LL_ADC_IsEnabled+0x1a>
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsDisableOngoing+0x18>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsDisableOngoing+0x1a>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001aa6:	f023 0317 	bic.w	r3, r3, #23
 8001aaa:	f043 0204 	orr.w	r2, r3, #4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001acc:	f023 0317 	bic.w	r3, r3, #23
 8001ad0:	f043 0210 	orr.w	r2, r3, #16
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d101      	bne.n	8001afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e17e      	b.n	8001e28 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7fe ff4f 	bl	80009dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff43 	bl	80019dc <LL_ADC_IsInternalRegulatorEnabled>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d115      	bne.n	8001b88 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff28 	bl	80019b6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b66:	4b9e      	ldr	r3, [pc, #632]	@ (8001de0 <HAL_ADC_Init+0x2d8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	4a9d      	ldr	r2, [pc, #628]	@ (8001de4 <HAL_ADC_Init+0x2dc>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	099b      	lsrs	r3, r3, #6
 8001b74:	3301      	adds	r3, #1
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff25 	bl	80019dc <LL_ADC_IsInternalRegulatorEnabled>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	f043 0210 	orr.w	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff92 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001bbe:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 8124 	bne.w	8001e16 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 8120 	bne.w	8001e16 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bde:	f043 0202 	orr.w	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff2f 	bl	8001a4e <LL_ADC_IsEnabled>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80a7 	bne.w	8001d46 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e1b      	ldrb	r3, [r3, #24]
 8001c00:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001c02:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e5b      	ldrb	r3, [r3, #25]
 8001c08:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c0a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e9b      	ldrb	r3, [r3, #26]
 8001c10:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c12:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_ADC_Init+0x11a>
 8001c1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c20:	e000      	b.n	8001c24 <HAL_ADC_Init+0x11c>
 8001c22:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c24:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c2a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da04      	bge.n	8001c3e <HAL_ADC_Init+0x136>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c3c:	e001      	b.n	8001c42 <HAL_ADC_Init+0x13a>
 8001c3e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8001c42:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001c4a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c4c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d114      	bne.n	8001c88 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7e9b      	ldrb	r3, [r3, #26]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d104      	bne.n	8001c70 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	e00b      	b.n	8001c88 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8001cae:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d111      	bne.n	8001cfe <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ce6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001cec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001cf2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <HAL_ADC_Init+0x2e0>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	6979      	ldr	r1, [r7, #20]
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001d1a:	d014      	beq.n	8001d46 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d24:	d00f      	beq.n	8001d46 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d2e:	d00a      	beq.n	8001d46 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8001d30:	4b2e      	ldr	r3, [pc, #184]	@ (8001dec <HAL_ADC_Init+0x2e4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001d40:	492a      	ldr	r1, [pc, #168]	@ (8001dec <HAL_ADC_Init+0x2e4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2100      	movs	r1, #0
 8001d52:	f7ff fd86 	bl	8001862 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4923      	ldr	r1, [pc, #140]	@ (8001df0 <HAL_ADC_Init+0x2e8>)
 8001d62:	f7ff fd7e 	bl	8001862 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d108      	bne.n	8001d80 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f062 020f 	orn	r2, r2, #15
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d7e:	e017      	b.n	8001db0 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d88:	d112      	bne.n	8001db0 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	f003 031c 	and.w	r3, r3, #28
 8001d9c:	f06f 020f 	mvn.w	r2, #15
 8001da0:	fa02 f103 	lsl.w	r1, r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fd71 	bl	800189e <LL_ADC_GetSamplingTimeCommonChannels>
 8001dbc:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d116      	bne.n	8001df4 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	f023 0303 	bic.w	r3, r3, #3
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ddc:	e023      	b.n	8001e26 <HAL_ADC_Init+0x31e>
 8001dde:	bf00      	nop
 8001de0:	20000000 	.word	0x20000000
 8001de4:	053e2d63 	.word	0x053e2d63
 8001de8:	1ffffc02 	.word	0x1ffffc02
 8001dec:	40012708 	.word	0x40012708
 8001df0:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df8:	f023 0312 	bic.w	r3, r3, #18
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e14:	e007      	b.n	8001e26 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	f043 0210 	orr.w	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fe50 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d132      	bne.n	8001eae <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_Start+0x26>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e02e      	b.n	8001eb4 <HAL_ADC_Start+0x84>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa80 	bl	8002364 <ADC_Enable>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d11a      	bne.n	8001ea4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	221c      	movs	r2, #28
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fdfa 	bl	8001a96 <LL_ADC_REG_StartConversion>
 8001ea2:	e006      	b.n	8001eb2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001eac:	e001      	b.n	8001eb2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Stop+0x16>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e022      	b.n	8001f18 <HAL_ADC_Stop+0x5c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f9fc 	bl	80022d8 <ADC_ConversionStop>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d111      	bne.n	8001f0e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fac0 	bl	8002470 <ADC_Disable>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d102      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001f32:	2308      	movs	r3, #8
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e010      	b.n	8001f5a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	f043 0220 	orr.w	r2, r3, #32
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e077      	b.n	8002046 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001f56:	2304      	movs	r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f5a:	f7fe fea9 	bl	8000cb0 <HAL_GetTick>
 8001f5e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001f60:	e021      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d01d      	beq.n	8001fa6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f6a:	f7fe fea1 	bl	8000cb0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <HAL_ADC_PollForConversion+0x60>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d112      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e04f      	b.n	8002046 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0d6      	beq.n	8001f62 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fc82 	bl	80018ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d031      	beq.n	8002034 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7e9b      	ldrb	r3, [r3, #26]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d12d      	bne.n	8002034 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d126      	bne.n	8002034 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fd79 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d112      	bne.n	800201c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 020c 	bic.w	r2, r2, #12
 8002004:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	659a      	str	r2, [r3, #88]	@ 0x58
 800201a:	e00b      	b.n	8002034 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7e1b      	ldrb	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d103      	bne.n	8002044 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	220c      	movs	r2, #12
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
	...

08002068 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x28>
 800208c:	2302      	movs	r3, #2
 800208e:	e110      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x24a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fd20 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 80f7 	bne.w	8002298 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	f000 80b1 	beq.w	8002216 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020bc:	d004      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020c2:	4a7e      	ldr	r2, [pc, #504]	@ (80022bc <HAL_ADC_ConfigChannel+0x254>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d108      	bne.n	80020da <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f7ff fc2e 	bl	8001934 <LL_ADC_REG_SetSequencerChAdd>
 80020d8:	e041      	b.n	800215e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	210f      	movs	r1, #15
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_ConfigChannel+0xa0>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	e011      	b.n	800212c <HAL_ADC_ConfigChannel+0xc4>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	e003      	b.n	800212c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	6849      	ldr	r1, [r1, #4]
 8002130:	f001 011f 	and.w	r1, r1, #31
 8002134:	408b      	lsls	r3, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	429a      	cmp	r2, r3
 800214a:	d808      	bhi.n	800215e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	f7ff fbca 	bl	80018f2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	461a      	mov	r2, r3
 800216c:	f7ff fc07 	bl	800197e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f280 8097 	bge.w	80022a8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800217a:	4851      	ldr	r0, [pc, #324]	@ (80022c0 <HAL_ADC_ConfigChannel+0x258>)
 800217c:	f7ff fb64 	bl	8001848 <LL_ADC_GetCommonPathInternalCh>
 8002180:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a4f      	ldr	r2, [pc, #316]	@ (80022c4 <HAL_ADC_ConfigChannel+0x25c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d120      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11b      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800219c:	4619      	mov	r1, r3
 800219e:	4848      	ldr	r0, [pc, #288]	@ (80022c0 <HAL_ADC_ConfigChannel+0x258>)
 80021a0:	f7ff fb40 	bl	8001824 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a4:	4b48      	ldr	r3, [pc, #288]	@ (80022c8 <HAL_ADC_ConfigChannel+0x260>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	4a48      	ldr	r2, [pc, #288]	@ (80022cc <HAL_ADC_ConfigChannel+0x264>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021be:	e002      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021cc:	e06c      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a3f      	ldr	r2, [pc, #252]	@ (80022d0 <HAL_ADC_ConfigChannel+0x268>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d10c      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e8:	4619      	mov	r1, r3
 80021ea:	4835      	ldr	r0, [pc, #212]	@ (80022c0 <HAL_ADC_ConfigChannel+0x258>)
 80021ec:	f7ff fb1a 	bl	8001824 <LL_ADC_SetCommonPathInternalCh>
 80021f0:	e05a      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a37      	ldr	r2, [pc, #220]	@ (80022d4 <HAL_ADC_ConfigChannel+0x26c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d155      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d150      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800220c:	4619      	mov	r1, r3
 800220e:	482c      	ldr	r0, [pc, #176]	@ (80022c0 <HAL_ADC_ConfigChannel+0x258>)
 8002210:	f7ff fb08 	bl	8001824 <LL_ADC_SetCommonPathInternalCh>
 8002214:	e048      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800221e:	d004      	beq.n	800222a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002224:	4a25      	ldr	r2, [pc, #148]	@ (80022bc <HAL_ADC_ConfigChannel+0x254>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d107      	bne.n	800223a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f7ff fb8f 	bl	8001958 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da32      	bge.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002242:	481f      	ldr	r0, [pc, #124]	@ (80022c0 <HAL_ADC_ConfigChannel+0x258>)
 8002244:	f7ff fb00 	bl	8001848 <LL_ADC_GetCommonPathInternalCh>
 8002248:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1d      	ldr	r2, [pc, #116]	@ (80022c4 <HAL_ADC_ConfigChannel+0x25c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d107      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800225a:	4619      	mov	r1, r3
 800225c:	4818      	ldr	r0, [pc, #96]	@ (80022c0 <HAL_ADC_ConfigChannel+0x258>)
 800225e:	f7ff fae1 	bl	8001824 <LL_ADC_SetCommonPathInternalCh>
 8002262:	e021      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	@ (80022d0 <HAL_ADC_ConfigChannel+0x268>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d107      	bne.n	800227e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002274:	4619      	mov	r1, r3
 8002276:	4812      	ldr	r0, [pc, #72]	@ (80022c0 <HAL_ADC_ConfigChannel+0x258>)
 8002278:	f7ff fad4 	bl	8001824 <LL_ADC_SetCommonPathInternalCh>
 800227c:	e014      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <HAL_ADC_ConfigChannel+0x26c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d10f      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800228e:	4619      	mov	r1, r3
 8002290:	480b      	ldr	r0, [pc, #44]	@ (80022c0 <HAL_ADC_ConfigChannel+0x258>)
 8002292:	f7ff fac7 	bl	8001824 <LL_ADC_SetCommonPathInternalCh>
 8002296:	e007      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	80000004 	.word	0x80000004
 80022c0:	40012708 	.word	0x40012708
 80022c4:	b0001000 	.word	0xb0001000
 80022c8:	20000000 	.word	0x20000000
 80022cc:	053e2d63 	.word	0x053e2d63
 80022d0:	b8004000 	.word	0xb8004000
 80022d4:	b4002000 	.word	0xb4002000

080022d8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fbfc 	bl	8001ae2 <LL_ADC_REG_IsConversionOngoing>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d033      	beq.n	8002358 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fbbc 	bl	8001a72 <LL_ADC_IsDisableOngoing>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d104      	bne.n	800230a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fbd9 	bl	8001abc <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800230a:	f7fe fcd1 	bl	8000cb0 <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002310:	e01b      	b.n	800234a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002312:	f7fe fccd 	bl	8000cb0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d914      	bls.n	800234a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	f043 0210 	orr.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e007      	b.n	800235a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1dc      	bne.n	8002312 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fb6a 	bl	8001a4e <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d169      	bne.n	8002454 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <ADC_Enable+0xfc>)
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e055      	b.n	8002456 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fb27 	bl	8001a02 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80023b4:	482b      	ldr	r0, [pc, #172]	@ (8002464 <ADC_Enable+0x100>)
 80023b6:	f7ff fa47 	bl	8001848 <LL_ADC_GetCommonPathInternalCh>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00f      	beq.n	80023e4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c4:	4b28      	ldr	r3, [pc, #160]	@ (8002468 <ADC_Enable+0x104>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	4a28      	ldr	r2, [pc, #160]	@ (800246c <ADC_Enable+0x108>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80023d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023d6:	e002      	b.n	80023de <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	3b01      	subs	r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f9      	bne.n	80023d8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e5b      	ldrb	r3, [r3, #25]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d033      	beq.n	8002454 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80023ec:	f7fe fc60 	bl	8000cb0 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023f2:	e028      	b.n	8002446 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fb28 	bl	8001a4e <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d104      	bne.n	800240e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fafa 	bl	8001a02 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800240e:	f7fe fc4f 	bl	8000cb0 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d914      	bls.n	8002446 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d00d      	beq.n	8002446 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e007      	b.n	8002456 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d1cf      	bne.n	80023f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	80000017 	.word	0x80000017
 8002464:	40012708 	.word	0x40012708
 8002468:	20000000 	.word	0x20000000
 800246c:	053e2d63 	.word	0x053e2d63

08002470 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff faf8 	bl	8001a72 <LL_ADC_IsDisableOngoing>
 8002482:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fae0 	bl	8001a4e <LL_ADC_IsEnabled>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d047      	beq.n	8002524 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d144      	bne.n	8002524 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0305 	and.w	r3, r3, #5
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10c      	bne.n	80024c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fabb 	bl	8001a28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2203      	movs	r2, #3
 80024b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024ba:	f7fe fbf9 	bl	8000cb0 <HAL_GetTick>
 80024be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024c0:	e029      	b.n	8002516 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c6:	f043 0210 	orr.w	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e023      	b.n	8002526 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024de:	f7fe fbe7 	bl	8000cb0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d914      	bls.n	8002516 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e007      	b.n	8002526 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1dc      	bne.n	80024de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <LL_ADC_SetCalibrationFactor>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800253e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <LL_ADC_GetCalibrationFactor>:
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <LL_ADC_Enable>:
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002582:	f023 0317 	bic.w	r3, r3, #23
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	609a      	str	r2, [r3, #8]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <LL_ADC_Disable>:
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025a8:	f023 0317 	bic.w	r3, r3, #23
 80025ac:	f043 0202 	orr.w	r2, r3, #2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <LL_ADC_IsEnabled>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <LL_ADC_IsEnabled+0x18>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <LL_ADC_IsEnabled+0x1a>
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_StartCalibration>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025f2:	f023 0317 	bic.w	r3, r3, #23
 80025f6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	609a      	str	r2, [r3, #8]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <LL_ADC_IsCalibrationOnGoing>:
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800261c:	d101      	bne.n	8002622 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b088      	sub	sp, #32
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_ADCEx_Calibration_Start+0x1e>
 8002648:	2302      	movs	r3, #2
 800264a:	e0b9      	b.n	80027c0 <HAL_ADCEx_Calibration_Start+0x192>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff0b 	bl	8002470 <ADC_Disable>
 800265a:	4603      	mov	r3, r0
 800265c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ffab 	bl	80025be <LL_ADC_IsEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 809d 	bne.w	80027aa <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002678:	f043 0202 	orr.w	r2, r3, #2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	f248 0303 	movw	r3, #32771	@ 0x8003
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800269c:	f023 0303 	bic.w	r3, r3, #3
 80026a0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e02e      	b.n	8002706 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff98 	bl	80025e2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026b2:	e014      	b.n	80026de <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	3301      	adds	r3, #1
 80026b8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80026c0:	d30d      	bcc.n	80026de <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	f023 0312 	bic.w	r3, r3, #18
 80026ca:	f043 0210 	orr.w	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e070      	b.n	80027c0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff90 	bl	8002608 <LL_ADC_IsCalibrationOnGoing>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e2      	bne.n	80026b4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff2f 	bl	8002556 <LL_ADC_GetCalibrationFactor>
 80026f8:	4602      	mov	r2, r0
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3301      	adds	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b07      	cmp	r3, #7
 800270a:	d9cd      	bls.n	80026a8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff29 	bl	8002572 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69b9      	ldr	r1, [r7, #24]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff01 	bl	800252e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff31 	bl	8002598 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002736:	f7fe fabb 	bl	8000cb0 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800273c:	e01c      	b.n	8002778 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800273e:	f7fe fab7 	bl	8000cb0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d915      	bls.n	8002778 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff34 	bl	80025be <LL_ADC_IsEnabled>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002760:	f043 0210 	orr.w	r2, r3, #16
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e023      	b.n	80027c0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff1e 	bl	80025be <LL_ADC_IsEnabled>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1da      	bne.n	800273e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68d9      	ldr	r1, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	f023 0303 	bic.w	r3, r3, #3
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80027a8:	e005      	b.n	80027b6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	f043 0210 	orr.w	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	@ (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db0b      	blt.n	8002856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4906      	ldr	r1, [pc, #24]	@ (8002860 <__NVIC_EnableIRQ+0x34>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2001      	movs	r0, #1
 800284e:	fa00 f202 	lsl.w	r2, r0, r2
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db12      	blt.n	800289c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	490a      	ldr	r1, [pc, #40]	@ (80028a8 <__NVIC_DisableIRQ+0x44>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2001      	movs	r0, #1
 8002886:	fa00 f202 	lsl.w	r2, r0, r2
 800288a:	3320      	adds	r3, #32
 800288c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002890:	f3bf 8f4f 	dsb	sy
}
 8002894:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002896:	f3bf 8f6f 	isb	sy
}
 800289a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	@ (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	@ (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	@ 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	@ 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff2b 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff42 	bl	8002810 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ffb4 	bl	8002900 <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff83 	bl	80028ac <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff35 	bl	800282c <__NVIC_EnableIRQ>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff43 	bl	8002864 <__NVIC_DisableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e08e      	b.n	8002b18 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b47      	ldr	r3, [pc, #284]	@ (8002b20 <HAL_DMA_Init+0x138>)
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d80f      	bhi.n	8002a26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b45      	ldr	r3, [pc, #276]	@ (8002b24 <HAL_DMA_Init+0x13c>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a45      	ldr	r2, [pc, #276]	@ (8002b28 <HAL_DMA_Init+0x140>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	009a      	lsls	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a42      	ldr	r2, [pc, #264]	@ (8002b2c <HAL_DMA_Init+0x144>)
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a24:	e00e      	b.n	8002a44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <HAL_DMA_Init+0x148>)
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a3d      	ldr	r2, [pc, #244]	@ (8002b28 <HAL_DMA_Init+0x140>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	009a      	lsls	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a3c      	ldr	r2, [pc, #240]	@ (8002b34 <HAL_DMA_Init+0x14c>)
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a5e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fb24 	bl	80030e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002aa4:	d102      	bne.n	8002aac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ac2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <HAL_DMA_Init+0x106>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d80c      	bhi.n	8002aee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fb4d 	bl	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	e008      	b.n	8002b00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40020407 	.word	0x40020407
 8002b24:	bffdfff8 	.word	0xbffdfff8
 8002b28:	cccccccd 	.word	0xcccccccd
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	bffdfbf8 	.word	0xbffdfbf8
 8002b34:	40020400 	.word	0x40020400

08002b38 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07b      	b.n	8002c42 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b3a      	ldr	r3, [pc, #232]	@ (8002c4c <HAL_DMA_DeInit+0x114>)
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d80f      	bhi.n	8002b86 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b38      	ldr	r3, [pc, #224]	@ (8002c50 <HAL_DMA_DeInit+0x118>)
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a38      	ldr	r2, [pc, #224]	@ (8002c54 <HAL_DMA_DeInit+0x11c>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	009a      	lsls	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a35      	ldr	r2, [pc, #212]	@ (8002c58 <HAL_DMA_DeInit+0x120>)
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b84:	e00e      	b.n	8002ba4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b33      	ldr	r3, [pc, #204]	@ (8002c5c <HAL_DMA_DeInit+0x124>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a30      	ldr	r2, [pc, #192]	@ (8002c54 <HAL_DMA_DeInit+0x11c>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8002c60 <HAL_DMA_DeInit+0x128>)
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb0:	f003 021c 	and.w	r2, r3, #28
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fa8f 	bl	80030e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00f      	beq.n	8002c00 <HAL_DMA_DeInit+0xc8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d80b      	bhi.n	8002c00 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fac3 	bl	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40020407 	.word	0x40020407
 8002c50:	bffdfff8 	.word	0xbffdfff8
 8002c54:	cccccccd 	.word	0xcccccccd
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	bffdfbf8 	.word	0xbffdfbf8
 8002c60:	40020400 	.word	0x40020400

08002c64 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_DMA_Start_IT+0x20>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e069      	b.n	8002d58 <HAL_DMA_Start_IT+0xf4>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d155      	bne.n	8002d44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f9d3 	bl	8003068 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 020e 	orr.w	r2, r2, #14
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e00f      	b.n	8002cfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0204 	bic.w	r2, r2, #4
 8002cea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 020a 	orr.w	r2, r2, #10
 8002cfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e008      	b.n	8002d56 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2280      	movs	r2, #128	@ 0x80
 8002d48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e04f      	b.n	8002e12 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d008      	beq.n	8002d90 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2204      	movs	r2, #4
 8002d82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e040      	b.n	8002e12 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 020e 	bic.w	r2, r2, #14
 8002d9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002daa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc4:	f003 021c 	and.w	r2, r3, #28
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ddc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002df4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002dfe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d005      	beq.n	8002e40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2204      	movs	r2, #4
 8002e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e047      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 020e 	bic.w	r2, r2, #14
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e74:	f003 021c 	and.w	r2, r3, #28
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
    }
  }
  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	f003 031c 	and.w	r3, r3, #28
 8002efc:	2204      	movs	r2, #4
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d027      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x7c>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d022      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0204 	bic.w	r2, r2, #4
 8002f2e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f34:	f003 021c 	and.w	r2, r3, #28
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8081 	beq.w	8003050 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002f56:	e07b      	b.n	8003050 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5c:	f003 031c 	and.w	r3, r3, #28
 8002f60:	2202      	movs	r2, #2
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d03d      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x10c>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d038      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 020a 	bic.w	r2, r2, #10
 8002f92:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800305c <HAL_DMA_IRQHandler+0x180>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d909      	bls.n	8002fbc <HAL_DMA_IRQHandler+0xe0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	f003 031c 	and.w	r3, r3, #28
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003060 <HAL_DMA_IRQHandler+0x184>)
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	6053      	str	r3, [r2, #4]
 8002fba:	e008      	b.n	8002fce <HAL_DMA_IRQHandler+0xf2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc0:	f003 031c 	and.w	r3, r3, #28
 8002fc4:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <HAL_DMA_IRQHandler+0x188>)
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d038      	beq.n	8003050 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002fe6:	e033      	b.n	8003050 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fec:	f003 031c 	and.w	r3, r3, #28
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d02a      	beq.n	8003052 <HAL_DMA_IRQHandler+0x176>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d025      	beq.n	8003052 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 020e 	bic.w	r2, r2, #14
 8003014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301a:	f003 021c 	and.w	r2, r3, #28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003050:	bf00      	nop
 8003052:	bf00      	nop
}
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40020080 	.word	0x40020080
 8003060:	40020400 	.word	0x40020400
 8003064:	40020000 	.word	0x40020000

08003068 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800307e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003090:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f003 021c 	and.w	r2, r3, #28
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d108      	bne.n	80030c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030c6:	e007      	b.n	80030d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
	...

080030e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d813      	bhi.n	8003120 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003104:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3b08      	subs	r3, #8
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e011      	b.n	8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	009a      	lsls	r2, r3, #2
 8003128:	4b10      	ldr	r3, [pc, #64]	@ (800316c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800312a:	4413      	add	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	3b08      	subs	r3, #8
 8003138:	4a0b      	ldr	r2, [pc, #44]	@ (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	3307      	adds	r3, #7
 8003142:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003148:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40020407 	.word	0x40020407
 8003168:	cccccccd 	.word	0xcccccccd
 800316c:	4002081c 	.word	0x4002081c
 8003170:	40020880 	.word	0x40020880

08003174 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003184:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003198:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3b01      	subs	r3, #1
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2201      	movs	r2, #1
 80031a4:	409a      	lsls	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	1000823f 	.word	0x1000823f
 80031b8:	40020940 	.word	0x40020940

080031bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ca:	e140      	b.n	800344e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8132 	beq.w	8003448 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d005      	beq.n	80031fc <HAL_GPIO_Init+0x40>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d130      	bne.n	800325e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003232:	2201      	movs	r2, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 0201 	and.w	r2, r3, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b03      	cmp	r3, #3
 8003268:	d017      	beq.n	800329a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d123      	bne.n	80032ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	6939      	ldr	r1, [r7, #16]
 80032ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	2203      	movs	r2, #3
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0203 	and.w	r2, r3, #3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 808c 	beq.w	8003448 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003330:	4a4e      	ldr	r2, [pc, #312]	@ (800346c <HAL_GPIO_Init+0x2b0>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	2207      	movs	r2, #7
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800335a:	d00d      	beq.n	8003378 <HAL_GPIO_Init+0x1bc>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a44      	ldr	r2, [pc, #272]	@ (8003470 <HAL_GPIO_Init+0x2b4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <HAL_GPIO_Init+0x1b8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a43      	ldr	r2, [pc, #268]	@ (8003474 <HAL_GPIO_Init+0x2b8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_GPIO_Init+0x1b4>
 800336c:	2302      	movs	r3, #2
 800336e:	e004      	b.n	800337a <HAL_GPIO_Init+0x1be>
 8003370:	2307      	movs	r3, #7
 8003372:	e002      	b.n	800337a <HAL_GPIO_Init+0x1be>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_GPIO_Init+0x1be>
 8003378:	2300      	movs	r3, #0
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	f002 0203 	and.w	r2, r2, #3
 8003380:	0092      	lsls	r2, r2, #2
 8003382:	4093      	lsls	r3, r2
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800338a:	4938      	ldr	r1, [pc, #224]	@ (800346c <HAL_GPIO_Init+0x2b0>)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003398:	4b37      	ldr	r3, [pc, #220]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033e6:	4a24      	ldr	r2, [pc, #144]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80033ec:	4b22      	ldr	r3, [pc, #136]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 80033ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033f2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003412:	4a19      	ldr	r2, [pc, #100]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800341a:	4b17      	ldr	r3, [pc, #92]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 800341c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003420:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	43db      	mvns	r3, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	f47f aeb7 	bne.w	80031cc <HAL_GPIO_Init+0x10>
  }
}
 800345e:	bf00      	nop
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40010000 	.word	0x40010000
 8003470:	48000400 	.word	0x48000400
 8003474:	48000800 	.word	0x48000800
 8003478:	58000800 	.word	0x58000800

0800347c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800348a:	e0af      	b.n	80035ec <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800348c:	2201      	movs	r2, #1
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a2 	beq.w	80035e6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80034a2:	4a59      	ldr	r2, [pc, #356]	@ (8003608 <HAL_GPIO_DeInit+0x18c>)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	3302      	adds	r3, #2
 80034aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	2207      	movs	r2, #7
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034ca:	d00d      	beq.n	80034e8 <HAL_GPIO_DeInit+0x6c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a4f      	ldr	r2, [pc, #316]	@ (800360c <HAL_GPIO_DeInit+0x190>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <HAL_GPIO_DeInit+0x68>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003610 <HAL_GPIO_DeInit+0x194>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <HAL_GPIO_DeInit+0x64>
 80034dc:	2302      	movs	r3, #2
 80034de:	e004      	b.n	80034ea <HAL_GPIO_DeInit+0x6e>
 80034e0:	2307      	movs	r3, #7
 80034e2:	e002      	b.n	80034ea <HAL_GPIO_DeInit+0x6e>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_GPIO_DeInit+0x6e>
 80034e8:	2300      	movs	r3, #0
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	f002 0203 	and.w	r2, r2, #3
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	4093      	lsls	r3, r2
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d136      	bne.n	8003568 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80034fa:	4b46      	ldr	r3, [pc, #280]	@ (8003614 <HAL_GPIO_DeInit+0x198>)
 80034fc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	4943      	ldr	r1, [pc, #268]	@ (8003614 <HAL_GPIO_DeInit+0x198>)
 8003506:	4013      	ands	r3, r2
 8003508:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800350c:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HAL_GPIO_DeInit+0x198>)
 800350e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	493f      	ldr	r1, [pc, #252]	@ (8003614 <HAL_GPIO_DeInit+0x198>)
 8003518:	4013      	ands	r3, r2
 800351a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800351e:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <HAL_GPIO_DeInit+0x198>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	493b      	ldr	r1, [pc, #236]	@ (8003614 <HAL_GPIO_DeInit+0x198>)
 8003528:	4013      	ands	r3, r2
 800352a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800352c:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_GPIO_DeInit+0x198>)
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	4937      	ldr	r1, [pc, #220]	@ (8003614 <HAL_GPIO_DeInit+0x198>)
 8003536:	4013      	ands	r3, r2
 8003538:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	2207      	movs	r2, #7
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800354a:	4a2f      	ldr	r2, [pc, #188]	@ (8003608 <HAL_GPIO_DeInit+0x18c>)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43da      	mvns	r2, r3
 800355a:	482b      	ldr	r0, [pc, #172]	@ (8003608 <HAL_GPIO_DeInit+0x18c>)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	400a      	ands	r2, r1
 8003562:	3302      	adds	r3, #2
 8003564:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2103      	movs	r1, #3
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	08d2      	lsrs	r2, r2, #3
 800359c:	4019      	ands	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3208      	adds	r2, #8
 80035a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2103      	movs	r1, #3
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	401a      	ands	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	2101      	movs	r1, #1
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2103      	movs	r1, #3
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	401a      	ands	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3301      	adds	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f af49 	bne.w	800348c <HAL_GPIO_DeInit+0x10>
  }
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	48000400 	.word	0x48000400
 8003610:	48000800 	.word	0x48000800
 8003614:	58000800 	.word	0x58000800

08003618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
 8003624:	4613      	mov	r3, r2
 8003626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003628:	787b      	ldrb	r3, [r7, #1]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003634:	e002      	b.n	800363c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
	...

08003648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003652:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800365e:	4a05      	ldr	r2, [pc, #20]	@ (8003674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	4618      	mov	r0, r3
 8003668:	f007 ff66 	bl	800b538 <HAL_GPIO_EXTI_Callback>
  }
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	58000800 	.word	0x58000800

08003678 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <HAL_PWR_EnableBkUpAccess+0x18>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a03      	ldr	r2, [pc, #12]	@ (8003690 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003686:	6013      	str	r3, [r2, #0]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	58000400 	.word	0x58000400

08003694 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003698:	4b03      	ldr	r3, [pc, #12]	@ (80036a8 <HAL_PWREx_GetVoltageRange+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	58000400 	.word	0x58000400

080036ac <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80036b0:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036bc:	d101      	bne.n	80036c2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	58000400 	.word	0x58000400

080036d0 <LL_RCC_HSE_EnableTcxo>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <LL_RCC_HSE_DisableTcxo>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80036f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036fe:	6013      	str	r3, [r2, #0]
}
 8003700:	bf00      	nop
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800370c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800371a:	d101      	bne.n	8003720 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <LL_RCC_HSE_Enable>:
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373c:	6013      	str	r3, [r2, #0]
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <LL_RCC_HSE_Disable>:
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003758:	6013      	str	r3, [r2, #0]
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <LL_RCC_HSE_IsReady>:
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003774:	d101      	bne.n	800377a <LL_RCC_HSE_IsReady+0x18>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <LL_RCC_HSE_IsReady+0x1a>
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <LL_RCC_HSI_Enable>:
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <LL_RCC_HSI_Disable>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <LL_RCC_HSI_IsReady>:
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ce:	d101      	bne.n	80037d4 <LL_RCC_HSI_IsReady+0x18>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <LL_RCC_HSI_IsReady+0x1a>
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <LL_RCC_HSI_SetCalibTrimming>:
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80037e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	061b      	lsls	r3, r3, #24
 80037f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <LL_RCC_LSE_IsReady>:
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d101      	bne.n	800381e <LL_RCC_LSE_IsReady+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_RCC_LSE_IsReady+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <LL_RCC_LSI_Enable>:
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003834:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <LL_RCC_LSI_Disable>:
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <LL_RCC_LSI_IsReady>:
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b02      	cmp	r3, #2
 800387a:	d101      	bne.n	8003880 <LL_RCC_LSI_IsReady+0x18>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <LL_RCC_LSI_IsReady+0x1a>
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <LL_RCC_MSI_Enable>:
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6013      	str	r3, [r2, #0]
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <LL_RCC_MSI_Disable>:
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <LL_RCC_MSI_IsReady>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d101      	bne.n	80038d8 <LL_RCC_MSI_IsReady+0x16>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_RCC_MSI_IsReady+0x18>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d101      	bne.n	80038f8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <LL_RCC_MSI_GetRange>:
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800391c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003924:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <LL_RCC_SetSysClkSource>:
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <LL_RCC_GetSysClkSource>:
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <LL_RCC_SetAHBPrescaler>:
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_SetAHB3Prescaler>:
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80039ca:	f023 020f 	bic.w	r2, r3, #15
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <LL_RCC_SetAPB1Prescaler>:
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <LL_RCC_SetAPB2Prescaler>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_GetAHBPrescaler>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <LL_RCC_GetAHB3Prescaler>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a50:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_GetAPB1Prescaler>:
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <LL_RCC_GetAPB2Prescaler>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr

08003a8e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa0:	6013      	str	r3, [r2, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ab8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003abc:	6013      	str	r3, [r2, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ad8:	d101      	bne.n	8003ade <LL_RCC_PLL_IsReady+0x18>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <LL_RCC_PLL_IsReady+0x1a>
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0303 	and.w	r3, r3, #3
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d101      	bne.n	8003b5a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b78:	d101      	bne.n	8003b7e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b9a:	d101      	bne.n	8003ba0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bbc:	d101      	bne.n	8003bc2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e36f      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bde:	f7ff fece 	bl	800397e <LL_RCC_GetSysClkSource>
 8003be2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be4:	f7ff ffa2 	bl	8003b2c <LL_RCC_PLL_GetMainSource>
 8003be8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80c4 	beq.w	8003d80 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3e>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d176      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d173      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e353      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_OscConfig+0x68>
 8003c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c32:	e006      	b.n	8003c42 <HAL_RCC_OscConfig+0x76>
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d222      	bcs.n	8003c8c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fd3c 	bl	80046c8 <RCC_SetFlashLatencyFromMSIRange>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e331      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c64:	f043 0308 	orr.w	r3, r3, #8
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fe53 	bl	8003930 <LL_RCC_MSI_SetCalibTrimming>
 8003c8a:	e021      	b.n	8003cd0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c96:	f043 0308 	orr.w	r3, r3, #8
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fe3a 	bl	8003930 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fd01 	bl	80046c8 <RCC_SetFlashLatencyFromMSIRange>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e2f6      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003cd0:	f000 fcc2 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4aa7      	ldr	r2, [pc, #668]	@ (8003f74 <HAL_RCC_OscConfig+0x3a8>)
 8003cd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003cda:	4ba7      	ldr	r3, [pc, #668]	@ (8003f78 <HAL_RCC_OscConfig+0x3ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc ffdc 	bl	8000c9c <HAL_InitTick>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d047      	beq.n	8003d7e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	e2e5      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d02c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cfa:	f7ff fdc6 	bl	800388a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cfe:	f7fc ffd7 	bl	8000cb0 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d06:	f7fc ffd3 	bl	8000cb0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e2d2      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d18:	f7ff fdd3 	bl	80038c2 <LL_RCC_MSI_IsReady>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f1      	beq.n	8003d06 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d2c:	f043 0308 	orr.w	r3, r3, #8
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fdef 	bl	8003930 <LL_RCC_MSI_SetCalibTrimming>
 8003d52:	e015      	b.n	8003d80 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d54:	f7ff fda7 	bl	80038a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d58:	f7fc ffaa 	bl	8000cb0 <HAL_GetTick>
 8003d5c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d60:	f7fc ffa6 	bl	8000cb0 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e2a5      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d72:	f7ff fda6 	bl	80038c2 <LL_RCC_MSI_IsReady>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f1      	bne.n	8003d60 <HAL_RCC_OscConfig+0x194>
 8003d7c:	e000      	b.n	8003d80 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003d7e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d058      	beq.n	8003e3e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d005      	beq.n	8003d9e <HAL_RCC_OscConfig+0x1d2>
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	d108      	bne.n	8003daa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d105      	bne.n	8003daa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d14b      	bne.n	8003e3e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e289      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc8:	d102      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x204>
 8003dca:	f7ff fcae 	bl	800372a <LL_RCC_HSE_Enable>
 8003dce:	e00d      	b.n	8003dec <HAL_RCC_OscConfig+0x220>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003dd8:	d104      	bne.n	8003de4 <HAL_RCC_OscConfig+0x218>
 8003dda:	f7ff fc79 	bl	80036d0 <LL_RCC_HSE_EnableTcxo>
 8003dde:	f7ff fca4 	bl	800372a <LL_RCC_HSE_Enable>
 8003de2:	e003      	b.n	8003dec <HAL_RCC_OscConfig+0x220>
 8003de4:	f7ff fcaf 	bl	8003746 <LL_RCC_HSE_Disable>
 8003de8:	f7ff fc80 	bl	80036ec <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fc ff5c 	bl	8000cb0 <HAL_GetTick>
 8003df8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fc ff58 	bl	8000cb0 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	@ 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e257      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e0e:	f7ff fca8 	bl	8003762 <LL_RCC_HSE_IsReady>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f1      	beq.n	8003dfc <HAL_RCC_OscConfig+0x230>
 8003e18:	e011      	b.n	8003e3e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fc ff49 	bl	8000cb0 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e22:	f7fc ff45 	bl	8000cb0 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b64      	cmp	r3, #100	@ 0x64
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e244      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e34:	f7ff fc95 	bl	8003762 <LL_RCC_HSE_IsReady>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f1      	bne.n	8003e22 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d046      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x290>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d10e      	bne.n	8003e74 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e22a      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fcb6 	bl	80037de <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e72:	e031      	b.n	8003ed8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d019      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	f7ff fc82 	bl	8003784 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fc ff16 	bl	8000cb0 <HAL_GetTick>
 8003e84:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fc ff12 	bl	8000cb0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e211      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003e9a:	f7ff fc8f 	bl	80037bc <LL_RCC_HSI_IsReady>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f1      	beq.n	8003e88 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fc98 	bl	80037de <LL_RCC_HSI_SetCalibTrimming>
 8003eae:	e013      	b.n	8003ed8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb0:	f7ff fc76 	bl	80037a0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fc fefc 	bl	8000cb0 <HAL_GetTick>
 8003eb8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fc fef8 	bl	8000cb0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e1f7      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003ece:	f7ff fc75 	bl	80037bc <LL_RCC_HSI_IsReady>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f1      	bne.n	8003ebc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d06e      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d056      	beq.n	8003f9a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d031      	beq.n	8003f68 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e1d0      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d013      	beq.n	8003f4e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003f26:	f7ff fc8f 	bl	8003848 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f2a:	f7fc fec1 	bl	8000cb0 <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f32:	f7fc febd 	bl	8000cb0 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b11      	cmp	r3, #17
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e1bc      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003f44:	f7ff fc90 	bl	8003868 <LL_RCC_LSI_IsReady>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f1      	bne.n	8003f32 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f56:	f023 0210 	bic.w	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f68:	f7ff fc5e 	bl	8003828 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6c:	f7fc fea0 	bl	8000cb0 <HAL_GetTick>
 8003f70:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003f72:	e00c      	b.n	8003f8e <HAL_RCC_OscConfig+0x3c2>
 8003f74:	20000000 	.word	0x20000000
 8003f78:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fc fe98 	bl	8000cb0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b11      	cmp	r3, #17
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e197      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003f8e:	f7ff fc6b 	bl	8003868 <LL_RCC_LSI_IsReady>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f1      	beq.n	8003f7c <HAL_RCC_OscConfig+0x3b0>
 8003f98:	e013      	b.n	8003fc2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9a:	f7ff fc55 	bl	8003848 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fc fe87 	bl	8000cb0 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7fc fe83 	bl	8000cb0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b11      	cmp	r3, #17
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e182      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003fb8:	f7ff fc56 	bl	8003868 <LL_RCC_LSI_IsReady>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f1      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80d8 	beq.w	8004180 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003fd0:	f7ff fb6c 	bl	80036ac <LL_PWR_IsEnabledBkUpAccess>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003fda:	f7ff fb4d 	bl	8003678 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fde:	f7fc fe67 	bl	8000cb0 <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe6:	f7fc fe63 	bl	8000cb0 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e162      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003ff8:	f7ff fb58 	bl	80036ac <LL_PWR_IsEnabledBkUpAccess>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f1      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d07b      	beq.n	8004102 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b85      	cmp	r3, #133	@ 0x85
 8004010:	d003      	beq.n	800401a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d109      	bne.n	800402e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fc fe3f 	bl	8000cb0 <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fc fe31 	bl	8000cb0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e12e      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004060:	f7ff fbd1 	bl	8003806 <LL_RCC_LSE_IsReady>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ef      	beq.n	800404a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b81      	cmp	r3, #129	@ 0x81
 8004070:	d003      	beq.n	800407a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b85      	cmp	r3, #133	@ 0x85
 8004078:	d121      	bne.n	80040be <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fc fe19 	bl	8000cb0 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004088:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800408c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004094:	e00a      	b.n	80040ac <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fc fe0b 	bl	8000cb0 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e108      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ec      	beq.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80040bc:	e060      	b.n	8004180 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040be:	f7fc fdf7 	bl	8000cb0 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fc fde9 	bl	8000cb0 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0e6      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ec      	bne.n	80040da <HAL_RCC_OscConfig+0x50e>
 8004100:	e03e      	b.n	8004180 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fc fdd5 	bl	8000cb0 <HAL_GetTick>
 8004106:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004110:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fc fdc7 	bl	8000cb0 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0c4      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1ec      	bne.n	800411e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004144:	f7fc fdb4 	bl	8000cb0 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fc fda6 	bl	8000cb0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e0a3      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004176:	f7ff fb46 	bl	8003806 <LL_RCC_LSE_IsReady>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ef      	bne.n	8004160 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8099 	beq.w	80042bc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2b0c      	cmp	r3, #12
 800418e:	d06c      	beq.n	800426a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	2b02      	cmp	r3, #2
 8004196:	d14b      	bne.n	8004230 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004198:	f7ff fc87 	bl	8003aaa <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fc fd88 	bl	8000cb0 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fc fd84 	bl	8000cb0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b0a      	cmp	r3, #10
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e083      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80041b6:	f7ff fc86 	bl	8003ac6 <LL_RCC_PLL_IsReady>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f1      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b40      	ldr	r3, [pc, #256]	@ (80042c8 <HAL_RCC_OscConfig+0x6fc>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041d2:	4311      	orrs	r1, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041d8:	0212      	lsls	r2, r2, #8
 80041da:	4311      	orrs	r1, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041e0:	4311      	orrs	r1, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80041ec:	430a      	orrs	r2, r1
 80041ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f6:	f7ff fc4a 	bl	8003a8e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004208:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fc fd51 	bl	8000cb0 <HAL_GetTick>
 800420e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004212:	f7fc fd4d 	bl	8000cb0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b0a      	cmp	r3, #10
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e04c      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004224:	f7ff fc4f 	bl	8003ac6 <LL_RCC_PLL_IsReady>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f1      	beq.n	8004212 <HAL_RCC_OscConfig+0x646>
 800422e:	e045      	b.n	80042bc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004230:	f7ff fc3b 	bl	8003aaa <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004234:	f7fc fd3c 	bl	8000cb0 <HAL_GetTick>
 8004238:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423c:	f7fc fd38 	bl	8000cb0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b0a      	cmp	r3, #10
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e037      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800424e:	f7ff fc3a 	bl	8003ac6 <LL_RCC_PLL_IsReady>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f1      	bne.n	800423c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004262:	4b1a      	ldr	r3, [pc, #104]	@ (80042cc <HAL_RCC_OscConfig+0x700>)
 8004264:	4013      	ands	r3, r2
 8004266:	60cb      	str	r3, [r1, #12]
 8004268:	e028      	b.n	80042bc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e023      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	f003 0203 	and.w	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	429a      	cmp	r2, r3
 800428a:	d115      	bne.n	80042b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004296:	429a      	cmp	r2, r3
 8004298:	d10e      	bne.n	80042b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d106      	bne.n	80042b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	11c1808c 	.word	0x11c1808c
 80042cc:	eefefffc 	.word	0xeefefffc

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e10f      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b89      	ldr	r3, [pc, #548]	@ (800450c <HAL_RCC_ClockConfig+0x23c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d91b      	bls.n	800432a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b86      	ldr	r3, [pc, #536]	@ (800450c <HAL_RCC_ClockConfig+0x23c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	4984      	ldr	r1, [pc, #528]	@ (800450c <HAL_RCC_ClockConfig+0x23c>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004302:	f7fc fcd5 	bl	8000cb0 <HAL_GetTick>
 8004306:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004308:	e008      	b.n	800431c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800430a:	f7fc fcd1 	bl	8000cb0 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0f3      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431c:	4b7b      	ldr	r3, [pc, #492]	@ (800450c <HAL_RCC_ClockConfig+0x23c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d1ef      	bne.n	800430a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fb2a 	bl	8003994 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004340:	f7fc fcb6 	bl	8000cb0 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004348:	f7fc fcb2 	bl	8000cb0 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0d4      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800435a:	f7ff fbf2 	bl	8003b42 <LL_RCC_IsActiveFlag_HPRE>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f1      	beq.n	8004348 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d016      	beq.n	800439e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fb20 	bl	80039ba <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800437a:	f7fc fc99 	bl	8000cb0 <HAL_GetTick>
 800437e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004382:	f7fc fc95 	bl	8000cb0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0b7      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004394:	f7ff fbe6 	bl	8003b64 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f1      	beq.n	8004382 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fb19 	bl	80039e6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043b4:	f7fc fc7c 	bl	8000cb0 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043bc:	f7fc fc78 	bl	8000cb0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e09a      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80043ce:	f7ff fbdb 	bl	8003b88 <LL_RCC_IsActiveFlag_PPRE1>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f1      	beq.n	80043bc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d017      	beq.n	8004414 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fb0e 	bl	8003a0c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043f0:	f7fc fc5e 	bl	8000cb0 <HAL_GetTick>
 80043f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043f8:	f7fc fc5a 	bl	8000cb0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e07c      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800440a:	f7ff fbce 	bl	8003baa <LL_RCC_IsActiveFlag_PPRE2>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f1      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d043      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d106      	bne.n	8004436 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004428:	f7ff f99b 	bl	8003762 <LL_RCC_HSE_IsReady>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11e      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e066      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b03      	cmp	r3, #3
 800443c:	d106      	bne.n	800444c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800443e:	f7ff fb42 	bl	8003ac6 <LL_RCC_PLL_IsReady>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d113      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e05b      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004454:	f7ff fa35 	bl	80038c2 <LL_RCC_MSI_IsReady>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d108      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e050      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004462:	f7ff f9ab 	bl	80037bc <LL_RCC_HSI_IsReady>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e049      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fa6f 	bl	8003958 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800447a:	f7fc fc19 	bl	8000cb0 <HAL_GetTick>
 800447e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004480:	e00a      	b.n	8004498 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004482:	f7fc fc15 	bl	8000cb0 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e035      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004498:	f7ff fa71 	bl	800397e <LL_RCC_GetSysClkSource>
 800449c:	4602      	mov	r2, r0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1ec      	bne.n	8004482 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b18      	ldr	r3, [pc, #96]	@ (800450c <HAL_RCC_ClockConfig+0x23c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d21b      	bcs.n	80044ee <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b15      	ldr	r3, [pc, #84]	@ (800450c <HAL_RCC_ClockConfig+0x23c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 0207 	bic.w	r2, r3, #7
 80044be:	4913      	ldr	r1, [pc, #76]	@ (800450c <HAL_RCC_ClockConfig+0x23c>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c6:	f7fc fbf3 	bl	8000cb0 <HAL_GetTick>
 80044ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80044ce:	f7fc fbef 	bl	8000cb0 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e011      	b.n	8004504 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e0:	4b0a      	ldr	r3, [pc, #40]	@ (800450c <HAL_RCC_ClockConfig+0x23c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d1ef      	bne.n	80044ce <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80044ee:	f000 f8b3 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a06      	ldr	r2, [pc, #24]	@ (8004510 <HAL_RCC_ClockConfig+0x240>)
 80044f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80044f8:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_ClockConfig+0x244>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc fbcd 	bl	8000c9c <HAL_InitTick>
 8004502:	4603      	mov	r3, r0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	58004000 	.word	0x58004000
 8004510:	20000000 	.word	0x20000000
 8004514:	20000004 	.word	0x20000004

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004526:	f7ff fa2a 	bl	800397e <LL_RCC_GetSysClkSource>
 800452a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800452c:	f7ff fafe 	bl	8003b2c <LL_RCC_PLL_GetMainSource>
 8004530:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x2c>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d139      	bne.n	80045b2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d136      	bne.n	80045b2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004544:	f7ff f9cd 	bl	80038e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d115      	bne.n	800457a <HAL_RCC_GetSysClockFreq+0x62>
 800454e:	f7ff f9c8 	bl	80038e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004552:	4603      	mov	r3, r0
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x4e>
 8004558:	f7ff f9d3 	bl	8003902 <LL_RCC_MSI_GetRange>
 800455c:	4603      	mov	r3, r0
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	e005      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x5a>
 8004566:	f7ff f9d7 	bl	8003918 <LL_RCC_MSI_GetRangeAfterStandby>
 800456a:	4603      	mov	r3, r0
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a36      	ldr	r2, [pc, #216]	@ (800464c <HAL_RCC_GetSysClockFreq+0x134>)
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	e014      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x8c>
 800457a:	f7ff f9b2 	bl	80038e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_GetSysClockFreq+0x7a>
 8004584:	f7ff f9bd 	bl	8003902 <LL_RCC_MSI_GetRange>
 8004588:	4603      	mov	r3, r0
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	e005      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x86>
 8004592:	f7ff f9c1 	bl	8003918 <LL_RCC_MSI_GetRangeAfterStandby>
 8004596:	4603      	mov	r3, r0
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	4a2b      	ldr	r2, [pc, #172]	@ (800464c <HAL_RCC_GetSysClockFreq+0x134>)
 80045a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d115      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045b0:	e012      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d102      	bne.n	80045be <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045b8:	4b25      	ldr	r3, [pc, #148]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x138>)
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e00c      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d109      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80045c4:	f7ff f8a0 	bl	8003708 <LL_RCC_HSE_IsEnabledDiv2>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d102      	bne.n	80045d4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80045ce:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x138>)
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e001      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80045d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x13c>)
 80045d6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d8:	f7ff f9d1 	bl	800397e <LL_RCC_GetSysClkSource>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b0c      	cmp	r3, #12
 80045e0:	d12f      	bne.n	8004642 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80045e2:	f7ff faa3 	bl	8003b2c <LL_RCC_PLL_GetMainSource>
 80045e6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0xde>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d003      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0xe4>
 80045f4:	e00d      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80045f6:	4b16      	ldr	r3, [pc, #88]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x138>)
 80045f8:	60fb      	str	r3, [r7, #12]
        break;
 80045fa:	e00d      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80045fc:	f7ff f884 	bl	8003708 <LL_RCC_HSE_IsEnabledDiv2>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d102      	bne.n	800460c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004606:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x138>)
 8004608:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800460a:	e005      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x13c>)
 800460e:	60fb      	str	r3, [r7, #12]
        break;
 8004610:	e002      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	60fb      	str	r3, [r7, #12]
        break;
 8004616:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004618:	f7ff fa66 	bl	8003ae8 <LL_RCC_PLL_GetN>
 800461c:	4602      	mov	r2, r0
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	fb03 f402 	mul.w	r4, r3, r2
 8004624:	f7ff fa77 	bl	8003b16 <LL_RCC_PLL_GetDivider>
 8004628:	4603      	mov	r3, r0
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	3301      	adds	r3, #1
 800462e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004632:	f7ff fa65 	bl	8003b00 <LL_RCC_PLL_GetR>
 8004636:	4603      	mov	r3, r0
 8004638:	0f5b      	lsrs	r3, r3, #29
 800463a:	3301      	adds	r3, #1
 800463c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004640:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004642:	697b      	ldr	r3, [r7, #20]
}
 8004644:	4618      	mov	r0, r3
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	0800cd78 	.word	0x0800cd78
 8004650:	00f42400 	.word	0x00f42400
 8004654:	01e84800 	.word	0x01e84800

08004658 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004658:	b598      	push	{r3, r4, r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800465c:	f7ff ff5c 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8004660:	4604      	mov	r4, r0
 8004662:	f7ff f9e6 	bl	8003a32 <LL_RCC_GetAHBPrescaler>
 8004666:	4603      	mov	r3, r0
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	4a03      	ldr	r2, [pc, #12]	@ (800467c <HAL_RCC_GetHCLKFreq+0x24>)
 8004670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004674:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd98      	pop	{r3, r4, r7, pc}
 800467c:	0800cd18 	.word	0x0800cd18

08004680 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b598      	push	{r3, r4, r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004684:	f7ff ffe8 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 8004688:	4604      	mov	r4, r0
 800468a:	f7ff f9ea 	bl	8003a62 <LL_RCC_GetAPB1Prescaler>
 800468e:	4603      	mov	r3, r0
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	4a03      	ldr	r2, [pc, #12]	@ (80046a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004698:	fa24 f303 	lsr.w	r3, r4, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd98      	pop	{r3, r4, r7, pc}
 80046a0:	0800cd58 	.word	0x0800cd58

080046a4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a4:	b598      	push	{r3, r4, r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80046a8:	f7ff ffd6 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 80046ac:	4604      	mov	r4, r0
 80046ae:	f7ff f9e3 	bl	8003a78 <LL_RCC_GetAPB2Prescaler>
 80046b2:	4603      	mov	r3, r0
 80046b4:	0adb      	lsrs	r3, r3, #11
 80046b6:	4a03      	ldr	r2, [pc, #12]	@ (80046c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd98      	pop	{r3, r4, r7, pc}
 80046c4:	0800cd58 	.word	0x0800cd58

080046c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	4a10      	ldr	r2, [pc, #64]	@ (800471c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80046da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046de:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80046e0:	f7ff f9b2 	bl	8003a48 <LL_RCC_GetAHB3Prescaler>
 80046e4:	4603      	mov	r3, r0
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004720 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80046ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a09      	ldr	r2, [pc, #36]	@ (8004724 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0c9c      	lsrs	r4, r3, #18
 8004704:	f7fe ffc6 	bl	8003694 <HAL_PWREx_GetVoltageRange>
 8004708:	4603      	mov	r3, r0
 800470a:	4619      	mov	r1, r3
 800470c:	4620      	mov	r0, r4
 800470e:	f000 f80b 	bl	8004728 <RCC_SetFlashLatency>
 8004712:	4603      	mov	r3, r0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bd90      	pop	{r4, r7, pc}
 800471c:	0800cd78 	.word	0x0800cd78
 8004720:	0800cd18 	.word	0x0800cd18
 8004724:	431bde83 	.word	0x431bde83

08004728 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	@ 0x38
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004732:	4a3a      	ldr	r2, [pc, #232]	@ (800481c <RCC_SetFlashLatency+0xf4>)
 8004734:	f107 0320 	add.w	r3, r7, #32
 8004738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800473c:	6018      	str	r0, [r3, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004742:	4a37      	ldr	r2, [pc, #220]	@ (8004820 <RCC_SetFlashLatency+0xf8>)
 8004744:	f107 0318 	add.w	r3, r7, #24
 8004748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800474c:	6018      	str	r0, [r3, #0]
 800474e:	3304      	adds	r3, #4
 8004750:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004752:	4a34      	ldr	r2, [pc, #208]	@ (8004824 <RCC_SetFlashLatency+0xfc>)
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	ca07      	ldmia	r2, {r0, r1, r2}
 800475a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800475e:	2300      	movs	r3, #0
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004768:	d11b      	bne.n	80047a2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800476a:	2300      	movs	r3, #0
 800476c:	633b      	str	r3, [r7, #48]	@ 0x30
 800476e:	e014      	b.n	800479a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	3338      	adds	r3, #56	@ 0x38
 8004776:	443b      	add	r3, r7
 8004778:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4293      	cmp	r3, r2
 8004782:	d807      	bhi.n	8004794 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	3338      	adds	r3, #56	@ 0x38
 800478a:	443b      	add	r3, r7
 800478c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004792:	e021      	b.n	80047d8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	3301      	adds	r3, #1
 8004798:	633b      	str	r3, [r7, #48]	@ 0x30
 800479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479c:	2b02      	cmp	r3, #2
 800479e:	d9e7      	bls.n	8004770 <RCC_SetFlashLatency+0x48>
 80047a0:	e01a      	b.n	80047d8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a6:	e014      	b.n	80047d2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80047a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	3338      	adds	r3, #56	@ 0x38
 80047ae:	443b      	add	r3, r7
 80047b0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d807      	bhi.n	80047cc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80047bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	3338      	adds	r3, #56	@ 0x38
 80047c2:	443b      	add	r3, r7
 80047c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047ca:	e005      	b.n	80047d8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ce:	3301      	adds	r3, #1
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d9e7      	bls.n	80047a8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047d8:	4b13      	ldr	r3, [pc, #76]	@ (8004828 <RCC_SetFlashLatency+0x100>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 0207 	bic.w	r2, r3, #7
 80047e0:	4911      	ldr	r1, [pc, #68]	@ (8004828 <RCC_SetFlashLatency+0x100>)
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047e8:	f7fc fa62 	bl	8000cb0 <HAL_GetTick>
 80047ec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80047ee:	e008      	b.n	8004802 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047f0:	f7fc fa5e 	bl	8000cb0 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e007      	b.n	8004812 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004802:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <RCC_SetFlashLatency+0x100>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800480c:	429a      	cmp	r2, r3
 800480e:	d1ef      	bne.n	80047f0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3738      	adds	r7, #56	@ 0x38
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	0800ca0c 	.word	0x0800ca0c
 8004820:	0800ca14 	.word	0x0800ca14
 8004824:	0800ca1c 	.word	0x0800ca1c
 8004828:	58004000 	.word	0x58004000

0800482c <LL_RCC_LSE_IsReady>:
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b02      	cmp	r3, #2
 800483e:	d101      	bne.n	8004844 <LL_RCC_LSE_IsReady+0x18>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <LL_RCC_LSE_IsReady+0x1a>
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <LL_RCC_SetUSARTClockSource>:
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	43db      	mvns	r3, r3
 8004864:	401a      	ands	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <LL_RCC_SetI2SClockSource>:
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <LL_RCC_SetLPUARTClockSource>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <LL_RCC_SetI2CClockSource>:
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80048ea:	43db      	mvns	r3, r3
 80048ec:	401a      	ands	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80048f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <LL_RCC_SetLPTIMClockSource>:
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004916:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	43db      	mvns	r3, r3
 8004922:	401a      	ands	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <LL_RCC_SetRNGClockSource>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004950:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <LL_RCC_SetADCClockSource>:
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800497a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <LL_RCC_SetRTCClockSource>:
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <LL_RCC_GetRTCClockSource>:
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80049be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <LL_RCC_ForceBackupDomainReset>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80049d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80049ea:	bf00      	nop
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004a20:	2300      	movs	r3, #0
 8004a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004a24:	2300      	movs	r3, #0
 8004a26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d058      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004a34:	f7fe fe20 	bl	8003678 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a38:	f7fc f93a 	bl	8000cb0 <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004a3e:	e009      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a40:	f7fc f936 	bl	8000cb0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d902      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	74fb      	strb	r3, [r7, #19]
        break;
 8004a52:	e006      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004a54:	4b7b      	ldr	r3, [pc, #492]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a60:	d1ee      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13c      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004a68:	f7ff ffa7 	bl	80049ba <LL_RCC_GetRTCClockSource>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d00f      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a82:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a84:	f7ff ffa5 	bl	80049d2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a88:	f7ff ffb3 	bl	80049f2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d014      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fc f906 	bl	8000cb0 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa8:	f7fc f902 	bl	8000cb0 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d902      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	74fb      	strb	r3, [r7, #19]
            break;
 8004abe:	e004      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004ac0:	f7ff feb4 	bl	800482c <LL_RCC_LSE_IsReady>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d1ee      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff5b 	bl	8004990 <LL_RCC_SetRTCClockSource>
 8004ada:	e004      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	74bb      	strb	r3, [r7, #18]
 8004ae0:	e001      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d004      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fea9 	bl	800484e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fe9e 	bl	800484e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fec0 	bl	80048a8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff fee6 	bl	800490a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fedb 	bl	800490a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fed0 	bl	800490a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fea9 	bl	80048d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fe9e 	bl	80048d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff fe93 	bl	80048d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d011      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fe5e 	bl	800487e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bca:	d107      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d010      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fea5 	bl	800493c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c08:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d011      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fea3 	bl	8004966 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c28:	d107      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c38:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004c3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	58000400 	.word	0x58000400

08004c48 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004c50:	4b11      	ldr	r3, [pc, #68]	@ (8004c98 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004c52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004c66:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f815 	bl	8004c9c <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004c7c:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004c7e:	2202      	movs	r2, #2
 8004c80:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f837 	bl	8004cf6 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40002800 	.word	0x40002800

08004c9c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
	...

08004cb0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004cb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004cc6:	2240      	movs	r2, #64	@ 0x40
 8004cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f80a 	bl	8004ce4 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40002800 	.word	0x40002800

08004ce4 <HAL_RTCEx_SSRUEventCallback>:
  * @brief  SSR underflow callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_SSRUEventCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004d10:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d18:	4904      	ldr	r1, [pc, #16]	@ (8004d2c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	58000400 	.word	0x58000400

08004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d34:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3a:	4a04      	ldr	r2, [pc, #16]	@ (8004d4c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	58000400 	.word	0x58000400

08004d50 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5a:	4a04      	ldr	r2, [pc, #16]	@ (8004d6c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004d5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	58000400 	.word	0x58000400

08004d70 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004d74:	4b03      	ldr	r3, [pc, #12]	@ (8004d84 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004d76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d7a:	619a      	str	r2, [r3, #24]
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	58000400 	.word	0x58000400

08004d88 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004d8c:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d101      	bne.n	8004d9c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	58000400 	.word	0x58000400

08004dac <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004db0:	4b06      	ldr	r3, [pc, #24]	@ (8004dcc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d101      	bne.n	8004dc0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	58000400 	.word	0x58000400

08004dd0 <LL_RCC_RF_DisableReset>:
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ddc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004de0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004de4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <LL_RCC_IsRFUnderReset>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e04:	d101      	bne.n	8004e0a <LL_RCC_IsRFUnderReset+0x1a>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <LL_RCC_IsRFUnderReset+0x1c>
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <LL_EXTI_EnableIT_32_63>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <LL_EXTI_EnableIT_32_63+0x24>)
 8004e1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004e22:	4905      	ldr	r1, [pc, #20]	@ (8004e38 <LL_EXTI_EnableIT_32_63+0x24>)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	58000800 	.word	0x58000800

08004e3c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
    return status;
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	e052      	b.n	8004ef8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	799b      	ldrb	r3, [r3, #6]
 8004e5a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004e5c:	7bbb      	ldrb	r3, [r7, #14]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SUBGHZ_Init+0x2c>
 8004e62:	7bbb      	ldrb	r3, [r7, #14]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d109      	bne.n	8004e7c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fb fe82 	bl	8000b78 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004e74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004e78:	f7ff ffcc 	bl	8004e14 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d126      	bne.n	8004ed0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004e88:	f7ff ffa2 	bl	8004dd0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <HAL_SUBGHZ_Init+0xc4>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	0cdb      	lsrs	r3, r3, #19
 8004e9a:	2264      	movs	r2, #100	@ 0x64
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ea0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	609a      	str	r2, [r3, #8]
        break;
 8004eb2:	e007      	b.n	8004ec4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004eba:	f7ff ff99 	bl	8004df0 <LL_RCC_IsRFUnderReset>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ee      	bne.n	8004ea2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ec4:	f7ff ff34 	bl	8004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004ec8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004ecc:	f7ff ff1c 	bl	8004d08 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004ed0:	f7ff ff4e 	bl	8004d70 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fab0 	bl	8005444 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	719a      	strb	r2, [r3, #6]

  return status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000000 	.word	0x20000000

08004f04 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	460b      	mov	r3, r1
 8004f12:	817b      	strh	r3, [r7, #10]
 8004f14:	4613      	mov	r3, r2
 8004f16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	799b      	ldrb	r3, [r3, #6]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d14a      	bne.n	8004fb8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	795b      	ldrb	r3, [r3, #5]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e045      	b.n	8004fba <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2202      	movs	r2, #2
 8004f38:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fb50 	bl	80055e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004f40:	f7ff ff06 	bl	8004d50 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004f44:	210d      	movs	r1, #13
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fa9c 	bl	8005484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004f4c:	897b      	ldrh	r3, [r7, #10]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fa94 	bl	8005484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004f5c:	897b      	ldrh	r3, [r7, #10]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fa8e 	bl	8005484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	82bb      	strh	r3, [r7, #20]
 8004f6c:	e00a      	b.n	8004f84 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004f6e:	8abb      	ldrh	r3, [r7, #20]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4413      	add	r3, r2
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	4619      	mov	r1, r3
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fa83 	bl	8005484 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f7e:	8abb      	ldrh	r3, [r7, #20]
 8004f80:	3301      	adds	r3, #1
 8004f82:	82bb      	strh	r3, [r7, #20]
 8004f84:	8aba      	ldrh	r2, [r7, #20]
 8004f86:	893b      	ldrh	r3, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d3f0      	bcc.n	8004f6e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004f8c:	f7ff fed0 	bl	8004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fb49 	bl	8005628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
 8004fa2:	e001      	b.n	8004fa8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	715a      	strb	r2, [r3, #5]

    return status;
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	e000      	b.n	8004fba <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b088      	sub	sp, #32
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	460b      	mov	r3, r1
 8004fd0:	817b      	strh	r3, [r7, #10]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	799b      	ldrb	r3, [r3, #6]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d14a      	bne.n	800507a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	795b      	ldrb	r3, [r3, #5]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e045      	b.n	800507c <HAL_SUBGHZ_ReadRegisters+0xba>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 faf2 	bl	80055e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ffc:	f7ff fea8 	bl	8004d50 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005000:	211d      	movs	r1, #29
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fa3e 	bl	8005484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005008:	897b      	ldrh	r3, [r7, #10]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	b29b      	uxth	r3, r3
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa36 	bl	8005484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005018:	897b      	ldrh	r3, [r7, #10]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	4619      	mov	r1, r3
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fa30 	bl	8005484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005024:	2100      	movs	r1, #0
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fa2c 	bl	8005484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800502c:	2300      	movs	r3, #0
 800502e:	82fb      	strh	r3, [r7, #22]
 8005030:	e009      	b.n	8005046 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005032:	69b9      	ldr	r1, [r7, #24]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fa7b 	bl	8005530 <SUBGHZSPI_Receive>
      pData++;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	3301      	adds	r3, #1
 800503e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005040:	8afb      	ldrh	r3, [r7, #22]
 8005042:	3301      	adds	r3, #1
 8005044:	82fb      	strh	r3, [r7, #22]
 8005046:	8afa      	ldrh	r2, [r7, #22]
 8005048:	893b      	ldrh	r3, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	d3f1      	bcc.n	8005032 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800504e:	f7ff fe6f 	bl	8004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fae8 	bl	8005628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e001      	b.n	800506a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	715a      	strb	r2, [r3, #5]

    return status;
 8005076:	7ffb      	ldrb	r3, [r7, #31]
 8005078:	e000      	b.n	800507c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	461a      	mov	r2, r3
 8005090:	460b      	mov	r3, r1
 8005092:	72fb      	strb	r3, [r7, #11]
 8005094:	4613      	mov	r3, r2
 8005096:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	799b      	ldrb	r3, [r3, #6]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d14a      	bne.n	8005138 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	795b      	ldrb	r3, [r3, #5]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e045      	b.n	800513a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fa93 	bl	80055e0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80050ba:	7afb      	ldrb	r3, [r7, #11]
 80050bc:	2b84      	cmp	r3, #132	@ 0x84
 80050be:	d002      	beq.n	80050c6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80050c0:	7afb      	ldrb	r3, [r7, #11]
 80050c2:	2b94      	cmp	r3, #148	@ 0x94
 80050c4:	d103      	bne.n	80050ce <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	711a      	strb	r2, [r3, #4]
 80050cc:	e002      	b.n	80050d4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80050d4:	f7ff fe3c 	bl	8004d50 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80050d8:	7afb      	ldrb	r3, [r7, #11]
 80050da:	4619      	mov	r1, r3
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f9d1 	bl	8005484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	82bb      	strh	r3, [r7, #20]
 80050e6:	e00a      	b.n	80050fe <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80050e8:	8abb      	ldrh	r3, [r7, #20]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f9c6 	bl	8005484 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80050f8:	8abb      	ldrh	r3, [r7, #20]
 80050fa:	3301      	adds	r3, #1
 80050fc:	82bb      	strh	r3, [r7, #20]
 80050fe:	8aba      	ldrh	r2, [r7, #20]
 8005100:	893b      	ldrh	r3, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d3f0      	bcc.n	80050e8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005106:	f7ff fe13 	bl	8004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	2b84      	cmp	r3, #132	@ 0x84
 800510e:	d002      	beq.n	8005116 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fa89 	bl	8005628 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
 8005122:	e001      	b.n	8005128 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	715a      	strb	r2, [r3, #5]

    return status;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	e000      	b.n	800513a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b088      	sub	sp, #32
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	461a      	mov	r2, r3
 800514e:	460b      	mov	r3, r1
 8005150:	72fb      	strb	r3, [r7, #11]
 8005152:	4613      	mov	r3, r2
 8005154:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	799b      	ldrb	r3, [r3, #6]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d13d      	bne.n	80051e0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	795b      	ldrb	r3, [r3, #5]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800516c:	2302      	movs	r3, #2
 800516e:	e038      	b.n	80051e2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fa32 	bl	80055e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800517c:	f7ff fde8 	bl	8004d50 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005180:	7afb      	ldrb	r3, [r7, #11]
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f97d 	bl	8005484 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800518a:	2100      	movs	r1, #0
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f979 	bl	8005484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005192:	2300      	movs	r3, #0
 8005194:	82fb      	strh	r3, [r7, #22]
 8005196:	e009      	b.n	80051ac <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f9c8 	bl	8005530 <SUBGHZSPI_Receive>
      pData++;
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	3301      	adds	r3, #1
 80051a4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80051a6:	8afb      	ldrh	r3, [r7, #22]
 80051a8:	3301      	adds	r3, #1
 80051aa:	82fb      	strh	r3, [r7, #22]
 80051ac:	8afa      	ldrh	r2, [r7, #22]
 80051ae:	893b      	ldrh	r3, [r7, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d3f1      	bcc.n	8005198 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80051b4:	f7ff fdbc 	bl	8004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fa35 	bl	8005628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	77fb      	strb	r3, [r7, #31]
 80051ca:	e001      	b.n	80051d0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	715a      	strb	r2, [r3, #5]

    return status;
 80051dc:	7ffb      	ldrb	r3, [r7, #31]
 80051de:	e000      	b.n	80051e2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
  }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	461a      	mov	r2, r3
 80051f6:	460b      	mov	r3, r1
 80051f8:	72fb      	strb	r3, [r7, #11]
 80051fa:	4613      	mov	r3, r2
 80051fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	799b      	ldrb	r3, [r3, #6]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d13e      	bne.n	8005286 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	795b      	ldrb	r3, [r3, #5]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005210:	2302      	movs	r3, #2
 8005212:	e039      	b.n	8005288 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f9e0 	bl	80055e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005220:	f7ff fd96 	bl	8004d50 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005224:	210e      	movs	r1, #14
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f92c 	bl	8005484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800522c:	7afb      	ldrb	r3, [r7, #11]
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f927 	bl	8005484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005236:	2300      	movs	r3, #0
 8005238:	82bb      	strh	r3, [r7, #20]
 800523a:	e00a      	b.n	8005252 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800523c:	8abb      	ldrh	r3, [r7, #20]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	4619      	mov	r1, r3
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f91c 	bl	8005484 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800524c:	8abb      	ldrh	r3, [r7, #20]
 800524e:	3301      	adds	r3, #1
 8005250:	82bb      	strh	r3, [r7, #20]
 8005252:	8aba      	ldrh	r2, [r7, #20]
 8005254:	893b      	ldrh	r3, [r7, #8]
 8005256:	429a      	cmp	r2, r3
 8005258:	d3f0      	bcc.n	800523c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800525a:	f7ff fd69 	bl	8004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f9e2 	bl	8005628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	75fb      	strb	r3, [r7, #23]
 8005270:	e001      	b.n	8005276 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	715a      	strb	r2, [r3, #5]

    return status;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	e000      	b.n	8005288 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	461a      	mov	r2, r3
 800529c:	460b      	mov	r3, r1
 800529e:	72fb      	strb	r3, [r7, #11]
 80052a0:	4613      	mov	r3, r2
 80052a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	799b      	ldrb	r3, [r3, #6]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d141      	bne.n	8005336 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	795b      	ldrb	r3, [r3, #5]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_SUBGHZ_ReadBuffer+0x2e>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e03c      	b.n	8005338 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f98b 	bl	80055e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80052ca:	f7ff fd41 	bl	8004d50 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80052ce:	211e      	movs	r1, #30
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f8d7 	bl	8005484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	4619      	mov	r1, r3
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f8d2 	bl	8005484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80052e0:	2100      	movs	r1, #0
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f8ce 	bl	8005484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80052e8:	2300      	movs	r3, #0
 80052ea:	82fb      	strh	r3, [r7, #22]
 80052ec:	e009      	b.n	8005302 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80052ee:	69b9      	ldr	r1, [r7, #24]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f91d 	bl	8005530 <SUBGHZSPI_Receive>
      pData++;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80052fc:	8afb      	ldrh	r3, [r7, #22]
 80052fe:	3301      	adds	r3, #1
 8005300:	82fb      	strh	r3, [r7, #22]
 8005302:	8afa      	ldrh	r2, [r7, #22]
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	429a      	cmp	r2, r3
 8005308:	d3f1      	bcc.n	80052ee <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800530a:	f7ff fd11 	bl	8004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f98a 	bl	8005628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
 8005320:	e001      	b.n	8005326 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	715a      	strb	r2, [r3, #5]

    return status;
 8005332:	7ffb      	ldrb	r3, [r7, #31]
 8005334:	e000      	b.n	8005338 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005348:	2300      	movs	r3, #0
 800534a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800534c:	f107 020c 	add.w	r2, r7, #12
 8005350:	2302      	movs	r3, #2
 8005352:	2112      	movs	r1, #18
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fef4 	bl	8005142 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800535a:	7b3b      	ldrb	r3, [r7, #12]
 800535c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800535e:	89fb      	ldrh	r3, [r7, #14]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	b21a      	sxth	r2, r3
 8005364:	7b7b      	ldrb	r3, [r7, #13]
 8005366:	b21b      	sxth	r3, r3
 8005368:	4313      	orrs	r3, r2
 800536a:	b21b      	sxth	r3, r3
 800536c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800536e:	f107 020c 	add.w	r2, r7, #12
 8005372:	2302      	movs	r3, #2
 8005374:	2102      	movs	r1, #2
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff fe84 	bl	8005084 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800537c:	89fb      	ldrh	r3, [r7, #14]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f005 fcb4 	bl	800acf4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800538c:	89fb      	ldrh	r3, [r7, #14]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8005396:	89fb      	ldrh	r3, [r7, #14]
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f005 fcb5 	bl	800ad10 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f005 fd05 	bl	800adc0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80053b6:	89fb      	ldrh	r3, [r7, #14]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f005 fd0b 	bl	800addc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80053c6:	89fb      	ldrh	r3, [r7, #14]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f005 fd11 	bl	800adf8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80053d6:	89fb      	ldrh	r3, [r7, #14]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f005 fcdf 	bl	800ada4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80053e6:	89fb      	ldrh	r3, [r7, #14]
 80053e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f005 fc9b 	bl	800ad2c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80053f6:	89fb      	ldrh	r3, [r7, #14]
 80053f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005400:	89fb      	ldrh	r3, [r7, #14]
 8005402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800540a:	2101      	movs	r1, #1
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f005 fc9b 	bl	800ad48 <HAL_SUBGHZ_CADStatusCallback>
 8005412:	e003      	b.n	800541c <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005414:	2100      	movs	r1, #0
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f005 fc96 	bl	800ad48 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800541c:	89fb      	ldrh	r3, [r7, #14]
 800541e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f005 fcac 	bl	800ad84 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800542c:	89fb      	ldrh	r3, [r7, #14]
 800542e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f005 fcec 	bl	800ae14 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800544c:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <SUBGHZSPI_Init+0x3c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0b      	ldr	r2, [pc, #44]	@ (8005480 <SUBGHZSPI_Init+0x3c>)
 8005452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005456:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005458:	4a09      	ldr	r2, [pc, #36]	@ (8005480 <SUBGHZSPI_Init+0x3c>)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8005460:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005462:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <SUBGHZSPI_Init+0x3c>)
 8005464:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005468:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800546a:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <SUBGHZSPI_Init+0x3c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a04      	ldr	r2, [pc, #16]	@ (8005480 <SUBGHZSPI_Init+0x3c>)
 8005470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005474:	6013      	str	r3, [r2, #0]
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	58010000 	.word	0x58010000

08005484 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005494:	4b23      	ldr	r3, [pc, #140]	@ (8005524 <SUBGHZSPI_Transmit+0xa0>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	0cdb      	lsrs	r3, r3, #19
 80054a2:	2264      	movs	r2, #100	@ 0x64
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	609a      	str	r2, [r3, #8]
      break;
 80054ba:	e008      	b.n	80054ce <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3b01      	subs	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80054c2:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <SUBGHZSPI_Transmit+0xa4>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d1ed      	bne.n	80054aa <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80054ce:	4b17      	ldr	r3, [pc, #92]	@ (800552c <SUBGHZSPI_Transmit+0xa8>)
 80054d0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80054d8:	4b12      	ldr	r3, [pc, #72]	@ (8005524 <SUBGHZSPI_Transmit+0xa0>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	0cdb      	lsrs	r3, r3, #19
 80054e6:	2264      	movs	r2, #100	@ 0x64
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	609a      	str	r2, [r3, #8]
      break;
 80054fe:	e008      	b.n	8005512 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3b01      	subs	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005506:	4b08      	ldr	r3, [pc, #32]	@ (8005528 <SUBGHZSPI_Transmit+0xa4>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d1ed      	bne.n	80054ee <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005512:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <SUBGHZSPI_Transmit+0xa4>)
 8005514:	68db      	ldr	r3, [r3, #12]

  return status;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000000 	.word	0x20000000
 8005528:	58010000 	.word	0x58010000
 800552c:	5801000c 	.word	0x5801000c

08005530 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800553e:	4b25      	ldr	r3, [pc, #148]	@ (80055d4 <SUBGHZSPI_Receive+0xa4>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4613      	mov	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	0cdb      	lsrs	r3, r3, #19
 800554c:	2264      	movs	r2, #100	@ 0x64
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	609a      	str	r2, [r3, #8]
      break;
 8005564:	e008      	b.n	8005578 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3b01      	subs	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800556c:	4b1a      	ldr	r3, [pc, #104]	@ (80055d8 <SUBGHZSPI_Receive+0xa8>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b02      	cmp	r3, #2
 8005576:	d1ed      	bne.n	8005554 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005578:	4b18      	ldr	r3, [pc, #96]	@ (80055dc <SUBGHZSPI_Receive+0xac>)
 800557a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	22ff      	movs	r2, #255	@ 0xff
 8005580:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005582:	4b14      	ldr	r3, [pc, #80]	@ (80055d4 <SUBGHZSPI_Receive+0xa4>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4613      	mov	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	0cdb      	lsrs	r3, r3, #19
 8005590:	2264      	movs	r2, #100	@ 0x64
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	609a      	str	r2, [r3, #8]
      break;
 80055a8:	e008      	b.n	80055bc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80055b0:	4b09      	ldr	r3, [pc, #36]	@ (80055d8 <SUBGHZSPI_Receive+0xa8>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d1ed      	bne.n	8005598 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80055bc:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <SUBGHZSPI_Receive+0xa8>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	701a      	strb	r2, [r3, #0]

  return status;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000000 	.word	0x20000000
 80055d8:	58010000 	.word	0x58010000
 80055dc:	5801000c 	.word	0x5801000c

080055e0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	791b      	ldrb	r3, [r3, #4]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d111      	bne.n	8005614 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80055f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <SUBGHZ_CheckDeviceReady+0x44>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005600:	f7ff fba6 	bl	8004d50 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f9      	bne.n	8005604 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005610:	f7ff fb8e 	bl	8004d30 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f807 	bl	8005628 <SUBGHZ_WaitOnBusy>
 800561a:	4603      	mov	r3, r0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000000 	.word	0x20000000

08005628 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005634:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <SUBGHZ_WaitOnBusy+0x58>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4413      	add	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	0d1b      	lsrs	r3, r3, #20
 8005642:	2264      	movs	r2, #100	@ 0x64
 8005644:	fb02 f303 	mul.w	r3, r2, r3
 8005648:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800564a:	f7ff fbaf 	bl	8004dac <LL_PWR_IsActiveFlag_RFBUSYMS>
 800564e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	609a      	str	r2, [r3, #8]
      break;
 8005660:	e009      	b.n	8005676 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3b01      	subs	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005668:	f7ff fb8e 	bl	8004d88 <LL_PWR_IsActiveFlag_RFBUSYS>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4013      	ands	r3, r2
 8005672:	2b01      	cmp	r3, #1
 8005674:	d0e9      	beq.n	800564a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000000 	.word	0x20000000

08005684 <LL_RCC_GetUSARTClockSource>:
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005690:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	401a      	ands	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	4313      	orrs	r3, r2
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <LL_RCC_GetLPUARTClockSource>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80056b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4013      	ands	r3, r2
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr

080056c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e042      	b.n	800575e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb fd7a 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2224      	movs	r2, #36	@ 0x24
 80056f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 ff31 	bl	8006578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fcba 	bl	8006090 <UART_SetConfig>
 800571c:	4603      	mov	r3, r0
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e01b      	b.n	800575e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005734:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005744:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 ffaf 	bl	80066ba <UART_CheckIdleState>
 800575c:	4603      	mov	r3, r0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b08a      	sub	sp, #40	@ 0x28
 800576a:	af02      	add	r7, sp, #8
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	2b20      	cmp	r3, #32
 800577e:	d173      	bne.n	8005868 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_UART_Transmit+0x26>
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e06c      	b.n	800586a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2221      	movs	r2, #33	@ 0x21
 800579c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057a0:	f7fb fa86 	bl	8000cb0 <HAL_GetTick>
 80057a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	88fa      	ldrh	r2, [r7, #6]
 80057b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057be:	d108      	bne.n	80057d2 <HAL_UART_Transmit+0x6c>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d104      	bne.n	80057d2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	e003      	b.n	80057da <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057da:	e02c      	b.n	8005836 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2200      	movs	r2, #0
 80057e4:	2180      	movs	r1, #128	@ 0x80
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 ffb5 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e039      	b.n	800586a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10b      	bne.n	8005814 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	3302      	adds	r3, #2
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	e007      	b.n	8005824 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3301      	adds	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1cc      	bne.n	80057dc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	2140      	movs	r1, #64	@ 0x40
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 ff82 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e006      	b.n	800586a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e000      	b.n	800586a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
  }
}
 800586a:	4618      	mov	r0, r3
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	@ 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005888:	2b20      	cmp	r3, #32
 800588a:	d137      	bne.n	80058fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_UART_Receive_IT+0x24>
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e030      	b.n	80058fe <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <HAL_UART_Receive_IT+0x94>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d01f      	beq.n	80058ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d018      	beq.n	80058ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	613b      	str	r3, [r7, #16]
   return(result);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	623b      	str	r3, [r7, #32]
 80058da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e6      	bne.n	80058ba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	461a      	mov	r2, r3
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fffe 	bl	80068f4 <UART_Start_Receive_IT>
 80058f8:	4603      	mov	r3, r0
 80058fa:	e000      	b.n	80058fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3728      	adds	r7, #40	@ 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40008000 	.word	0x40008000

0800590c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08a      	sub	sp, #40	@ 0x28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005920:	2b20      	cmp	r3, #32
 8005922:	d167      	bne.n	80059f4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_UART_Transmit_DMA+0x24>
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e060      	b.n	80059f6 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2221      	movs	r2, #33	@ 0x21
 8005956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d028      	beq.n	80059b4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005966:	4a26      	ldr	r2, [pc, #152]	@ (8005a00 <HAL_UART_Transmit_DMA+0xf4>)
 8005968:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800596e:	4a25      	ldr	r2, [pc, #148]	@ (8005a04 <HAL_UART_Transmit_DMA+0xf8>)
 8005970:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005976:	4a24      	ldr	r2, [pc, #144]	@ (8005a08 <HAL_UART_Transmit_DMA+0xfc>)
 8005978:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800597e:	2200      	movs	r2, #0
 8005980:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598a:	4619      	mov	r1, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3328      	adds	r3, #40	@ 0x28
 8005992:	461a      	mov	r2, r3
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	f7fd f965 	bl	8002c64 <HAL_DMA_Start_IT>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d009      	beq.n	80059b4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2210      	movs	r2, #16
 80059a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e020      	b.n	80059f6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2240      	movs	r2, #64	@ 0x40
 80059ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	613b      	str	r3, [r7, #16]
   return(result);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059dc:	623a      	str	r2, [r7, #32]
 80059de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	69f9      	ldr	r1, [r7, #28]
 80059e2:	6a3a      	ldr	r2, [r7, #32]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3728      	adds	r7, #40	@ 0x28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	08006c7f 	.word	0x08006c7f
 8005a04:	08006d19 	.word	0x08006d19
 8005a08:	08006d35 	.word	0x08006d35

08005a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b0ba      	sub	sp, #232	@ 0xe8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11b      	bne.n	8005a80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d015      	beq.n	8005a80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d009      	beq.n	8005a80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 82e3 	beq.w	800603c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
      }
      return;
 8005a7e:	e2dd      	b.n	800603c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8123 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc4 <HAL_UART_IRQHandler+0x2b8>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a9a:	4b8b      	ldr	r3, [pc, #556]	@ (8005cc8 <HAL_UART_IRQHandler+0x2bc>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8116 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <HAL_UART_IRQHandler+0xc8>
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00b      	beq.n	8005ad4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aca:	f043 0201 	orr.w	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d011      	beq.n	8005b04 <HAL_UART_IRQHandler+0xf8>
 8005ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2202      	movs	r2, #2
 8005af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afa:	f043 0204 	orr.w	r2, r3, #4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d011      	beq.n	8005b34 <HAL_UART_IRQHandler+0x128>
 8005b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2204      	movs	r2, #4
 8005b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2a:	f043 0202 	orr.w	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d017      	beq.n	8005b70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b50:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc4 <HAL_UART_IRQHandler+0x2b8>)
 8005b52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2208      	movs	r2, #8
 8005b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b66:	f043 0208 	orr.w	r2, r3, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d012      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x196>
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00c      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b98:	f043 0220 	orr.w	r2, r3, #32
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8249 	beq.w	8006040 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d013      	beq.n	8005be2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d105      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf6:	2b40      	cmp	r3, #64	@ 0x40
 8005bf8:	d005      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bfe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d054      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 ffd4 	bl	8006bb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c16:	2b40      	cmp	r3, #64	@ 0x40
 8005c18:	d146      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1d9      	bne.n	8005c1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d017      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c76:	4a15      	ldr	r2, [pc, #84]	@ (8005ccc <HAL_UART_IRQHandler+0x2c0>)
 8005c78:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fd f8cb 	bl	8002e1c <HAL_DMA_Abort_IT>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d019      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9e:	e00f      	b.n	8005cc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f9e0 	bl	8006066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca6:	e00b      	b.n	8005cc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f9dc 	bl	8006066 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cae:	e007      	b.n	8005cc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f9d8 	bl	8006066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005cbe:	e1bf      	b.n	8006040 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	bf00      	nop
    return;
 8005cc2:	e1bd      	b.n	8006040 <HAL_UART_IRQHandler+0x634>
 8005cc4:	10000001 	.word	0x10000001
 8005cc8:	04000120 	.word	0x04000120
 8005ccc:	08006db5 	.word	0x08006db5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 8153 	bne.w	8005f80 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 814c 	beq.w	8005f80 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8145 	beq.w	8005f80 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	f040 80bb 	bne.w	8005e84 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 818f 	beq.w	8006044 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d30:	429a      	cmp	r2, r3
 8005d32:	f080 8187 	bcs.w	8006044 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 8087 	bne.w	8005e62 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d82:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1da      	bne.n	8005d54 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e1      	bne.n	8005d9e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e3      	bne.n	8005dda <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e30:	f023 0310 	bic.w	r3, r3, #16
 8005e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e4      	bne.n	8005e20 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fc ff7f 	bl	8002d60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f8fb 	bl	8006078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e82:	e0df      	b.n	8006044 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80d1 	beq.w	8006048 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80cc 	beq.w	8006048 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ed4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e4      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005efc:	f023 0301 	bic.w	r3, r3, #1
 8005f00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e1      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0310 	bic.w	r3, r3, #16
 8005f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	69b9      	ldr	r1, [r7, #24]
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	617b      	str	r3, [r7, #20]
   return(result);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e4      	bne.n	8005f36 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f87d 	bl	8006078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f7e:	e063      	b.n	8006048 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00e      	beq.n	8005faa <HAL_UART_IRQHandler+0x59e>
 8005f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 fc64 	bl	8007870 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fa8:	e051      	b.n	800604e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d014      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d008      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d03a      	beq.n	800604c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
    }
    return;
 8005fde:	e035      	b.n	800604c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d009      	beq.n	8006000 <HAL_UART_IRQHandler+0x5f4>
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fef1 	bl	8006de0 <UART_EndTransmit_IT>
    return;
 8005ffe:	e026      	b.n	800604e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <HAL_UART_IRQHandler+0x614>
 800600c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006010:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fc3b 	bl	8007894 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800601e:	e016      	b.n	800604e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <HAL_UART_IRQHandler+0x642>
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006030:	2b00      	cmp	r3, #0
 8006032:	da0c      	bge.n	800604e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 fc24 	bl	8007882 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800603a:	e008      	b.n	800604e <HAL_UART_IRQHandler+0x642>
      return;
 800603c:	bf00      	nop
 800603e:	e006      	b.n	800604e <HAL_UART_IRQHandler+0x642>
    return;
 8006040:	bf00      	nop
 8006042:	e004      	b.n	800604e <HAL_UART_IRQHandler+0x642>
      return;
 8006044:	bf00      	nop
 8006046:	e002      	b.n	800604e <HAL_UART_IRQHandler+0x642>
      return;
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <HAL_UART_IRQHandler+0x642>
    return;
 800604c:	bf00      	nop
  }
}
 800604e:	37e8      	adds	r7, #232	@ 0xe8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr
	...

08006090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006094:	b08c      	sub	sp, #48	@ 0x30
 8006096:	af00      	add	r7, sp, #0
 8006098:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b94      	ldr	r3, [pc, #592]	@ (8006310 <UART_SetConfig+0x280>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a89      	ldr	r2, [pc, #548]	@ (8006314 <UART_SetConfig+0x284>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f8:	4313      	orrs	r3, r2
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006106:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006110:	430b      	orrs	r3, r1
 8006112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611a:	f023 010f 	bic.w	r1, r3, #15
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a7a      	ldr	r2, [pc, #488]	@ (8006318 <UART_SetConfig+0x288>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d127      	bne.n	8006184 <UART_SetConfig+0xf4>
 8006134:	2003      	movs	r0, #3
 8006136:	f7ff faa5 	bl	8005684 <LL_RCC_GetUSARTClockSource>
 800613a:	4603      	mov	r3, r0
 800613c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8006140:	2b03      	cmp	r3, #3
 8006142:	d81b      	bhi.n	800617c <UART_SetConfig+0xec>
 8006144:	a201      	add	r2, pc, #4	@ (adr r2, 800614c <UART_SetConfig+0xbc>)
 8006146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614a:	bf00      	nop
 800614c:	0800615d 	.word	0x0800615d
 8006150:	0800616d 	.word	0x0800616d
 8006154:	08006165 	.word	0x08006165
 8006158:	08006175 	.word	0x08006175
 800615c:	2301      	movs	r3, #1
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006162:	e080      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006164:	2302      	movs	r3, #2
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616a:	e07c      	b.n	8006266 <UART_SetConfig+0x1d6>
 800616c:	2304      	movs	r3, #4
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006172:	e078      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006174:	2308      	movs	r3, #8
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617a:	e074      	b.n	8006266 <UART_SetConfig+0x1d6>
 800617c:	2310      	movs	r3, #16
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006182:	e070      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a64      	ldr	r2, [pc, #400]	@ (800631c <UART_SetConfig+0x28c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d138      	bne.n	8006200 <UART_SetConfig+0x170>
 800618e:	200c      	movs	r0, #12
 8006190:	f7ff fa78 	bl	8005684 <LL_RCC_GetUSARTClockSource>
 8006194:	4603      	mov	r3, r0
 8006196:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d82c      	bhi.n	80061f8 <UART_SetConfig+0x168>
 800619e:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <UART_SetConfig+0x114>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061d9 	.word	0x080061d9
 80061a8:	080061f9 	.word	0x080061f9
 80061ac:	080061f9 	.word	0x080061f9
 80061b0:	080061f9 	.word	0x080061f9
 80061b4:	080061e9 	.word	0x080061e9
 80061b8:	080061f9 	.word	0x080061f9
 80061bc:	080061f9 	.word	0x080061f9
 80061c0:	080061f9 	.word	0x080061f9
 80061c4:	080061e1 	.word	0x080061e1
 80061c8:	080061f9 	.word	0x080061f9
 80061cc:	080061f9 	.word	0x080061f9
 80061d0:	080061f9 	.word	0x080061f9
 80061d4:	080061f1 	.word	0x080061f1
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061de:	e042      	b.n	8006266 <UART_SetConfig+0x1d6>
 80061e0:	2302      	movs	r3, #2
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e6:	e03e      	b.n	8006266 <UART_SetConfig+0x1d6>
 80061e8:	2304      	movs	r3, #4
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ee:	e03a      	b.n	8006266 <UART_SetConfig+0x1d6>
 80061f0:	2308      	movs	r3, #8
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f6:	e036      	b.n	8006266 <UART_SetConfig+0x1d6>
 80061f8:	2310      	movs	r3, #16
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fe:	e032      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a43      	ldr	r2, [pc, #268]	@ (8006314 <UART_SetConfig+0x284>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d12a      	bne.n	8006260 <UART_SetConfig+0x1d0>
 800620a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800620e:	f7ff fa4b 	bl	80056a8 <LL_RCC_GetLPUARTClockSource>
 8006212:	4603      	mov	r3, r0
 8006214:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006218:	d01a      	beq.n	8006250 <UART_SetConfig+0x1c0>
 800621a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800621e:	d81b      	bhi.n	8006258 <UART_SetConfig+0x1c8>
 8006220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006224:	d00c      	beq.n	8006240 <UART_SetConfig+0x1b0>
 8006226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800622a:	d815      	bhi.n	8006258 <UART_SetConfig+0x1c8>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <UART_SetConfig+0x1a8>
 8006230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006234:	d008      	beq.n	8006248 <UART_SetConfig+0x1b8>
 8006236:	e00f      	b.n	8006258 <UART_SetConfig+0x1c8>
 8006238:	2300      	movs	r3, #0
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623e:	e012      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006240:	2302      	movs	r3, #2
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006246:	e00e      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006248:	2304      	movs	r3, #4
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624e:	e00a      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006250:	2308      	movs	r3, #8
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006256:	e006      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006258:	2310      	movs	r3, #16
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e002      	b.n	8006266 <UART_SetConfig+0x1d6>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2a      	ldr	r2, [pc, #168]	@ (8006314 <UART_SetConfig+0x284>)
 800626c:	4293      	cmp	r3, r2
 800626e:	f040 80a4 	bne.w	80063ba <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006272:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006276:	2b08      	cmp	r3, #8
 8006278:	d823      	bhi.n	80062c2 <UART_SetConfig+0x232>
 800627a:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <UART_SetConfig+0x1f0>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062c3 	.word	0x080062c3
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062c3 	.word	0x080062c3
 8006290:	080062b3 	.word	0x080062b3
 8006294:	080062c3 	.word	0x080062c3
 8006298:	080062c3 	.word	0x080062c3
 800629c:	080062c3 	.word	0x080062c3
 80062a0:	080062bb 	.word	0x080062bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a4:	f7fe f9ec 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80062a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062aa:	e010      	b.n	80062ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006320 <UART_SetConfig+0x290>)
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062b0:	e00d      	b.n	80062ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b2:	f7fe f931 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80062b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062b8:	e009      	b.n	80062ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062c0:	e005      	b.n	80062ce <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8137 	beq.w	8006544 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	4a12      	ldr	r2, [pc, #72]	@ (8006324 <UART_SetConfig+0x294>)
 80062dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	4413      	add	r3, r2
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d305      	bcc.n	8006306 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	429a      	cmp	r2, r3
 8006304:	d910      	bls.n	8006328 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800630c:	e11a      	b.n	8006544 <UART_SetConfig+0x4b4>
 800630e:	bf00      	nop
 8006310:	cfff69f3 	.word	0xcfff69f3
 8006314:	40008000 	.word	0x40008000
 8006318:	40013800 	.word	0x40013800
 800631c:	40004400 	.word	0x40004400
 8006320:	00f42400 	.word	0x00f42400
 8006324:	0800ce08 	.word	0x0800ce08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	2200      	movs	r2, #0
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	60fa      	str	r2, [r7, #12]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006334:	4a8e      	ldr	r2, [pc, #568]	@ (8006570 <UART_SetConfig+0x4e0>)
 8006336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633a:	b29b      	uxth	r3, r3
 800633c:	2200      	movs	r2, #0
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800634a:	f7f9 ff1d 	bl	8000188 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4610      	mov	r0, r2
 8006354:	4619      	mov	r1, r3
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	020b      	lsls	r3, r1, #8
 8006360:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006364:	0202      	lsls	r2, r0, #8
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	6849      	ldr	r1, [r1, #4]
 800636a:	0849      	lsrs	r1, r1, #1
 800636c:	2000      	movs	r0, #0
 800636e:	460c      	mov	r4, r1
 8006370:	4605      	mov	r5, r0
 8006372:	eb12 0804 	adds.w	r8, r2, r4
 8006376:	eb43 0905 	adc.w	r9, r3, r5
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	469a      	mov	sl, r3
 8006382:	4693      	mov	fp, r2
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	4640      	mov	r0, r8
 800638a:	4649      	mov	r1, r9
 800638c:	f7f9 fefc 	bl	8000188 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4613      	mov	r3, r2
 8006396:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800639e:	d308      	bcc.n	80063b2 <UART_SetConfig+0x322>
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063a6:	d204      	bcs.n	80063b2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6a3a      	ldr	r2, [r7, #32]
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	e0c8      	b.n	8006544 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063b8:	e0c4      	b.n	8006544 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c2:	d167      	bne.n	8006494 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80063c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d828      	bhi.n	800641e <UART_SetConfig+0x38e>
 80063cc:	a201      	add	r2, pc, #4	@ (adr r2, 80063d4 <UART_SetConfig+0x344>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063f9 	.word	0x080063f9
 80063d8:	08006401 	.word	0x08006401
 80063dc:	08006409 	.word	0x08006409
 80063e0:	0800641f 	.word	0x0800641f
 80063e4:	0800640f 	.word	0x0800640f
 80063e8:	0800641f 	.word	0x0800641f
 80063ec:	0800641f 	.word	0x0800641f
 80063f0:	0800641f 	.word	0x0800641f
 80063f4:	08006417 	.word	0x08006417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f8:	f7fe f942 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80063fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063fe:	e014      	b.n	800642a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006400:	f7fe f950 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 8006404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006406:	e010      	b.n	800642a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006408:	4b5a      	ldr	r3, [pc, #360]	@ (8006574 <UART_SetConfig+0x4e4>)
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800640c:	e00d      	b.n	800642a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800640e:	f7fe f883 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8006412:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006414:	e009      	b.n	800642a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800641c:	e005      	b.n	800642a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8089 	beq.w	8006544 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006436:	4a4e      	ldr	r2, [pc, #312]	@ (8006570 <UART_SetConfig+0x4e0>)
 8006438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800643c:	461a      	mov	r2, r3
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	fbb3 f3f2 	udiv	r3, r3, r2
 8006444:	005a      	lsls	r2, r3, #1
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	441a      	add	r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	fbb2 f3f3 	udiv	r3, r2, r3
 8006456:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	2b0f      	cmp	r3, #15
 800645c:	d916      	bls.n	800648c <UART_SetConfig+0x3fc>
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006464:	d212      	bcs.n	800648c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f023 030f 	bic.w	r3, r3, #15
 800646e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	b29a      	uxth	r2, r3
 800647c:	8bfb      	ldrh	r3, [r7, #30]
 800647e:	4313      	orrs	r3, r2
 8006480:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	8bfa      	ldrh	r2, [r7, #30]
 8006488:	60da      	str	r2, [r3, #12]
 800648a:	e05b      	b.n	8006544 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006492:	e057      	b.n	8006544 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006494:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006498:	2b08      	cmp	r3, #8
 800649a:	d828      	bhi.n	80064ee <UART_SetConfig+0x45e>
 800649c:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <UART_SetConfig+0x414>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064d9 	.word	0x080064d9
 80064b0:	080064ef 	.word	0x080064ef
 80064b4:	080064df 	.word	0x080064df
 80064b8:	080064ef 	.word	0x080064ef
 80064bc:	080064ef 	.word	0x080064ef
 80064c0:	080064ef 	.word	0x080064ef
 80064c4:	080064e7 	.word	0x080064e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c8:	f7fe f8da 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80064cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064ce:	e014      	b.n	80064fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d0:	f7fe f8e8 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 80064d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064d6:	e010      	b.n	80064fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d8:	4b26      	ldr	r3, [pc, #152]	@ (8006574 <UART_SetConfig+0x4e4>)
 80064da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064dc:	e00d      	b.n	80064fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064de:	f7fe f81b 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80064e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064e4:	e009      	b.n	80064fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064ec:	e005      	b.n	80064fa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064f8:	bf00      	nop
    }

    if (pclk != 0U)
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d021      	beq.n	8006544 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	4a1a      	ldr	r2, [pc, #104]	@ (8006570 <UART_SetConfig+0x4e0>)
 8006506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800650a:	461a      	mov	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	441a      	add	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	d909      	bls.n	800653e <UART_SetConfig+0x4ae>
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006530:	d205      	bcs.n	800653e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	b29a      	uxth	r2, r3
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	e002      	b.n	8006544 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2201      	movs	r2, #1
 8006548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2201      	movs	r2, #1
 8006550:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2200      	movs	r2, #0
 8006558:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2200      	movs	r2, #0
 800655e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006560:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006564:	4618      	mov	r0, r3
 8006566:	3730      	adds	r7, #48	@ 0x30
 8006568:	46bd      	mov	sp, r7
 800656a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800656e:	bf00      	nop
 8006570:	0800ce08 	.word	0x0800ce08
 8006574:	00f42400 	.word	0x00f42400

08006578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01a      	beq.n	800668e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006676:	d10a      	bne.n	800668e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr

080066ba <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af02      	add	r7, sp, #8
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066ca:	f7fa faf1 	bl	8000cb0 <HAL_GetTick>
 80066ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d10e      	bne.n	80066fc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f832 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e028      	b.n	800674e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b04      	cmp	r3, #4
 8006708:	d10e      	bne.n	8006728 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800670a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f81c 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e012      	b.n	800674e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b09c      	sub	sp, #112	@ 0x70
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	4613      	mov	r3, r2
 8006764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006766:	e0af      	b.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	f000 80ab 	beq.w	80068c8 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006772:	f7fa fa9d 	bl	8000cb0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <UART_WaitOnFlagUntilTimeout+0x32>
 8006782:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006784:	2b00      	cmp	r3, #0
 8006786:	d140      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006798:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800679c:	667b      	str	r3, [r7, #100]	@ 0x64
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067a8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80067ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80067b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e6      	bne.n	8006788 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067da:	64ba      	str	r2, [r7, #72]	@ 0x48
 80067dc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80067e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e5      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e06f      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d057      	beq.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x172>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b80      	cmp	r3, #128	@ 0x80
 800681c:	d054      	beq.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x172>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b40      	cmp	r3, #64	@ 0x40
 8006822:	d051      	beq.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800682e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006832:	d149      	bne.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800683c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
 800685e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e6      	bne.n	800683e <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	613b      	str	r3, [r7, #16]
   return(result);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006890:	623a      	str	r2, [r7, #32]
 8006892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	69f9      	ldr	r1, [r7, #28]
 8006896:	6a3a      	ldr	r2, [r7, #32]
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	61bb      	str	r3, [r7, #24]
   return(result);
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e010      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4013      	ands	r3, r2
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	f43f af40 	beq.w	8006768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3770      	adds	r7, #112	@ 0x70
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b0a3      	sub	sp, #140	@ 0x8c
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	88fa      	ldrh	r2, [r7, #6]
 800690c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	88fa      	ldrh	r2, [r7, #6]
 8006914:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006926:	d10e      	bne.n	8006946 <UART_Start_Receive_IT+0x52>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d105      	bne.n	800693c <UART_Start_Receive_IT+0x48>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006936:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800693a:	e02d      	b.n	8006998 <UART_Start_Receive_IT+0xa4>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	22ff      	movs	r2, #255	@ 0xff
 8006940:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006944:	e028      	b.n	8006998 <UART_Start_Receive_IT+0xa4>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10d      	bne.n	800696a <UART_Start_Receive_IT+0x76>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <UART_Start_Receive_IT+0x6c>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	22ff      	movs	r2, #255	@ 0xff
 800695a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800695e:	e01b      	b.n	8006998 <UART_Start_Receive_IT+0xa4>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	227f      	movs	r2, #127	@ 0x7f
 8006964:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006968:	e016      	b.n	8006998 <UART_Start_Receive_IT+0xa4>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006972:	d10d      	bne.n	8006990 <UART_Start_Receive_IT+0x9c>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <UART_Start_Receive_IT+0x92>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	227f      	movs	r2, #127	@ 0x7f
 8006980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006984:	e008      	b.n	8006998 <UART_Start_Receive_IT+0xa4>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	223f      	movs	r2, #63	@ 0x3f
 800698a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800698e:	e003      	b.n	8006998 <UART_Start_Receive_IT+0xa4>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2222      	movs	r2, #34	@ 0x22
 80069a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3308      	adds	r3, #8
 80069ae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80069b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80069cc:	673a      	str	r2, [r7, #112]	@ 0x70
 80069ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80069d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80069da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e3      	bne.n	80069a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069e8:	d14f      	bne.n	8006a8a <UART_Start_Receive_IT+0x196>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069f0:	88fa      	ldrh	r2, [r7, #6]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d349      	bcc.n	8006a8a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069fe:	d107      	bne.n	8006a10 <UART_Start_Receive_IT+0x11c>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d103      	bne.n	8006a10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a46      	ldr	r2, [pc, #280]	@ (8006b24 <UART_Start_Receive_IT+0x230>)
 8006a0c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a0e:	e002      	b.n	8006a16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4a45      	ldr	r2, [pc, #276]	@ (8006b28 <UART_Start_Receive_IT+0x234>)
 8006a14:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01a      	beq.n	8006a54 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a42:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e4      	bne.n	8006a1e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a74:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006a76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e5      	bne.n	8006a54 <UART_Start_Receive_IT+0x160>
 8006a88:	e046      	b.n	8006b18 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a92:	d107      	bne.n	8006aa4 <UART_Start_Receive_IT+0x1b0>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d103      	bne.n	8006aa4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4a23      	ldr	r2, [pc, #140]	@ (8006b2c <UART_Start_Receive_IT+0x238>)
 8006aa0:	675a      	str	r2, [r3, #116]	@ 0x74
 8006aa2:	e002      	b.n	8006aaa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a22      	ldr	r2, [pc, #136]	@ (8006b30 <UART_Start_Receive_IT+0x23c>)
 8006aa8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d019      	beq.n	8006ae6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006ac6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ad6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_Start_Receive_IT+0x1be>
 8006ae4:	e018      	b.n	8006b18 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	613b      	str	r3, [r7, #16]
   return(result);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f043 0320 	orr.w	r3, r3, #32
 8006afa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b04:	623b      	str	r3, [r7, #32]
 8006b06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	69f9      	ldr	r1, [r7, #28]
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e6      	bne.n	8006ae6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	378c      	adds	r7, #140	@ 0x8c
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr
 8006b24:	08007509 	.word	0x08007509
 8006b28:	080071a9 	.word	0x080071a9
 8006b2c:	08006ff1 	.word	0x08006ff1
 8006b30:	08006e39 	.word	0x08006e39

08006b34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b08f      	sub	sp, #60	@ 0x3c
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b5c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e6      	bne.n	8006b3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8e:	61ba      	str	r2, [r7, #24]
 8006b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6979      	ldr	r1, [r7, #20]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e5      	bne.n	8006b6e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006baa:	bf00      	nop
 8006bac:	373c      	adds	r7, #60	@ 0x3c
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr

08006bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b095      	sub	sp, #84	@ 0x54
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006be0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e3      	bne.n	8006bee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d118      	bne.n	8006c60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f023 0310 	bic.w	r3, r3, #16
 8006c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6979      	ldr	r1, [r7, #20]
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e6      	bne.n	8006c2e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c74:	bf00      	nop
 8006c76:	3754      	adds	r7, #84	@ 0x54
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b090      	sub	sp, #64	@ 0x40
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d137      	bne.n	8006d0a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e5      	bne.n	8006ca2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	617b      	str	r3, [r7, #20]
   return(result);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d08:	e002      	b.n	8006d10 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d0a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006d0c:	f7fa fbec 	bl	80014e8 <HAL_UART_TxCpltCallback>
}
 8006d10:	bf00      	nop
 8006d12:	3740      	adds	r7, #64	@ 0x40
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d24:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f7ff f994 	bl	8006054 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d40:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d48:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5c:	2b80      	cmp	r3, #128	@ 0x80
 8006d5e:	d109      	bne.n	8006d74 <UART_DMAError+0x40>
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b21      	cmp	r3, #33	@ 0x21
 8006d64:	d106      	bne.n	8006d74 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006d6e:	6978      	ldr	r0, [r7, #20]
 8006d70:	f7ff fee0 	bl	8006b34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7e:	2b40      	cmp	r3, #64	@ 0x40
 8006d80:	d109      	bne.n	8006d96 <UART_DMAError+0x62>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b22      	cmp	r3, #34	@ 0x22
 8006d86:	d106      	bne.n	8006d96 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006d90:	6978      	ldr	r0, [r7, #20]
 8006d92:	f7ff ff0f 	bl	8006bb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9c:	f043 0210 	orr.w	r2, r3, #16
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006da6:	6978      	ldr	r0, [r7, #20]
 8006da8:	f7ff f95d 	bl	8006066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dac:	bf00      	nop
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff f947 	bl	8006066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6979      	ldr	r1, [r7, #20]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	613b      	str	r3, [r7, #16]
   return(result);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e6      	bne.n	8006de8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fa fb5d 	bl	80014e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2e:	bf00      	nop
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b09c      	sub	sp, #112	@ 0x70
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e50:	2b22      	cmp	r3, #34	@ 0x22
 8006e52:	f040 80be 	bne.w	8006fd2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e64:	b2d9      	uxtb	r1, r3
 8006e66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e70:	400a      	ands	r2, r1
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f040 80a1 	bne.w	8006fe2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ec0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ec4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e6      	bne.n	8006ea0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ef4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ef8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a33      	ldr	r2, [pc, #204]	@ (8006fec <UART_RxISR_8BIT+0x1b4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d01f      	beq.n	8006f64 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d018      	beq.n	8006f64 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d12e      	bne.n	8006fca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	e853 3f00 	ldrex	r3, [r3]
 8006f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0310 	bic.w	r3, r3, #16
 8006f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	69b9      	ldr	r1, [r7, #24]
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e6      	bne.n	8006f72 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d103      	bne.n	8006fba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff f858 	bl	8006078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fc8:	e00b      	b.n	8006fe2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fa faa2 	bl	8001514 <HAL_UART_RxCpltCallback>
}
 8006fd0:	e007      	b.n	8006fe2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699a      	ldr	r2, [r3, #24]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0208 	orr.w	r2, r2, #8
 8006fe0:	619a      	str	r2, [r3, #24]
}
 8006fe2:	bf00      	nop
 8006fe4:	3770      	adds	r7, #112	@ 0x70
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40008000 	.word	0x40008000

08006ff0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b09c      	sub	sp, #112	@ 0x70
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ffe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007008:	2b22      	cmp	r3, #34	@ 0x22
 800700a:	f040 80be 	bne.w	800718a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007014:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800701e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007022:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007026:	4013      	ands	r3, r2
 8007028:	b29a      	uxth	r2, r3
 800702a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800702c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007032:	1c9a      	adds	r2, r3, #2
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 80a1 	bne.w	800719a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800706c:	667b      	str	r3, [r7, #100]	@ 0x64
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007076:	657b      	str	r3, [r7, #84]	@ 0x54
 8007078:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800707c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e6      	bne.n	8007058 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3308      	adds	r3, #8
 8007090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80070ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e5      	bne.n	800708a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a33      	ldr	r2, [pc, #204]	@ (80071a4 <UART_RxISR_16BIT+0x1b4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d01f      	beq.n	800711c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d018      	beq.n	800711c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800710a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800710e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e6      	bne.n	80070ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d12e      	bne.n	8007182 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	60bb      	str	r3, [r7, #8]
   return(result);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f023 0310 	bic.w	r3, r3, #16
 800713e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	613b      	str	r3, [r7, #16]
   return(result);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e6      	bne.n	800712a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b10      	cmp	r3, #16
 8007168:	d103      	bne.n	8007172 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2210      	movs	r2, #16
 8007170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fe ff7c 	bl	8006078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007180:	e00b      	b.n	800719a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fa f9c6 	bl	8001514 <HAL_UART_RxCpltCallback>
}
 8007188:	e007      	b.n	800719a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0208 	orr.w	r2, r2, #8
 8007198:	619a      	str	r2, [r3, #24]
}
 800719a:	bf00      	nop
 800719c:	3770      	adds	r7, #112	@ 0x70
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40008000 	.word	0x40008000

080071a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b0ac      	sub	sp, #176	@ 0xb0
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071de:	2b22      	cmp	r3, #34	@ 0x22
 80071e0:	f040 8182 	bne.w	80074e8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071ee:	e125      	b.n	800743c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80071fe:	b2d9      	uxtb	r1, r3
 8007200:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007204:	b2da      	uxtb	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720a:	400a      	ands	r2, r1
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	2b00      	cmp	r3, #0
 8007240:	d053      	beq.n	80072ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d011      	beq.n	8007272 <UART_RxISR_8BIT_FIFOEN+0xca>
 800724e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2201      	movs	r2, #1
 8007260:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007268:	f043 0201 	orr.w	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d011      	beq.n	80072a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800727e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2202      	movs	r2, #2
 8007290:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007298:	f043 0204 	orr.w	r2, r3, #4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d011      	beq.n	80072d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80072ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2204      	movs	r2, #4
 80072c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c8:	f043 0202 	orr.w	r2, r3, #2
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d006      	beq.n	80072ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7fe fec2 	bl	8006066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 80a2 	bne.w	800743c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800730c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800731a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800731c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007320:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e4      	bne.n	80072f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800733e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007356:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007358:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800735c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007364:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e1      	bne.n	800732e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a5f      	ldr	r2, [pc, #380]	@ (8007500 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d021      	beq.n	80073cc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d01a      	beq.n	80073cc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80073b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80073ba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e4      	bne.n	8007396 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d130      	bne.n	8007436 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	f023 0310 	bic.w	r3, r3, #16
 80073ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80073fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e4      	bne.n	80073da <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b10      	cmp	r3, #16
 800741c:	d103      	bne.n	8007426 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2210      	movs	r2, #16
 8007424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fe fe22 	bl	8006078 <HAL_UARTEx_RxEventCallback>
 8007434:	e002      	b.n	800743c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fa f86c 	bl	8001514 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800743c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007440:	2b00      	cmp	r3, #0
 8007442:	d006      	beq.n	8007452 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b00      	cmp	r3, #0
 800744e:	f47f aecf 	bne.w	80071f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007458:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800745c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007460:	2b00      	cmp	r3, #0
 8007462:	d049      	beq.n	80074f8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800746a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800746e:	429a      	cmp	r2, r3
 8007470:	d242      	bcs.n	80074f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	61fb      	str	r3, [r7, #28]
   return(result);
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007496:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007498:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800749c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e3      	bne.n	8007472 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a15      	ldr	r2, [pc, #84]	@ (8007504 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80074ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f043 0320 	orr.w	r3, r3, #32
 80074c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6979      	ldr	r1, [r7, #20]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	613b      	str	r3, [r7, #16]
   return(result);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e4      	bne.n	80074b0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e6:	e007      	b.n	80074f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699a      	ldr	r2, [r3, #24]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0208 	orr.w	r2, r2, #8
 80074f6:	619a      	str	r2, [r3, #24]
}
 80074f8:	bf00      	nop
 80074fa:	37b0      	adds	r7, #176	@ 0xb0
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	40008000 	.word	0x40008000
 8007504:	08006e39 	.word	0x08006e39

08007508 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b0ae      	sub	sp, #184	@ 0xb8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007516:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800753e:	2b22      	cmp	r3, #34	@ 0x22
 8007540:	f040 8186 	bne.w	8007850 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800754a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800754e:	e129      	b.n	80077a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007556:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007562:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007566:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800756a:	4013      	ands	r3, r2
 800756c:	b29a      	uxth	r2, r3
 800756e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007572:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007578:	1c9a      	adds	r2, r3, #2
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800759a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d053      	beq.n	800764e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d011      	beq.n	80075d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80075b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075cc:	f043 0201 	orr.w	r2, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d011      	beq.n	8007606 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80075e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2202      	movs	r2, #2
 80075f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fc:	f043 0204 	orr.w	r2, r3, #4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	d011      	beq.n	8007636 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007612:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2204      	movs	r2, #4
 8007624:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762c:	f043 0202 	orr.w	r2, r3, #2
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800763c:	2b00      	cmp	r3, #0
 800763e:	d006      	beq.n	800764e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7fe fd10 	bl	8006066 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 80a4 	bne.w	80077a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800766a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800766c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800767e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007682:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007686:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007690:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e2      	bne.n	800765c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ac:	f023 0301 	bic.w	r3, r3, #1
 80076b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3308      	adds	r3, #8
 80076ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80076be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e1      	bne.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a5f      	ldr	r2, [pc, #380]	@ (8007868 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d021      	beq.n	8007734 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01a      	beq.n	8007734 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800770c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800770e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007712:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007722:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800772e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e4      	bne.n	80076fe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d130      	bne.n	800779e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007752:	f023 0310 	bic.w	r3, r3, #16
 8007756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007764:	647b      	str	r3, [r7, #68]	@ 0x44
 8007766:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800776a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e4      	bne.n	8007742 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b10      	cmp	r3, #16
 8007784:	d103      	bne.n	800778e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fe fc6e 	bl	8006078 <HAL_UARTEx_RxEventCallback>
 800779c:	e002      	b.n	80077a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7f9 feb8 	bl	8001514 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d006      	beq.n	80077ba <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80077ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f47f aecb 	bne.w	8007550 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077c0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d049      	beq.n	8007860 <UART_RxISR_16BIT_FIFOEN+0x358>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d242      	bcs.n	8007860 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80077fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007800:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e3      	bne.n	80077da <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a15      	ldr	r2, [pc, #84]	@ (800786c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007816:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	60fb      	str	r3, [r7, #12]
   return(result);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f043 0320 	orr.w	r3, r3, #32
 800782c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	69b9      	ldr	r1, [r7, #24]
 8007840:	69fa      	ldr	r2, [r7, #28]
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	617b      	str	r3, [r7, #20]
   return(result);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e4      	bne.n	8007818 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800784e:	e007      	b.n	8007860 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0208 	orr.w	r2, r2, #8
 800785e:	619a      	str	r2, [r3, #24]
}
 8007860:	bf00      	nop
 8007862:	37b8      	adds	r7, #184	@ 0xb8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40008000 	.word	0x40008000
 800786c:	08006ff1 	.word	0x08006ff1

08007870 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	bc80      	pop	{r7}
 8007880:	4770      	bx	lr

08007882 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr

080078a6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b088      	sub	sp, #32
 80078aa:	af02      	add	r7, sp, #8
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	1d3b      	adds	r3, r7, #4
 80078b0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e046      	b.n	8007954 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2224      	movs	r2, #36	@ 0x24
 80078d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0201 	bic.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d105      	bne.n	800790c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007900:	1d3b      	adds	r3, r7, #4
 8007902:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f911 	bl	8007b2e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0201 	orr.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800791c:	f7f9 f9c8 	bl	8000cb0 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007922:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2200      	movs	r2, #0
 800792c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7fe ff10 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	75fb      	strb	r3, [r7, #23]
 8007940:	e003      	b.n	800794a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8007952:	7dfb      	ldrb	r3, [r7, #23]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b089      	sub	sp, #36	@ 0x24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_UARTEx_EnableStopMode+0x16>
 800796e:	2302      	movs	r3, #2
 8007970:	e021      	b.n	80079b6 <HAL_UARTEx_EnableStopMode+0x5a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	60bb      	str	r3, [r7, #8]
   return(result);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f043 0302 	orr.w	r3, r3, #2
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6979      	ldr	r1, [r7, #20]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	613b      	str	r3, [r7, #16]
   return(result);
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3724      	adds	r7, #36	@ 0x24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_UARTEx_EnableFifoMode+0x16>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e02b      	b.n	8007a2e <HAL_UARTEx_EnableFifoMode+0x6e>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2224      	movs	r2, #36	@ 0x24
 80079e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007a0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f8ac 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e02d      	b.n	8007aaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2224      	movs	r2, #36	@ 0x24
 8007a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0201 	bic.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f872 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e02d      	b.n	8007b26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2224      	movs	r2, #36	@ 0x24
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f834 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	1d3b      	adds	r3, r7, #4
 8007b38:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f023 0210 	bic.w	r2, r3, #16
 8007b46:	893b      	ldrh	r3, [r7, #8]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8007b5c:	7abb      	ldrb	r3, [r7, #10]
 8007b5e:	061a      	lsls	r2, r3, #24
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc80      	pop	{r7}
 8007b70:	4770      	bx	lr
	...

08007b74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d108      	bne.n	8007b96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b94:	e031      	b.n	8007bfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b96:	2308      	movs	r3, #8
 8007b98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	0e5b      	lsrs	r3, r3, #25
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	0f5b      	lsrs	r3, r3, #29
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	7b3a      	ldrb	r2, [r7, #12]
 8007bc2:	4910      	ldr	r1, [pc, #64]	@ (8007c04 <UARTEx_SetNbDataToProcess+0x90>)
 8007bc4:	5c8a      	ldrb	r2, [r1, r2]
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bca:	7b3a      	ldrb	r2, [r7, #12]
 8007bcc:	490e      	ldr	r1, [pc, #56]	@ (8007c08 <UARTEx_SetNbDataToProcess+0x94>)
 8007bce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	7b7a      	ldrb	r2, [r7, #13]
 8007be0:	4908      	ldr	r1, [pc, #32]	@ (8007c04 <UARTEx_SetNbDataToProcess+0x90>)
 8007be2:	5c8a      	ldrb	r2, [r1, r2]
 8007be4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007be8:	7b7a      	ldrb	r2, [r7, #13]
 8007bea:	4907      	ldr	r1, [pc, #28]	@ (8007c08 <UARTEx_SetNbDataToProcess+0x94>)
 8007bec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr
 8007c04:	0800ce20 	.word	0x0800ce20
 8007c08:	0800ce28 	.word	0x0800ce28

08007c0c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	619a      	str	r2, [r3, #24]
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr

08007c26 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr

08007c40 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007c48:	4a24      	ldr	r2, [pc, #144]	@ (8007cdc <RadioInit+0x9c>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007c4e:	4b24      	ldr	r3, [pc, #144]	@ (8007ce0 <RadioInit+0xa0>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007c54:	4b22      	ldr	r3, [pc, #136]	@ (8007ce0 <RadioInit+0xa0>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007c5a:	4b21      	ldr	r3, [pc, #132]	@ (8007ce0 <RadioInit+0xa0>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007c60:	4b1f      	ldr	r3, [pc, #124]	@ (8007ce0 <RadioInit+0xa0>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007c66:	481f      	ldr	r0, [pc, #124]	@ (8007ce4 <RadioInit+0xa4>)
 8007c68:	f001 ffbc 	bl	8009be4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce0 <RadioInit+0xa0>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007c72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce0 <RadioInit+0xa0>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007c78:	f002 fa50 	bl	800a11c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	2000      	movs	r0, #0
 8007c80:	f002 fe1c 	bl	800a8bc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007c84:	2204      	movs	r2, #4
 8007c86:	2100      	movs	r1, #0
 8007c88:	2001      	movs	r0, #1
 8007c8a:	f002 fbd9 	bl	800a440 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007c8e:	2300      	movs	r3, #0
 8007c90:	2200      	movs	r2, #0
 8007c92:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007c96:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007c9a:	f002 fb09 	bl	800a2b0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007c9e:	f000 fe97 	bl	80089d0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	4b10      	ldr	r3, [pc, #64]	@ (8007ce8 <RadioInit+0xa8>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f04f 31ff 	mov.w	r1, #4294967295
 8007cae:	480f      	ldr	r0, [pc, #60]	@ (8007cec <RadioInit+0xac>)
 8007cb0:	f004 f9da 	bl	800c068 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <RadioInit+0xb0>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8007cc0:	480c      	ldr	r0, [pc, #48]	@ (8007cf4 <RadioInit+0xb4>)
 8007cc2:	f004 f9d1 	bl	800c068 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007cc6:	4809      	ldr	r0, [pc, #36]	@ (8007cec <RadioInit+0xac>)
 8007cc8:	f004 fa72 	bl	800c1b0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007ccc:	4809      	ldr	r0, [pc, #36]	@ (8007cf4 <RadioInit+0xb4>)
 8007cce:	f004 fa6f 	bl	800c1b0 <UTIL_TIMER_Stop>
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000388 	.word	0x20000388
 8007ce0:	2000038c 	.word	0x2000038c
 8007ce4:	08008df5 	.word	0x08008df5
 8007ce8:	08008d65 	.word	0x08008d65
 8007cec:	200003e8 	.word	0x200003e8
 8007cf0:	08008d79 	.word	0x08008d79
 8007cf4:	20000400 	.word	0x20000400

08007cf8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007cfc:	f001 ffba 	bl	8009c74 <SUBGRF_GetOperatingMode>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b07      	cmp	r3, #7
 8007d04:	d00a      	beq.n	8007d1c <RadioGetStatus+0x24>
 8007d06:	2b07      	cmp	r3, #7
 8007d08:	dc0a      	bgt.n	8007d20 <RadioGetStatus+0x28>
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d002      	beq.n	8007d14 <RadioGetStatus+0x1c>
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d002      	beq.n	8007d18 <RadioGetStatus+0x20>
 8007d12:	e005      	b.n	8007d20 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007d14:	2302      	movs	r3, #2
 8007d16:	e004      	b.n	8007d22 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e002      	b.n	8007d22 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e000      	b.n	8007d22 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007d20:	2300      	movs	r3, #0
    }
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007d32:	4a2a      	ldr	r2, [pc, #168]	@ (8007ddc <RadioSetModem+0xb4>)
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f003 f9ab 	bl	800b096 <RFW_SetRadioModem>
    switch( modem )
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d80e      	bhi.n	8007d64 <RadioSetModem+0x3c>
 8007d46:	a201      	add	r2, pc, #4	@ (adr r2, 8007d4c <RadioSetModem+0x24>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d73 	.word	0x08007d73
 8007d50:	08007d81 	.word	0x08007d81
 8007d54:	08007d65 	.word	0x08007d65
 8007d58:	08007da7 	.word	0x08007da7
 8007d5c:	08007db5 	.word	0x08007db5
 8007d60:	08007dc3 	.word	0x08007dc3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007d64:	2003      	movs	r0, #3
 8007d66:	f002 fb45 	bl	800a3f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8007ddc <RadioSetModem+0xb4>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	735a      	strb	r2, [r3, #13]
        break;
 8007d70:	e02f      	b.n	8007dd2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007d72:	2000      	movs	r0, #0
 8007d74:	f002 fb3e 	bl	800a3f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007d78:	4b18      	ldr	r3, [pc, #96]	@ (8007ddc <RadioSetModem+0xb4>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	735a      	strb	r2, [r3, #13]
        break;
 8007d7e:	e028      	b.n	8007dd2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007d80:	2001      	movs	r0, #1
 8007d82:	f002 fb37 	bl	800a3f4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007d86:	4b15      	ldr	r3, [pc, #84]	@ (8007ddc <RadioSetModem+0xb4>)
 8007d88:	7b5a      	ldrb	r2, [r3, #13]
 8007d8a:	4b14      	ldr	r3, [pc, #80]	@ (8007ddc <RadioSetModem+0xb4>)
 8007d8c:	7b1b      	ldrb	r3, [r3, #12]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d01e      	beq.n	8007dd0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8007d92:	4b12      	ldr	r3, [pc, #72]	@ (8007ddc <RadioSetModem+0xb4>)
 8007d94:	7b1a      	ldrb	r2, [r3, #12]
 8007d96:	4b11      	ldr	r3, [pc, #68]	@ (8007ddc <RadioSetModem+0xb4>)
 8007d98:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007d9a:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <RadioSetModem+0xb4>)
 8007d9c:	7b5b      	ldrb	r3, [r3, #13]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 ffaa 	bl	8008cf8 <RadioSetPublicNetwork>
        }
        break;
 8007da4:	e014      	b.n	8007dd0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007da6:	2002      	movs	r0, #2
 8007da8:	f002 fb24 	bl	800a3f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <RadioSetModem+0xb4>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	735a      	strb	r2, [r3, #13]
        break;
 8007db2:	e00e      	b.n	8007dd2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007db4:	2002      	movs	r0, #2
 8007db6:	f002 fb1d 	bl	800a3f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007dba:	4b08      	ldr	r3, [pc, #32]	@ (8007ddc <RadioSetModem+0xb4>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	735a      	strb	r2, [r3, #13]
        break;
 8007dc0:	e007      	b.n	8007dd2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	f002 fb16 	bl	800a3f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007dc8:	4b04      	ldr	r3, [pc, #16]	@ (8007ddc <RadioSetModem+0xb4>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	735a      	strb	r2, [r3, #13]
        break;
 8007dce:	e000      	b.n	8007dd2 <RadioSetModem+0xaa>
        break;
 8007dd0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	2000038c 	.word	0x2000038c

08007de0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f002 fabd 	bl	800a368 <SUBGRF_SetRfFrequency>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b090      	sub	sp, #64	@ 0x40
 8007dfa:	af0a      	add	r7, sp, #40	@ 0x28
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	603b      	str	r3, [r7, #0]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007e06:	2301      	movs	r3, #1
 8007e08:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8007e12:	f000 fdf0 	bl	80089f6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007e16:	2000      	movs	r0, #0
 8007e18:	f7ff ff86 	bl	8007d28 <RadioSetModem>

    RadioSetChannel( freq );
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff ffdf 	bl	8007de0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007e22:	2301      	movs	r3, #1
 8007e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e26:	2300      	movs	r3, #0
 8007e28:	9308      	str	r3, [sp, #32]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9306      	str	r3, [sp, #24]
 8007e32:	2300      	movs	r3, #0
 8007e34:	9305      	str	r3, [sp, #20]
 8007e36:	2300      	movs	r3, #0
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9302      	str	r3, [sp, #8]
 8007e42:	2303      	movs	r3, #3
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	2000      	movs	r0, #0
 8007e54:	f000 f83c 	bl	8007ed0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f000 fdd3 	bl	8008a04 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007e5e:	f000 ff79 	bl	8008d54 <RadioGetWakeupTime>
 8007e62:	4603      	mov	r3, r0
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7f8 ff37 	bl	8000cd8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007e6a:	f004 fa3b 	bl	800c2e4 <UTIL_TIMER_GetCurrentTime>
 8007e6e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007e70:	e00d      	b.n	8007e8e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007e72:	2000      	movs	r0, #0
 8007e74:	f000 fec0 	bl	8008bf8 <RadioRssi>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007e7c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	dd02      	ble.n	8007e8e <RadioIsChannelFree+0x98>
        {
            status = false;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8007e8c:	e006      	b.n	8007e9c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007e8e:	6938      	ldr	r0, [r7, #16]
 8007e90:	f004 fa3a 	bl	800c308 <UTIL_TIMER_GetElapsedTime>
 8007e94:	4602      	mov	r2, r0
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d8ea      	bhi.n	8007e72 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007e9c:	f000 fdab 	bl	80089f6 <RadioStandby>

    return status;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2100      	movs	r1, #0
 8007eba:	2000      	movs	r0, #0
 8007ebc:	f002 f9f8 	bl	800a2b0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007ec0:	f001 ffa9 	bl	8009e16 <SUBGRF_GetRandom>
 8007ec4:	6078      	str	r0, [r7, #4]

    return rnd;
 8007ec6:	687b      	ldr	r3, [r7, #4]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08a      	sub	sp, #40	@ 0x28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	461a      	mov	r2, r3
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007ee4:	4ab9      	ldr	r2, [pc, #740]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007ee6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007eea:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007eec:	f003 f891 	bl	800b012 <RFW_DeInit>
    if( rxContinuous == true )
 8007ef0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8007efc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d004      	beq.n	8007f0e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007f04:	4ab2      	ldr	r2, [pc, #712]	@ (80081d0 <RadioSetRxConfig+0x300>)
 8007f06:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007f0a:	7013      	strb	r3, [r2, #0]
 8007f0c:	e002      	b.n	8007f14 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007f0e:	4bb0      	ldr	r3, [pc, #704]	@ (80081d0 <RadioSetRxConfig+0x300>)
 8007f10:	22ff      	movs	r2, #255	@ 0xff
 8007f12:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d009      	beq.n	8007f2e <RadioSetRxConfig+0x5e>
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	f300 81d7 	bgt.w	80082ce <RadioSetRxConfig+0x3fe>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80bf 	beq.w	80080a4 <RadioSetRxConfig+0x1d4>
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	f000 8124 	beq.w	8008174 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007f2c:	e1cf      	b.n	80082ce <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007f2e:	2001      	movs	r0, #1
 8007f30:	f002 f8b6 	bl	800a0a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007f34:	4ba5      	ldr	r3, [pc, #660]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007f3c:	4aa3      	ldr	r2, [pc, #652]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007f42:	4ba2      	ldr	r3, [pc, #648]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f44:	2209      	movs	r2, #9
 8007f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007f4a:	4ba0      	ldr	r3, [pc, #640]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f4c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8007f50:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007f52:	68b8      	ldr	r0, [r7, #8]
 8007f54:	f002 ff90 	bl	800ae78 <SUBGRF_GetFskBandwidthRegValue>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	4b9b      	ldr	r3, [pc, #620]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007f62:	4b9a      	ldr	r3, [pc, #616]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007f68:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	4b97      	ldr	r3, [pc, #604]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f70:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007f72:	4b96      	ldr	r3, [pc, #600]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007f78:	4b94      	ldr	r3, [pc, #592]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007f7e:	4b93      	ldr	r3, [pc, #588]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007f84:	4b91      	ldr	r3, [pc, #580]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007f8a:	4b91      	ldr	r3, [pc, #580]	@ (80081d0 <RadioSetRxConfig+0x300>)
 8007f8c:	781a      	ldrb	r2, [r3, #0]
 8007f8e:	4b8f      	ldr	r3, [pc, #572]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f90:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007f92:	4b8e      	ldr	r3, [pc, #568]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007f98:	4b8c      	ldr	r3, [pc, #560]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007f9e:	2005      	movs	r0, #5
 8007fa0:	f7ff fec2 	bl	8007d28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007fa4:	488b      	ldr	r0, [pc, #556]	@ (80081d4 <RadioSetRxConfig+0x304>)
 8007fa6:	f002 fb19 	bl	800a5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007faa:	488b      	ldr	r0, [pc, #556]	@ (80081d8 <RadioSetRxConfig+0x308>)
 8007fac:	f002 fbe8 	bl	800a780 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007fb0:	4a8a      	ldr	r2, [pc, #552]	@ (80081dc <RadioSetRxConfig+0x30c>)
 8007fb2:	f107 031c 	add.w	r3, r7, #28
 8007fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fba:	e883 0003 	stmia.w	r3, {r0, r1}
 8007fbe:	f107 031c 	add.w	r3, r7, #28
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 fea5 	bl	8009d12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007fc8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007fcc:	f001 fef0 	bl	8009db0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007fd0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8007fd4:	f000 fe2e 	bl	8008c34 <RadioRead>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fe2:	f023 0310 	bic.w	r3, r3, #16
 8007fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fee:	4619      	mov	r1, r3
 8007ff0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8007ff4:	f000 fe0c 	bl	8008c10 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007ff8:	2104      	movs	r1, #4
 8007ffa:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8007ffe:	f000 fe07 	bl	8008c10 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008002:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008006:	f000 fe15 	bl	8008c34 <RadioRead>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008014:	f023 031c 	bic.w	r3, r3, #28
 8008018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800801c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008020:	f043 0308 	orr.w	r3, r3, #8
 8008024:	b2db      	uxtb	r3, r3
 8008026:	4619      	mov	r1, r3
 8008028:	f640 009b 	movw	r0, #2203	@ 0x89b
 800802c:	f000 fdf0 	bl	8008c10 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008030:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008034:	f000 fdfe 	bl	8008c34 <RadioRead>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800803e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008042:	f023 0318 	bic.w	r3, r3, #24
 8008046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800804a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800804e:	f043 0318 	orr.w	r3, r3, #24
 8008052:	b2db      	uxtb	r3, r3
 8008054:	4619      	mov	r1, r3
 8008056:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800805a:	f000 fdd9 	bl	8008c10 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800805e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008062:	f000 fde7 	bl	8008c34 <RadioRead>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800806c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8008078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800807c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8008080:	b2db      	uxtb	r3, r3
 8008082:	4619      	mov	r1, r3
 8008084:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008088:	f000 fdc2 	bl	8008c10 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800808c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800808e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	fbb2 f3f3 	udiv	r3, r2, r3
 800809e:	4a4b      	ldr	r2, [pc, #300]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080a0:	6093      	str	r3, [r2, #8]
            break;
 80080a2:	e115      	b.n	80082d0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80080a4:	2000      	movs	r0, #0
 80080a6:	f001 fffb 	bl	800a0a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80080aa:	4b48      	ldr	r3, [pc, #288]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80080b2:	4a46      	ldr	r2, [pc, #280]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80080b8:	4b44      	ldr	r3, [pc, #272]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080ba:	220b      	movs	r2, #11
 80080bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80080c0:	68b8      	ldr	r0, [r7, #8]
 80080c2:	f002 fed9 	bl	800ae78 <SUBGRF_GetFskBandwidthRegValue>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	4b40      	ldr	r3, [pc, #256]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80080d0:	4b3e      	ldr	r3, [pc, #248]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80080d6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	b29a      	uxth	r2, r3
 80080dc:	4b3b      	ldr	r3, [pc, #236]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080de:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80080e0:	4b3a      	ldr	r3, [pc, #232]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080e2:	2204      	movs	r2, #4
 80080e4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80080e6:	4b39      	ldr	r3, [pc, #228]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080e8:	2218      	movs	r2, #24
 80080ea:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80080ec:	4b37      	ldr	r3, [pc, #220]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80080f2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80080f6:	f083 0301 	eor.w	r3, r3, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	4b33      	ldr	r3, [pc, #204]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8008100:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008102:	4b33      	ldr	r3, [pc, #204]	@ (80081d0 <RadioSetRxConfig+0x300>)
 8008104:	781a      	ldrb	r2, [r3, #0]
 8008106:	4b31      	ldr	r3, [pc, #196]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8008108:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800810a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008112:	4b2e      	ldr	r3, [pc, #184]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8008114:	22f2      	movs	r2, #242	@ 0xf2
 8008116:	75da      	strb	r2, [r3, #23]
 8008118:	e002      	b.n	8008120 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800811a:	4b2c      	ldr	r3, [pc, #176]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 800811c:	2201      	movs	r2, #1
 800811e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008120:	4b2a      	ldr	r3, [pc, #168]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8008122:	2201      	movs	r2, #1
 8008124:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008126:	f000 fc66 	bl	80089f6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800812a:	2000      	movs	r0, #0
 800812c:	f7ff fdfc 	bl	8007d28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008130:	4828      	ldr	r0, [pc, #160]	@ (80081d4 <RadioSetRxConfig+0x304>)
 8008132:	f002 fa53 	bl	800a5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008136:	4828      	ldr	r0, [pc, #160]	@ (80081d8 <RadioSetRxConfig+0x308>)
 8008138:	f002 fb22 	bl	800a780 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800813c:	4a28      	ldr	r2, [pc, #160]	@ (80081e0 <RadioSetRxConfig+0x310>)
 800813e:	f107 0314 	add.w	r3, r7, #20
 8008142:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008146:	e883 0003 	stmia.w	r3, {r0, r1}
 800814a:	f107 0314 	add.w	r3, r7, #20
 800814e:	4618      	mov	r0, r3
 8008150:	f001 fddf 	bl	8009d12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008154:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008158:	f001 fe2a 	bl	8009db0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800815c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800815e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008162:	fb02 f303 	mul.w	r3, r2, r3
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	fbb2 f3f3 	udiv	r3, r2, r3
 800816e:	4a17      	ldr	r2, [pc, #92]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8008170:	6093      	str	r3, [r2, #8]
            break;
 8008172:	e0ad      	b.n	80082d0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008174:	2000      	movs	r0, #0
 8008176:	f001 ff93 	bl	800a0a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800817a:	4b14      	ldr	r3, [pc, #80]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	b2da      	uxtb	r2, r3
 8008186:	4b11      	ldr	r3, [pc, #68]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8008188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800818c:	4a15      	ldr	r2, [pc, #84]	@ (80081e4 <RadioSetRxConfig+0x314>)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4413      	add	r3, r2
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 8008196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800819a:	4a0c      	ldr	r2, [pc, #48]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d105      	bne.n	80081b4 <RadioSetRxConfig+0x2e4>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b0b      	cmp	r3, #11
 80081ac:	d008      	beq.n	80081c0 <RadioSetRxConfig+0x2f0>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b0c      	cmp	r3, #12
 80081b2:	d005      	beq.n	80081c0 <RadioSetRxConfig+0x2f0>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d116      	bne.n	80081e8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b0c      	cmp	r3, #12
 80081be:	d113      	bne.n	80081e8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80081c0:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <RadioSetRxConfig+0x2fc>)
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80081c8:	e012      	b.n	80081f0 <RadioSetRxConfig+0x320>
 80081ca:	bf00      	nop
 80081cc:	2000038c 	.word	0x2000038c
 80081d0:	20000008 	.word	0x20000008
 80081d4:	200003c4 	.word	0x200003c4
 80081d8:	2000039a 	.word	0x2000039a
 80081dc:	0800ca28 	.word	0x0800ca28
 80081e0:	0800ca30 	.word	0x0800ca30
 80081e4:	0800cebc 	.word	0x0800cebc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80081e8:	4b3b      	ldr	r3, [pc, #236]	@ (80082d8 <RadioSetRxConfig+0x408>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80081f0:	4b39      	ldr	r3, [pc, #228]	@ (80082d8 <RadioSetRxConfig+0x408>)
 80081f2:	2201      	movs	r2, #1
 80081f4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80081f6:	4b38      	ldr	r3, [pc, #224]	@ (80082d8 <RadioSetRxConfig+0x408>)
 80081f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80081fc:	2b05      	cmp	r3, #5
 80081fe:	d004      	beq.n	800820a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008200:	4b35      	ldr	r3, [pc, #212]	@ (80082d8 <RadioSetRxConfig+0x408>)
 8008202:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008206:	2b06      	cmp	r3, #6
 8008208:	d10a      	bne.n	8008220 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800820a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800820c:	2b0b      	cmp	r3, #11
 800820e:	d803      	bhi.n	8008218 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008210:	4b31      	ldr	r3, [pc, #196]	@ (80082d8 <RadioSetRxConfig+0x408>)
 8008212:	220c      	movs	r2, #12
 8008214:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008216:	e006      	b.n	8008226 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008218:	4a2f      	ldr	r2, [pc, #188]	@ (80082d8 <RadioSetRxConfig+0x408>)
 800821a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800821c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800821e:	e002      	b.n	8008226 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008220:	4a2d      	ldr	r2, [pc, #180]	@ (80082d8 <RadioSetRxConfig+0x408>)
 8008222:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008224:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008226:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800822a:	4b2b      	ldr	r3, [pc, #172]	@ (80082d8 <RadioSetRxConfig+0x408>)
 800822c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800822e:	4b2b      	ldr	r3, [pc, #172]	@ (80082dc <RadioSetRxConfig+0x40c>)
 8008230:	781a      	ldrb	r2, [r3, #0]
 8008232:	4b29      	ldr	r3, [pc, #164]	@ (80082d8 <RadioSetRxConfig+0x408>)
 8008234:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008236:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800823a:	4b27      	ldr	r3, [pc, #156]	@ (80082d8 <RadioSetRxConfig+0x408>)
 800823c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008240:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008244:	4b24      	ldr	r3, [pc, #144]	@ (80082d8 <RadioSetRxConfig+0x408>)
 8008246:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800824a:	f000 fbd4 	bl	80089f6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800824e:	2001      	movs	r0, #1
 8008250:	f7ff fd6a 	bl	8007d28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008254:	4822      	ldr	r0, [pc, #136]	@ (80082e0 <RadioSetRxConfig+0x410>)
 8008256:	f002 f9c1 	bl	800a5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800825a:	4822      	ldr	r0, [pc, #136]	@ (80082e4 <RadioSetRxConfig+0x414>)
 800825c:	f002 fa90 	bl	800a780 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008260:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008262:	b2db      	uxtb	r3, r3
 8008264:	4618      	mov	r0, r3
 8008266:	f001 ff2a 	bl	800a0be <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800826a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800826e:	f002 fbf1 	bl	800aa54 <SUBGRF_ReadRegister>
 8008272:	4603      	mov	r3, r0
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	b2db      	uxtb	r3, r3
 800827a:	4619      	mov	r1, r3
 800827c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008280:	f002 fbc6 	bl	800aa10 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008284:	4b14      	ldr	r3, [pc, #80]	@ (80082d8 <RadioSetRxConfig+0x408>)
 8008286:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800828a:	2b01      	cmp	r3, #1
 800828c:	d10d      	bne.n	80082aa <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800828e:	f240 7036 	movw	r0, #1846	@ 0x736
 8008292:	f002 fbdf 	bl	800aa54 <SUBGRF_ReadRegister>
 8008296:	4603      	mov	r3, r0
 8008298:	f023 0304 	bic.w	r3, r3, #4
 800829c:	b2db      	uxtb	r3, r3
 800829e:	4619      	mov	r1, r3
 80082a0:	f240 7036 	movw	r0, #1846	@ 0x736
 80082a4:	f002 fbb4 	bl	800aa10 <SUBGRF_WriteRegister>
 80082a8:	e00c      	b.n	80082c4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80082aa:	f240 7036 	movw	r0, #1846	@ 0x736
 80082ae:	f002 fbd1 	bl	800aa54 <SUBGRF_ReadRegister>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f043 0304 	orr.w	r3, r3, #4
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	4619      	mov	r1, r3
 80082bc:	f240 7036 	movw	r0, #1846	@ 0x736
 80082c0:	f002 fba6 	bl	800aa10 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80082c4:	4b04      	ldr	r3, [pc, #16]	@ (80082d8 <RadioSetRxConfig+0x408>)
 80082c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082ca:	609a      	str	r2, [r3, #8]
            break;
 80082cc:	e000      	b.n	80082d0 <RadioSetRxConfig+0x400>
            break;
 80082ce:	bf00      	nop
    }
}
 80082d0:	bf00      	nop
 80082d2:	3728      	adds	r7, #40	@ 0x28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	2000038c 	.word	0x2000038c
 80082dc:	20000008 	.word	0x20000008
 80082e0:	200003c4 	.word	0x200003c4
 80082e4:	2000039a 	.word	0x2000039a

080082e8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60ba      	str	r2, [r7, #8]
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	4603      	mov	r3, r0
 80082f4:	73fb      	strb	r3, [r7, #15]
 80082f6:	460b      	mov	r3, r1
 80082f8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80082fa:	f002 fe8a 	bl	800b012 <RFW_DeInit>
    switch( modem )
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b04      	cmp	r3, #4
 8008302:	f000 80c7 	beq.w	8008494 <RadioSetTxConfig+0x1ac>
 8008306:	2b04      	cmp	r3, #4
 8008308:	f300 80d6 	bgt.w	80084b8 <RadioSetTxConfig+0x1d0>
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <RadioSetTxConfig+0x2e>
 8008310:	2b01      	cmp	r3, #1
 8008312:	d059      	beq.n	80083c8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008314:	e0d0      	b.n	80084b8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008316:	4b77      	ldr	r3, [pc, #476]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800831e:	4a75      	ldr	r2, [pc, #468]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008324:	4b73      	ldr	r3, [pc, #460]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008326:	220b      	movs	r2, #11
 8008328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f002 fda3 	bl	800ae78 <SUBGRF_GetFskBandwidthRegValue>
 8008332:	4603      	mov	r3, r0
 8008334:	461a      	mov	r2, r3
 8008336:	4b6f      	ldr	r3, [pc, #444]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800833c:	4a6d      	ldr	r2, [pc, #436]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008342:	4b6c      	ldr	r3, [pc, #432]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008344:	2200      	movs	r2, #0
 8008346:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008348:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	b29a      	uxth	r2, r3
 800834e:	4b69      	ldr	r3, [pc, #420]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008350:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008352:	4b68      	ldr	r3, [pc, #416]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008354:	2204      	movs	r2, #4
 8008356:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8008358:	4b66      	ldr	r3, [pc, #408]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800835a:	2218      	movs	r2, #24
 800835c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800835e:	4b65      	ldr	r3, [pc, #404]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008360:	2200      	movs	r2, #0
 8008362:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008364:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008368:	f083 0301 	eor.w	r3, r3, #1
 800836c:	b2db      	uxtb	r3, r3
 800836e:	461a      	mov	r2, r3
 8008370:	4b60      	ldr	r3, [pc, #384]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008372:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008374:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800837c:	4b5d      	ldr	r3, [pc, #372]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800837e:	22f2      	movs	r2, #242	@ 0xf2
 8008380:	75da      	strb	r2, [r3, #23]
 8008382:	e002      	b.n	800838a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008384:	4b5b      	ldr	r3, [pc, #364]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008386:	2201      	movs	r2, #1
 8008388:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800838a:	4b5a      	ldr	r3, [pc, #360]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800838c:	2201      	movs	r2, #1
 800838e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008390:	f000 fb31 	bl	80089f6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008394:	2000      	movs	r0, #0
 8008396:	f7ff fcc7 	bl	8007d28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800839a:	4857      	ldr	r0, [pc, #348]	@ (80084f8 <RadioSetTxConfig+0x210>)
 800839c:	f002 f91e 	bl	800a5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80083a0:	4856      	ldr	r0, [pc, #344]	@ (80084fc <RadioSetTxConfig+0x214>)
 80083a2:	f002 f9ed 	bl	800a780 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80083a6:	4a56      	ldr	r2, [pc, #344]	@ (8008500 <RadioSetTxConfig+0x218>)
 80083a8:	f107 0310 	add.w	r3, r7, #16
 80083ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80083b4:	f107 0310 	add.w	r3, r7, #16
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 fcaa 	bl	8009d12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80083be:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80083c2:	f001 fcf5 	bl	8009db0 <SUBGRF_SetWhiteningSeed>
            break;
 80083c6:	e078      	b.n	80084ba <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80083c8:	4b4a      	ldr	r3, [pc, #296]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	4b47      	ldr	r3, [pc, #284]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80083d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80083da:	4a4a      	ldr	r2, [pc, #296]	@ (8008504 <RadioSetTxConfig+0x21c>)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4413      	add	r3, r2
 80083e0:	781a      	ldrb	r2, [r3, #0]
 80083e2:	4b44      	ldr	r3, [pc, #272]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80083e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80083e8:	4a42      	ldr	r2, [pc, #264]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80083ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80083ee:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <RadioSetTxConfig+0x11c>
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	2b0b      	cmp	r3, #11
 80083fc:	d008      	beq.n	8008410 <RadioSetTxConfig+0x128>
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	2b0c      	cmp	r3, #12
 8008402:	d005      	beq.n	8008410 <RadioSetTxConfig+0x128>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d107      	bne.n	800841a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	2b0c      	cmp	r3, #12
 800840e:	d104      	bne.n	800841a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008410:	4b38      	ldr	r3, [pc, #224]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008418:	e003      	b.n	8008422 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800841a:	4b36      	ldr	r3, [pc, #216]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008422:	4b34      	ldr	r3, [pc, #208]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008424:	2201      	movs	r2, #1
 8008426:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008428:	4b32      	ldr	r3, [pc, #200]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800842a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800842e:	2b05      	cmp	r3, #5
 8008430:	d004      	beq.n	800843c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008432:	4b30      	ldr	r3, [pc, #192]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008434:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008438:	2b06      	cmp	r3, #6
 800843a:	d10a      	bne.n	8008452 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800843c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800843e:	2b0b      	cmp	r3, #11
 8008440:	d803      	bhi.n	800844a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008442:	4b2c      	ldr	r3, [pc, #176]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008444:	220c      	movs	r2, #12
 8008446:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008448:	e006      	b.n	8008458 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800844a:	4a2a      	ldr	r2, [pc, #168]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800844c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800844e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008450:	e002      	b.n	8008458 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008452:	4a28      	ldr	r2, [pc, #160]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008454:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008456:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008458:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800845c:	4b25      	ldr	r3, [pc, #148]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800845e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008460:	4b29      	ldr	r3, [pc, #164]	@ (8008508 <RadioSetTxConfig+0x220>)
 8008462:	781a      	ldrb	r2, [r3, #0]
 8008464:	4b23      	ldr	r3, [pc, #140]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008466:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008468:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800846c:	4b21      	ldr	r3, [pc, #132]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800846e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008472:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008476:	4b1f      	ldr	r3, [pc, #124]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 8008478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800847c:	f000 fabb 	bl	80089f6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008480:	2001      	movs	r0, #1
 8008482:	f7ff fc51 	bl	8007d28 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008486:	481c      	ldr	r0, [pc, #112]	@ (80084f8 <RadioSetTxConfig+0x210>)
 8008488:	f002 f8a8 	bl	800a5dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800848c:	481b      	ldr	r0, [pc, #108]	@ (80084fc <RadioSetTxConfig+0x214>)
 800848e:	f002 f977 	bl	800a780 <SUBGRF_SetPacketParams>
            break;
 8008492:	e012      	b.n	80084ba <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008494:	2004      	movs	r0, #4
 8008496:	f7ff fc47 	bl	8007d28 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800849a:	4b16      	ldr	r3, [pc, #88]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 800849c:	2202      	movs	r2, #2
 800849e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80084a2:	4a14      	ldr	r2, [pc, #80]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80084a8:	4b12      	ldr	r3, [pc, #72]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80084aa:	2216      	movs	r2, #22
 80084ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80084b0:	4811      	ldr	r0, [pc, #68]	@ (80084f8 <RadioSetTxConfig+0x210>)
 80084b2:	f002 f893 	bl	800a5dc <SUBGRF_SetModulationParams>
            break;
 80084b6:	e000      	b.n	80084ba <RadioSetTxConfig+0x1d2>
            break;
 80084b8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80084ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084be:	4618      	mov	r0, r3
 80084c0:	f002 fbdc 	bl	800ac7c <SUBGRF_SetRfTxPower>
 80084c4:	4603      	mov	r3, r0
 80084c6:	461a      	mov	r2, r3
 80084c8:	4b0a      	ldr	r3, [pc, #40]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80084ca:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80084ce:	210e      	movs	r1, #14
 80084d0:	f640 101f 	movw	r0, #2335	@ 0x91f
 80084d4:	f002 fa9c 	bl	800aa10 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80084d8:	4b06      	ldr	r3, [pc, #24]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80084da:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80084de:	4618      	mov	r0, r3
 80084e0:	f002 fdab 	bl	800b03a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80084e4:	4a03      	ldr	r2, [pc, #12]	@ (80084f4 <RadioSetTxConfig+0x20c>)
 80084e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084e8:	6053      	str	r3, [r2, #4]
}
 80084ea:	bf00      	nop
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	2000038c 	.word	0x2000038c
 80084f8:	200003c4 	.word	0x200003c4
 80084fc:	2000039a 	.word	0x2000039a
 8008500:	0800ca30 	.word	0x0800ca30
 8008504:	0800cebc 	.word	0x0800cebc
 8008508:	20000008 	.word	0x20000008

0800850c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
    return true;
 8008514:	2301      	movs	r3, #1
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b0a      	cmp	r3, #10
 8008532:	d83e      	bhi.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
 8008534:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <RadioGetLoRaBandwidthInHz+0x1c>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	08008569 	.word	0x08008569
 8008540:	08008579 	.word	0x08008579
 8008544:	08008589 	.word	0x08008589
 8008548:	08008599 	.word	0x08008599
 800854c:	080085a1 	.word	0x080085a1
 8008550:	080085a7 	.word	0x080085a7
 8008554:	080085ad 	.word	0x080085ad
 8008558:	080085b3 	.word	0x080085b3
 800855c:	08008571 	.word	0x08008571
 8008560:	08008581 	.word	0x08008581
 8008564:	08008591 	.word	0x08008591
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8008568:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800856c:	60fb      	str	r3, [r7, #12]
        break;
 800856e:	e020      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008570:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8008574:	60fb      	str	r3, [r7, #12]
        break;
 8008576:	e01c      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008578:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800857c:	60fb      	str	r3, [r7, #12]
        break;
 800857e:	e018      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008580:	f245 1361 	movw	r3, #20833	@ 0x5161
 8008584:	60fb      	str	r3, [r7, #12]
        break;
 8008586:	e014      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008588:	f647 2312 	movw	r3, #31250	@ 0x7a12
 800858c:	60fb      	str	r3, [r7, #12]
        break;
 800858e:	e010      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008590:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8008594:	60fb      	str	r3, [r7, #12]
        break;
 8008596:	e00c      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008598:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800859c:	60fb      	str	r3, [r7, #12]
        break;
 800859e:	e008      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80085a0:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80085a2:	60fb      	str	r3, [r7, #12]
        break;
 80085a4:	e005      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80085a6:	4b07      	ldr	r3, [pc, #28]	@ (80085c4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80085a8:	60fb      	str	r3, [r7, #12]
        break;
 80085aa:	e002      	b.n	80085b2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80085ac:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80085ae:	60fb      	str	r3, [r7, #12]
        break;
 80085b0:	bf00      	nop
    }

    return bandwidthInHz;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	0001e848 	.word	0x0001e848
 80085c4:	0003d090 	.word	0x0003d090
 80085c8:	0007a120 	.word	0x0007a120

080085cc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	4608      	mov	r0, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	461a      	mov	r2, r3
 80085da:	4603      	mov	r3, r0
 80085dc:	70fb      	strb	r3, [r7, #3]
 80085de:	460b      	mov	r3, r1
 80085e0:	803b      	strh	r3, [r7, #0]
 80085e2:	4613      	mov	r3, r2
 80085e4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80085e6:	883b      	ldrh	r3, [r7, #0]
 80085e8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80085ea:	78ba      	ldrb	r2, [r7, #2]
 80085ec:	f082 0201 	eor.w	r2, r2, #1
 80085f0:	b2d2      	uxtb	r2, r2
 80085f2:	2a00      	cmp	r2, #0
 80085f4:	d001      	beq.n	80085fa <RadioGetGfskTimeOnAirNumerator+0x2e>
 80085f6:	2208      	movs	r2, #8
 80085f8:	e000      	b.n	80085fc <RadioGetGfskTimeOnAirNumerator+0x30>
 80085fa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80085fc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80085fe:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008602:	7c3b      	ldrb	r3, [r7, #16]
 8008604:	7d39      	ldrb	r1, [r7, #20]
 8008606:	2900      	cmp	r1, #0
 8008608:	d001      	beq.n	800860e <RadioGetGfskTimeOnAirNumerator+0x42>
 800860a:	2102      	movs	r1, #2
 800860c:	e000      	b.n	8008610 <RadioGetGfskTimeOnAirNumerator+0x44>
 800860e:	2100      	movs	r1, #0
 8008610:	440b      	add	r3, r1
 8008612:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008614:	4413      	add	r3, r2
}
 8008616:	4618      	mov	r0, r3
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008620:	b480      	push	{r7}
 8008622:	b08b      	sub	sp, #44	@ 0x2c
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4611      	mov	r1, r2
 800862c:	461a      	mov	r2, r3
 800862e:	460b      	mov	r3, r1
 8008630:	71fb      	strb	r3, [r7, #7]
 8008632:	4613      	mov	r3, r2
 8008634:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	3304      	adds	r3, #4
 800863a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800863c:	2300      	movs	r3, #0
 800863e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b05      	cmp	r3, #5
 8008646:	d002      	beq.n	800864e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b06      	cmp	r3, #6
 800864c:	d104      	bne.n	8008658 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800864e:	88bb      	ldrh	r3, [r7, #4]
 8008650:	2b0b      	cmp	r3, #11
 8008652:	d801      	bhi.n	8008658 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008654:	230c      	movs	r3, #12
 8008656:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d105      	bne.n	800866a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b0b      	cmp	r3, #11
 8008662:	d008      	beq.n	8008676 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b0c      	cmp	r3, #12
 8008668:	d005      	beq.n	8008676 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d105      	bne.n	800867c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b0c      	cmp	r3, #12
 8008674:	d102      	bne.n	800867c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008676:	2301      	movs	r3, #1
 8008678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800867c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008680:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008682:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008686:	2a00      	cmp	r2, #0
 8008688:	d001      	beq.n	800868e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800868a:	2210      	movs	r2, #16
 800868c:	e000      	b.n	8008690 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800868e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008690:	4413      	add	r3, r2
 8008692:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008698:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800869a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800869e:	2a00      	cmp	r2, #0
 80086a0:	d001      	beq.n	80086a6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80086a2:	2200      	movs	r2, #0
 80086a4:	e000      	b.n	80086a8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80086a6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80086a8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80086aa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b06      	cmp	r3, #6
 80086b0:	d803      	bhi.n	80086ba <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	623b      	str	r3, [r7, #32]
 80086b8:	e00e      	b.n	80086d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	3308      	adds	r3, #8
 80086be:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80086c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d004      	beq.n	80086d2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	3b02      	subs	r3, #2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	623b      	str	r3, [r7, #32]
 80086d0:	e002      	b.n	80086d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	da01      	bge.n	80086e2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	4413      	add	r3, r2
 80086e8:	1e5a      	subs	r2, r3, #1
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	fb03 f202 	mul.w	r2, r3, r2
 80086f6:	88bb      	ldrh	r3, [r7, #4]
 80086f8:	4413      	add	r3, r2
    int32_t intermediate =
 80086fa:	330c      	adds	r3, #12
 80086fc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b06      	cmp	r3, #6
 8008702:	d802      	bhi.n	800870a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	3302      	adds	r3, #2
 8008708:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	3b02      	subs	r3, #2
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008718:	4618      	mov	r0, r3
 800871a:	372c      	adds	r7, #44	@ 0x2c
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr
	...

08008724 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08a      	sub	sp, #40	@ 0x28
 8008728:	af04      	add	r7, sp, #16
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	461a      	mov	r2, r3
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	4613      	mov	r3, r2
 8008736:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800873c:	2301      	movs	r3, #1
 800873e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <RadioTimeOnAir+0x28>
 8008746:	2b01      	cmp	r3, #1
 8008748:	d017      	beq.n	800877a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800874a:	e035      	b.n	80087b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800874c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8008750:	8c3a      	ldrh	r2, [r7, #32]
 8008752:	7bb9      	ldrb	r1, [r7, #14]
 8008754:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	4603      	mov	r3, r0
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff ff32 	bl	80085cc <RadioGetGfskTimeOnAirNumerator>
 8008768:	4603      	mov	r3, r0
 800876a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800876e:	fb02 f303 	mul.w	r3, r2, r3
 8008772:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	613b      	str	r3, [r7, #16]
        break;
 8008778:	e01e      	b.n	80087b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800877a:	8c39      	ldrh	r1, [r7, #32]
 800877c:	7bba      	ldrb	r2, [r7, #14]
 800877e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008782:	9302      	str	r3, [sp, #8]
 8008784:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	460b      	mov	r3, r1
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	68b8      	ldr	r0, [r7, #8]
 8008796:	f7ff ff43 	bl	8008620 <RadioGetLoRaTimeOnAirNumerator>
 800879a:	4603      	mov	r3, r0
 800879c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80087a0:	fb02 f303 	mul.w	r3, r2, r3
 80087a4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80087a6:	4a0a      	ldr	r2, [pc, #40]	@ (80087d0 <RadioTimeOnAir+0xac>)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4413      	add	r3, r2
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff feb6 	bl	8008520 <RadioGetLoRaBandwidthInHz>
 80087b4:	6138      	str	r0, [r7, #16]
        break;
 80087b6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	4413      	add	r3, r2
 80087be:	1e5a      	subs	r2, r3, #1
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	0800cebc 	.word	0x0800cebc

080087d4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80087e0:	2300      	movs	r3, #0
 80087e2:	2200      	movs	r2, #0
 80087e4:	f240 2101 	movw	r1, #513	@ 0x201
 80087e8:	f240 2001 	movw	r0, #513	@ 0x201
 80087ec:	f001 fd60 	bl	800a2b0 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 80087f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80087f4:	4871      	ldr	r0, [pc, #452]	@ (80089bc <RadioSend+0x1e8>)
 80087f6:	f7ff fa09 	bl	8007c0c <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80087fa:	4b71      	ldr	r3, [pc, #452]	@ (80089c0 <RadioSend+0x1ec>)
 80087fc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008800:	2101      	movs	r1, #1
 8008802:	4618      	mov	r0, r3
 8008804:	f002 fa12 	bl	800ac2c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008808:	4b6d      	ldr	r3, [pc, #436]	@ (80089c0 <RadioSend+0x1ec>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d112      	bne.n	8008836 <RadioSend+0x62>
 8008810:	4b6b      	ldr	r3, [pc, #428]	@ (80089c0 <RadioSend+0x1ec>)
 8008812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008816:	2b06      	cmp	r3, #6
 8008818:	d10d      	bne.n	8008836 <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800881a:	f640 0089 	movw	r0, #2185	@ 0x889
 800881e:	f002 f919 	bl	800aa54 <SUBGRF_ReadRegister>
 8008822:	4603      	mov	r3, r0
 8008824:	f023 0304 	bic.w	r3, r3, #4
 8008828:	b2db      	uxtb	r3, r3
 800882a:	4619      	mov	r1, r3
 800882c:	f640 0089 	movw	r0, #2185	@ 0x889
 8008830:	f002 f8ee 	bl	800aa10 <SUBGRF_WriteRegister>
 8008834:	e00c      	b.n	8008850 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008836:	f640 0089 	movw	r0, #2185	@ 0x889
 800883a:	f002 f90b 	bl	800aa54 <SUBGRF_ReadRegister>
 800883e:	4603      	mov	r3, r0
 8008840:	f043 0304 	orr.w	r3, r3, #4
 8008844:	b2db      	uxtb	r3, r3
 8008846:	4619      	mov	r1, r3
 8008848:	f640 0089 	movw	r0, #2185	@ 0x889
 800884c:	f002 f8e0 	bl	800aa10 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008850:	4b5b      	ldr	r3, [pc, #364]	@ (80089c0 <RadioSend+0x1ec>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b04      	cmp	r3, #4
 8008856:	f200 80a1 	bhi.w	800899c <RadioSend+0x1c8>
 800885a:	a201      	add	r2, pc, #4	@ (adr r2, 8008860 <RadioSend+0x8c>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	0800888f 	.word	0x0800888f
 8008864:	08008875 	.word	0x08008875
 8008868:	0800888f 	.word	0x0800888f
 800886c:	080088e5 	.word	0x080088e5
 8008870:	08008905 	.word	0x08008905
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008874:	4a52      	ldr	r2, [pc, #328]	@ (80089c0 <RadioSend+0x1ec>)
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800887a:	4852      	ldr	r0, [pc, #328]	@ (80089c4 <RadioSend+0x1f0>)
 800887c:	f001 ff80 	bl	800a780 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008880:	78fb      	ldrb	r3, [r7, #3]
 8008882:	2200      	movs	r2, #0
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 fa30 	bl	8009cec <SUBGRF_SendPayload>
            break;
 800888c:	e087      	b.n	800899e <RadioSend+0x1ca>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800888e:	f002 fbc6 	bl	800b01e <RFW_Is_Init>
 8008892:	4603      	mov	r3, r0
 8008894:	2b01      	cmp	r3, #1
 8008896:	d118      	bne.n	80088ca <RadioSend+0xf6>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008898:	f107 020d 	add.w	r2, r7, #13
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 fbd4 	bl	800b04e <RFW_TransmitInit>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10c      	bne.n	80088c6 <RadioSend+0xf2>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80088ac:	7b7a      	ldrb	r2, [r7, #13]
 80088ae:	4b44      	ldr	r3, [pc, #272]	@ (80089c0 <RadioSend+0x1ec>)
 80088b0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80088b2:	4844      	ldr	r0, [pc, #272]	@ (80089c4 <RadioSend+0x1f0>)
 80088b4:	f001 ff64 	bl	800a780 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80088b8:	7b7b      	ldrb	r3, [r7, #13]
 80088ba:	2200      	movs	r2, #0
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 fa14 	bl	8009cec <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80088c4:	e06b      	b.n	800899e <RadioSend+0x1ca>
                    return RADIO_STATUS_ERROR;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e073      	b.n	80089b2 <RadioSend+0x1de>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80088ca:	4a3d      	ldr	r2, [pc, #244]	@ (80089c0 <RadioSend+0x1ec>)
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80088d0:	483c      	ldr	r0, [pc, #240]	@ (80089c4 <RadioSend+0x1f0>)
 80088d2:	f001 ff55 	bl	800a780 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	2200      	movs	r2, #0
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 fa05 	bl	8009cec <SUBGRF_SendPayload>
            break;
 80088e2:	e05c      	b.n	800899e <RadioSend+0x1ca>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80088e4:	4b36      	ldr	r3, [pc, #216]	@ (80089c0 <RadioSend+0x1ec>)
 80088e6:	2202      	movs	r2, #2
 80088e8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80088ea:	4a35      	ldr	r2, [pc, #212]	@ (80089c0 <RadioSend+0x1ec>)
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80088f0:	4834      	ldr	r0, [pc, #208]	@ (80089c4 <RadioSend+0x1f0>)
 80088f2:	f001 ff45 	bl	800a780 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	2200      	movs	r2, #0
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f9f5 	bl	8009cec <SUBGRF_SendPayload>
            break;
 8008902:	e04c      	b.n	800899e <RadioSend+0x1ca>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	461a      	mov	r2, r3
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	482f      	ldr	r0, [pc, #188]	@ (80089c8 <RadioSend+0x1f4>)
 800890c:	f000 fcc6 	bl	800929c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008910:	4b2b      	ldr	r3, [pc, #172]	@ (80089c0 <RadioSend+0x1ec>)
 8008912:	2202      	movs	r2, #2
 8008914:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	3301      	adds	r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	4b28      	ldr	r3, [pc, #160]	@ (80089c0 <RadioSend+0x1ec>)
 800891e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008920:	4828      	ldr	r0, [pc, #160]	@ (80089c4 <RadioSend+0x1f0>)
 8008922:	f001 ff2d 	bl	800a780 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008926:	2100      	movs	r1, #0
 8008928:	20f1      	movs	r0, #241	@ 0xf1
 800892a:	f000 f971 	bl	8008c10 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800892e:	2100      	movs	r1, #0
 8008930:	20f0      	movs	r0, #240	@ 0xf0
 8008932:	f000 f96d 	bl	8008c10 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008936:	4b22      	ldr	r3, [pc, #136]	@ (80089c0 <RadioSend+0x1ec>)
 8008938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800893a:	2b64      	cmp	r3, #100	@ 0x64
 800893c:	d108      	bne.n	8008950 <RadioSend+0x17c>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800893e:	2170      	movs	r1, #112	@ 0x70
 8008940:	20f3      	movs	r0, #243	@ 0xf3
 8008942:	f000 f965 	bl	8008c10 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008946:	211d      	movs	r1, #29
 8008948:	20f2      	movs	r0, #242	@ 0xf2
 800894a:	f000 f961 	bl	8008c10 <RadioWrite>
 800894e:	e007      	b.n	8008960 <RadioSend+0x18c>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008950:	21e1      	movs	r1, #225	@ 0xe1
 8008952:	20f3      	movs	r0, #243	@ 0xf3
 8008954:	f000 f95c 	bl	8008c10 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008958:	2104      	movs	r1, #4
 800895a:	20f2      	movs	r0, #242	@ 0xf2
 800895c:	f000 f958 	bl	8008c10 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	b29b      	uxth	r3, r3
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	b29b      	uxth	r3, r3
 8008968:	3302      	adds	r3, #2
 800896a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800896c:	89fb      	ldrh	r3, [r7, #14]
 800896e:	0a1b      	lsrs	r3, r3, #8
 8008970:	b29b      	uxth	r3, r3
 8008972:	b2db      	uxtb	r3, r3
 8008974:	4619      	mov	r1, r3
 8008976:	20f4      	movs	r0, #244	@ 0xf4
 8008978:	f000 f94a 	bl	8008c10 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800897c:	89fb      	ldrh	r3, [r7, #14]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	4619      	mov	r1, r3
 8008982:	20f5      	movs	r0, #245	@ 0xf5
 8008984:	f000 f944 	bl	8008c10 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	3301      	adds	r3, #1
 800898c:	b2db      	uxtb	r3, r3
 800898e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8008992:	4619      	mov	r1, r3
 8008994:	480c      	ldr	r0, [pc, #48]	@ (80089c8 <RadioSend+0x1f4>)
 8008996:	f001 f9a9 	bl	8009cec <SUBGRF_SendPayload>
            break;
 800899a:	e000      	b.n	800899e <RadioSend+0x1ca>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800899c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800899e:	4b08      	ldr	r3, [pc, #32]	@ (80089c0 <RadioSend+0x1ec>)
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	4619      	mov	r1, r3
 80089a4:	4809      	ldr	r0, [pc, #36]	@ (80089cc <RadioSend+0x1f8>)
 80089a6:	f003 fc73 	bl	800c290 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80089aa:	4808      	ldr	r0, [pc, #32]	@ (80089cc <RadioSend+0x1f8>)
 80089ac:	f003 fb92 	bl	800c0d4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	48000400 	.word	0x48000400
 80089c0:	2000038c 	.word	0x2000038c
 80089c4:	2000039a 	.word	0x2000039a
 80089c8:	20000288 	.word	0x20000288
 80089cc:	200003e8 	.word	0x200003e8

080089d0 <RadioSleep>:

static void RadioSleep( void )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80089d6:	2300      	movs	r3, #0
 80089d8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80089da:	793b      	ldrb	r3, [r7, #4]
 80089dc:	f043 0304 	orr.w	r3, r3, #4
 80089e0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80089e2:	7938      	ldrb	r0, [r7, #4]
 80089e4:	f001 fa5e 	bl	8009ea4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80089e8:	2002      	movs	r0, #2
 80089ea:	f7f8 f975 	bl	8000cd8 <HAL_Delay>
}
 80089ee:	bf00      	nop
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <RadioStandby>:

static void RadioStandby( void )
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80089fa:	2000      	movs	r0, #0
 80089fc:	f001 fa84 	bl	8009f08 <SUBGRF_SetStandby>
}
 8008a00:	bf00      	nop
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008a0c:	f002 fb07 	bl	800b01e <RFW_Is_Init>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d102      	bne.n	8008a1c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008a16:	f002 fb2a 	bl	800b06e <RFW_ReceiveInit>
 8008a1a:	e007      	b.n	8008a2c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f240 2162 	movw	r1, #610	@ 0x262
 8008a24:	f240 2062 	movw	r0, #610	@ 0x262
 8008a28:	f001 fc42 	bl	800a2b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d006      	beq.n	8008a40 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	4813      	ldr	r0, [pc, #76]	@ (8008a84 <RadioRx+0x80>)
 8008a36:	f003 fc2b 	bl	800c290 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008a3a:	4812      	ldr	r0, [pc, #72]	@ (8008a84 <RadioRx+0x80>)
 8008a3c:	f003 fb4a 	bl	800c0d4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008a40:	4b11      	ldr	r3, [pc, #68]	@ (8008a88 <RadioRx+0x84>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 8008a46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008a4a:	4810      	ldr	r0, [pc, #64]	@ (8008a8c <RadioRx+0x88>)
 8008a4c:	f7ff f8de 	bl	8007c0c <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008a50:	4b0d      	ldr	r3, [pc, #52]	@ (8008a88 <RadioRx+0x84>)
 8008a52:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f002 f8e7 	bl	800ac2c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <RadioRx+0x84>)
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d004      	beq.n	8008a70 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008a66:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008a6a:	f001 fa89 	bl	8009f80 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008a6e:	e005      	b.n	8008a7c <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008a70:	4b05      	ldr	r3, [pc, #20]	@ (8008a88 <RadioRx+0x84>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	019b      	lsls	r3, r3, #6
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 fa82 	bl	8009f80 <SUBGRF_SetRx>
}
 8008a7c:	bf00      	nop
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20000400 	.word	0x20000400
 8008a88:	2000038c 	.word	0x2000038c
 8008a8c:	48000400 	.word	0x48000400

08008a90 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008a98:	f002 fac1 	bl	800b01e <RFW_Is_Init>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d102      	bne.n	8008aa8 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008aa2:	f002 fae4 	bl	800b06e <RFW_ReceiveInit>
 8008aa6:	e007      	b.n	8008ab8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f240 2162 	movw	r1, #610	@ 0x262
 8008ab0:	f240 2062 	movw	r0, #610	@ 0x262
 8008ab4:	f001 fbfc 	bl	800a2b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d006      	beq.n	8008acc <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	4813      	ldr	r0, [pc, #76]	@ (8008b10 <RadioRxBoosted+0x80>)
 8008ac2:	f003 fbe5 	bl	800c290 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008ac6:	4812      	ldr	r0, [pc, #72]	@ (8008b10 <RadioRxBoosted+0x80>)
 8008ac8:	f003 fb04 	bl	800c0d4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008acc:	4b11      	ldr	r3, [pc, #68]	@ (8008b14 <RadioRxBoosted+0x84>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 8008ad2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008ad6:	4810      	ldr	r0, [pc, #64]	@ (8008b18 <RadioRxBoosted+0x88>)
 8008ad8:	f7ff f898 	bl	8007c0c <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008adc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <RadioRxBoosted+0x84>)
 8008ade:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f002 f8a1 	bl	800ac2c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008aea:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <RadioRxBoosted+0x84>)
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008af2:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008af6:	f001 fa63 	bl	8009fc0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008afa:	e005      	b.n	8008b08 <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008afc:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <RadioRxBoosted+0x84>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	019b      	lsls	r3, r3, #6
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 fa5c 	bl	8009fc0 <SUBGRF_SetRxBoosted>
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000400 	.word	0x20000400
 8008b14:	2000038c 	.word	0x2000038c
 8008b18:	48000400 	.word	0x48000400

08008b1c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	005a      	lsls	r2, r3, #1
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b60 <RadioSetRxDutyCycle+0x44>)
 8008b30:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008b32:	2300      	movs	r3, #0
 8008b34:	2200      	movs	r2, #0
 8008b36:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008b3a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008b3e:	f001 fbb7 	bl	800a2b0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008b42:	4b07      	ldr	r3, [pc, #28]	@ (8008b60 <RadioSetRxDutyCycle+0x44>)
 8008b44:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 f86e 	bl	800ac2c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 fa58 	bl	800a008 <SUBGRF_SetRxDutyCycle>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	2000038c 	.word	0x2000038c

08008b64 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008b68:	4b09      	ldr	r3, [pc, #36]	@ (8008b90 <RadioStartCad+0x2c>)
 8008b6a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 f85b 	bl	800ac2c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008b76:	2300      	movs	r3, #0
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8008b7e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8008b82:	f001 fb95 	bl	800a2b0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008b86:	f001 fa6b 	bl	800a060 <SUBGRF_SetCad>
}
 8008b8a:	bf00      	nop
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	2000038c 	.word	0x2000038c

08008b94 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008ba4:	883b      	ldrh	r3, [r7, #0]
 8008ba6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008baa:	fb02 f303 	mul.w	r3, r2, r3
 8008bae:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 fbd9 	bl	800a368 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f002 f85e 	bl	800ac7c <SUBGRF_SetRfTxPower>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008bc4:	210e      	movs	r1, #14
 8008bc6:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008bca:	f001 ff21 	bl	800aa10 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f002 f82a 	bl	800ac2c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008bd8:	f001 fa50 	bl	800a07c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008bdc:	68f9      	ldr	r1, [r7, #12]
 8008bde:	4805      	ldr	r0, [pc, #20]	@ (8008bf4 <RadioSetTxContinuousWave+0x60>)
 8008be0:	f003 fb56 	bl	800c290 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008be4:	4803      	ldr	r0, [pc, #12]	@ (8008bf4 <RadioSetTxContinuousWave+0x60>)
 8008be6:	f003 fa75 	bl	800c0d4 <UTIL_TIMER_Start>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200003e8 	.word	0x200003e8

08008bf8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008c02:	f001 fe72 	bl	800a8ea <SUBGRF_GetRssiInst>
 8008c06:	4603      	mov	r3, r0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	460a      	mov	r2, r1
 8008c1a:	80fb      	strh	r3, [r7, #6]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008c20:	797a      	ldrb	r2, [r7, #5]
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f001 fef2 	bl	800aa10 <SUBGRF_WriteRegister>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008c3e:	88fb      	ldrh	r3, [r7, #6]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 ff07 	bl	800aa54 <SUBGRF_ReadRegister>
 8008c46:	4603      	mov	r3, r0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	80fb      	strh	r3, [r7, #6]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008c60:	797b      	ldrb	r3, [r7, #5]
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 ff13 	bl	800aa94 <SUBGRF_WriteRegisters>
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	6039      	str	r1, [r7, #0]
 8008c80:	80fb      	strh	r3, [r7, #6]
 8008c82:	4613      	mov	r3, r2
 8008c84:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008c86:	797b      	ldrb	r3, [r7, #5]
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 ff22 	bl	800aad8 <SUBGRF_ReadRegisters>
}
 8008c94:	bf00      	nop
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	460a      	mov	r2, r1
 8008ca6:	71fb      	strb	r3, [r7, #7]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d10a      	bne.n	8008cc8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8008cec <RadioSetMaxPayloadLength+0x50>)
 8008cb4:	79bb      	ldrb	r3, [r7, #6]
 8008cb6:	7013      	strb	r3, [r2, #0]
 8008cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008cec <RadioSetMaxPayloadLength+0x50>)
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf0 <RadioSetMaxPayloadLength+0x54>)
 8008cbe:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cc0:	480c      	ldr	r0, [pc, #48]	@ (8008cf4 <RadioSetMaxPayloadLength+0x58>)
 8008cc2:	f001 fd5d 	bl	800a780 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008cc6:	e00d      	b.n	8008ce4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008cc8:	4b09      	ldr	r3, [pc, #36]	@ (8008cf0 <RadioSetMaxPayloadLength+0x54>)
 8008cca:	7d5b      	ldrb	r3, [r3, #21]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d109      	bne.n	8008ce4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008cd0:	4a06      	ldr	r2, [pc, #24]	@ (8008cec <RadioSetMaxPayloadLength+0x50>)
 8008cd2:	79bb      	ldrb	r3, [r7, #6]
 8008cd4:	7013      	strb	r3, [r2, #0]
 8008cd6:	4b05      	ldr	r3, [pc, #20]	@ (8008cec <RadioSetMaxPayloadLength+0x50>)
 8008cd8:	781a      	ldrb	r2, [r3, #0]
 8008cda:	4b05      	ldr	r3, [pc, #20]	@ (8008cf0 <RadioSetMaxPayloadLength+0x54>)
 8008cdc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cde:	4805      	ldr	r0, [pc, #20]	@ (8008cf4 <RadioSetMaxPayloadLength+0x58>)
 8008ce0:	f001 fd4e 	bl	800a780 <SUBGRF_SetPacketParams>
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20000008 	.word	0x20000008
 8008cf0:	2000038c 	.word	0x2000038c
 8008cf4:	2000039a 	.word	0x2000039a

08008cf8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008d02:	4a13      	ldr	r2, [pc, #76]	@ (8008d50 <RadioSetPublicNetwork+0x58>)
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	7313      	strb	r3, [r2, #12]
 8008d08:	4b11      	ldr	r3, [pc, #68]	@ (8008d50 <RadioSetPublicNetwork+0x58>)
 8008d0a:	7b1a      	ldrb	r2, [r3, #12]
 8008d0c:	4b10      	ldr	r3, [pc, #64]	@ (8008d50 <RadioSetPublicNetwork+0x58>)
 8008d0e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008d10:	2001      	movs	r0, #1
 8008d12:	f7ff f809 	bl	8007d28 <RadioSetModem>
    if( enable == true )
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00a      	beq.n	8008d32 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008d1c:	2134      	movs	r1, #52	@ 0x34
 8008d1e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8008d22:	f001 fe75 	bl	800aa10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008d26:	2144      	movs	r1, #68	@ 0x44
 8008d28:	f240 7041 	movw	r0, #1857	@ 0x741
 8008d2c:	f001 fe70 	bl	800aa10 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008d30:	e009      	b.n	8008d46 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008d32:	2114      	movs	r1, #20
 8008d34:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8008d38:	f001 fe6a 	bl	800aa10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008d3c:	2124      	movs	r1, #36	@ 0x24
 8008d3e:	f240 7041 	movw	r0, #1857	@ 0x741
 8008d42:	f001 fe65 	bl	800aa10 <SUBGRF_WriteRegister>
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	2000038c 	.word	0x2000038c

08008d54 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008d58:	f001 ffc4 	bl	800ace4 <SUBGRF_GetRadioWakeUpTime>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	3303      	adds	r3, #3
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008d6c:	f000 f80e 	bl	8008d8c <RadioOnTxTimeoutProcess>
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008d80:	f000 f81e 	bl	8008dc0 <RadioOnRxTimeoutProcess>
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 8008d90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008d94:	4808      	ldr	r0, [pc, #32]	@ (8008db8 <RadioOnTxTimeoutProcess+0x2c>)
 8008d96:	f7fe ff46 	bl	8007c26 <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008d9a:	4b08      	ldr	r3, [pc, #32]	@ (8008dbc <RadioOnTxTimeoutProcess+0x30>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d008      	beq.n	8008db4 <RadioOnTxTimeoutProcess+0x28>
 8008da2:	4b06      	ldr	r3, [pc, #24]	@ (8008dbc <RadioOnTxTimeoutProcess+0x30>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8008dac:	4b03      	ldr	r3, [pc, #12]	@ (8008dbc <RadioOnTxTimeoutProcess+0x30>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	4798      	blx	r3
    }
}
 8008db4:	bf00      	nop
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	48000400 	.word	0x48000400
 8008dbc:	20000388 	.word	0x20000388

08008dc0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 8008dc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008dc8:	4808      	ldr	r0, [pc, #32]	@ (8008dec <RadioOnRxTimeoutProcess+0x2c>)
 8008dca:	f7fe ff2c 	bl	8007c26 <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008dce:	4b08      	ldr	r3, [pc, #32]	@ (8008df0 <RadioOnRxTimeoutProcess+0x30>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d008      	beq.n	8008de8 <RadioOnRxTimeoutProcess+0x28>
 8008dd6:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <RadioOnRxTimeoutProcess+0x30>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d003      	beq.n	8008de8 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8008de0:	4b03      	ldr	r3, [pc, #12]	@ (8008df0 <RadioOnRxTimeoutProcess+0x30>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	4798      	blx	r3
    }
}
 8008de8:	bf00      	nop
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	48000400 	.word	0x48000400
 8008df0:	20000388 	.word	0x20000388

08008df4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8008dfe:	4a05      	ldr	r2, [pc, #20]	@ (8008e14 <RadioOnDioIrq+0x20>)
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8008e06:	f000 f807 	bl	8008e18 <RadioIrqProcess>
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	2000038c 	.word	0x2000038c

08008e18 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008e18:	b5b0      	push	{r4, r5, r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008e26:	4baf      	ldr	r3, [pc, #700]	@ (80090e4 <RadioIrqProcess+0x2cc>)
 8008e28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e30:	f000 8117 	beq.w	8009062 <RadioIrqProcess+0x24a>
 8008e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e38:	f300 81d6 	bgt.w	80091e8 <RadioIrqProcess+0x3d0>
 8008e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e40:	f000 80fb 	beq.w	800903a <RadioIrqProcess+0x222>
 8008e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e48:	f300 81ce 	bgt.w	80091e8 <RadioIrqProcess+0x3d0>
 8008e4c:	2b80      	cmp	r3, #128	@ 0x80
 8008e4e:	f000 80e0 	beq.w	8009012 <RadioIrqProcess+0x1fa>
 8008e52:	2b80      	cmp	r3, #128	@ 0x80
 8008e54:	f300 81c8 	bgt.w	80091e8 <RadioIrqProcess+0x3d0>
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	dc49      	bgt.n	8008ef0 <RadioIrqProcess+0xd8>
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f340 81c3 	ble.w	80091e8 <RadioIrqProcess+0x3d0>
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b1f      	cmp	r3, #31
 8008e66:	f200 81bf 	bhi.w	80091e8 <RadioIrqProcess+0x3d0>
 8008e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <RadioIrqProcess+0x58>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008ef9 	.word	0x08008ef9
 8008e74:	08008f3d 	.word	0x08008f3d
 8008e78:	080091e9 	.word	0x080091e9
 8008e7c:	08009105 	.word	0x08009105
 8008e80:	080091e9 	.word	0x080091e9
 8008e84:	080091e9 	.word	0x080091e9
 8008e88:	080091e9 	.word	0x080091e9
 8008e8c:	08009173 	.word	0x08009173
 8008e90:	080091e9 	.word	0x080091e9
 8008e94:	080091e9 	.word	0x080091e9
 8008e98:	080091e9 	.word	0x080091e9
 8008e9c:	080091e9 	.word	0x080091e9
 8008ea0:	080091e9 	.word	0x080091e9
 8008ea4:	080091e9 	.word	0x080091e9
 8008ea8:	080091e9 	.word	0x080091e9
 8008eac:	080091e9 	.word	0x080091e9
 8008eb0:	080091e9 	.word	0x080091e9
 8008eb4:	080091e9 	.word	0x080091e9
 8008eb8:	080091e9 	.word	0x080091e9
 8008ebc:	080091e9 	.word	0x080091e9
 8008ec0:	080091e9 	.word	0x080091e9
 8008ec4:	080091e9 	.word	0x080091e9
 8008ec8:	080091e9 	.word	0x080091e9
 8008ecc:	080091e9 	.word	0x080091e9
 8008ed0:	080091e9 	.word	0x080091e9
 8008ed4:	080091e9 	.word	0x080091e9
 8008ed8:	080091e9 	.word	0x080091e9
 8008edc:	080091e9 	.word	0x080091e9
 8008ee0:	080091e9 	.word	0x080091e9
 8008ee4:	080091e9 	.word	0x080091e9
 8008ee8:	080091e9 	.word	0x080091e9
 8008eec:	08009183 	.word	0x08009183
 8008ef0:	2b40      	cmp	r3, #64	@ 0x40
 8008ef2:	f000 8161 	beq.w	80091b8 <RadioIrqProcess+0x3a0>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008ef6:	e177      	b.n	80091e8 <RadioIrqProcess+0x3d0>
        DBG_GPIO_RADIO_TX( RST );
 8008ef8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008efc:	487a      	ldr	r0, [pc, #488]	@ (80090e8 <RadioIrqProcess+0x2d0>)
 8008efe:	f7fe fe92 	bl	8007c26 <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8008f02:	487a      	ldr	r0, [pc, #488]	@ (80090ec <RadioIrqProcess+0x2d4>)
 8008f04:	f003 f954 	bl	800c1b0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008f08:	2000      	movs	r0, #0
 8008f0a:	f000 fffd 	bl	8009f08 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008f0e:	f002 f88d 	bl	800b02c <RFW_Is_LongPacketModeEnabled>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8008f18:	f002 f8b1 	bl	800b07e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008f1c:	4b74      	ldr	r3, [pc, #464]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8163 	beq.w	80091ec <RadioIrqProcess+0x3d4>
 8008f26:	4b72      	ldr	r3, [pc, #456]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 815d 	beq.w	80091ec <RadioIrqProcess+0x3d4>
            RadioEvents->TxDone( );
 8008f32:	4b6f      	ldr	r3, [pc, #444]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4798      	blx	r3
        break;
 8008f3a:	e157      	b.n	80091ec <RadioIrqProcess+0x3d4>
        DBG_GPIO_RADIO_RX( RST );
 8008f3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008f40:	4869      	ldr	r0, [pc, #420]	@ (80090e8 <RadioIrqProcess+0x2d0>)
 8008f42:	f7fe fe70 	bl	8007c26 <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8008f46:	486b      	ldr	r0, [pc, #428]	@ (80090f4 <RadioIrqProcess+0x2dc>)
 8008f48:	f003 f932 	bl	800c1b0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008f4c:	4b65      	ldr	r3, [pc, #404]	@ (80090e4 <RadioIrqProcess+0x2cc>)
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	f083 0301 	eor.w	r3, r3, #1
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d014      	beq.n	8008f84 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f000 ffd4 	bl	8009f08 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008f60:	2100      	movs	r1, #0
 8008f62:	f640 1002 	movw	r0, #2306	@ 0x902
 8008f66:	f001 fd53 	bl	800aa10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008f6a:	f640 1044 	movw	r0, #2372	@ 0x944
 8008f6e:	f001 fd71 	bl	800aa54 <SUBGRF_ReadRegister>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f043 0302 	orr.w	r3, r3, #2
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	f640 1044 	movw	r0, #2372	@ 0x944
 8008f80:	f001 fd46 	bl	800aa10 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008f84:	1dfb      	adds	r3, r7, #7
 8008f86:	22ff      	movs	r2, #255	@ 0xff
 8008f88:	4619      	mov	r1, r3
 8008f8a:	485b      	ldr	r0, [pc, #364]	@ (80090f8 <RadioIrqProcess+0x2e0>)
 8008f8c:	f000 fe8c 	bl	8009ca8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008f90:	485a      	ldr	r0, [pc, #360]	@ (80090fc <RadioIrqProcess+0x2e4>)
 8008f92:	f001 fceb 	bl	800a96c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008f96:	4b56      	ldr	r3, [pc, #344]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 8128 	beq.w	80091f0 <RadioIrqProcess+0x3d8>
 8008fa0:	4b53      	ldr	r3, [pc, #332]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 8122 	beq.w	80091f0 <RadioIrqProcess+0x3d8>
            switch( SubgRf.PacketStatus.packetType )
 8008fac:	4b4d      	ldr	r3, [pc, #308]	@ (80090e4 <RadioIrqProcess+0x2cc>)
 8008fae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d10e      	bne.n	8008fd4 <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689c      	ldr	r4, [r3, #8]
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4b48      	ldr	r3, [pc, #288]	@ (80090e4 <RadioIrqProcess+0x2cc>)
 8008fc2:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4b46      	ldr	r3, [pc, #280]	@ (80090e4 <RadioIrqProcess+0x2cc>)
 8008fca:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8008fce:	484a      	ldr	r0, [pc, #296]	@ (80090f8 <RadioIrqProcess+0x2e0>)
 8008fd0:	47a0      	blx	r4
                break;
 8008fd2:	e01d      	b.n	8009010 <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008fd4:	4b43      	ldr	r3, [pc, #268]	@ (80090e4 <RadioIrqProcess+0x2cc>)
 8008fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd8:	463a      	mov	r2, r7
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 ff73 	bl	800aec8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8008fe2:	4b43      	ldr	r3, [pc, #268]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689c      	ldr	r4, [r3, #8]
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	4619      	mov	r1, r3
 8008fec:	4b3d      	ldr	r3, [pc, #244]	@ (80090e4 <RadioIrqProcess+0x2cc>)
 8008fee:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008ffa:	4a41      	ldr	r2, [pc, #260]	@ (8009100 <RadioIrqProcess+0x2e8>)
 8008ffc:	fb82 5203 	smull	r5, r2, r2, r3
 8009000:	1192      	asrs	r2, r2, #6
 8009002:	17db      	asrs	r3, r3, #31
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	b25b      	sxtb	r3, r3
 8009008:	4602      	mov	r2, r0
 800900a:	483b      	ldr	r0, [pc, #236]	@ (80090f8 <RadioIrqProcess+0x2e0>)
 800900c:	47a0      	blx	r4
                break;
 800900e:	bf00      	nop
        break;
 8009010:	e0ee      	b.n	80091f0 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8009012:	2000      	movs	r0, #0
 8009014:	f000 ff78 	bl	8009f08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009018:	4b35      	ldr	r3, [pc, #212]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 80e9 	beq.w	80091f4 <RadioIrqProcess+0x3dc>
 8009022:	4b33      	ldr	r3, [pc, #204]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 80e3 	beq.w	80091f4 <RadioIrqProcess+0x3dc>
            RadioEvents->CadDone( false );
 800902e:	4b30      	ldr	r3, [pc, #192]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	2000      	movs	r0, #0
 8009036:	4798      	blx	r3
        break;
 8009038:	e0dc      	b.n	80091f4 <RadioIrqProcess+0x3dc>
        SUBGRF_SetStandby( STDBY_RC );
 800903a:	2000      	movs	r0, #0
 800903c:	f000 ff64 	bl	8009f08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009040:	4b2b      	ldr	r3, [pc, #172]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 80d7 	beq.w	80091f8 <RadioIrqProcess+0x3e0>
 800904a:	4b29      	ldr	r3, [pc, #164]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 80d1 	beq.w	80091f8 <RadioIrqProcess+0x3e0>
            RadioEvents->CadDone( true );
 8009056:	4b26      	ldr	r3, [pc, #152]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	2001      	movs	r0, #1
 800905e:	4798      	blx	r3
        break;
 8009060:	e0ca      	b.n	80091f8 <RadioIrqProcess+0x3e0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009062:	f000 fe07 	bl	8009c74 <SUBGRF_GetOperatingMode>
 8009066:	4603      	mov	r3, r0
 8009068:	2b04      	cmp	r3, #4
 800906a:	d11a      	bne.n	80090a2 <RadioIrqProcess+0x28a>
            DBG_GPIO_RADIO_TX( RST );
 800906c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009070:	481d      	ldr	r0, [pc, #116]	@ (80090e8 <RadioIrqProcess+0x2d0>)
 8009072:	f7fe fdd8 	bl	8007c26 <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8009076:	481d      	ldr	r0, [pc, #116]	@ (80090ec <RadioIrqProcess+0x2d4>)
 8009078:	f003 f89a 	bl	800c1b0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800907c:	2000      	movs	r0, #0
 800907e:	f000 ff43 	bl	8009f08 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009082:	4b1b      	ldr	r3, [pc, #108]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 80b8 	beq.w	80091fc <RadioIrqProcess+0x3e4>
 800908c:	4b18      	ldr	r3, [pc, #96]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80b2 	beq.w	80091fc <RadioIrqProcess+0x3e4>
                RadioEvents->TxTimeout( );
 8009098:	4b15      	ldr	r3, [pc, #84]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	4798      	blx	r3
        break;
 80090a0:	e0ac      	b.n	80091fc <RadioIrqProcess+0x3e4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80090a2:	f000 fde7 	bl	8009c74 <SUBGRF_GetOperatingMode>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b05      	cmp	r3, #5
 80090aa:	f040 80a7 	bne.w	80091fc <RadioIrqProcess+0x3e4>
            DBG_GPIO_RADIO_RX( RST );
 80090ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80090b2:	480d      	ldr	r0, [pc, #52]	@ (80090e8 <RadioIrqProcess+0x2d0>)
 80090b4:	f7fe fdb7 	bl	8007c26 <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 80090b8:	480e      	ldr	r0, [pc, #56]	@ (80090f4 <RadioIrqProcess+0x2dc>)
 80090ba:	f003 f879 	bl	800c1b0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80090be:	2000      	movs	r0, #0
 80090c0:	f000 ff22 	bl	8009f08 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80090c4:	4b0a      	ldr	r3, [pc, #40]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8097 	beq.w	80091fc <RadioIrqProcess+0x3e4>
 80090ce:	4b08      	ldr	r3, [pc, #32]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8091 	beq.w	80091fc <RadioIrqProcess+0x3e4>
                RadioEvents->RxTimeout( );
 80090da:	4b05      	ldr	r3, [pc, #20]	@ (80090f0 <RadioIrqProcess+0x2d8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	4798      	blx	r3
        break;
 80090e2:	e08b      	b.n	80091fc <RadioIrqProcess+0x3e4>
 80090e4:	2000038c 	.word	0x2000038c
 80090e8:	48000400 	.word	0x48000400
 80090ec:	200003e8 	.word	0x200003e8
 80090f0:	20000388 	.word	0x20000388
 80090f4:	20000400 	.word	0x20000400
 80090f8:	20000288 	.word	0x20000288
 80090fc:	200003b0 	.word	0x200003b0
 8009100:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009104:	4b44      	ldr	r3, [pc, #272]	@ (8009218 <RadioIrqProcess+0x400>)
 8009106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009108:	2b00      	cmp	r3, #0
 800910a:	d079      	beq.n	8009200 <RadioIrqProcess+0x3e8>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800910c:	4a43      	ldr	r2, [pc, #268]	@ (800921c <RadioIrqProcess+0x404>)
 800910e:	4b42      	ldr	r3, [pc, #264]	@ (8009218 <RadioIrqProcess+0x400>)
 8009110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009112:	0c1b      	lsrs	r3, r3, #16
 8009114:	b2db      	uxtb	r3, r3
 8009116:	4619      	mov	r1, r3
 8009118:	f640 1003 	movw	r0, #2307	@ 0x903
 800911c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800911e:	4a3f      	ldr	r2, [pc, #252]	@ (800921c <RadioIrqProcess+0x404>)
 8009120:	4b3d      	ldr	r3, [pc, #244]	@ (8009218 <RadioIrqProcess+0x400>)
 8009122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	b2db      	uxtb	r3, r3
 8009128:	4619      	mov	r1, r3
 800912a:	f640 1004 	movw	r0, #2308	@ 0x904
 800912e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009130:	4a3a      	ldr	r2, [pc, #232]	@ (800921c <RadioIrqProcess+0x404>)
 8009132:	4b39      	ldr	r3, [pc, #228]	@ (8009218 <RadioIrqProcess+0x400>)
 8009134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009136:	b2db      	uxtb	r3, r3
 8009138:	4619      	mov	r1, r3
 800913a:	f640 1005 	movw	r0, #2309	@ 0x905
 800913e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009140:	4c36      	ldr	r4, [pc, #216]	@ (800921c <RadioIrqProcess+0x404>)
 8009142:	4b37      	ldr	r3, [pc, #220]	@ (8009220 <RadioIrqProcess+0x408>)
 8009144:	f640 1002 	movw	r0, #2306	@ 0x902
 8009148:	4798      	blx	r3
 800914a:	4603      	mov	r3, r0
 800914c:	f043 0301 	orr.w	r3, r3, #1
 8009150:	b2db      	uxtb	r3, r3
 8009152:	4619      	mov	r1, r3
 8009154:	f640 1002 	movw	r0, #2306	@ 0x902
 8009158:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800915a:	4b2f      	ldr	r3, [pc, #188]	@ (8009218 <RadioIrqProcess+0x400>)
 800915c:	2200      	movs	r2, #0
 800915e:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009160:	2300      	movs	r3, #0
 8009162:	2200      	movs	r2, #0
 8009164:	f240 2162 	movw	r1, #610	@ 0x262
 8009168:	f240 2062 	movw	r0, #610	@ 0x262
 800916c:	f001 f8a0 	bl	800a2b0 <SUBGRF_SetDioIrqParams>
        break;
 8009170:	e046      	b.n	8009200 <RadioIrqProcess+0x3e8>
        if( 1UL == RFW_Is_Init( ) )
 8009172:	f001 ff54 	bl	800b01e <RFW_Is_Init>
 8009176:	4603      	mov	r3, r0
 8009178:	2b01      	cmp	r3, #1
 800917a:	d143      	bne.n	8009204 <RadioIrqProcess+0x3ec>
            RFW_ReceivePayload( );
 800917c:	f001 ff85 	bl	800b08a <RFW_ReceivePayload>
        break;
 8009180:	e040      	b.n	8009204 <RadioIrqProcess+0x3ec>
        TimerStop( &RxTimeoutTimer );
 8009182:	4828      	ldr	r0, [pc, #160]	@ (8009224 <RadioIrqProcess+0x40c>)
 8009184:	f003 f814 	bl	800c1b0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009188:	4b23      	ldr	r3, [pc, #140]	@ (8009218 <RadioIrqProcess+0x400>)
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	f083 0301 	eor.w	r3, r3, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <RadioIrqProcess+0x384>
            SUBGRF_SetStandby( STDBY_RC );
 8009196:	2000      	movs	r0, #0
 8009198:	f000 feb6 	bl	8009f08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800919c:	4b22      	ldr	r3, [pc, #136]	@ (8009228 <RadioIrqProcess+0x410>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d031      	beq.n	8009208 <RadioIrqProcess+0x3f0>
 80091a4:	4b20      	ldr	r3, [pc, #128]	@ (8009228 <RadioIrqProcess+0x410>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d02c      	beq.n	8009208 <RadioIrqProcess+0x3f0>
            RadioEvents->RxTimeout( );
 80091ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009228 <RadioIrqProcess+0x410>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	4798      	blx	r3
        break;
 80091b6:	e027      	b.n	8009208 <RadioIrqProcess+0x3f0>
        if( SubgRf.RxContinuous == false )
 80091b8:	4b17      	ldr	r3, [pc, #92]	@ (8009218 <RadioIrqProcess+0x400>)
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	f083 0301 	eor.w	r3, r3, #1
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <RadioIrqProcess+0x3b4>
            SUBGRF_SetStandby( STDBY_RC );
 80091c6:	2000      	movs	r0, #0
 80091c8:	f000 fe9e 	bl	8009f08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80091cc:	4b16      	ldr	r3, [pc, #88]	@ (8009228 <RadioIrqProcess+0x410>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d01b      	beq.n	800920c <RadioIrqProcess+0x3f4>
 80091d4:	4b14      	ldr	r3, [pc, #80]	@ (8009228 <RadioIrqProcess+0x410>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d016      	beq.n	800920c <RadioIrqProcess+0x3f4>
            RadioEvents->RxError( );
 80091de:	4b12      	ldr	r3, [pc, #72]	@ (8009228 <RadioIrqProcess+0x410>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	4798      	blx	r3
        break;
 80091e6:	e011      	b.n	800920c <RadioIrqProcess+0x3f4>
        break;
 80091e8:	bf00      	nop
 80091ea:	e010      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 80091ec:	bf00      	nop
 80091ee:	e00e      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 80091f0:	bf00      	nop
 80091f2:	e00c      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 80091f4:	bf00      	nop
 80091f6:	e00a      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 80091f8:	bf00      	nop
 80091fa:	e008      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 80091fc:	bf00      	nop
 80091fe:	e006      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 8009200:	bf00      	nop
 8009202:	e004      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 8009204:	bf00      	nop
 8009206:	e002      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 8009208:	bf00      	nop
 800920a:	e000      	b.n	800920e <RadioIrqProcess+0x3f6>
        break;
 800920c:	bf00      	nop
    }
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bdb0      	pop	{r4, r5, r7, pc}
 8009216:	bf00      	nop
 8009218:	2000038c 	.word	0x2000038c
 800921c:	08008c11 	.word	0x08008c11
 8009220:	08008c35 	.word	0x08008c35
 8009224:	20000400 	.word	0x20000400
 8009228:	20000388 	.word	0x20000388

0800922c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009230:	4b09      	ldr	r3, [pc, #36]	@ (8009258 <RadioTxPrbs+0x2c>)
 8009232:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009236:	2101      	movs	r1, #1
 8009238:	4618      	mov	r0, r3
 800923a:	f001 fcf7 	bl	800ac2c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800923e:	4b07      	ldr	r3, [pc, #28]	@ (800925c <RadioTxPrbs+0x30>)
 8009240:	212d      	movs	r1, #45	@ 0x2d
 8009242:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009246:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009248:	f000 ff21 	bl	800a08e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800924c:	4804      	ldr	r0, [pc, #16]	@ (8009260 <RadioTxPrbs+0x34>)
 800924e:	f000 fe77 	bl	8009f40 <SUBGRF_SetTx>
}
 8009252:	bf00      	nop
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	2000038c 	.word	0x2000038c
 800925c:	08008c11 	.word	0x08008c11
 8009260:	000fffff 	.word	0x000fffff

08009264 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800926e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009272:	4618      	mov	r0, r3
 8009274:	f001 fd02 	bl	800ac7c <SUBGRF_SetRfTxPower>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800927c:	210e      	movs	r1, #14
 800927e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009282:	f001 fbc5 	bl	800aa10 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	2101      	movs	r1, #1
 800928a:	4618      	mov	r0, r3
 800928c:	f001 fcce 	bl	800ac2c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009290:	f000 fef4 	bl	800a07c <SUBGRF_SetTxContinuousWave>
}
 8009294:	bf00      	nop
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800929c:	b480      	push	{r7}
 800929e:	b089      	sub	sp, #36	@ 0x24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80092b2:	2300      	movs	r3, #0
 80092b4:	61bb      	str	r3, [r7, #24]
 80092b6:	e011      	b.n	80092dc <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	781a      	ldrb	r2, [r3, #0]
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	440b      	add	r3, r1
 80092c6:	43d2      	mvns	r2, r2
 80092c8:	b2d2      	uxtb	r2, r2
 80092ca:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	4413      	add	r3, r2
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	3301      	adds	r3, #1
 80092da:	61bb      	str	r3, [r7, #24]
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	dbe9      	blt.n	80092b8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80092e4:	2300      	movs	r3, #0
 80092e6:	61bb      	str	r3, [r7, #24]
 80092e8:	e049      	b.n	800937e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	425a      	negs	r2, r3
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	f002 0207 	and.w	r2, r2, #7
 80092f6:	bf58      	it	pl
 80092f8:	4253      	negpl	r3, r2
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f1c3 0307 	rsb	r3, r3, #7
 8009300:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	da00      	bge.n	800930a <payload_integration+0x6e>
 8009308:	3307      	adds	r3, #7
 800930a:	10db      	asrs	r3, r3, #3
 800930c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	3301      	adds	r3, #1
 8009312:	425a      	negs	r2, r3
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	f002 0207 	and.w	r2, r2, #7
 800931c:	bf58      	it	pl
 800931e:	4253      	negpl	r3, r2
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f1c3 0307 	rsb	r3, r3, #7
 8009326:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	3301      	adds	r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	da00      	bge.n	8009332 <payload_integration+0x96>
 8009330:	3307      	adds	r3, #7
 8009332:	10db      	asrs	r3, r3, #3
 8009334:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009336:	7dbb      	ldrb	r3, [r7, #22]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	4413      	add	r3, r2
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	fa42 f303 	asr.w	r3, r2, r3
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800934e:	7ffa      	ldrb	r2, [r7, #31]
 8009350:	7cfb      	ldrb	r3, [r7, #19]
 8009352:	4053      	eors	r3, r2
 8009354:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009356:	7d3b      	ldrb	r3, [r7, #20]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	b25a      	sxtb	r2, r3
 8009360:	7ff9      	ldrb	r1, [r7, #31]
 8009362:	7d7b      	ldrb	r3, [r7, #21]
 8009364:	fa01 f303 	lsl.w	r3, r1, r3
 8009368:	b25b      	sxtb	r3, r3
 800936a:	4313      	orrs	r3, r2
 800936c:	b259      	sxtb	r1, r3
 800936e:	7d3b      	ldrb	r3, [r7, #20]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	b2ca      	uxtb	r2, r1
 8009376:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	3301      	adds	r3, #1
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	429a      	cmp	r2, r3
 8009386:	dbb0      	blt.n	80092ea <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009388:	7ffb      	ldrb	r3, [r7, #31]
 800938a:	01db      	lsls	r3, r3, #7
 800938c:	b25a      	sxtb	r2, r3
 800938e:	7ffb      	ldrb	r3, [r7, #31]
 8009390:	019b      	lsls	r3, r3, #6
 8009392:	b25b      	sxtb	r3, r3
 8009394:	4313      	orrs	r3, r2
 8009396:	b25b      	sxtb	r3, r3
 8009398:	7ffa      	ldrb	r2, [r7, #31]
 800939a:	2a00      	cmp	r2, #0
 800939c:	d101      	bne.n	80093a2 <payload_integration+0x106>
 800939e:	2220      	movs	r2, #32
 80093a0:	e000      	b.n	80093a4 <payload_integration+0x108>
 80093a2:	2200      	movs	r2, #0
 80093a4:	4313      	orrs	r3, r2
 80093a6:	b259      	sxtb	r1, r3
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	b2ca      	uxtb	r2, r1
 80093b0:	701a      	strb	r2, [r3, #0]
}
 80093b2:	bf00      	nop
 80093b4:	3724      	adds	r7, #36	@ 0x24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bc80      	pop	{r7}
 80093ba:	4770      	bx	lr

080093bc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08c      	sub	sp, #48	@ 0x30
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80093d0:	2300      	movs	r3, #0
 80093d2:	623b      	str	r3, [r7, #32]
 80093d4:	2300      	movs	r3, #0
 80093d6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80093d8:	f001 fe1b 	bl	800b012 <RFW_DeInit>

    if( rxContinuous != 0 )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bf14      	ite	ne
 80093ec:	2301      	movne	r3, #1
 80093ee:	2300      	moveq	r3, #0
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	4ba4      	ldr	r3, [pc, #656]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 80093f4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <RadioSetRxGenericConfig+0x48>
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	f000 80dc 	beq.w	80095ba <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009402:	e196      	b.n	8009732 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <RadioSetRxGenericConfig+0x58>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009414:	f04f 33ff 	mov.w	r3, #4294967295
 8009418:	e18c      	b.n	8009734 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	7f9b      	ldrb	r3, [r3, #30]
 800941e:	2b08      	cmp	r3, #8
 8009420:	d902      	bls.n	8009428 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	e185      	b.n	8009734 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	6919      	ldr	r1, [r3, #16]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	7f9b      	ldrb	r3, [r3, #30]
 8009430:	461a      	mov	r2, r3
 8009432:	f107 0320 	add.w	r3, r7, #32
 8009436:	4618      	mov	r0, r3
 8009438:	f002 f966 	bl	800b708 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	bf14      	ite	ne
 8009444:	2301      	movne	r3, #1
 8009446:	2300      	moveq	r3, #0
 8009448:	b2db      	uxtb	r3, r3
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fe28 	bl	800a0a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009450:	4b8c      	ldr	r3, [pc, #560]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	4a89      	ldr	r2, [pc, #548]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800945e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009466:	4b87      	ldr	r3, [pc, #540]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	4618      	mov	r0, r3
 8009472:	f001 fd01 	bl	800ae78 <SUBGRF_GetFskBandwidthRegValue>
 8009476:	4603      	mov	r3, r0
 8009478:	461a      	mov	r2, r3
 800947a:	4b82      	ldr	r3, [pc, #520]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800947c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009480:	4b80      	ldr	r3, [pc, #512]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009482:	2200      	movs	r2, #0
 8009484:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	b29b      	uxth	r3, r3
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	b29a      	uxth	r2, r3
 8009490:	4b7c      	ldr	r3, [pc, #496]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009492:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	7fda      	ldrb	r2, [r3, #31]
 8009498:	4b7a      	ldr	r3, [pc, #488]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800949a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	7f9b      	ldrb	r3, [r3, #30]
 80094a0:	00db      	lsls	r3, r3, #3
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	4b77      	ldr	r3, [pc, #476]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 80094a6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80094ae:	4b75      	ldr	r3, [pc, #468]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 80094b0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d105      	bne.n	80094c8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	4b70      	ldr	r3, [pc, #448]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 80094c4:	759a      	strb	r2, [r3, #22]
 80094c6:	e00b      	b.n	80094e0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d103      	bne.n	80094da <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80094d2:	4b6c      	ldr	r3, [pc, #432]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 80094d4:	22ff      	movs	r2, #255	@ 0xff
 80094d6:	759a      	strb	r2, [r3, #22]
 80094d8:	e002      	b.n	80094e0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80094da:	4b6a      	ldr	r3, [pc, #424]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 80094dc:	22ff      	movs	r2, #255	@ 0xff
 80094de:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d004      	beq.n	80094f4 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d12d      	bne.n	8009550 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80094fa:	2bf1      	cmp	r3, #241	@ 0xf1
 80094fc:	d00c      	beq.n	8009518 <RadioSetRxGenericConfig+0x15c>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009504:	2bf2      	cmp	r3, #242	@ 0xf2
 8009506:	d007      	beq.n	8009518 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800950e:	2b01      	cmp	r3, #1
 8009510:	d002      	beq.n	8009518 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8009512:	f04f 33ff 	mov.w	r3, #4294967295
 8009516:	e10d      	b.n	8009734 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8009518:	2300      	movs	r3, #0
 800951a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009520:	4b59      	ldr	r3, [pc, #356]	@ (8009688 <RadioSetRxGenericConfig+0x2cc>)
 8009522:	6819      	ldr	r1, [r3, #0]
 8009524:	f107 0314 	add.w	r3, r7, #20
 8009528:	4a58      	ldr	r2, [pc, #352]	@ (800968c <RadioSetRxGenericConfig+0x2d0>)
 800952a:	4618      	mov	r0, r3
 800952c:	f001 fd64 	bl	800aff8 <RFW_Init>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <RadioSetRxGenericConfig+0x180>
                return -1;
 8009536:	f04f 33ff 	mov.w	r3, #4294967295
 800953a:	e0fb      	b.n	8009734 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800953c:	4b51      	ldr	r3, [pc, #324]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800953e:	2200      	movs	r2, #0
 8009540:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009542:	4b50      	ldr	r3, [pc, #320]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009544:	2201      	movs	r2, #1
 8009546:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009548:	4b4e      	ldr	r3, [pc, #312]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800954a:	2200      	movs	r2, #0
 800954c:	755a      	strb	r2, [r3, #21]
        {
 800954e:	e00e      	b.n	800956e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8009556:	4b4b      	ldr	r3, [pc, #300]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009558:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009560:	4b48      	ldr	r3, [pc, #288]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009562:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800956a:	4b46      	ldr	r3, [pc, #280]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800956c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800956e:	f7ff fa42 	bl	80089f6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009572:	2000      	movs	r0, #0
 8009574:	f7fe fbd8 	bl	8007d28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009578:	4845      	ldr	r0, [pc, #276]	@ (8009690 <RadioSetRxGenericConfig+0x2d4>)
 800957a:	f001 f82f 	bl	800a5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800957e:	4845      	ldr	r0, [pc, #276]	@ (8009694 <RadioSetRxGenericConfig+0x2d8>)
 8009580:	f001 f8fe 	bl	800a780 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009584:	f107 0320 	add.w	r3, r7, #32
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fbc2 	bl	8009d12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	8b9b      	ldrh	r3, [r3, #28]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fc0c 	bl	8009db0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	8b1b      	ldrh	r3, [r3, #24]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fbe7 	bl	8009d70 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80095a8:	fb03 f202 	mul.w	r2, r3, r2
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b4:	4a33      	ldr	r2, [pc, #204]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 80095b6:	6093      	str	r3, [r2, #8]
        break;
 80095b8:	e0bb      	b.n	8009732 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80095c2:	f04f 33ff 	mov.w	r3, #4294967295
 80095c6:	e0b5      	b.n	8009734 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d105      	bne.n	80095de <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80095d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80095dc:	e002      	b.n	80095e4 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 80095de:	23ff      	movs	r3, #255	@ 0xff
 80095e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	bf14      	ite	ne
 80095ec:	2301      	movne	r3, #1
 80095ee:	2300      	moveq	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fd54 	bl	800a0a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 fd5e 	bl	800a0be <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009602:	4b20      	ldr	r3, [pc, #128]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8009610:	4b1c      	ldr	r3, [pc, #112]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800961c:	4b19      	ldr	r3, [pc, #100]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800961e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8009628:	4b16      	ldr	r3, [pc, #88]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800962a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009634:	2b02      	cmp	r3, #2
 8009636:	d010      	beq.n	800965a <RadioSetRxGenericConfig+0x29e>
 8009638:	2b02      	cmp	r3, #2
 800963a:	dc2d      	bgt.n	8009698 <RadioSetRxGenericConfig+0x2dc>
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <RadioSetRxGenericConfig+0x28a>
 8009640:	2b01      	cmp	r3, #1
 8009642:	d005      	beq.n	8009650 <RadioSetRxGenericConfig+0x294>
            break;
 8009644:	e028      	b.n	8009698 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009646:	4b0f      	ldr	r3, [pc, #60]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800964e:	e024      	b.n	800969a <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009650:	4b0c      	ldr	r3, [pc, #48]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009658:	e01f      	b.n	800969a <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009660:	2b0b      	cmp	r3, #11
 8009662:	d004      	beq.n	800966e <RadioSetRxGenericConfig+0x2b2>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800966a:	2b0c      	cmp	r3, #12
 800966c:	d104      	bne.n	8009678 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800966e:	4b05      	ldr	r3, [pc, #20]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009670:	2201      	movs	r2, #1
 8009672:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009676:	e010      	b.n	800969a <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009678:	4b02      	ldr	r3, [pc, #8]	@ (8009684 <RadioSetRxGenericConfig+0x2c8>)
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009680:	e00b      	b.n	800969a <RadioSetRxGenericConfig+0x2de>
 8009682:	bf00      	nop
 8009684:	2000038c 	.word	0x2000038c
 8009688:	20000388 	.word	0x20000388
 800968c:	20000400 	.word	0x20000400
 8009690:	200003c4 	.word	0x200003c4
 8009694:	2000039a 	.word	0x2000039a
            break;
 8009698:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800969a:	4b28      	ldr	r3, [pc, #160]	@ (800973c <RadioSetRxGenericConfig+0x380>)
 800969c:	2201      	movs	r2, #1
 800969e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80096a4:	4b25      	ldr	r3, [pc, #148]	@ (800973c <RadioSetRxGenericConfig+0x380>)
 80096a6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80096ae:	4b23      	ldr	r3, [pc, #140]	@ (800973c <RadioSetRxGenericConfig+0x380>)
 80096b0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80096b2:	4a22      	ldr	r2, [pc, #136]	@ (800973c <RadioSetRxGenericConfig+0x380>)
 80096b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096b8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80096c0:	4b1e      	ldr	r3, [pc, #120]	@ (800973c <RadioSetRxGenericConfig+0x380>)
 80096c2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80096cc:	4b1b      	ldr	r3, [pc, #108]	@ (800973c <RadioSetRxGenericConfig+0x380>)
 80096ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80096d2:	f7ff f990 	bl	80089f6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80096d6:	2001      	movs	r0, #1
 80096d8:	f7fe fb26 	bl	8007d28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80096dc:	4818      	ldr	r0, [pc, #96]	@ (8009740 <RadioSetRxGenericConfig+0x384>)
 80096de:	f000 ff7d 	bl	800a5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80096e2:	4818      	ldr	r0, [pc, #96]	@ (8009744 <RadioSetRxGenericConfig+0x388>)
 80096e4:	f001 f84c 	bl	800a780 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80096e8:	4b14      	ldr	r3, [pc, #80]	@ (800973c <RadioSetRxGenericConfig+0x380>)
 80096ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d10d      	bne.n	800970e <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80096f2:	f240 7036 	movw	r0, #1846	@ 0x736
 80096f6:	f001 f9ad 	bl	800aa54 <SUBGRF_ReadRegister>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f023 0304 	bic.w	r3, r3, #4
 8009700:	b2db      	uxtb	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	f240 7036 	movw	r0, #1846	@ 0x736
 8009708:	f001 f982 	bl	800aa10 <SUBGRF_WriteRegister>
 800970c:	e00c      	b.n	8009728 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800970e:	f240 7036 	movw	r0, #1846	@ 0x736
 8009712:	f001 f99f 	bl	800aa54 <SUBGRF_ReadRegister>
 8009716:	4603      	mov	r3, r0
 8009718:	f043 0304 	orr.w	r3, r3, #4
 800971c:	b2db      	uxtb	r3, r3
 800971e:	4619      	mov	r1, r3
 8009720:	f240 7036 	movw	r0, #1846	@ 0x736
 8009724:	f001 f974 	bl	800aa10 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009728:	4b04      	ldr	r3, [pc, #16]	@ (800973c <RadioSetRxGenericConfig+0x380>)
 800972a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800972e:	609a      	str	r2, [r3, #8]
        break;
 8009730:	bf00      	nop
    }
    return status;
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009734:	4618      	mov	r0, r3
 8009736:	3730      	adds	r7, #48	@ 0x30
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	2000038c 	.word	0x2000038c
 8009740:	200003c4 	.word	0x200003c4
 8009744:	2000039a 	.word	0x2000039a

08009748 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08e      	sub	sp, #56	@ 0x38
 800974c:	af00      	add	r7, sp, #0
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	607b      	str	r3, [r7, #4]
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]
 8009756:	4613      	mov	r3, r2
 8009758:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800975a:	2300      	movs	r3, #0
 800975c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800975e:	2300      	movs	r3, #0
 8009760:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009762:	f001 fc56 	bl	800b012 <RFW_DeInit>
    switch( modem )
 8009766:	7bfb      	ldrb	r3, [r7, #15]
 8009768:	2b03      	cmp	r3, #3
 800976a:	f200 8204 	bhi.w	8009b76 <RadioSetTxGenericConfig+0x42e>
 800976e:	a201      	add	r2, pc, #4	@ (adr r2, 8009774 <RadioSetTxGenericConfig+0x2c>)
 8009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009774:	080098f9 	.word	0x080098f9
 8009778:	08009a41 	.word	0x08009a41
 800977c:	08009b39 	.word	0x08009b39
 8009780:	08009785 	.word	0x08009785
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	7c9b      	ldrb	r3, [r3, #18]
 8009788:	2b08      	cmp	r3, #8
 800978a:	d902      	bls.n	8009792 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800978c:	f04f 33ff 	mov.w	r3, #4294967295
 8009790:	e206      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	6899      	ldr	r1, [r3, #8]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	7c9b      	ldrb	r3, [r3, #18]
 800979a:	461a      	mov	r2, r3
 800979c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 ffb1 	bl	800b708 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d102      	bne.n	80097b4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80097ae:	f04f 33ff 	mov.w	r3, #4294967295
 80097b2:	e1f5      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80097bc:	4293      	cmp	r3, r2
 80097be:	d813      	bhi.n	80097e8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80097c0:	2302      	movs	r3, #2
 80097c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80097c6:	4b99      	ldr	r3, [pc, #612]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80097c8:	2203      	movs	r2, #3
 80097ca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80097cc:	4b97      	ldr	r3, [pc, #604]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80097ce:	2203      	movs	r2, #3
 80097d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a94      	ldr	r2, [pc, #592]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80097da:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	7cda      	ldrb	r2, [r3, #19]
 80097e0:	4b92      	ldr	r3, [pc, #584]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80097e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097e6:	e017      	b.n	8009818 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80097ee:	4b8f      	ldr	r3, [pc, #572]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80097f4:	4b8d      	ldr	r3, [pc, #564]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a8a      	ldr	r2, [pc, #552]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009802:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	7cda      	ldrb	r2, [r3, #19]
 8009808:	4b88      	ldr	r3, [pc, #544]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 800980a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	089b      	lsrs	r3, r3, #2
 8009814:	4a85      	ldr	r2, [pc, #532]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009816:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	b29b      	uxth	r3, r3
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	b29a      	uxth	r2, r3
 8009822:	4b82      	ldr	r3, [pc, #520]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009824:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009826:	4b81      	ldr	r3, [pc, #516]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009828:	2204      	movs	r2, #4
 800982a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	7c9b      	ldrb	r3, [r3, #18]
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	b2da      	uxtb	r2, r3
 8009834:	4b7d      	ldr	r3, [pc, #500]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009836:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009838:	4b7c      	ldr	r3, [pc, #496]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 800983a:	2200      	movs	r2, #0
 800983c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	7d9b      	ldrb	r3, [r3, #22]
 8009842:	2b02      	cmp	r3, #2
 8009844:	d003      	beq.n	800984e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	7d1b      	ldrb	r3, [r3, #20]
 800984a:	2b02      	cmp	r3, #2
 800984c:	d12b      	bne.n	80098a6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	7d5b      	ldrb	r3, [r3, #21]
 8009852:	2bf1      	cmp	r3, #241	@ 0xf1
 8009854:	d00a      	beq.n	800986c <RadioSetTxGenericConfig+0x124>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	7d5b      	ldrb	r3, [r3, #21]
 800985a:	2bf2      	cmp	r3, #242	@ 0xf2
 800985c:	d006      	beq.n	800986c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	7d5b      	ldrb	r3, [r3, #21]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d002      	beq.n	800986c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009866:	f04f 33ff 	mov.w	r3, #4294967295
 800986a:	e199      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009876:	4b6e      	ldr	r3, [pc, #440]	@ (8009a30 <RadioSetTxGenericConfig+0x2e8>)
 8009878:	6819      	ldr	r1, [r3, #0]
 800987a:	f107 0320 	add.w	r3, r7, #32
 800987e:	4a6d      	ldr	r2, [pc, #436]	@ (8009a34 <RadioSetTxGenericConfig+0x2ec>)
 8009880:	4618      	mov	r0, r3
 8009882:	f001 fbb9 	bl	800aff8 <RFW_Init>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800988c:	f04f 33ff 	mov.w	r3, #4294967295
 8009890:	e186      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009892:	4b66      	ldr	r3, [pc, #408]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009894:	2200      	movs	r2, #0
 8009896:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009898:	4b64      	ldr	r3, [pc, #400]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 800989a:	2201      	movs	r2, #1
 800989c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800989e:	4b63      	ldr	r3, [pc, #396]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	755a      	strb	r2, [r3, #21]
        {
 80098a4:	e00b      	b.n	80098be <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	7d5a      	ldrb	r2, [r3, #21]
 80098aa:	4b60      	ldr	r3, [pc, #384]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80098ac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	7d9a      	ldrb	r2, [r3, #22]
 80098b2:	4b5e      	ldr	r3, [pc, #376]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80098b4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	7d1a      	ldrb	r2, [r3, #20]
 80098ba:	4b5c      	ldr	r3, [pc, #368]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80098bc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80098be:	f7ff f89a 	bl	80089f6 <RadioStandby>
        RadioSetModem( radio_modem );
 80098c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fa2e 	bl	8007d28 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80098cc:	485a      	ldr	r0, [pc, #360]	@ (8009a38 <RadioSetTxGenericConfig+0x2f0>)
 80098ce:	f000 fe85 	bl	800a5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80098d2:	485a      	ldr	r0, [pc, #360]	@ (8009a3c <RadioSetTxGenericConfig+0x2f4>)
 80098d4:	f000 ff54 	bl	800a780 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80098d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fa18 	bl	8009d12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	8a1b      	ldrh	r3, [r3, #16]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fa62 	bl	8009db0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	899b      	ldrh	r3, [r3, #12]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fa3d 	bl	8009d70 <SUBGRF_SetCrcPolynomial>
        break;
 80098f6:	e13f      	b.n	8009b78 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	e14c      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	7c9b      	ldrb	r3, [r3, #18]
 800990a:	2b08      	cmp	r3, #8
 800990c:	d902      	bls.n	8009914 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	e145      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	6899      	ldr	r1, [r3, #8]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	7c9b      	ldrb	r3, [r3, #18]
 800991c:	461a      	mov	r2, r3
 800991e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009922:	4618      	mov	r0, r3
 8009924:	f001 fef0 	bl	800b708 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009928:	4b40      	ldr	r3, [pc, #256]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a3d      	ldr	r2, [pc, #244]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009936:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	7cda      	ldrb	r2, [r3, #19]
 800993c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 800993e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	4a39      	ldr	r2, [pc, #228]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009948:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800994a:	4b38      	ldr	r3, [pc, #224]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 800994c:	2200      	movs	r2, #0
 800994e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	b29b      	uxth	r3, r3
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	b29a      	uxth	r2, r3
 800995a:	4b34      	ldr	r3, [pc, #208]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 800995c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800995e:	4b33      	ldr	r3, [pc, #204]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009960:	2204      	movs	r2, #4
 8009962:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	7c9b      	ldrb	r3, [r3, #18]
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	b2da      	uxtb	r2, r3
 800996c:	4b2f      	ldr	r3, [pc, #188]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 800996e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009970:	4b2e      	ldr	r3, [pc, #184]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 8009972:	2200      	movs	r2, #0
 8009974:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	7d9b      	ldrb	r3, [r3, #22]
 800997a:	2b02      	cmp	r3, #2
 800997c:	d003      	beq.n	8009986 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	7d1b      	ldrb	r3, [r3, #20]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d12a      	bne.n	80099dc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	7d5b      	ldrb	r3, [r3, #21]
 800998a:	2bf1      	cmp	r3, #241	@ 0xf1
 800998c:	d00a      	beq.n	80099a4 <RadioSetTxGenericConfig+0x25c>
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	7d5b      	ldrb	r3, [r3, #21]
 8009992:	2bf2      	cmp	r3, #242	@ 0xf2
 8009994:	d006      	beq.n	80099a4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	7d5b      	ldrb	r3, [r3, #21]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d002      	beq.n	80099a4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800999e:	f04f 33ff 	mov.w	r3, #4294967295
 80099a2:	e0fd      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80099a4:	2301      	movs	r3, #1
 80099a6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80099ac:	4b20      	ldr	r3, [pc, #128]	@ (8009a30 <RadioSetTxGenericConfig+0x2e8>)
 80099ae:	6819      	ldr	r1, [r3, #0]
 80099b0:	f107 0314 	add.w	r3, r7, #20
 80099b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009a34 <RadioSetTxGenericConfig+0x2ec>)
 80099b6:	4618      	mov	r0, r3
 80099b8:	f001 fb1e 	bl	800aff8 <RFW_Init>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 80099c2:	f04f 33ff 	mov.w	r3, #4294967295
 80099c6:	e0eb      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80099c8:	4b18      	ldr	r3, [pc, #96]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80099ce:	4b17      	ldr	r3, [pc, #92]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80099d4:	4b15      	ldr	r3, [pc, #84]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	755a      	strb	r2, [r3, #21]
        {
 80099da:	e00b      	b.n	80099f4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	7d5a      	ldrb	r2, [r3, #21]
 80099e0:	4b12      	ldr	r3, [pc, #72]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80099e2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	7d9a      	ldrb	r2, [r3, #22]
 80099e8:	4b10      	ldr	r3, [pc, #64]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80099ea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	7d1a      	ldrb	r2, [r3, #20]
 80099f0:	4b0e      	ldr	r3, [pc, #56]	@ (8009a2c <RadioSetTxGenericConfig+0x2e4>)
 80099f2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80099f4:	f7fe ffff 	bl	80089f6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80099f8:	2000      	movs	r0, #0
 80099fa:	f7fe f995 	bl	8007d28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80099fe:	480e      	ldr	r0, [pc, #56]	@ (8009a38 <RadioSetTxGenericConfig+0x2f0>)
 8009a00:	f000 fdec 	bl	800a5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009a04:	480d      	ldr	r0, [pc, #52]	@ (8009a3c <RadioSetTxGenericConfig+0x2f4>)
 8009a06:	f000 febb 	bl	800a780 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009a0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 f97f 	bl	8009d12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	8a1b      	ldrh	r3, [r3, #16]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 f9c9 	bl	8009db0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	899b      	ldrh	r3, [r3, #12]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f9a4 	bl	8009d70 <SUBGRF_SetCrcPolynomial>
        break;
 8009a28:	e0a6      	b.n	8009b78 <RadioSetTxGenericConfig+0x430>
 8009a2a:	bf00      	nop
 8009a2c:	2000038c 	.word	0x2000038c
 8009a30:	20000388 	.word	0x20000388
 8009a34:	200003e8 	.word	0x200003e8
 8009a38:	200003c4 	.word	0x200003c4
 8009a3c:	2000039a 	.word	0x2000039a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009a40:	4b59      	ldr	r3, [pc, #356]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	781a      	ldrb	r2, [r3, #0]
 8009a4c:	4b56      	ldr	r3, [pc, #344]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	785a      	ldrb	r2, [r3, #1]
 8009a56:	4b54      	ldr	r3, [pc, #336]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	789a      	ldrb	r2, [r3, #2]
 8009a60:	4b51      	ldr	r3, [pc, #324]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009a62:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	78db      	ldrb	r3, [r3, #3]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d010      	beq.n	8009a90 <RadioSetTxGenericConfig+0x348>
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	dc20      	bgt.n	8009ab4 <RadioSetTxGenericConfig+0x36c>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <RadioSetTxGenericConfig+0x334>
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d005      	beq.n	8009a86 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009a7a:	e01b      	b.n	8009ab4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009a84:	e017      	b.n	8009ab6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a86:	4b48      	ldr	r3, [pc, #288]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009a8e:	e012      	b.n	8009ab6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2b0b      	cmp	r3, #11
 8009a96:	d003      	beq.n	8009aa0 <RadioSetTxGenericConfig+0x358>
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b0c      	cmp	r3, #12
 8009a9e:	d104      	bne.n	8009aaa <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009aa0:	4b41      	ldr	r3, [pc, #260]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009aa8:	e005      	b.n	8009ab6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009ab2:	e000      	b.n	8009ab6 <RadioSetTxGenericConfig+0x36e>
            break;
 8009ab4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	889a      	ldrh	r2, [r3, #4]
 8009ac0:	4b39      	ldr	r3, [pc, #228]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009ac2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	799a      	ldrb	r2, [r3, #6]
 8009ac8:	4b37      	ldr	r3, [pc, #220]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009aca:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	79da      	ldrb	r2, [r3, #7]
 8009ad0:	4b35      	ldr	r3, [pc, #212]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009ad2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	7a1a      	ldrb	r2, [r3, #8]
 8009ada:	4b33      	ldr	r3, [pc, #204]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8009ae0:	f7fe ff89 	bl	80089f6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009ae4:	2001      	movs	r0, #1
 8009ae6:	f7fe f91f 	bl	8007d28 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009aea:	4830      	ldr	r0, [pc, #192]	@ (8009bac <RadioSetTxGenericConfig+0x464>)
 8009aec:	f000 fd76 	bl	800a5dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009af0:	482f      	ldr	r0, [pc, #188]	@ (8009bb0 <RadioSetTxGenericConfig+0x468>)
 8009af2:	f000 fe45 	bl	800a780 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009af6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009afc:	2b06      	cmp	r3, #6
 8009afe:	d10d      	bne.n	8009b1c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009b00:	f640 0089 	movw	r0, #2185	@ 0x889
 8009b04:	f000 ffa6 	bl	800aa54 <SUBGRF_ReadRegister>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f023 0304 	bic.w	r3, r3, #4
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	4619      	mov	r1, r3
 8009b12:	f640 0089 	movw	r0, #2185	@ 0x889
 8009b16:	f000 ff7b 	bl	800aa10 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009b1a:	e02d      	b.n	8009b78 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009b1c:	f640 0089 	movw	r0, #2185	@ 0x889
 8009b20:	f000 ff98 	bl	800aa54 <SUBGRF_ReadRegister>
 8009b24:	4603      	mov	r3, r0
 8009b26:	f043 0304 	orr.w	r3, r3, #4
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	f640 0089 	movw	r0, #2185	@ 0x889
 8009b32:	f000 ff6d 	bl	800aa10 <SUBGRF_WriteRegister>
        break;
 8009b36:	e01f      	b.n	8009b78 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <RadioSetTxGenericConfig+0x402>
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b48:	d902      	bls.n	8009b50 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4e:	e027      	b.n	8009ba0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009b50:	2003      	movs	r0, #3
 8009b52:	f7fe f8e9 	bl	8007d28 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009b56:	4b14      	ldr	r3, [pc, #80]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009b58:	2202      	movs	r2, #2
 8009b5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a11      	ldr	r2, [pc, #68]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009b64:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009b66:	4b10      	ldr	r3, [pc, #64]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009b68:	2216      	movs	r2, #22
 8009b6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b6e:	480f      	ldr	r0, [pc, #60]	@ (8009bac <RadioSetTxGenericConfig+0x464>)
 8009b70:	f000 fd34 	bl	800a5dc <SUBGRF_SetModulationParams>
        break;
 8009b74:	e000      	b.n	8009b78 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009b76:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f001 f87d 	bl	800ac7c <SUBGRF_SetRfTxPower>
 8009b82:	4603      	mov	r3, r0
 8009b84:	461a      	mov	r2, r3
 8009b86:	4b08      	ldr	r3, [pc, #32]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009b88:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009b8c:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009b8e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 fa51 	bl	800b03a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009b98:	4a03      	ldr	r2, [pc, #12]	@ (8009ba8 <RadioSetTxGenericConfig+0x460>)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6053      	str	r3, [r2, #4]
    return 0;
 8009b9e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3738      	adds	r7, #56	@ 0x38
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	2000038c 	.word	0x2000038c
 8009bac:	200003c4 	.word	0x200003c4
 8009bb0:	2000039a 	.word	0x2000039a

08009bb4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr

08009bcc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009bd6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bc80      	pop	{r7}
 8009be0:	4770      	bx	lr
	...

08009be4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8009c68 <SUBGRF_Init+0x84>)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009bf8:	f7f6 ffac 	bl	8000b54 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009bfc:	2002      	movs	r0, #2
 8009bfe:	f001 f919 	bl	800ae34 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009c02:	4b1a      	ldr	r3, [pc, #104]	@ (8009c6c <SUBGRF_Init+0x88>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f000 f97d 	bl	8009f08 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009c0e:	f001 fcb9 	bl	800b584 <RBI_IsTCXO>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d10e      	bne.n	8009c36 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009c18:	2140      	movs	r1, #64	@ 0x40
 8009c1a:	2001      	movs	r0, #1
 8009c1c:	f000 fb82 	bl	800a324 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009c20:	2100      	movs	r1, #0
 8009c22:	f640 1011 	movw	r0, #2321	@ 0x911
 8009c26:	f000 fef3 	bl	800aa10 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009c2a:	237f      	movs	r3, #127	@ 0x7f
 8009c2c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009c2e:	7b38      	ldrb	r0, [r7, #12]
 8009c30:	f000 fa8b 	bl	800a14a <SUBGRF_Calibrate>
 8009c34:	e009      	b.n	8009c4a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009c36:	2120      	movs	r1, #32
 8009c38:	f640 1011 	movw	r0, #2321	@ 0x911
 8009c3c:	f000 fee8 	bl	800aa10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009c40:	2120      	movs	r1, #32
 8009c42:	f640 1012 	movw	r0, #2322	@ 0x912
 8009c46:	f000 fee3 	bl	800aa10 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009c4a:	210e      	movs	r1, #14
 8009c4c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009c50:	f000 fede 	bl	800aa10 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009c54:	f001 fc7a 	bl	800b54c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009c58:	4b05      	ldr	r3, [pc, #20]	@ (8009c70 <SUBGRF_Init+0x8c>)
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	701a      	strb	r2, [r3, #0]
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20000424 	.word	0x20000424
 8009c6c:	20000420 	.word	0x20000420
 8009c70:	20000418 	.word	0x20000418

08009c74 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009c74:	b480      	push	{r7}
 8009c76:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009c78:	4b02      	ldr	r3, [pc, #8]	@ (8009c84 <SUBGRF_GetOperatingMode+0x10>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr
 8009c84:	20000418 	.word	0x20000418

08009c88 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	461a      	mov	r2, r3
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	f000 ff3e 	bl	800ab1c <SUBGRF_WriteBuffer>
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009cba:	f107 0317 	add.w	r3, r7, #23
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	68b8      	ldr	r0, [r7, #8]
 8009cc2:	f000 fe27 	bl	800a914 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	79fa      	ldrb	r2, [r7, #7]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d201      	bcs.n	8009cd4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e007      	b.n	8009ce4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009cd4:	7df8      	ldrb	r0, [r7, #23]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68f9      	ldr	r1, [r7, #12]
 8009cde:	f000 ff3f 	bl	800ab60 <SUBGRF_ReadBuffer>

    return 0;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009cfa:	7afb      	ldrb	r3, [r7, #11]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff ffc2 	bl	8009c88 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f91b 	bl	8009f40 <SUBGRF_SetTx>
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8009d22:	f000 feb7 	bl	800aa94 <SUBGRF_WriteRegisters>
    return 0;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009d44:	88fb      	ldrh	r3, [r7, #6]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009d4a:	f000 fb6f 	bl	800a42c <SUBGRF_GetPacketType>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d108      	bne.n	8009d66 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009d54:	f107 030c 	add.w	r3, r7, #12
 8009d58:	2202      	movs	r2, #2
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8009d60:	f000 fe98 	bl	800aa94 <SUBGRF_WriteRegisters>
            break;
 8009d64:	e000      	b.n	8009d68 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009d66:	bf00      	nop
    }
}
 8009d68:	bf00      	nop
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009d7a:	88fb      	ldrh	r3, [r7, #6]
 8009d7c:	0a1b      	lsrs	r3, r3, #8
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009d84:	88fb      	ldrh	r3, [r7, #6]
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009d8a:	f000 fb4f 	bl	800a42c <SUBGRF_GetPacketType>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d108      	bne.n	8009da6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009d94:	f107 030c 	add.w	r3, r7, #12
 8009d98:	2202      	movs	r2, #2
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8009da0:	f000 fe78 	bl	800aa94 <SUBGRF_WriteRegisters>
            break;
 8009da4:	e000      	b.n	8009da8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009da6:	bf00      	nop
    }
}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009dbe:	f000 fb35 	bl	800a42c <SUBGRF_GetPacketType>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d121      	bne.n	8009e0c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009dc8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009dcc:	f000 fe42 	bl	800aa54 <SUBGRF_ReadRegister>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f023 0301 	bic.w	r3, r3, #1
 8009dd6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009dd8:	88fb      	ldrh	r3, [r7, #6]
 8009dda:	0a1b      	lsrs	r3, r3, #8
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	b25b      	sxtb	r3, r3
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	b25a      	sxtb	r2, r3
 8009de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	b25b      	sxtb	r3, r3
 8009dee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	4619      	mov	r1, r3
 8009df4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009df8:	f000 fe0a 	bl	800aa10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009dfc:	88fb      	ldrh	r3, [r7, #6]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	4619      	mov	r1, r3
 8009e02:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8009e06:	f000 fe03 	bl	800aa10 <SUBGRF_WriteRegister>
            break;
 8009e0a:	e000      	b.n	8009e0e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009e0c:	bf00      	nop
    }
}
 8009e0e:	bf00      	nop
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009e28:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009e2c:	f000 fe12 	bl	800aa54 <SUBGRF_ReadRegister>
 8009e30:	4603      	mov	r3, r0
 8009e32:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	f023 0301 	bic.w	r3, r3, #1
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009e42:	f000 fde5 	bl	800aa10 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009e46:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009e4a:	f000 fe03 	bl	800aa54 <SUBGRF_ReadRegister>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009e52:	79bb      	ldrb	r3, [r7, #6]
 8009e54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009e60:	f000 fdd6 	bl	800aa10 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009e64:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009e68:	f000 f88a 	bl	8009f80 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	2204      	movs	r2, #4
 8009e70:	4619      	mov	r1, r3
 8009e72:	f640 0019 	movw	r0, #2073	@ 0x819
 8009e76:	f000 fe2f 	bl	800aad8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f000 f844 	bl	8009f08 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	4619      	mov	r1, r3
 8009e84:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009e88:	f000 fdc2 	bl	800aa10 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009e8c:	79bb      	ldrb	r3, [r7, #6]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009e94:	f000 fdbc 	bl	800aa10 <SUBGRF_WriteRegister>

    return number;
 8009e98:	683b      	ldr	r3, [r7, #0]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009eac:	2000      	movs	r0, #0
 8009eae:	f001 fb54 	bl	800b55a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009eb2:	2002      	movs	r0, #2
 8009eb4:	f000 ffbe 	bl	800ae34 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009eb8:	793b      	ldrb	r3, [r7, #4]
 8009eba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009ec4:	793b      	ldrb	r3, [r7, #4]
 8009ec6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009ece:	b25b      	sxtb	r3, r3
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009ed4:	793b      	ldrb	r3, [r7, #4]
 8009ed6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	b25b      	sxtb	r3, r3
 8009ee2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009ee4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009ee6:	f107 030f 	add.w	r3, r7, #15
 8009eea:	2201      	movs	r2, #1
 8009eec:	4619      	mov	r1, r3
 8009eee:	2084      	movs	r0, #132	@ 0x84
 8009ef0:	f000 fe58 	bl	800aba4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009ef4:	4b03      	ldr	r3, [pc, #12]	@ (8009f04 <SUBGRF_SetSleep+0x60>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
}
 8009efa:	bf00      	nop
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20000418 	.word	0x20000418

08009f08 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009f12:	1dfb      	adds	r3, r7, #7
 8009f14:	2201      	movs	r2, #1
 8009f16:	4619      	mov	r1, r3
 8009f18:	2080      	movs	r0, #128	@ 0x80
 8009f1a:	f000 fe43 	bl	800aba4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8009f1e:	79fb      	ldrb	r3, [r7, #7]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009f24:	4b05      	ldr	r3, [pc, #20]	@ (8009f3c <SUBGRF_SetStandby+0x34>)
 8009f26:	2201      	movs	r2, #1
 8009f28:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8009f2a:	e002      	b.n	8009f32 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009f2c:	4b03      	ldr	r3, [pc, #12]	@ (8009f3c <SUBGRF_SetStandby+0x34>)
 8009f2e:	2202      	movs	r2, #2
 8009f30:	701a      	strb	r2, [r3, #0]
}
 8009f32:	bf00      	nop
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000418 	.word	0x20000418

08009f40 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009f48:	4b0c      	ldr	r3, [pc, #48]	@ (8009f7c <SUBGRF_SetTx+0x3c>)
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	0c1b      	lsrs	r3, r3, #16
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	2203      	movs	r2, #3
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	2083      	movs	r0, #131	@ 0x83
 8009f6e:	f000 fe19 	bl	800aba4 <SUBGRF_WriteCommand>
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000418 	.word	0x20000418

08009f80 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009f88:	4b0c      	ldr	r3, [pc, #48]	@ (8009fbc <SUBGRF_SetRx+0x3c>)
 8009f8a:	2205      	movs	r2, #5
 8009f8c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	0c1b      	lsrs	r3, r3, #16
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	0a1b      	lsrs	r3, r3, #8
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009fa4:	f107 030c 	add.w	r3, r7, #12
 8009fa8:	2203      	movs	r2, #3
 8009faa:	4619      	mov	r1, r3
 8009fac:	2082      	movs	r0, #130	@ 0x82
 8009fae:	f000 fdf9 	bl	800aba4 <SUBGRF_WriteCommand>
}
 8009fb2:	bf00      	nop
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000418 	.word	0x20000418

08009fc0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009fc8:	4b0e      	ldr	r3, [pc, #56]	@ (800a004 <SUBGRF_SetRxBoosted+0x44>)
 8009fca:	2205      	movs	r2, #5
 8009fcc:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009fce:	2197      	movs	r1, #151	@ 0x97
 8009fd0:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8009fd4:	f000 fd1c 	bl	800aa10 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	0c1b      	lsrs	r3, r3, #16
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	0a1b      	lsrs	r3, r3, #8
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009fee:	f107 030c 	add.w	r3, r7, #12
 8009ff2:	2203      	movs	r2, #3
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	2082      	movs	r0, #130	@ 0x82
 8009ff8:	f000 fdd4 	bl	800aba4 <SUBGRF_WriteCommand>
}
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	20000418 	.word	0x20000418

0800a008 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	0c1b      	lsrs	r3, r3, #16
 800a016:	b2db      	uxtb	r3, r3
 800a018:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	0a1b      	lsrs	r3, r3, #8
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	b2db      	uxtb	r3, r3
 800a026:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	0c1b      	lsrs	r3, r3, #16
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	b2db      	uxtb	r3, r3
 800a036:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a03e:	f107 0308 	add.w	r3, r7, #8
 800a042:	2206      	movs	r2, #6
 800a044:	4619      	mov	r1, r3
 800a046:	2094      	movs	r0, #148	@ 0x94
 800a048:	f000 fdac 	bl	800aba4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a04c:	4b03      	ldr	r3, [pc, #12]	@ (800a05c <SUBGRF_SetRxDutyCycle+0x54>)
 800a04e:	2206      	movs	r2, #6
 800a050:	701a      	strb	r2, [r3, #0]
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	20000418 	.word	0x20000418

0800a060 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a064:	2200      	movs	r2, #0
 800a066:	2100      	movs	r1, #0
 800a068:	20c5      	movs	r0, #197	@ 0xc5
 800a06a:	f000 fd9b 	bl	800aba4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a06e:	4b02      	ldr	r3, [pc, #8]	@ (800a078 <SUBGRF_SetCad+0x18>)
 800a070:	2207      	movs	r2, #7
 800a072:	701a      	strb	r2, [r3, #0]
}
 800a074:	bf00      	nop
 800a076:	bd80      	pop	{r7, pc}
 800a078:	20000418 	.word	0x20000418

0800a07c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a080:	2200      	movs	r2, #0
 800a082:	2100      	movs	r1, #0
 800a084:	20d1      	movs	r0, #209	@ 0xd1
 800a086:	f000 fd8d 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a08a:	bf00      	nop
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a092:	2200      	movs	r2, #0
 800a094:	2100      	movs	r1, #0
 800a096:	20d2      	movs	r0, #210	@ 0xd2
 800a098:	f000 fd84 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a09c:	bf00      	nop
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a0aa:	1dfb      	adds	r3, r7, #7
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	209f      	movs	r0, #159	@ 0x9f
 800a0b2:	f000 fd77 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a0c8:	1dfb      	adds	r3, r7, #7
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	20a0      	movs	r0, #160	@ 0xa0
 800a0d0:	f000 fd68 	bl	800aba4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a0d4:	79fb      	ldrb	r3, [r7, #7]
 800a0d6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a0d8:	d91c      	bls.n	800a114 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	085b      	lsrs	r3, r3, #1
 800a0de:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a0e8:	e005      	b.n	800a0f6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	089b      	lsrs	r3, r3, #2
 800a0ee:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a0f0:	7bbb      	ldrb	r3, [r7, #14]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b1f      	cmp	r3, #31
 800a0fa:	d8f6      	bhi.n	800a0ea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	b2da      	uxtb	r2, r3
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	4413      	add	r3, r2
 800a106:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a108:	7b7b      	ldrb	r3, [r7, #13]
 800a10a:	4619      	mov	r1, r3
 800a10c:	f240 7006 	movw	r0, #1798	@ 0x706
 800a110:	f000 fc7e 	bl	800aa10 <SUBGRF_WriteRegister>
    }
}
 800a114:	bf00      	nop
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a122:	f001 fa36 	bl	800b592 <RBI_IsDCDC>
 800a126:	4603      	mov	r3, r0
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d102      	bne.n	800a132 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a12c:	2301      	movs	r3, #1
 800a12e:	71fb      	strb	r3, [r7, #7]
 800a130:	e001      	b.n	800a136 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a132:	2300      	movs	r3, #0
 800a134:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a136:	1dfb      	adds	r3, r7, #7
 800a138:	2201      	movs	r2, #1
 800a13a:	4619      	mov	r1, r3
 800a13c:	2096      	movs	r0, #150	@ 0x96
 800a13e:	f000 fd31 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a142:	bf00      	nop
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a152:	793b      	ldrb	r3, [r7, #4]
 800a154:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	019b      	lsls	r3, r3, #6
 800a15c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a15e:	793b      	ldrb	r3, [r7, #4]
 800a160:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a164:	b2db      	uxtb	r3, r3
 800a166:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a168:	b25b      	sxtb	r3, r3
 800a16a:	4313      	orrs	r3, r2
 800a16c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a16e:	793b      	ldrb	r3, [r7, #4]
 800a170:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a174:	b2db      	uxtb	r3, r3
 800a176:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a178:	b25b      	sxtb	r3, r3
 800a17a:	4313      	orrs	r3, r2
 800a17c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a17e:	793b      	ldrb	r3, [r7, #4]
 800a180:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a184:	b2db      	uxtb	r3, r3
 800a186:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a188:	b25b      	sxtb	r3, r3
 800a18a:	4313      	orrs	r3, r2
 800a18c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a18e:	793b      	ldrb	r3, [r7, #4]
 800a190:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a194:	b2db      	uxtb	r3, r3
 800a196:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a198:	b25b      	sxtb	r3, r3
 800a19a:	4313      	orrs	r3, r2
 800a19c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a19e:	793b      	ldrb	r3, [r7, #4]
 800a1a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a1a8:	b25b      	sxtb	r3, r3
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a1ae:	793b      	ldrb	r3, [r7, #4]
 800a1b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	b25b      	sxtb	r3, r3
 800a1bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a1be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a1c0:	f107 030f 	add.w	r3, r7, #15
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	2089      	movs	r0, #137	@ 0x89
 800a1ca:	f000 fceb 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a1ce:	bf00      	nop
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a1d      	ldr	r2, [pc, #116]	@ (800a258 <SUBGRF_CalibrateImage+0x80>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d904      	bls.n	800a1f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a1e8:	23e1      	movs	r3, #225	@ 0xe1
 800a1ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a1ec:	23e9      	movs	r3, #233	@ 0xe9
 800a1ee:	737b      	strb	r3, [r7, #13]
 800a1f0:	e027      	b.n	800a242 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a19      	ldr	r2, [pc, #100]	@ (800a25c <SUBGRF_CalibrateImage+0x84>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d904      	bls.n	800a204 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a1fa:	23d7      	movs	r3, #215	@ 0xd7
 800a1fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a1fe:	23db      	movs	r3, #219	@ 0xdb
 800a200:	737b      	strb	r3, [r7, #13]
 800a202:	e01e      	b.n	800a242 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a16      	ldr	r2, [pc, #88]	@ (800a260 <SUBGRF_CalibrateImage+0x88>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d904      	bls.n	800a216 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a20c:	23c1      	movs	r3, #193	@ 0xc1
 800a20e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a210:	23c5      	movs	r3, #197	@ 0xc5
 800a212:	737b      	strb	r3, [r7, #13]
 800a214:	e015      	b.n	800a242 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a12      	ldr	r2, [pc, #72]	@ (800a264 <SUBGRF_CalibrateImage+0x8c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d904      	bls.n	800a228 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a21e:	2375      	movs	r3, #117	@ 0x75
 800a220:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a222:	2381      	movs	r3, #129	@ 0x81
 800a224:	737b      	strb	r3, [r7, #13]
 800a226:	e00c      	b.n	800a242 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a0f      	ldr	r2, [pc, #60]	@ (800a268 <SUBGRF_CalibrateImage+0x90>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d904      	bls.n	800a23a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a230:	236b      	movs	r3, #107	@ 0x6b
 800a232:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a234:	236f      	movs	r3, #111	@ 0x6f
 800a236:	737b      	strb	r3, [r7, #13]
 800a238:	e003      	b.n	800a242 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a23a:	2329      	movs	r3, #41	@ 0x29
 800a23c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a23e:	232b      	movs	r3, #43	@ 0x2b
 800a240:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a242:	f107 030c 	add.w	r3, r7, #12
 800a246:	2202      	movs	r2, #2
 800a248:	4619      	mov	r1, r3
 800a24a:	2098      	movs	r0, #152	@ 0x98
 800a24c:	f000 fcaa 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a250:	bf00      	nop
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	35a4e900 	.word	0x35a4e900
 800a25c:	32a9f880 	.word	0x32a9f880
 800a260:	2de54480 	.word	0x2de54480
 800a264:	1b6b0b00 	.word	0x1b6b0b00
 800a268:	1954fc40 	.word	0x1954fc40

0800a26c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a26c:	b590      	push	{r4, r7, lr}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	4604      	mov	r4, r0
 800a274:	4608      	mov	r0, r1
 800a276:	4611      	mov	r1, r2
 800a278:	461a      	mov	r2, r3
 800a27a:	4623      	mov	r3, r4
 800a27c:	71fb      	strb	r3, [r7, #7]
 800a27e:	4603      	mov	r3, r0
 800a280:	71bb      	strb	r3, [r7, #6]
 800a282:	460b      	mov	r3, r1
 800a284:	717b      	strb	r3, [r7, #5]
 800a286:	4613      	mov	r3, r2
 800a288:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a28e:	79bb      	ldrb	r3, [r7, #6]
 800a290:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a292:	797b      	ldrb	r3, [r7, #5]
 800a294:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a296:	793b      	ldrb	r3, [r7, #4]
 800a298:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a29a:	f107 030c 	add.w	r3, r7, #12
 800a29e:	2204      	movs	r2, #4
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	2095      	movs	r0, #149	@ 0x95
 800a2a4:	f000 fc7e 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a2a8:	bf00      	nop
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd90      	pop	{r4, r7, pc}

0800a2b0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	461a      	mov	r2, r3
 800a2be:	4623      	mov	r3, r4
 800a2c0:	80fb      	strh	r3, [r7, #6]
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	80bb      	strh	r3, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	807b      	strh	r3, [r7, #2]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	0a1b      	lsrs	r3, r3, #8
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a2d8:	88fb      	ldrh	r3, [r7, #6]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a2de:	88bb      	ldrh	r3, [r7, #4]
 800a2e0:	0a1b      	lsrs	r3, r3, #8
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a2e8:	88bb      	ldrh	r3, [r7, #4]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a2ee:	887b      	ldrh	r3, [r7, #2]
 800a2f0:	0a1b      	lsrs	r3, r3, #8
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a2f8:	887b      	ldrh	r3, [r7, #2]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a2fe:	883b      	ldrh	r3, [r7, #0]
 800a300:	0a1b      	lsrs	r3, r3, #8
 800a302:	b29b      	uxth	r3, r3
 800a304:	b2db      	uxtb	r3, r3
 800a306:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a308:	883b      	ldrh	r3, [r7, #0]
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a30e:	f107 0308 	add.w	r3, r7, #8
 800a312:	2208      	movs	r2, #8
 800a314:	4619      	mov	r1, r3
 800a316:	2008      	movs	r0, #8
 800a318:	f000 fc44 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a31c:	bf00      	nop
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	bd90      	pop	{r4, r7, pc}

0800a324 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	6039      	str	r1, [r7, #0]
 800a32e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	b2db      	uxtb	r3, r3
 800a338:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	0c1b      	lsrs	r3, r3, #16
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	0a1b      	lsrs	r3, r3, #8
 800a346:	b2db      	uxtb	r3, r3
 800a348:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a350:	f107 030c 	add.w	r3, r7, #12
 800a354:	2204      	movs	r2, #4
 800a356:	4619      	mov	r1, r3
 800a358:	2097      	movs	r0, #151	@ 0x97
 800a35a:	f000 fc23 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a368:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a376:	4b1d      	ldr	r3, [pc, #116]	@ (800a3ec <SUBGRF_SetRfFrequency+0x84>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	f083 0301 	eor.w	r3, r3, #1
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff ff27 	bl	800a1d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a38a:	4b18      	ldr	r3, [pc, #96]	@ (800a3ec <SUBGRF_SetRfFrequency+0x84>)
 800a38c:	2201      	movs	r2, #1
 800a38e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	461c      	mov	r4, r3
 800a396:	4615      	mov	r5, r2
 800a398:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a39c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a3a0:	4a13      	ldr	r2, [pc, #76]	@ (800a3f0 <SUBGRF_SetRfFrequency+0x88>)
 800a3a2:	f04f 0300 	mov.w	r3, #0
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f5 feed 	bl	8000188 <__aeabi_uldivmod>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	0e1b      	lsrs	r3, r3, #24
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	0c1b      	lsrs	r3, r3, #16
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	0a1b      	lsrs	r3, r3, #8
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a3d4:	f107 0308 	add.w	r3, r7, #8
 800a3d8:	2204      	movs	r2, #4
 800a3da:	4619      	mov	r1, r3
 800a3dc:	2086      	movs	r0, #134	@ 0x86
 800a3de:	f000 fbe1 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a3ec:	20000420 	.word	0x20000420
 800a3f0:	01e84800 	.word	0x01e84800

0800a3f4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a3fe:	79fa      	ldrb	r2, [r7, #7]
 800a400:	4b09      	ldr	r3, [pc, #36]	@ (800a428 <SUBGRF_SetPacketType+0x34>)
 800a402:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d104      	bne.n	800a414 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a40a:	2100      	movs	r1, #0
 800a40c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800a410:	f000 fafe 	bl	800aa10 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a414:	1dfb      	adds	r3, r7, #7
 800a416:	2201      	movs	r2, #1
 800a418:	4619      	mov	r1, r3
 800a41a:	208a      	movs	r0, #138	@ 0x8a
 800a41c:	f000 fbc2 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	20000419 	.word	0x20000419

0800a42c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	af00      	add	r7, sp, #0
    return PacketType;
 800a430:	4b02      	ldr	r3, [pc, #8]	@ (800a43c <SUBGRF_GetPacketType+0x10>)
 800a432:	781b      	ldrb	r3, [r3, #0]
}
 800a434:	4618      	mov	r0, r3
 800a436:	46bd      	mov	sp, r7
 800a438:	bc80      	pop	{r7}
 800a43a:	4770      	bx	lr
 800a43c:	20000419 	.word	0x20000419

0800a440 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	71fb      	strb	r3, [r7, #7]
 800a44a:	460b      	mov	r3, r1
 800a44c:	71bb      	strb	r3, [r7, #6]
 800a44e:	4613      	mov	r3, r2
 800a450:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d149      	bne.n	800a4ec <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a458:	2000      	movs	r0, #0
 800a45a:	f001 f8a1 	bl	800b5a0 <RBI_GetRFOMaxPowerConfig>
 800a45e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a460:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	429a      	cmp	r2, r3
 800a468:	da01      	bge.n	800a46e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b0e      	cmp	r3, #14
 800a472:	d10e      	bne.n	800a492 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a474:	2301      	movs	r3, #1
 800a476:	2201      	movs	r2, #1
 800a478:	2100      	movs	r1, #0
 800a47a:	2004      	movs	r0, #4
 800a47c:	f7ff fef6 	bl	800a26c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a480:	79ba      	ldrb	r2, [r7, #6]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	b2db      	uxtb	r3, r3
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	330e      	adds	r3, #14
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	71bb      	strb	r3, [r7, #6]
 800a490:	e01f      	b.n	800a4d2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b0a      	cmp	r3, #10
 800a496:	d10e      	bne.n	800a4b6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a498:	2301      	movs	r3, #1
 800a49a:	2201      	movs	r2, #1
 800a49c:	2100      	movs	r1, #0
 800a49e:	2001      	movs	r0, #1
 800a4a0:	f7ff fee4 	bl	800a26c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a4a4:	79ba      	ldrb	r2, [r7, #6]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	330d      	adds	r3, #13
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	71bb      	strb	r3, [r7, #6]
 800a4b4:	e00d      	b.n	800a4d2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	2007      	movs	r0, #7
 800a4be:	f7ff fed5 	bl	800a26c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a4c2:	79ba      	ldrb	r2, [r7, #6]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	330e      	adds	r3, #14
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a4d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a4d6:	f113 0f11 	cmn.w	r3, #17
 800a4da:	da01      	bge.n	800a4e0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a4dc:	23ef      	movs	r3, #239	@ 0xef
 800a4de:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a4e0:	2118      	movs	r1, #24
 800a4e2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800a4e6:	f000 fa93 	bl	800aa10 <SUBGRF_WriteRegister>
 800a4ea:	e067      	b.n	800a5bc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a4ec:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800a4f0:	f000 fab0 	bl	800aa54 <SUBGRF_ReadRegister>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f043 031e 	orr.w	r3, r3, #30
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800a502:	f000 fa85 	bl	800aa10 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a506:	2001      	movs	r0, #1
 800a508:	f001 f84a 	bl	800b5a0 <RBI_GetRFOMaxPowerConfig>
 800a50c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a50e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	429a      	cmp	r2, r3
 800a516:	da01      	bge.n	800a51c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b14      	cmp	r3, #20
 800a520:	d10e      	bne.n	800a540 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a522:	2301      	movs	r3, #1
 800a524:	2200      	movs	r2, #0
 800a526:	2105      	movs	r1, #5
 800a528:	2003      	movs	r0, #3
 800a52a:	f7ff fe9f 	bl	800a26c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a52e:	79ba      	ldrb	r2, [r7, #6]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	b2db      	uxtb	r3, r3
 800a538:	3316      	adds	r3, #22
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	71bb      	strb	r3, [r7, #6]
 800a53e:	e031      	b.n	800a5a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b11      	cmp	r3, #17
 800a544:	d10e      	bne.n	800a564 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a546:	2301      	movs	r3, #1
 800a548:	2200      	movs	r2, #0
 800a54a:	2103      	movs	r1, #3
 800a54c:	2002      	movs	r0, #2
 800a54e:	f7ff fe8d 	bl	800a26c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a552:	79ba      	ldrb	r2, [r7, #6]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	3316      	adds	r3, #22
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	71bb      	strb	r3, [r7, #6]
 800a562:	e01f      	b.n	800a5a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b0e      	cmp	r3, #14
 800a568:	d10e      	bne.n	800a588 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a56a:	2301      	movs	r3, #1
 800a56c:	2200      	movs	r2, #0
 800a56e:	2102      	movs	r1, #2
 800a570:	2002      	movs	r0, #2
 800a572:	f7ff fe7b 	bl	800a26c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a576:	79ba      	ldrb	r2, [r7, #6]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	330e      	adds	r3, #14
 800a582:	b2db      	uxtb	r3, r3
 800a584:	71bb      	strb	r3, [r7, #6]
 800a586:	e00d      	b.n	800a5a4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a588:	2301      	movs	r3, #1
 800a58a:	2200      	movs	r2, #0
 800a58c:	2107      	movs	r1, #7
 800a58e:	2004      	movs	r0, #4
 800a590:	f7ff fe6c 	bl	800a26c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a594:	79ba      	ldrb	r2, [r7, #6]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	3316      	adds	r3, #22
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a5a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a5a8:	f113 0f09 	cmn.w	r3, #9
 800a5ac:	da01      	bge.n	800a5b2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a5ae:	23f7      	movs	r3, #247	@ 0xf7
 800a5b0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a5b2:	2138      	movs	r1, #56	@ 0x38
 800a5b4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800a5b8:	f000 fa2a 	bl	800aa10 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a5bc:	79bb      	ldrb	r3, [r7, #6]
 800a5be:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a5c0:	797b      	ldrb	r3, [r7, #5]
 800a5c2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a5c4:	f107 0308 	add.w	r3, r7, #8
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	208e      	movs	r0, #142	@ 0x8e
 800a5ce:	f000 fae9 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a5d2:	bf00      	nop
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a5dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a5e0:	b086      	sub	sp, #24
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a5ea:	4a61      	ldr	r2, [pc, #388]	@ (800a770 <SUBGRF_SetModulationParams+0x194>)
 800a5ec:	f107 0308 	add.w	r3, r7, #8
 800a5f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5f4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	781a      	ldrb	r2, [r3, #0]
 800a5fc:	4b5d      	ldr	r3, [pc, #372]	@ (800a774 <SUBGRF_SetModulationParams+0x198>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	429a      	cmp	r2, r3
 800a602:	d004      	beq.n	800a60e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fef3 	bl	800a3f4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b03      	cmp	r3, #3
 800a614:	f200 80a5 	bhi.w	800a762 <SUBGRF_SetModulationParams+0x186>
 800a618:	a201      	add	r2, pc, #4	@ (adr r2, 800a620 <SUBGRF_SetModulationParams+0x44>)
 800a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61e:	bf00      	nop
 800a620:	0800a631 	.word	0x0800a631
 800a624:	0800a6f1 	.word	0x0800a6f1
 800a628:	0800a6b3 	.word	0x0800a6b3
 800a62c:	0800a71f 	.word	0x0800a71f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a630:	2308      	movs	r3, #8
 800a632:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	4a4f      	ldr	r2, [pc, #316]	@ (800a778 <SUBGRF_SetModulationParams+0x19c>)
 800a63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	0c1b      	lsrs	r3, r3, #16
 800a644:	b2db      	uxtb	r3, r3
 800a646:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	0a1b      	lsrs	r3, r3, #8
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	7b1b      	ldrb	r3, [r3, #12]
 800a65a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7b5b      	ldrb	r3, [r3, #13]
 800a660:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	2200      	movs	r2, #0
 800a668:	461c      	mov	r4, r3
 800a66a:	4615      	mov	r5, r2
 800a66c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a670:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a674:	4a41      	ldr	r2, [pc, #260]	@ (800a77c <SUBGRF_SetModulationParams+0x1a0>)
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	4640      	mov	r0, r8
 800a67c:	4649      	mov	r1, r9
 800a67e:	f7f5 fd83 	bl	8000188 <__aeabi_uldivmod>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4613      	mov	r3, r2
 800a688:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	0c1b      	lsrs	r3, r3, #16
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	0a1b      	lsrs	r3, r3, #8
 800a696:	b2db      	uxtb	r3, r3
 800a698:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a6a0:	7cfb      	ldrb	r3, [r7, #19]
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	f107 0308 	add.w	r3, r7, #8
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	208b      	movs	r0, #139	@ 0x8b
 800a6ac:	f000 fa7a 	bl	800aba4 <SUBGRF_WriteCommand>
        break;
 800a6b0:	e058      	b.n	800a764 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a6b2:	2304      	movs	r3, #4
 800a6b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	4a2f      	ldr	r2, [pc, #188]	@ (800a778 <SUBGRF_SetModulationParams+0x19c>)
 800a6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	0c1b      	lsrs	r3, r3, #16
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	0a1b      	lsrs	r3, r3, #8
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	7d1b      	ldrb	r3, [r3, #20]
 800a6dc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a6de:	7cfb      	ldrb	r3, [r7, #19]
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	f107 0308 	add.w	r3, r7, #8
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	208b      	movs	r0, #139	@ 0x8b
 800a6ea:	f000 fa5b 	bl	800aba4 <SUBGRF_WriteCommand>
        break;
 800a6ee:	e039      	b.n	800a764 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a6f0:	2304      	movs	r3, #4
 800a6f2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	7e1b      	ldrb	r3, [r3, #24]
 800a6f8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	7e5b      	ldrb	r3, [r3, #25]
 800a6fe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	7e9b      	ldrb	r3, [r3, #26]
 800a704:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	7edb      	ldrb	r3, [r3, #27]
 800a70a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a70c:	7cfb      	ldrb	r3, [r7, #19]
 800a70e:	b29a      	uxth	r2, r3
 800a710:	f107 0308 	add.w	r3, r7, #8
 800a714:	4619      	mov	r1, r3
 800a716:	208b      	movs	r0, #139	@ 0x8b
 800a718:	f000 fa44 	bl	800aba4 <SUBGRF_WriteCommand>

        break;
 800a71c:	e022      	b.n	800a764 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a71e:	2305      	movs	r3, #5
 800a720:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	4a14      	ldr	r2, [pc, #80]	@ (800a778 <SUBGRF_SetModulationParams+0x19c>)
 800a728:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	0c1b      	lsrs	r3, r3, #16
 800a732:	b2db      	uxtb	r3, r3
 800a734:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	0a1b      	lsrs	r3, r3, #8
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	b2db      	uxtb	r3, r3
 800a742:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	7b1b      	ldrb	r3, [r3, #12]
 800a748:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	7b5b      	ldrb	r3, [r3, #13]
 800a74e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a750:	7cfb      	ldrb	r3, [r7, #19]
 800a752:	b29a      	uxth	r2, r3
 800a754:	f107 0308 	add.w	r3, r7, #8
 800a758:	4619      	mov	r1, r3
 800a75a:	208b      	movs	r0, #139	@ 0x8b
 800a75c:	f000 fa22 	bl	800aba4 <SUBGRF_WriteCommand>
        break;
 800a760:	e000      	b.n	800a764 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a762:	bf00      	nop
    }
}
 800a764:	bf00      	nop
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a76e:	bf00      	nop
 800a770:	0800ca38 	.word	0x0800ca38
 800a774:	20000419 	.word	0x20000419
 800a778:	3d090000 	.word	0x3d090000
 800a77c:	01e84800 	.word	0x01e84800

0800a780 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a78c:	4a48      	ldr	r2, [pc, #288]	@ (800a8b0 <SUBGRF_SetPacketParams+0x130>)
 800a78e:	f107 030c 	add.w	r3, r7, #12
 800a792:	ca07      	ldmia	r2, {r0, r1, r2}
 800a794:	c303      	stmia	r3!, {r0, r1}
 800a796:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	4b45      	ldr	r3, [pc, #276]	@ (800a8b4 <SUBGRF_SetPacketParams+0x134>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d004      	beq.n	800a7ae <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7ff fe23 	bl	800a3f4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	d878      	bhi.n	800a8a8 <SUBGRF_SetPacketParams+0x128>
 800a7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7bc <SUBGRF_SetPacketParams+0x3c>)
 800a7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7bc:	0800a7cd 	.word	0x0800a7cd
 800a7c0:	0800a85d 	.word	0x0800a85d
 800a7c4:	0800a851 	.word	0x0800a851
 800a7c8:	0800a7cd 	.word	0x0800a7cd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	7a5b      	ldrb	r3, [r3, #9]
 800a7d0:	2bf1      	cmp	r3, #241	@ 0xf1
 800a7d2:	d10a      	bne.n	800a7ea <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a7d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a7d8:	f7ff faaa 	bl	8009d30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a7dc:	f248 0005 	movw	r0, #32773	@ 0x8005
 800a7e0:	f7ff fac6 	bl	8009d70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	75bb      	strb	r3, [r7, #22]
 800a7e8:	e011      	b.n	800a80e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	7a5b      	ldrb	r3, [r3, #9]
 800a7ee:	2bf2      	cmp	r3, #242	@ 0xf2
 800a7f0:	d10a      	bne.n	800a808 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800a7f2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800a7f6:	f7ff fa9b 	bl	8009d30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800a7fa:	f241 0021 	movw	r0, #4129	@ 0x1021
 800a7fe:	f7ff fab7 	bl	8009d70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800a802:	2306      	movs	r3, #6
 800a804:	75bb      	strb	r3, [r7, #22]
 800a806:	e002      	b.n	800a80e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	7a5b      	ldrb	r3, [r3, #9]
 800a80c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800a80e:	2309      	movs	r3, #9
 800a810:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	885b      	ldrh	r3, [r3, #2]
 800a816:	0a1b      	lsrs	r3, r3, #8
 800a818:	b29b      	uxth	r3, r3
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	885b      	ldrh	r3, [r3, #2]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	791b      	ldrb	r3, [r3, #4]
 800a82a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	795b      	ldrb	r3, [r3, #5]
 800a830:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	799b      	ldrb	r3, [r3, #6]
 800a836:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	79db      	ldrb	r3, [r3, #7]
 800a83c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7a1b      	ldrb	r3, [r3, #8]
 800a842:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a844:	7dbb      	ldrb	r3, [r7, #22]
 800a846:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	7a9b      	ldrb	r3, [r3, #10]
 800a84c:	753b      	strb	r3, [r7, #20]
        break;
 800a84e:	e022      	b.n	800a896 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a850:	2301      	movs	r3, #1
 800a852:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	7b1b      	ldrb	r3, [r3, #12]
 800a858:	733b      	strb	r3, [r7, #12]
        break;
 800a85a:	e01c      	b.n	800a896 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a85c:	2306      	movs	r3, #6
 800a85e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	89db      	ldrh	r3, [r3, #14]
 800a864:	0a1b      	lsrs	r3, r3, #8
 800a866:	b29b      	uxth	r3, r3
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	89db      	ldrh	r3, [r3, #14]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	7c1a      	ldrb	r2, [r3, #16]
 800a878:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b8 <SUBGRF_SetPacketParams+0x138>)
 800a87a:	4611      	mov	r1, r2
 800a87c:	7019      	strb	r1, [r3, #0]
 800a87e:	4613      	mov	r3, r2
 800a880:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	7c5b      	ldrb	r3, [r3, #17]
 800a886:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	7c9b      	ldrb	r3, [r3, #18]
 800a88c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7cdb      	ldrb	r3, [r3, #19]
 800a892:	747b      	strb	r3, [r7, #17]
        break;
 800a894:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a896:	7dfb      	ldrb	r3, [r7, #23]
 800a898:	b29a      	uxth	r2, r3
 800a89a:	f107 030c 	add.w	r3, r7, #12
 800a89e:	4619      	mov	r1, r3
 800a8a0:	208c      	movs	r0, #140	@ 0x8c
 800a8a2:	f000 f97f 	bl	800aba4 <SUBGRF_WriteCommand>
 800a8a6:	e000      	b.n	800a8aa <SUBGRF_SetPacketParams+0x12a>
        return;
 800a8a8:	bf00      	nop
}
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	0800ca40 	.word	0x0800ca40
 800a8b4:	20000419 	.word	0x20000419
 800a8b8:	2000041a 	.word	0x2000041a

0800a8bc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	460a      	mov	r2, r1
 800a8c6:	71fb      	strb	r3, [r7, #7]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a8d0:	79bb      	ldrb	r3, [r7, #6]
 800a8d2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a8d4:	f107 030c 	add.w	r3, r7, #12
 800a8d8:	2202      	movs	r2, #2
 800a8da:	4619      	mov	r1, r3
 800a8dc:	208f      	movs	r0, #143	@ 0x8f
 800a8de:	f000 f961 	bl	800aba4 <SUBGRF_WriteCommand>
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a8f4:	1d3b      	adds	r3, r7, #4
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	2015      	movs	r0, #21
 800a8fc:	f000 f974 	bl	800abe8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a900:	793b      	ldrb	r3, [r7, #4]
 800a902:	425b      	negs	r3, r3
 800a904:	105b      	asrs	r3, r3, #1
 800a906:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a908:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a91e:	f107 030c 	add.w	r3, r7, #12
 800a922:	2202      	movs	r2, #2
 800a924:	4619      	mov	r1, r3
 800a926:	2013      	movs	r0, #19
 800a928:	f000 f95e 	bl	800abe8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a92c:	f7ff fd7e 	bl	800a42c <SUBGRF_GetPacketType>
 800a930:	4603      	mov	r3, r0
 800a932:	2b01      	cmp	r3, #1
 800a934:	d10d      	bne.n	800a952 <SUBGRF_GetRxBufferStatus+0x3e>
 800a936:	4b0c      	ldr	r3, [pc, #48]	@ (800a968 <SUBGRF_GetRxBufferStatus+0x54>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d108      	bne.n	800a952 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a940:	f240 7002 	movw	r0, #1794	@ 0x702
 800a944:	f000 f886 	bl	800aa54 <SUBGRF_ReadRegister>
 800a948:	4603      	mov	r3, r0
 800a94a:	461a      	mov	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	701a      	strb	r2, [r3, #0]
 800a950:	e002      	b.n	800a958 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a952:	7b3a      	ldrb	r2, [r7, #12]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a958:	7b7a      	ldrb	r2, [r7, #13]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	701a      	strb	r2, [r3, #0]
}
 800a95e:	bf00      	nop
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	2000041a 	.word	0x2000041a

0800a96c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a974:	f107 030c 	add.w	r3, r7, #12
 800a978:	2203      	movs	r2, #3
 800a97a:	4619      	mov	r1, r3
 800a97c:	2014      	movs	r0, #20
 800a97e:	f000 f933 	bl	800abe8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a982:	f7ff fd53 	bl	800a42c <SUBGRF_GetPacketType>
 800a986:	4603      	mov	r3, r0
 800a988:	461a      	mov	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d002      	beq.n	800a99c <SUBGRF_GetPacketStatus+0x30>
 800a996:	2b01      	cmp	r3, #1
 800a998:	d013      	beq.n	800a9c2 <SUBGRF_GetPacketStatus+0x56>
 800a99a:	e02a      	b.n	800a9f2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a99c:	7b3a      	ldrb	r2, [r7, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a9a2:	7b7b      	ldrb	r3, [r7, #13]
 800a9a4:	425b      	negs	r3, r3
 800a9a6:	105b      	asrs	r3, r3, #1
 800a9a8:	b25a      	sxtb	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
 800a9b0:	425b      	negs	r3, r3
 800a9b2:	105b      	asrs	r3, r3, #1
 800a9b4:	b25a      	sxtb	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	609a      	str	r2, [r3, #8]
            break;
 800a9c0:	e020      	b.n	800aa04 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a9c2:	7b3b      	ldrb	r3, [r7, #12]
 800a9c4:	425b      	negs	r3, r3
 800a9c6:	105b      	asrs	r3, r3, #1
 800a9c8:	b25a      	sxtb	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a9ce:	7b7b      	ldrb	r3, [r7, #13]
 800a9d0:	b25b      	sxtb	r3, r3
 800a9d2:	3302      	adds	r3, #2
 800a9d4:	109b      	asrs	r3, r3, #2
 800a9d6:	b25a      	sxtb	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	425b      	negs	r3, r3
 800a9e0:	105b      	asrs	r3, r3, #1
 800a9e2:	b25a      	sxtb	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a9e8:	4b08      	ldr	r3, [pc, #32]	@ (800aa0c <SUBGRF_GetPacketStatus+0xa0>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	611a      	str	r2, [r3, #16]
            break;
 800a9f0:	e008      	b.n	800aa04 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a9f2:	2214      	movs	r2, #20
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fea5 	bl	800b746 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	220f      	movs	r2, #15
 800aa00:	701a      	strb	r2, [r3, #0]
            break;
 800aa02:	bf00      	nop
    }
}
 800aa04:	bf00      	nop
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	2000041c 	.word	0x2000041c

0800aa10 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	460a      	mov	r2, r1
 800aa1a:	80fb      	strh	r3, [r7, #6]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa20:	f3ef 8310 	mrs	r3, PRIMASK
 800aa24:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa2a:	b672      	cpsid	i
}
 800aa2c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800aa2e:	1d7a      	adds	r2, r7, #5
 800aa30:	88f9      	ldrh	r1, [r7, #6]
 800aa32:	2301      	movs	r3, #1
 800aa34:	4806      	ldr	r0, [pc, #24]	@ (800aa50 <SUBGRF_WriteRegister+0x40>)
 800aa36:	f7fa fa65 	bl	8004f04 <HAL_SUBGHZ_WriteRegisters>
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f383 8810 	msr	PRIMASK, r3
}
 800aa44:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aa46:	bf00      	nop
 800aa48:	3718      	adds	r7, #24
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	200000e0 	.word	0x200000e0

0800aa54 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa5e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa62:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa64:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 800aa66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa68:	b672      	cpsid	i
}
 800aa6a:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800aa6c:	f107 020b 	add.w	r2, r7, #11
 800aa70:	88f9      	ldrh	r1, [r7, #6]
 800aa72:	2301      	movs	r3, #1
 800aa74:	4806      	ldr	r0, [pc, #24]	@ (800aa90 <SUBGRF_ReadRegister+0x3c>)
 800aa76:	f7fa faa4 	bl	8004fc2 <HAL_SUBGHZ_ReadRegisters>
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f383 8810 	msr	PRIMASK, r3
}
 800aa84:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 800aa86:	7afb      	ldrb	r3, [r7, #11]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	200000e0 	.word	0x200000e0

0800aa94 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	6039      	str	r1, [r7, #0]
 800aa9e:	80fb      	strh	r3, [r7, #6]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaa4:	f3ef 8310 	mrs	r3, PRIMASK
 800aaa8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aaac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aaae:	b672      	cpsid	i
}
 800aab0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800aab2:	88bb      	ldrh	r3, [r7, #4]
 800aab4:	88f9      	ldrh	r1, [r7, #6]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	4806      	ldr	r0, [pc, #24]	@ (800aad4 <SUBGRF_WriteRegisters+0x40>)
 800aaba:	f7fa fa23 	bl	8004f04 <HAL_SUBGHZ_WriteRegisters>
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	f383 8810 	msr	PRIMASK, r3
}
 800aac8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aaca:	bf00      	nop
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	200000e0 	.word	0x200000e0

0800aad8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	6039      	str	r1, [r7, #0]
 800aae2:	80fb      	strh	r3, [r7, #6]
 800aae4:	4613      	mov	r3, r2
 800aae6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aae8:	f3ef 8310 	mrs	r3, PRIMASK
 800aaec:	60fb      	str	r3, [r7, #12]
  return(result);
 800aaee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aaf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aaf2:	b672      	cpsid	i
}
 800aaf4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800aaf6:	88bb      	ldrh	r3, [r7, #4]
 800aaf8:	88f9      	ldrh	r1, [r7, #6]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4806      	ldr	r0, [pc, #24]	@ (800ab18 <SUBGRF_ReadRegisters+0x40>)
 800aafe:	f7fa fa60 	bl	8004fc2 <HAL_SUBGHZ_ReadRegisters>
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	f383 8810 	msr	PRIMASK, r3
}
 800ab0c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab0e:	bf00      	nop
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	200000e0 	.word	0x200000e0

0800ab1c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b086      	sub	sp, #24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	6039      	str	r1, [r7, #0]
 800ab26:	71fb      	strb	r3, [r7, #7]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab30:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab32:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ab34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab36:	b672      	cpsid	i
}
 800ab38:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ab3a:	79bb      	ldrb	r3, [r7, #6]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	79f9      	ldrb	r1, [r7, #7]
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	4806      	ldr	r0, [pc, #24]	@ (800ab5c <SUBGRF_WriteBuffer+0x40>)
 800ab44:	f7fa fb51 	bl	80051ea <HAL_SUBGHZ_WriteBuffer>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f383 8810 	msr	PRIMASK, r3
}
 800ab52:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab54:	bf00      	nop
 800ab56:	3718      	adds	r7, #24
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	200000e0 	.word	0x200000e0

0800ab60 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	4603      	mov	r3, r0
 800ab68:	6039      	str	r1, [r7, #0]
 800ab6a:	71fb      	strb	r3, [r7, #7]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab70:	f3ef 8310 	mrs	r3, PRIMASK
 800ab74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab76:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ab78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab7a:	b672      	cpsid	i
}
 800ab7c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ab7e:	79bb      	ldrb	r3, [r7, #6]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	79f9      	ldrb	r1, [r7, #7]
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	4806      	ldr	r0, [pc, #24]	@ (800aba0 <SUBGRF_ReadBuffer+0x40>)
 800ab88:	f7fa fb82 	bl	8005290 <HAL_SUBGHZ_ReadBuffer>
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f383 8810 	msr	PRIMASK, r3
}
 800ab96:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab98:	bf00      	nop
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	200000e0 	.word	0x200000e0

0800aba4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4603      	mov	r3, r0
 800abac:	6039      	str	r1, [r7, #0]
 800abae:	71fb      	strb	r3, [r7, #7]
 800abb0:	4613      	mov	r3, r2
 800abb2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abb4:	f3ef 8310 	mrs	r3, PRIMASK
 800abb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800abba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800abbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abbe:	b672      	cpsid	i
}
 800abc0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800abc2:	88bb      	ldrh	r3, [r7, #4]
 800abc4:	79f9      	ldrb	r1, [r7, #7]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	4806      	ldr	r0, [pc, #24]	@ (800abe4 <SUBGRF_WriteCommand+0x40>)
 800abca:	f7fa fa5b 	bl	8005084 <HAL_SUBGHZ_ExecSetCmd>
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f383 8810 	msr	PRIMASK, r3
}
 800abd8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800abda:	bf00      	nop
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	200000e0 	.word	0x200000e0

0800abe8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	6039      	str	r1, [r7, #0]
 800abf2:	71fb      	strb	r3, [r7, #7]
 800abf4:	4613      	mov	r3, r2
 800abf6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abf8:	f3ef 8310 	mrs	r3, PRIMASK
 800abfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800abfe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ac00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac02:	b672      	cpsid	i
}
 800ac04:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800ac06:	88bb      	ldrh	r3, [r7, #4]
 800ac08:	79f9      	ldrb	r1, [r7, #7]
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	4806      	ldr	r0, [pc, #24]	@ (800ac28 <SUBGRF_ReadCommand+0x40>)
 800ac0e:	f7fa fa98 	bl	8005142 <HAL_SUBGHZ_ExecGetCmd>
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f383 8810 	msr	PRIMASK, r3
}
 800ac1c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ac1e:	bf00      	nop
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	200000e0 	.word	0x200000e0

0800ac2c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	460a      	mov	r2, r1
 800ac36:	71fb      	strb	r3, [r7, #7]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800ac40:	79bb      	ldrb	r3, [r7, #6]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d10d      	bne.n	800ac62 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d104      	bne.n	800ac56 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ac50:	2004      	movs	r0, #4
 800ac52:	f000 f8ef 	bl	800ae34 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d107      	bne.n	800ac6c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	73fb      	strb	r3, [r7, #15]
 800ac60:	e004      	b.n	800ac6c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800ac62:	79bb      	ldrb	r3, [r7, #6]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fc73 	bl	800b55a <RBI_ConfigRFSwitch>
}
 800ac74:	bf00      	nop
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800ac86:	2301      	movs	r3, #1
 800ac88:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800ac8a:	f000 fc74 	bl	800b576 <RBI_GetTxConfig>
 800ac8e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d016      	beq.n	800acc4 <SUBGRF_SetRfTxPower+0x48>
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	dc16      	bgt.n	800acca <SUBGRF_SetRfTxPower+0x4e>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <SUBGRF_SetRfTxPower+0x2e>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d00a      	beq.n	800acbe <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800aca8:	e00f      	b.n	800acca <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800acaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acae:	2b0f      	cmp	r3, #15
 800acb0:	dd02      	ble.n	800acb8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800acb2:	2302      	movs	r3, #2
 800acb4:	73fb      	strb	r3, [r7, #15]
            break;
 800acb6:	e009      	b.n	800accc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800acb8:	2301      	movs	r3, #1
 800acba:	73fb      	strb	r3, [r7, #15]
            break;
 800acbc:	e006      	b.n	800accc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800acbe:	2301      	movs	r3, #1
 800acc0:	73fb      	strb	r3, [r7, #15]
            break;
 800acc2:	e003      	b.n	800accc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800acc4:	2302      	movs	r3, #2
 800acc6:	73fb      	strb	r3, [r7, #15]
            break;
 800acc8:	e000      	b.n	800accc <SUBGRF_SetRfTxPower+0x50>
            break;
 800acca:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800accc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	2202      	movs	r2, #2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff fbb3 	bl	800a440 <SUBGRF_SetTxParams>

    return paSelect;
 800acda:	7bfb      	ldrb	r3, [r7, #15]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800ace8:	2301      	movs	r3, #1
}
 800acea:	4618      	mov	r0, r3
 800acec:	46bd      	mov	sp, r7
 800acee:	bc80      	pop	{r7}
 800acf0:	4770      	bx	lr
	...

0800acf4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800acfc:	4b03      	ldr	r3, [pc, #12]	@ (800ad0c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2001      	movs	r0, #1
 800ad02:	4798      	blx	r3
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	20000424 	.word	0x20000424

0800ad10 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800ad18:	4b03      	ldr	r3, [pc, #12]	@ (800ad28 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2002      	movs	r0, #2
 800ad1e:	4798      	blx	r3
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20000424 	.word	0x20000424

0800ad2c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800ad34:	4b03      	ldr	r3, [pc, #12]	@ (800ad44 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2040      	movs	r0, #64	@ 0x40
 800ad3a:	4798      	blx	r3
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000424 	.word	0x20000424

0800ad48 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800ad54:	78fb      	ldrb	r3, [r7, #3]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d005      	beq.n	800ad6a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800ad5e:	e00a      	b.n	800ad76 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800ad60:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2080      	movs	r0, #128	@ 0x80
 800ad66:	4798      	blx	r3
            break;
 800ad68:	e005      	b.n	800ad76 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800ad6a:	4b05      	ldr	r3, [pc, #20]	@ (800ad80 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ad72:	4798      	blx	r3
            break;
 800ad74:	bf00      	nop
    }
}
 800ad76:	bf00      	nop
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000424 	.word	0x20000424

0800ad84 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800ad8c:	4b04      	ldr	r3, [pc, #16]	@ (800ada0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ad94:	4798      	blx	r3
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20000424 	.word	0x20000424

0800ada4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800adac:	4b03      	ldr	r3, [pc, #12]	@ (800adbc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2020      	movs	r0, #32
 800adb2:	4798      	blx	r3
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20000424 	.word	0x20000424

0800adc0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800adc8:	4b03      	ldr	r3, [pc, #12]	@ (800add8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2004      	movs	r0, #4
 800adce:	4798      	blx	r3
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	20000424 	.word	0x20000424

0800addc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800ade4:	4b03      	ldr	r3, [pc, #12]	@ (800adf4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2008      	movs	r0, #8
 800adea:	4798      	blx	r3
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	20000424 	.word	0x20000424

0800adf8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800ae00:	4b03      	ldr	r3, [pc, #12]	@ (800ae10 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2010      	movs	r0, #16
 800ae06:	4798      	blx	r3
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	20000424 	.word	0x20000424

0800ae14 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800ae1c:	4b04      	ldr	r3, [pc, #16]	@ (800ae30 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ae24:	4798      	blx	r3
}
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20000424 	.word	0x20000424

0800ae34 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800ae3e:	f000 fba8 	bl	800b592 <RBI_IsDCDC>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d112      	bne.n	800ae6e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800ae48:	f640 1023 	movw	r0, #2339	@ 0x923
 800ae4c:	f7ff fe02 	bl	800aa54 <SUBGRF_ReadRegister>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	f023 0306 	bic.w	r3, r3, #6
 800ae5a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ae5c:	7bfa      	ldrb	r2, [r7, #15]
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	4619      	mov	r1, r3
 800ae66:	f640 1023 	movw	r0, #2339	@ 0x923
 800ae6a:	f7ff fdd1 	bl	800aa10 <SUBGRF_WriteRegister>
  }
}
 800ae6e:	bf00      	nop
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800ae86:	231f      	movs	r3, #31
 800ae88:	e017      	b.n	800aeba <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
 800ae8e:	e00f      	b.n	800aeb0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	4a0c      	ldr	r2, [pc, #48]	@ (800aec4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ae94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d205      	bcs.n	800aeaa <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	4a08      	ldr	r2, [pc, #32]	@ (800aec4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	791b      	ldrb	r3, [r3, #4]
 800aea8:	e007      	b.n	800aeba <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	3301      	adds	r3, #1
 800aeae:	73fb      	strb	r3, [r7, #15]
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	2b15      	cmp	r3, #21
 800aeb4:	d9ec      	bls.n	800ae90 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800aeb6:	bf00      	nop
 800aeb8:	e7fd      	b.n	800aeb6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bc80      	pop	{r7}
 800aec2:	4770      	bx	lr
 800aec4:	0800cec0 	.word	0x0800cec0

0800aec8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08a      	sub	sp, #40	@ 0x28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800aed2:	4b35      	ldr	r3, [pc, #212]	@ (800afa8 <SUBGRF_GetCFO+0xe0>)
 800aed4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800aed6:	f640 0007 	movw	r0, #2055	@ 0x807
 800aeda:	f7ff fdbb 	bl	800aa54 <SUBGRF_ReadRegister>
 800aede:	4603      	mov	r3, r0
 800aee0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800aee2:	7ffb      	ldrb	r3, [r7, #31]
 800aee4:	08db      	lsrs	r3, r3, #3
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	3328      	adds	r3, #40	@ 0x28
 800aeee:	443b      	add	r3, r7
 800aef0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800aef4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800aef6:	7ffb      	ldrb	r3, [r7, #31]
 800aef8:	f003 0307 	and.w	r3, r3, #7
 800aefc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800aefe:	7fba      	ldrb	r2, [r7, #30]
 800af00:	7f7b      	ldrb	r3, [r7, #29]
 800af02:	3301      	adds	r3, #1
 800af04:	fa02 f303 	lsl.w	r3, r2, r3
 800af08:	461a      	mov	r2, r3
 800af0a:	4b28      	ldr	r3, [pc, #160]	@ (800afac <SUBGRF_GetCFO+0xe4>)
 800af0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af10:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800af12:	69ba      	ldr	r2, [r7, #24]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800af22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	fb02 f303 	mul.w	r3, r2, r3
 800af2c:	2b07      	cmp	r3, #7
 800af2e:	d802      	bhi.n	800af36 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800af30:	2302      	movs	r3, #2
 800af32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800af36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	fb02 f303 	mul.w	r3, r2, r3
 800af40:	2b03      	cmp	r3, #3
 800af42:	d802      	bhi.n	800af4a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800af44:	2304      	movs	r3, #4
 800af46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800af4a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	fb02 f303 	mul.w	r3, r2, r3
 800af54:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800af56:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800af5a:	f7ff fd7b 	bl	800aa54 <SUBGRF_ReadRegister>
 800af5e:	4603      	mov	r3, r0
 800af60:	021b      	lsls	r3, r3, #8
 800af62:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800af66:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800af68:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800af6c:	f7ff fd72 	bl	800aa54 <SUBGRF_ReadRegister>
 800af70:	4603      	mov	r3, r0
 800af72:	461a      	mov	r2, r3
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	4313      	orrs	r3, r2
 800af78:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af80:	2b00      	cmp	r3, #0
 800af82:	d005      	beq.n	800af90 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af8a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af8e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	095b      	lsrs	r3, r3, #5
 800af94:	6a3a      	ldr	r2, [r7, #32]
 800af96:	fb02 f303 	mul.w	r3, r2, r3
 800af9a:	11da      	asrs	r2, r3, #7
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	601a      	str	r2, [r3, #0]
}
 800afa0:	bf00      	nop
 800afa2:	3728      	adds	r7, #40	@ 0x28
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	0c0a0804 	.word	0x0c0a0804
 800afac:	01e84800 	.word	0x01e84800

0800afb0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800afb0:	b480      	push	{r7}
 800afb2:	b087      	sub	sp, #28
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	4603      	mov	r3, r0
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800afc2:	f04f 33ff 	mov.w	r3, #4294967295
 800afc6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800afc8:	697b      	ldr	r3, [r7, #20]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	371c      	adds	r7, #28
 800afce:	46bd      	mov	sp, r7
 800afd0:	bc80      	pop	{r7}
 800afd2:	4770      	bx	lr

0800afd4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800afd4:	b480      	push	{r7}
 800afd6:	b087      	sub	sp, #28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800afe6:	f04f 33ff 	mov.w	r3, #4294967295
 800afea:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800afec:	697b      	ldr	r3, [r7, #20]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bc80      	pop	{r7}
 800aff6:	4770      	bx	lr

0800aff8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b004:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bc80      	pop	{r7}
 800b010:	4770      	bx	lr

0800b012 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b012:	b480      	push	{r7}
 800b014:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b016:	bf00      	nop
 800b018:	46bd      	mov	sp, r7
 800b01a:	bc80      	pop	{r7}
 800b01c:	4770      	bx	lr

0800b01e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b01e:	b480      	push	{r7}
 800b020:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b022:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b024:	4618      	mov	r0, r3
 800b026:	46bd      	mov	sp, r7
 800b028:	bc80      	pop	{r7}
 800b02a:	4770      	bx	lr

0800b02c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b030:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b032:	4618      	mov	r0, r3
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr

0800b03a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b03a:	b480      	push	{r7}
 800b03c:	b083      	sub	sp, #12
 800b03e:	af00      	add	r7, sp, #0
 800b040:	4603      	mov	r3, r0
 800b042:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	bc80      	pop	{r7}
 800b04c:	4770      	bx	lr

0800b04e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b04e:	b480      	push	{r7}
 800b050:	b087      	sub	sp, #28
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	460b      	mov	r3, r1
 800b058:	607a      	str	r2, [r7, #4]
 800b05a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b05c:	f04f 33ff 	mov.w	r3, #4294967295
 800b060:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b062:	697b      	ldr	r3, [r7, #20]
}
 800b064:	4618      	mov	r0, r3
 800b066:	371c      	adds	r7, #28
 800b068:	46bd      	mov	sp, r7
 800b06a:	bc80      	pop	{r7}
 800b06c:	4770      	bx	lr

0800b06e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b06e:	b480      	push	{r7}
 800b070:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b072:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800b076:	4618      	mov	r0, r3
 800b078:	46bd      	mov	sp, r7
 800b07a:	bc80      	pop	{r7}
 800b07c:	4770      	bx	lr

0800b07e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b07e:	b480      	push	{r7}
 800b080:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b082:	bf00      	nop
 800b084:	46bd      	mov	sp, r7
 800b086:	bc80      	pop	{r7}
 800b088:	4770      	bx	lr

0800b08a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b08a:	b480      	push	{r7}
 800b08c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b08e:	bf00      	nop
 800b090:	46bd      	mov	sp, r7
 800b092:	bc80      	pop	{r7}
 800b094:	4770      	bx	lr

0800b096 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	4603      	mov	r3, r0
 800b09e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bc80      	pop	{r7}
 800b0a8:	4770      	bx	lr

0800b0aa <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b0ae:	f7f5 fd89 	bl	8000bc4 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b0b2:	f000 f80b 	bl	800b0cc <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b0b6:	bf00      	nop
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
	UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b0be:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c2:	f000 fe33 	bl	800bd2c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b0c6:	bf00      	nop
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <SubghzApp_Init>:
uint16_t v1 = 0;
uint16_t v2 = 0;
uint16_t v3 = 0;

void SubghzApp_Init(void)
{
 800b0cc:	b590      	push	{r4, r7, lr}
 800b0ce:	b08b      	sub	sp, #44	@ 0x2c
 800b0d0:	af0a      	add	r7, sp, #40	@ 0x28
  /* Radio initialization */
  RadioEvents.RxDone = OnRxDone;
 800b0d2:	4b42      	ldr	r3, [pc, #264]	@ (800b1dc <SubghzApp_Init+0x110>)
 800b0d4:	4a42      	ldr	r2, [pc, #264]	@ (800b1e0 <SubghzApp_Init+0x114>)
 800b0d6:	609a      	str	r2, [r3, #8]
  RadioEvents.TxDone = OnTxDone;
 800b0d8:	4b40      	ldr	r3, [pc, #256]	@ (800b1dc <SubghzApp_Init+0x110>)
 800b0da:	4a42      	ldr	r2, [pc, #264]	@ (800b1e4 <SubghzApp_Init+0x118>)
 800b0dc:	601a      	str	r2, [r3, #0]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b0de:	4b3f      	ldr	r3, [pc, #252]	@ (800b1dc <SubghzApp_Init+0x110>)
 800b0e0:	4a41      	ldr	r2, [pc, #260]	@ (800b1e8 <SubghzApp_Init+0x11c>)
 800b0e2:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b0e4:	4b3d      	ldr	r3, [pc, #244]	@ (800b1dc <SubghzApp_Init+0x110>)
 800b0e6:	4a41      	ldr	r2, [pc, #260]	@ (800b1ec <SubghzApp_Init+0x120>)
 800b0e8:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b0ea:	4b3c      	ldr	r3, [pc, #240]	@ (800b1dc <SubghzApp_Init+0x110>)
 800b0ec:	4a40      	ldr	r2, [pc, #256]	@ (800b1f0 <SubghzApp_Init+0x124>)
 800b0ee:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b0f0:	4b40      	ldr	r3, [pc, #256]	@ (800b1f4 <SubghzApp_Init+0x128>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4839      	ldr	r0, [pc, #228]	@ (800b1dc <SubghzApp_Init+0x110>)
 800b0f6:	4798      	blx	r3

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800b0f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b1f4 <SubghzApp_Init+0x128>)
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	483e      	ldr	r0, [pc, #248]	@ (800b1f8 <SubghzApp_Init+0x12c>)
 800b0fe:	4798      	blx	r3

  /* Radio configuration */
  APP_LOG(TS_OFF, VLEVEL_L, "==========================================\n\r");
 800b100:	4b3e      	ldr	r3, [pc, #248]	@ (800b1fc <SubghzApp_Init+0x130>)
 800b102:	2200      	movs	r2, #0
 800b104:	2100      	movs	r1, #0
 800b106:	2001      	movs	r0, #1
 800b108:	f001 f9ca 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "Capstone - BioSensor Solutions - LORA Test\n\r");
 800b10c:	4b3c      	ldr	r3, [pc, #240]	@ (800b200 <SubghzApp_Init+0x134>)
 800b10e:	2200      	movs	r2, #0
 800b110:	2100      	movs	r1, #0
 800b112:	2001      	movs	r0, #1
 800b114:	f001 f9c4 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800b118:	237d      	movs	r3, #125	@ 0x7d
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	4b39      	ldr	r3, [pc, #228]	@ (800b204 <SubghzApp_Init+0x138>)
 800b11e:	2200      	movs	r2, #0
 800b120:	2100      	movs	r1, #0
 800b122:	2001      	movs	r0, #1
 800b124:	f001 f9bc 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800b128:	230a      	movs	r3, #10
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	4b36      	ldr	r3, [pc, #216]	@ (800b208 <SubghzApp_Init+0x13c>)
 800b12e:	2200      	movs	r2, #0
 800b130:	2100      	movs	r1, #0
 800b132:	2001      	movs	r0, #1
 800b134:	f001 f9b4 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "==========================================\n\r");
 800b138:	4b30      	ldr	r3, [pc, #192]	@ (800b1fc <SubghzApp_Init+0x130>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	2001      	movs	r0, #1
 800b140:	f001 f9ae 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800b144:	4b2b      	ldr	r3, [pc, #172]	@ (800b1f4 <SubghzApp_Init+0x128>)
 800b146:	69dc      	ldr	r4, [r3, #28]
 800b148:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b14c:	9308      	str	r3, [sp, #32]
 800b14e:	2300      	movs	r3, #0
 800b150:	9307      	str	r3, [sp, #28]
 800b152:	2300      	movs	r3, #0
 800b154:	9306      	str	r3, [sp, #24]
 800b156:	2300      	movs	r3, #0
 800b158:	9305      	str	r3, [sp, #20]
 800b15a:	2301      	movs	r3, #1
 800b15c:	9304      	str	r3, [sp, #16]
 800b15e:	2300      	movs	r3, #0
 800b160:	9303      	str	r3, [sp, #12]
 800b162:	2308      	movs	r3, #8
 800b164:	9302      	str	r3, [sp, #8]
 800b166:	2301      	movs	r3, #1
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	230a      	movs	r3, #10
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	2300      	movs	r3, #0
 800b170:	2200      	movs	r2, #0
 800b172:	210f      	movs	r1, #15
 800b174:	2001      	movs	r0, #1
 800b176:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800b178:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f4 <SubghzApp_Init+0x128>)
 800b17a:	699c      	ldr	r4, [r3, #24]
 800b17c:	2301      	movs	r3, #1
 800b17e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b180:	2300      	movs	r3, #0
 800b182:	9308      	str	r3, [sp, #32]
 800b184:	2300      	movs	r3, #0
 800b186:	9307      	str	r3, [sp, #28]
 800b188:	2300      	movs	r3, #0
 800b18a:	9306      	str	r3, [sp, #24]
 800b18c:	2301      	movs	r3, #1
 800b18e:	9305      	str	r3, [sp, #20]
 800b190:	2300      	movs	r3, #0
 800b192:	9304      	str	r3, [sp, #16]
 800b194:	2300      	movs	r3, #0
 800b196:	9303      	str	r3, [sp, #12]
 800b198:	2305      	movs	r3, #5
 800b19a:	9302      	str	r3, [sp, #8]
 800b19c:	2308      	movs	r3, #8
 800b19e:	9301      	str	r3, [sp, #4]
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	220a      	movs	r2, #10
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	2001      	movs	r0, #1
 800b1ac:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, PAYLOAD_SIZE);
 800b1ae:	4b11      	ldr	r3, [pc, #68]	@ (800b1f4 <SubghzApp_Init+0x128>)
 800b1b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1b2:	2108      	movs	r1, #8
 800b1b4:	2001      	movs	r0, #1
 800b1b6:	4798      	blx	r3

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_RX), UTIL_SEQ_RFU, RX_Process);
 800b1b8:	4a14      	ldr	r2, [pc, #80]	@ (800b20c <SubghzApp_Init+0x140>)
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f000 feb1 	bl	800bf24 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_TX), UTIL_SEQ_RFU, TX_Process);
 800b1c2:	4a13      	ldr	r2, [pc, #76]	@ (800b210 <SubghzApp_Init+0x144>)
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	2002      	movs	r0, #2
 800b1c8:	f000 feac 	bl	800bf24 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800b1cc:	2102      	movs	r1, #2
 800b1ce:	2001      	movs	r0, #1
 800b1d0:	f000 feca 	bl	800bf68 <UTIL_SEQ_SetTask>
}
 800b1d4:	bf00      	nop
 800b1d6:	3704      	adds	r7, #4
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd90      	pop	{r4, r7, pc}
 800b1dc:	20000428 	.word	0x20000428
 800b1e0:	0800b24d 	.word	0x0800b24d
 800b1e4:	0800b215 	.word	0x0800b215
 800b1e8:	0800b401 	.word	0x0800b401
 800b1ec:	0800b421 	.word	0x0800b421
 800b1f0:	0800b441 	.word	0x0800b441
 800b1f4:	0800ce30 	.word	0x0800ce30
 800b1f8:	3689cac0 	.word	0x3689cac0
 800b1fc:	0800ca4c 	.word	0x0800ca4c
 800b200:	0800ca7c 	.word	0x0800ca7c
 800b204:	0800caac 	.word	0x0800caac
 800b208:	0800cac0 	.word	0x0800cac0
 800b20c:	0800b461 	.word	0x0800b461
 800b210:	0800b489 	.word	0x0800b489

0800b214 <OnTxDone>:

static void OnTxDone(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
    APP_LOG(TS_ON, VLEVEL_M, "TX Done: Successfully sent packet\n\r");
 800b218:	4b09      	ldr	r3, [pc, #36]	@ (800b240 <OnTxDone+0x2c>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	2100      	movs	r1, #0
 800b21e:	2002      	movs	r0, #2
 800b220:	f001 f93e 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
    TX_InProgress = false;
 800b224:	4b07      	ldr	r3, [pc, #28]	@ (800b244 <OnTxDone+0x30>)
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_Port, LED_Pin, GPIO_PIN_SET);
 800b22a:	2201      	movs	r2, #1
 800b22c:	2120      	movs	r1, #32
 800b22e:	4806      	ldr	r0, [pc, #24]	@ (800b248 <OnTxDone+0x34>)
 800b230:	f7f8 f9f2 	bl	8003618 <HAL_GPIO_WritePin>
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800b234:	2102      	movs	r1, #2
 800b236:	2001      	movs	r0, #1
 800b238:	f000 fe96 	bl	800bf68 <UTIL_SEQ_SetTask>
}
 800b23c:	bf00      	nop
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	0800cad0 	.word	0x0800cad0
 800b244:	20000444 	.word	0x20000444
 800b248:	48000400 	.word	0x48000400

0800b24c <OnRxDone>:

static void OnRxDone(uint8_t *pay, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08a      	sub	sp, #40	@ 0x28
 800b250:	af02      	add	r7, sp, #8
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	4608      	mov	r0, r1
 800b256:	4611      	mov	r1, r2
 800b258:	461a      	mov	r2, r3
 800b25a:	4603      	mov	r3, r0
 800b25c:	817b      	strh	r3, [r7, #10]
 800b25e:	460b      	mov	r3, r1
 800b260:	813b      	strh	r3, [r7, #8]
 800b262:	4613      	mov	r3, r2
 800b264:	71fb      	strb	r3, [r7, #7]
	payload = *(uint64_t*)pay;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	4955      	ldr	r1, [pc, #340]	@ (800b3c4 <OnRxDone+0x178>)
 800b26e:	e9c1 2300 	strd	r2, r3, [r1]
	conf = (uint8_t)(payload >> 56);
 800b272:	4b54      	ldr	r3, [pc, #336]	@ (800b3c4 <OnRxDone+0x178>)
 800b274:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	f04f 0300 	mov.w	r3, #0
 800b280:	0e0a      	lsrs	r2, r1, #24
 800b282:	2300      	movs	r3, #0
 800b284:	b2d2      	uxtb	r2, r2
 800b286:	4b50      	ldr	r3, [pc, #320]	@ (800b3c8 <OnRxDone+0x17c>)
 800b288:	701a      	strb	r2, [r3, #0]
    deviceNum = (uint32_t)(payload >> 24);
 800b28a:	4b4e      	ldr	r3, [pc, #312]	@ (800b3c4 <OnRxDone+0x178>)
 800b28c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b290:	f04f 0200 	mov.w	r2, #0
 800b294:	f04f 0300 	mov.w	r3, #0
 800b298:	0e02      	lsrs	r2, r0, #24
 800b29a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b29e:	0e0b      	lsrs	r3, r1, #24
 800b2a0:	4b4a      	ldr	r3, [pc, #296]	@ (800b3cc <OnRxDone+0x180>)
 800b2a2:	601a      	str	r2, [r3, #0]
    data = ((uint32_t)(payload << 8)) >> 8;
 800b2a4:	4b47      	ldr	r3, [pc, #284]	@ (800b3c4 <OnRxDone+0x178>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	0a1b      	lsrs	r3, r3, #8
 800b2b0:	4a47      	ldr	r2, [pc, #284]	@ (800b3d0 <OnRxDone+0x184>)
 800b2b2:	6013      	str	r3, [r2, #0]
	APP_LOG(TS_OFF, VLEVEL_L, "------------------------------------\n\r");
 800b2b4:	4b47      	ldr	r3, [pc, #284]	@ (800b3d4 <OnRxDone+0x188>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	2001      	movs	r0, #1
 800b2bc:	f001 f8f0 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "RX Packet Successfully Received!\n\r");
 800b2c0:	4b45      	ldr	r3, [pc, #276]	@ (800b3d8 <OnRxDone+0x18c>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	2001      	movs	r0, #1
 800b2c8:	f001 f8ea 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800b2cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b2d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800b2d4:	9201      	str	r2, [sp, #4]
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	4b40      	ldr	r3, [pc, #256]	@ (800b3dc <OnRxDone+0x190>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2100      	movs	r1, #0
 800b2de:	2001      	movs	r0, #1
 800b2e0:	f001 f8de 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Confirmation - %02X\n\r", conf);
 800b2e4:	4b38      	ldr	r3, [pc, #224]	@ (800b3c8 <OnRxDone+0x17c>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	4b3d      	ldr	r3, [pc, #244]	@ (800b3e0 <OnRxDone+0x194>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	f001 f8d5 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Device Number - %08X\n\r", deviceNum);
 800b2f6:	4b35      	ldr	r3, [pc, #212]	@ (800b3cc <OnRxDone+0x180>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	4b39      	ldr	r3, [pc, #228]	@ (800b3e4 <OnRxDone+0x198>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	2100      	movs	r1, #0
 800b302:	2001      	movs	r0, #1
 800b304:	f001 f8cc 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Data - %06X\n\r", data);
 800b308:	4b31      	ldr	r3, [pc, #196]	@ (800b3d0 <OnRxDone+0x184>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	4b36      	ldr	r3, [pc, #216]	@ (800b3e8 <OnRxDone+0x19c>)
 800b310:	2200      	movs	r2, #0
 800b312:	2100      	movs	r1, #0
 800b314:	2001      	movs	r0, #1
 800b316:	f001 f8c3 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Payload - %08X%08X\n\r", (uint32_t)(payload >> 32), (uint32_t)payload);
 800b31a:	4b2a      	ldr	r3, [pc, #168]	@ (800b3c4 <OnRxDone+0x178>)
 800b31c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b320:	f04f 0200 	mov.w	r2, #0
 800b324:	f04f 0300 	mov.w	r3, #0
 800b328:	000a      	movs	r2, r1
 800b32a:	2300      	movs	r3, #0
 800b32c:	4611      	mov	r1, r2
 800b32e:	4b25      	ldr	r3, [pc, #148]	@ (800b3c4 <OnRxDone+0x178>)
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	4613      	mov	r3, r2
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	9100      	str	r1, [sp, #0]
 800b33a:	4b2c      	ldr	r3, [pc, #176]	@ (800b3ec <OnRxDone+0x1a0>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	2100      	movs	r1, #0
 800b340:	2001      	movs	r0, #1
 800b342:	f001 f8ad 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "------------------------------------\n\r");
 800b346:	4b23      	ldr	r3, [pc, #140]	@ (800b3d4 <OnRxDone+0x188>)
 800b348:	2200      	movs	r2, #0
 800b34a:	2100      	movs	r1, #0
 800b34c:	2001      	movs	r0, #1
 800b34e:	f001 f8a7 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>

#if HUB_NODE

	uint8_t payload_buffer[4];
	memcpy(payload_buffer, &data, sizeof(data));
 800b352:	4b1f      	ldr	r3, [pc, #124]	@ (800b3d0 <OnRxDone+0x184>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	61bb      	str	r3, [r7, #24]

    // Extract the first 4 bytes and convert them to a 32-bit integer
	uint8_t reverse_buffer[3];
	reverse_buffer[0] = payload_buffer[2];
 800b358:	7ebb      	ldrb	r3, [r7, #26]
 800b35a:	753b      	strb	r3, [r7, #20]
	reverse_buffer[1] = payload_buffer[1];
 800b35c:	7e7b      	ldrb	r3, [r7, #25]
 800b35e:	757b      	strb	r3, [r7, #21]
	reverse_buffer[2] = payload_buffer[0];
 800b360:	7e3b      	ldrb	r3, [r7, #24]
 800b362:	75bb      	strb	r3, [r7, #22]

	HAL_StatusTypeDef uart_status = HAL_UART_Transmit(&hlpuart1,reverse_buffer,sizeof(reverse_buffer),1000);
 800b364:	f107 0114 	add.w	r1, r7, #20
 800b368:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b36c:	2203      	movs	r2, #3
 800b36e:	4820      	ldr	r0, [pc, #128]	@ (800b3f0 <OnRxDone+0x1a4>)
 800b370:	f7fa f9f9 	bl	8005766 <HAL_UART_Transmit>
 800b374:	4603      	mov	r3, r0
 800b376:	77fb      	strb	r3, [r7, #31]
	if (uart_status == HAL_OK){
 800b378:	7ffb      	ldrb	r3, [r7, #31]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <OnRxDone+0x140>
		APP_LOG(TS_ON, VLEVEL_M, "UART Transmission Success\n\r");
 800b37e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f4 <OnRxDone+0x1a8>)
 800b380:	2201      	movs	r2, #1
 800b382:	2100      	movs	r1, #0
 800b384:	2002      	movs	r0, #2
 800b386:	f001 f88b 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
 800b38a:	e007      	b.n	800b39c <OnRxDone+0x150>
	}else{
		APP_LOG(TS_ON, VLEVEL_M, "UART Transmission Failed: %d\n\r", uart_status);
 800b38c:	7ffb      	ldrb	r3, [r7, #31]
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	4b19      	ldr	r3, [pc, #100]	@ (800b3f8 <OnRxDone+0x1ac>)
 800b392:	2201      	movs	r2, #1
 800b394:	2100      	movs	r1, #0
 800b396:	2002      	movs	r0, #2
 800b398:	f001 f882 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	}
#endif

	memset(BufferRx, 0, PAYLOAD_SIZE);
 800b39c:	2208      	movs	r2, #8
 800b39e:	2100      	movs	r1, #0
 800b3a0:	4816      	ldr	r0, [pc, #88]	@ (800b3fc <OnRxDone+0x1b0>)
 800b3a2:	f001 faf5 	bl	800c990 <memset>
	storePayload(payload);
 800b3a6:	4b07      	ldr	r3, [pc, #28]	@ (800b3c4 <OnRxDone+0x178>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	f000 f89a 	bl	800b4e8 <storePayload>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800b3b4:	2102      	movs	r1, #2
 800b3b6:	2001      	movs	r0, #1
 800b3b8:	f000 fdd6 	bl	800bf68 <UTIL_SEQ_SetTask>
}
 800b3bc:	bf00      	nop
 800b3be:	3720      	adds	r7, #32
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000468 	.word	0x20000468
 800b3c8:	20000458 	.word	0x20000458
 800b3cc:	2000045c 	.word	0x2000045c
 800b3d0:	20000460 	.word	0x20000460
 800b3d4:	0800caf4 	.word	0x0800caf4
 800b3d8:	0800cb1c 	.word	0x0800cb1c
 800b3dc:	0800cb40 	.word	0x0800cb40
 800b3e0:	0800cb64 	.word	0x0800cb64
 800b3e4:	0800cb7c 	.word	0x0800cb7c
 800b3e8:	0800cb94 	.word	0x0800cb94
 800b3ec:	0800cba4 	.word	0x0800cba4
 800b3f0:	200001e8 	.word	0x200001e8
 800b3f4:	0800cbbc 	.word	0x0800cbbc
 800b3f8:	0800cbd8 	.word	0x0800cbd8
 800b3fc:	20000448 	.word	0x20000448

0800b400 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	af00      	add	r7, sp, #0
	APP_LOG(TS_OFF, VLEVEL_M, "TX Timeout: Retrying TX\n\r");
 800b404:	4b05      	ldr	r3, [pc, #20]	@ (800b41c <OnTxTimeout+0x1c>)
 800b406:	2200      	movs	r2, #0
 800b408:	2100      	movs	r1, #0
 800b40a:	2002      	movs	r0, #2
 800b40c:	f001 f848 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_TX), CFG_SEQ_Prio_TX);
 800b410:	2101      	movs	r1, #1
 800b412:	2002      	movs	r0, #2
 800b414:	f000 fda8 	bl	800bf68 <UTIL_SEQ_SetTask>
}
 800b418:	bf00      	nop
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	0800cbf8 	.word	0x0800cbf8

0800b420 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
	APP_LOG(TS_ON, VLEVEL_M, "RX Timeout: Retrying RX\n\r");
 800b424:	4b05      	ldr	r3, [pc, #20]	@ (800b43c <OnRxTimeout+0x1c>)
 800b426:	2201      	movs	r2, #1
 800b428:	2100      	movs	r1, #0
 800b42a:	2002      	movs	r0, #2
 800b42c:	f001 f838 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800b430:	2102      	movs	r1, #2
 800b432:	2001      	movs	r0, #1
 800b434:	f000 fd98 	bl	800bf68 <UTIL_SEQ_SetTask>
}
 800b438:	bf00      	nop
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	0800cc14 	.word	0x0800cc14

0800b440 <OnRxError>:

static void OnRxError(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	af00      	add	r7, sp, #0
	APP_LOG(TS_ON, VLEVEL_M, "RX Error: Retrying RX\n\r");
 800b444:	4b05      	ldr	r3, [pc, #20]	@ (800b45c <OnRxError+0x1c>)
 800b446:	2201      	movs	r2, #1
 800b448:	2100      	movs	r1, #0
 800b44a:	2002      	movs	r0, #2
 800b44c:	f001 f828 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800b450:	2102      	movs	r1, #2
 800b452:	2001      	movs	r0, #1
 800b454:	f000 fd88 	bl	800bf68 <UTIL_SEQ_SetTask>
}
 800b458:	bf00      	nop
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	0800cc30 	.word	0x0800cc30

0800b460 <RX_Process>:

static void RX_Process(void)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	af00      	add	r7, sp, #0
	APP_LOG(TS_ON, VLEVEL_M, "RX Start\n\r");
 800b464:	4b06      	ldr	r3, [pc, #24]	@ (800b480 <RX_Process+0x20>)
 800b466:	2201      	movs	r2, #1
 800b468:	2100      	movs	r1, #0
 800b46a:	2002      	movs	r0, #2
 800b46c:	f001 f818 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	Radio.Rx(RX_TIMEOUT_VALUE);
 800b470:	4b04      	ldr	r3, [pc, #16]	@ (800b484 <RX_Process+0x24>)
 800b472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b474:	f241 3088 	movw	r0, #5000	@ 0x1388
 800b478:	4798      	blx	r3
}
 800b47a:	bf00      	nop
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	0800cc48 	.word	0x0800cc48
 800b484:	0800ce30 	.word	0x0800ce30

0800b488 <TX_Process>:

static void TX_Process(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Port, LED_Pin, GPIO_PIN_RESET);
 800b48c:	2200      	movs	r2, #0
 800b48e:	2120      	movs	r1, #32
 800b490:	480f      	ldr	r0, [pc, #60]	@ (800b4d0 <TX_Process+0x48>)
 800b492:	f7f8 f8c1 	bl	8003618 <HAL_GPIO_WritePin>
	APP_LOG(TS_ON, VLEVEL_M, "TX Start: Attempting to send payload\n\r");
 800b496:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d4 <TX_Process+0x4c>)
 800b498:	2201      	movs	r2, #1
 800b49a:	2100      	movs	r1, #0
 800b49c:	2002      	movs	r0, #2
 800b49e:	f000 ffff 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
	TX_InProgress = true;
 800b4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b4d8 <TX_Process+0x50>)
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	701a      	strb	r2, [r3, #0]

	storePayload(payload);
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b4dc <TX_Process+0x54>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	f000 f819 	bl	800b4e8 <storePayload>
	memcpy(BufferTx, &payload, PAYLOAD_SIZE);
 800b4b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b4e0 <TX_Process+0x58>)
 800b4b8:	4a08      	ldr	r2, [pc, #32]	@ (800b4dc <TX_Process+0x54>)
 800b4ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4be:	e883 0003 	stmia.w	r3, {r0, r1}
    Radio.Send(BufferTx, PAYLOAD_SIZE);
 800b4c2:	4b08      	ldr	r3, [pc, #32]	@ (800b4e4 <TX_Process+0x5c>)
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c6:	2108      	movs	r1, #8
 800b4c8:	4805      	ldr	r0, [pc, #20]	@ (800b4e0 <TX_Process+0x58>)
 800b4ca:	4798      	blx	r3
}
 800b4cc:	bf00      	nop
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	48000400 	.word	0x48000400
 800b4d4:	0800cc54 	.word	0x0800cc54
 800b4d8:	20000444 	.word	0x20000444
 800b4dc:	20000468 	.word	0x20000468
 800b4e0:	20000450 	.word	0x20000450
 800b4e4:	0800ce30 	.word	0x0800ce30

0800b4e8 <storePayload>:
    APP_LOG(TS_OFF, VLEVEL_L, "------------------------------------\n\r");
}
#endif

static void storePayload(uint64_t payload)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	e9c7 0100 	strd	r0, r1, [r7]
    if (bufferIndex < NUM_PAYLOADS_STORE) {
 800b4f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b52c <storePayload+0x44>)
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	2b63      	cmp	r3, #99	@ 0x63
 800b4f8:	d80d      	bhi.n	800b516 <storePayload+0x2e>
        BufferData[bufferIndex++] = payload;
 800b4fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b52c <storePayload+0x44>)
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	1c5a      	adds	r2, r3, #1
 800b500:	b291      	uxth	r1, r2
 800b502:	4a0a      	ldr	r2, [pc, #40]	@ (800b52c <storePayload+0x44>)
 800b504:	8011      	strh	r1, [r2, #0]
 800b506:	4a0a      	ldr	r2, [pc, #40]	@ (800b530 <storePayload+0x48>)
 800b508:	00db      	lsls	r3, r3, #3
 800b50a:	18d1      	adds	r1, r2, r3
 800b50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b510:	e9c1 2300 	strd	r2, r3, [r1]
    } else {
        APP_LOG(TS_OFF, VLEVEL_L, "Buffer full! Cannot store new payloads.\n\r");
    }
}
 800b514:	e005      	b.n	800b522 <storePayload+0x3a>
        APP_LOG(TS_OFF, VLEVEL_L, "Buffer full! Cannot store new payloads.\n\r");
 800b516:	4b07      	ldr	r3, [pc, #28]	@ (800b534 <storePayload+0x4c>)
 800b518:	2200      	movs	r2, #0
 800b51a:	2100      	movs	r1, #0
 800b51c:	2001      	movs	r0, #1
 800b51e:	f000 ffbf 	bl	800c4a0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000790 	.word	0x20000790
 800b530:	20000470 	.word	0x20000470
 800b534:	0800cc7c 	.word	0x0800cc7c

0800b538 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUT_Pin && !TX_InProgress){
	  createPayload();
   	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_TX), CFG_SEQ_Prio_TX);
  }
#endif
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	bc80      	pop	{r7}
 800b54a:	4770      	bx	lr

0800b54c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800b550:	f7f6 f84a 	bl	80015e8 <BSP_RADIO_Init>
 800b554:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b556:	4618      	mov	r0, r3
 800b558:	bd80      	pop	{r7, pc}

0800b55a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b082      	sub	sp, #8
 800b55e:	af00      	add	r7, sp, #0
 800b560:	4603      	mov	r3, r0
 800b562:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800b564:	79fb      	ldrb	r3, [r7, #7]
 800b566:	4618      	mov	r0, r3
 800b568:	f7f6 f87c 	bl	8001664 <BSP_RADIO_ConfigRFSwitch>
 800b56c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800b57a:	f7f6 f8cf 	bl	800171c <BSP_RADIO_GetTxConfig>
 800b57e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b580:	4618      	mov	r0, r3
 800b582:	bd80      	pop	{r7, pc}

0800b584 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800b588:	f7f6 f8cf 	bl	800172a <BSP_RADIO_IsTCXO>
 800b58c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b58e:	4618      	mov	r0, r3
 800b590:	bd80      	pop	{r7, pc}

0800b592 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800b596:	f7f6 f8cf 	bl	8001738 <BSP_RADIO_IsDCDC>
 800b59a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800b5aa:	79fb      	ldrb	r3, [r7, #7]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7f6 f8ca 	bl	8001746 <BSP_RADIO_GetRFOMaxPowerConfig>
 800b5b2:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b5bc:	b480      	push	{r7}
 800b5be:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b5c0:	4b04      	ldr	r3, [pc, #16]	@ (800b5d4 <UTIL_LPM_Init+0x18>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b5c6:	4b04      	ldr	r3, [pc, #16]	@ (800b5d8 <UTIL_LPM_Init+0x1c>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b5cc:	bf00      	nop
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bc80      	pop	{r7}
 800b5d2:	4770      	bx	lr
 800b5d4:	20000794 	.word	0x20000794
 800b5d8:	20000798 	.word	0x20000798

0800b5dc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ec:	613b      	str	r3, [r7, #16]
  return(result);
 800b5ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b5f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5f2:	b672      	cpsid	i
}
 800b5f4:	bf00      	nop
  
  switch( state )
 800b5f6:	78fb      	ldrb	r3, [r7, #3]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d008      	beq.n	800b60e <UTIL_LPM_SetStopMode+0x32>
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d10e      	bne.n	800b61e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800b600:	4b0d      	ldr	r3, [pc, #52]	@ (800b638 <UTIL_LPM_SetStopMode+0x5c>)
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4313      	orrs	r3, r2
 800b608:	4a0b      	ldr	r2, [pc, #44]	@ (800b638 <UTIL_LPM_SetStopMode+0x5c>)
 800b60a:	6013      	str	r3, [r2, #0]
      break;
 800b60c:	e008      	b.n	800b620 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	43da      	mvns	r2, r3
 800b612:	4b09      	ldr	r3, [pc, #36]	@ (800b638 <UTIL_LPM_SetStopMode+0x5c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4013      	ands	r3, r2
 800b618:	4a07      	ldr	r2, [pc, #28]	@ (800b638 <UTIL_LPM_SetStopMode+0x5c>)
 800b61a:	6013      	str	r3, [r2, #0]
      break;
 800b61c:	e000      	b.n	800b620 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800b61e:	bf00      	nop
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f383 8810 	msr	PRIMASK, r3
}
 800b62a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b62c:	bf00      	nop
 800b62e:	371c      	adds	r7, #28
 800b630:	46bd      	mov	sp, r7
 800b632:	bc80      	pop	{r7}
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	20000794 	.word	0x20000794

0800b63c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b648:	f3ef 8310 	mrs	r3, PRIMASK
 800b64c:	613b      	str	r3, [r7, #16]
  return(result);
 800b64e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b652:	b672      	cpsid	i
}
 800b654:	bf00      	nop
  
  switch(state)
 800b656:	78fb      	ldrb	r3, [r7, #3]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <UTIL_LPM_SetOffMode+0x32>
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d10e      	bne.n	800b67e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b660:	4b0d      	ldr	r3, [pc, #52]	@ (800b698 <UTIL_LPM_SetOffMode+0x5c>)
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4313      	orrs	r3, r2
 800b668:	4a0b      	ldr	r2, [pc, #44]	@ (800b698 <UTIL_LPM_SetOffMode+0x5c>)
 800b66a:	6013      	str	r3, [r2, #0]
      break;
 800b66c:	e008      	b.n	800b680 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	43da      	mvns	r2, r3
 800b672:	4b09      	ldr	r3, [pc, #36]	@ (800b698 <UTIL_LPM_SetOffMode+0x5c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4013      	ands	r3, r2
 800b678:	4a07      	ldr	r2, [pc, #28]	@ (800b698 <UTIL_LPM_SetOffMode+0x5c>)
 800b67a:	6013      	str	r3, [r2, #0]
      break;
 800b67c:	e000      	b.n	800b680 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b67e:	bf00      	nop
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f383 8810 	msr	PRIMASK, r3
}
 800b68a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b68c:	bf00      	nop
 800b68e:	371c      	adds	r7, #28
 800b690:	46bd      	mov	sp, r7
 800b692:	bc80      	pop	{r7}
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	20000798 	.word	0x20000798

0800b69c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800b6aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6ac:	b672      	cpsid	i
}
 800b6ae:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b6b0:	4b12      	ldr	r3, [pc, #72]	@ (800b6fc <UTIL_LPM_EnterLowPower+0x60>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d006      	beq.n	800b6c6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b6b8:	4b11      	ldr	r3, [pc, #68]	@ (800b700 <UTIL_LPM_EnterLowPower+0x64>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b6be:	4b10      	ldr	r3, [pc, #64]	@ (800b700 <UTIL_LPM_EnterLowPower+0x64>)
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	4798      	blx	r3
 800b6c4:	e010      	b.n	800b6e8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <UTIL_LPM_EnterLowPower+0x68>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d006      	beq.n	800b6dc <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800b6ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b700 <UTIL_LPM_EnterLowPower+0x64>)
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b6d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b700 <UTIL_LPM_EnterLowPower+0x64>)
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	4798      	blx	r3
 800b6da:	e005      	b.n	800b6e8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800b6dc:	4b08      	ldr	r3, [pc, #32]	@ (800b700 <UTIL_LPM_EnterLowPower+0x64>)
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b6e2:	4b07      	ldr	r3, [pc, #28]	@ (800b700 <UTIL_LPM_EnterLowPower+0x64>)
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	4798      	blx	r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f383 8810 	msr	PRIMASK, r3
}
 800b6f2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b6f4:	bf00      	nop
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20000794 	.word	0x20000794
 800b700:	0800cd00 	.word	0x0800cd00
 800b704:	20000798 	.word	0x20000798

0800b708 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	4613      	mov	r3, r2
 800b714:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b71e:	e007      	b.n	800b730 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	1c53      	adds	r3, r2, #1
 800b724:	613b      	str	r3, [r7, #16]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	1c59      	adds	r1, r3, #1
 800b72a:	6179      	str	r1, [r7, #20]
 800b72c:	7812      	ldrb	r2, [r2, #0]
 800b72e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b730:	88fb      	ldrh	r3, [r7, #6]
 800b732:	1e5a      	subs	r2, r3, #1
 800b734:	80fa      	strh	r2, [r7, #6]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f2      	bne.n	800b720 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	371c      	adds	r7, #28
 800b740:	46bd      	mov	sp, r7
 800b742:	bc80      	pop	{r7}
 800b744:	4770      	bx	lr

0800b746 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b746:	b480      	push	{r7}
 800b748:	b085      	sub	sp, #20
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	460b      	mov	r3, r1
 800b750:	70fb      	strb	r3, [r7, #3]
 800b752:	4613      	mov	r3, r2
 800b754:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b75a:	e004      	b.n	800b766 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	60fa      	str	r2, [r7, #12]
 800b762:	78fa      	ldrb	r2, [r7, #3]
 800b764:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b766:	883b      	ldrh	r3, [r7, #0]
 800b768:	1e5a      	subs	r2, r3, #1
 800b76a:	803a      	strh	r2, [r7, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1f5      	bne.n	800b75c <UTIL_MEM_set_8+0x16>
  }
}
 800b770:	bf00      	nop
 800b772:	bf00      	nop
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	bc80      	pop	{r7}
 800b77a:	4770      	bx	lr

0800b77c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b77c:	b082      	sub	sp, #8
 800b77e:	b480      	push	{r7}
 800b780:	b087      	sub	sp, #28
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	1d38      	adds	r0, r7, #4
 800b788:	e880 0006 	stmia.w	r0, {r1, r2}
 800b78c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800b78e:	2300      	movs	r3, #0
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	2300      	movs	r3, #0
 800b794:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79a:	4413      	add	r3, r2
 800b79c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b79e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	4413      	add	r3, r2
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	b21b      	sxth	r3, r3
 800b7b0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800b7b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b7b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b7ba:	db0a      	blt.n	800b7d2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800b7c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	b21b      	sxth	r3, r3
 800b7d0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	f107 0310 	add.w	r3, r7, #16
 800b7da:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b7de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	b002      	add	sp, #8
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08a      	sub	sp, #40	@ 0x28
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	61bb      	str	r3, [r7, #24]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800b800:	2300      	movs	r3, #0
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	2300      	movs	r3, #0
 800b806:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b808:	4b14      	ldr	r3, [pc, #80]	@ (800b85c <SysTimeGet+0x6c>)
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	f107 0218 	add.w	r2, r7, #24
 800b810:	3204      	adds	r2, #4
 800b812:	4610      	mov	r0, r2
 800b814:	4798      	blx	r3
 800b816:	4603      	mov	r3, r0
 800b818:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b81a:	4b10      	ldr	r3, [pc, #64]	@ (800b85c <SysTimeGet+0x6c>)
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	4798      	blx	r3
 800b820:	4603      	mov	r3, r0
 800b822:	b21b      	sxth	r3, r3
 800b824:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b826:	4b0d      	ldr	r3, [pc, #52]	@ (800b85c <SysTimeGet+0x6c>)
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	4798      	blx	r3
 800b82c:	4603      	mov	r3, r0
 800b82e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b830:	f107 0010 	add.w	r0, r7, #16
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	f107 0208 	add.w	r2, r7, #8
 800b83e:	ca06      	ldmia	r2, {r1, r2}
 800b840:	f7ff ff9c 	bl	800b77c <SysTimeAdd>

  return sysTime;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	461a      	mov	r2, r3
 800b848:	f107 0310 	add.w	r3, r7, #16
 800b84c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b850:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	3720      	adds	r7, #32
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	0800cde4 	.word	0x0800cde4

0800b860 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b86c:	e00e      	b.n	800b88c <ee_skip_atoi+0x2c>
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	4613      	mov	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	4618      	mov	r0, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	1c59      	adds	r1, r3, #1
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	6011      	str	r1, [r2, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	4403      	add	r3, r0
 800b888:	3b30      	subs	r3, #48	@ 0x30
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	2b2f      	cmp	r3, #47	@ 0x2f
 800b894:	d904      	bls.n	800b8a0 <ee_skip_atoi+0x40>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b39      	cmp	r3, #57	@ 0x39
 800b89e:	d9e6      	bls.n	800b86e <ee_skip_atoi+0xe>
  return i;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bc80      	pop	{r7}
 800b8aa:	4770      	bx	lr

0800b8ac <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b099      	sub	sp, #100	@ 0x64
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800b8ba:	4b71      	ldr	r3, [pc, #452]	@ (800ba80 <ee_number+0x1d4>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b8c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <ee_number+0x24>
 800b8ca:	4b6e      	ldr	r3, [pc, #440]	@ (800ba84 <ee_number+0x1d8>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	dd02      	ble.n	800b8dc <ee_number+0x30>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b24      	cmp	r3, #36	@ 0x24
 800b8da:	dd01      	ble.n	800b8e0 <ee_number+0x34>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	e0ca      	b.n	800ba76 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800b8e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <ee_number+0x42>
 800b8ea:	2330      	movs	r3, #48	@ 0x30
 800b8ec:	e000      	b.n	800b8f0 <ee_number+0x44>
 800b8ee:	2320      	movs	r3, #32
 800b8f0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800b8fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8fc:	f003 0302 	and.w	r3, r3, #2
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <ee_number+0x70>
  {
    if (num < 0)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	da08      	bge.n	800b91c <ee_number+0x70>
    {
      sign = '-';
 800b90a:	232d      	movs	r3, #45	@ 0x2d
 800b90c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	425b      	negs	r3, r3
 800b914:	607b      	str	r3, [r7, #4]
      size--;
 800b916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b918:	3b01      	subs	r3, #1
 800b91a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d11e      	bne.n	800b964 <ee_number+0xb8>
    tmp[i++] = '0';
 800b926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	657a      	str	r2, [r7, #84]	@ 0x54
 800b92c:	3360      	adds	r3, #96	@ 0x60
 800b92e:	443b      	add	r3, r7
 800b930:	2230      	movs	r2, #48	@ 0x30
 800b932:	f803 2c50 	strb.w	r2, [r3, #-80]
 800b936:	e018      	b.n	800b96a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b940:	fb01 f202 	mul.w	r2, r1, r2
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b948:	441a      	add	r2, r3
 800b94a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b94c:	1c59      	adds	r1, r3, #1
 800b94e:	6579      	str	r1, [r7, #84]	@ 0x54
 800b950:	7812      	ldrb	r2, [r2, #0]
 800b952:	3360      	adds	r3, #96	@ 0x60
 800b954:	443b      	add	r3, r7
 800b956:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b962:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e6      	bne.n	800b938 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800b96a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b96c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b96e:	429a      	cmp	r2, r3
 800b970:	dd01      	ble.n	800b976 <ee_number+0xca>
 800b972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b974:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800b976:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800b97e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	d112      	bne.n	800b9ae <ee_number+0x102>
 800b988:	e00c      	b.n	800b9a4 <ee_number+0xf8>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	60fa      	str	r2, [r7, #12]
 800b990:	2220      	movs	r2, #32
 800b992:	701a      	strb	r2, [r3, #0]
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	3b01      	subs	r3, #1
 800b998:	60bb      	str	r3, [r7, #8]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <ee_number+0xf8>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	e068      	b.n	800ba76 <ee_number+0x1ca>
 800b9a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9a6:	1e5a      	subs	r2, r3, #1
 800b9a8:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	dced      	bgt.n	800b98a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800b9ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d01b      	beq.n	800b9ee <ee_number+0x142>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	1c5a      	adds	r2, r3, #1
 800b9ba:	60fa      	str	r2, [r7, #12]
 800b9bc:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800b9c0:	701a      	strb	r2, [r3, #0]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	60bb      	str	r3, [r7, #8]
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10f      	bne.n	800b9ee <ee_number+0x142>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	e051      	b.n	800ba76 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	1c5a      	adds	r2, r3, #1
 800b9d6:	60fa      	str	r2, [r7, #12]
 800b9d8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	60bb      	str	r3, [r7, #8]
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <ee_number+0x142>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	e043      	b.n	800ba76 <ee_number+0x1ca>
 800b9ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9f0:	1e5a      	subs	r2, r3, #1
 800b9f2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	dcec      	bgt.n	800b9d2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800b9f8:	e00c      	b.n	800ba14 <ee_number+0x168>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	1c5a      	adds	r2, r3, #1
 800b9fe:	60fa      	str	r2, [r7, #12]
 800ba00:	2230      	movs	r2, #48	@ 0x30
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	60bb      	str	r3, [r7, #8]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <ee_number+0x168>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	e030      	b.n	800ba76 <ee_number+0x1ca>
 800ba14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba16:	1e5a      	subs	r2, r3, #1
 800ba18:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ba1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	dbec      	blt.n	800b9fa <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800ba20:	e010      	b.n	800ba44 <ee_number+0x198>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	1c5a      	adds	r2, r3, #1
 800ba26:	60fa      	str	r2, [r7, #12]
 800ba28:	f107 0110 	add.w	r1, r7, #16
 800ba2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba2e:	440a      	add	r2, r1
 800ba30:	7812      	ldrb	r2, [r2, #0]
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	3b01      	subs	r3, #1
 800ba38:	60bb      	str	r3, [r7, #8]
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <ee_number+0x198>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	e018      	b.n	800ba76 <ee_number+0x1ca>
 800ba44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba46:	1e5a      	subs	r2, r3, #1
 800ba48:	657a      	str	r2, [r7, #84]	@ 0x54
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	dce9      	bgt.n	800ba22 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800ba4e:	e00c      	b.n	800ba6a <ee_number+0x1be>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	60fa      	str	r2, [r7, #12]
 800ba56:	2220      	movs	r2, #32
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	60bb      	str	r3, [r7, #8]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <ee_number+0x1be>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	e005      	b.n	800ba76 <ee_number+0x1ca>
 800ba6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba6c:	1e5a      	subs	r2, r3, #1
 800ba6e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	dced      	bgt.n	800ba50 <ee_number+0x1a4>

  return str;
 800ba74:	68fb      	ldr	r3, [r7, #12]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3764      	adds	r7, #100	@ 0x64
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bc80      	pop	{r7}
 800ba7e:	4770      	bx	lr
 800ba80:	2000000c 	.word	0x2000000c
 800ba84:	20000010 	.word	0x20000010

0800ba88 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b092      	sub	sp, #72	@ 0x48
 800ba8c:	af04      	add	r7, sp, #16
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	dc01      	bgt.n	800baa0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	e13e      	b.n	800bd1e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baa4:	e128      	b.n	800bcf8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800baa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	3b01      	subs	r3, #1
 800bab0:	429a      	cmp	r2, r3
 800bab2:	f280 812e 	bge.w	800bd12 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	2b25      	cmp	r3, #37	@ 0x25
 800babc:	d006      	beq.n	800bacc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac2:	1c59      	adds	r1, r3, #1
 800bac4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bac6:	7812      	ldrb	r2, [r2, #0]
 800bac8:	701a      	strb	r2, [r3, #0]
      continue;
 800baca:	e112      	b.n	800bcf2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3301      	adds	r3, #1
 800bad4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	2b30      	cmp	r3, #48	@ 0x30
 800badc:	d103      	bne.n	800bae6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	f043 0301 	orr.w	r3, r3, #1
 800bae4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800bae6:	f04f 33ff 	mov.w	r3, #4294967295
 800baea:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b2f      	cmp	r3, #47	@ 0x2f
 800baf2:	d908      	bls.n	800bb06 <tiny_vsnprintf_like+0x7e>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	2b39      	cmp	r3, #57	@ 0x39
 800bafa:	d804      	bhi.n	800bb06 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800bafc:	1d3b      	adds	r3, r7, #4
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff feae 	bl	800b860 <ee_skip_atoi>
 800bb04:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800bb06:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800bb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb10:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800bb12:	230a      	movs	r3, #10
 800bb14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	3b58      	subs	r3, #88	@ 0x58
 800bb1c:	2b20      	cmp	r3, #32
 800bb1e:	f200 8094 	bhi.w	800bc4a <tiny_vsnprintf_like+0x1c2>
 800bb22:	a201      	add	r2, pc, #4	@ (adr r2, 800bb28 <tiny_vsnprintf_like+0xa0>)
 800bb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb28:	0800bc33 	.word	0x0800bc33
 800bb2c:	0800bc4b 	.word	0x0800bc4b
 800bb30:	0800bc4b 	.word	0x0800bc4b
 800bb34:	0800bc4b 	.word	0x0800bc4b
 800bb38:	0800bc4b 	.word	0x0800bc4b
 800bb3c:	0800bc4b 	.word	0x0800bc4b
 800bb40:	0800bc4b 	.word	0x0800bc4b
 800bb44:	0800bc4b 	.word	0x0800bc4b
 800bb48:	0800bc4b 	.word	0x0800bc4b
 800bb4c:	0800bc4b 	.word	0x0800bc4b
 800bb50:	0800bc4b 	.word	0x0800bc4b
 800bb54:	0800bbb7 	.word	0x0800bbb7
 800bb58:	0800bc41 	.word	0x0800bc41
 800bb5c:	0800bc4b 	.word	0x0800bc4b
 800bb60:	0800bc4b 	.word	0x0800bc4b
 800bb64:	0800bc4b 	.word	0x0800bc4b
 800bb68:	0800bc4b 	.word	0x0800bc4b
 800bb6c:	0800bc41 	.word	0x0800bc41
 800bb70:	0800bc4b 	.word	0x0800bc4b
 800bb74:	0800bc4b 	.word	0x0800bc4b
 800bb78:	0800bc4b 	.word	0x0800bc4b
 800bb7c:	0800bc4b 	.word	0x0800bc4b
 800bb80:	0800bc4b 	.word	0x0800bc4b
 800bb84:	0800bc4b 	.word	0x0800bc4b
 800bb88:	0800bc4b 	.word	0x0800bc4b
 800bb8c:	0800bc4b 	.word	0x0800bc4b
 800bb90:	0800bc4b 	.word	0x0800bc4b
 800bb94:	0800bbd7 	.word	0x0800bbd7
 800bb98:	0800bc4b 	.word	0x0800bc4b
 800bb9c:	0800bc97 	.word	0x0800bc97
 800bba0:	0800bc4b 	.word	0x0800bc4b
 800bba4:	0800bc4b 	.word	0x0800bc4b
 800bba8:	0800bc3b 	.word	0x0800bc3b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800bbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbae:	1c5a      	adds	r2, r3, #1
 800bbb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	61fb      	str	r3, [r7, #28]
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dcf4      	bgt.n	800bbac <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	1d1a      	adds	r2, r3, #4
 800bbc6:	603a      	str	r2, [r7, #0]
 800bbc8:	6819      	ldr	r1, [r3, #0]
 800bbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbcc:	1c5a      	adds	r2, r3, #1
 800bbce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbd0:	b2ca      	uxtb	r2, r1
 800bbd2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800bbd4:	e08d      	b.n	800bcf2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	1d1a      	adds	r2, r3, #4
 800bbda:	603a      	str	r2, [r7, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <tiny_vsnprintf_like+0x162>
 800bbe6:	4b50      	ldr	r3, [pc, #320]	@ (800bd28 <tiny_vsnprintf_like+0x2a0>)
 800bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800bbea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbec:	f7f4 fac4 	bl	8000178 <strlen>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800bbf4:	e004      	b.n	800bc00 <tiny_vsnprintf_like+0x178>
 800bbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	701a      	strb	r2, [r3, #0]
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	1e5a      	subs	r2, r3, #1
 800bc04:	61fa      	str	r2, [r7, #28]
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	dbf4      	blt.n	800bbf6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc10:	e00a      	b.n	800bc28 <tiny_vsnprintf_like+0x1a0>
 800bc12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc14:	1c53      	adds	r3, r2, #1
 800bc16:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1a:	1c59      	adds	r1, r3, #1
 800bc1c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bc1e:	7812      	ldrb	r2, [r2, #0]
 800bc20:	701a      	strb	r2, [r3, #0]
 800bc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc24:	3301      	adds	r3, #1
 800bc26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	dbf0      	blt.n	800bc12 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800bc30:	e05f      	b.n	800bcf2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc38:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800bc3a:	2310      	movs	r3, #16
 800bc3c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800bc3e:	e02b      	b.n	800bc98 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800bc40:	6a3b      	ldr	r3, [r7, #32]
 800bc42:	f043 0302 	orr.w	r3, r3, #2
 800bc46:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800bc48:	e025      	b.n	800bc96 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b25      	cmp	r3, #37	@ 0x25
 800bc50:	d004      	beq.n	800bc5c <tiny_vsnprintf_like+0x1d4>
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc58:	2225      	movs	r2, #37	@ 0x25
 800bc5a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800bc5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	1ad2      	subs	r2, r2, r3
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	429a      	cmp	r2, r3
 800bc68:	da16      	bge.n	800bc98 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d006      	beq.n	800bc80 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc76:	1c59      	adds	r1, r3, #1
 800bc78:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bc7a:	7812      	ldrb	r2, [r2, #0]
 800bc7c:	701a      	strb	r2, [r3, #0]
 800bc7e:	e002      	b.n	800bc86 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	3b01      	subs	r3, #1
 800bc84:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800bc86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	1ad2      	subs	r2, r2, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	429a      	cmp	r2, r3
 800bc92:	db2d      	blt.n	800bcf0 <tiny_vsnprintf_like+0x268>
 800bc94:	e000      	b.n	800bc98 <tiny_vsnprintf_like+0x210>
        break;
 800bc96:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2b6c      	cmp	r3, #108	@ 0x6c
 800bc9c:	d105      	bne.n	800bcaa <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	1d1a      	adds	r2, r3, #4
 800bca2:	603a      	str	r2, [r7, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bca8:	e00f      	b.n	800bcca <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800bcaa:	6a3b      	ldr	r3, [r7, #32]
 800bcac:	f003 0302 	and.w	r3, r3, #2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d005      	beq.n	800bcc0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	1d1a      	adds	r2, r3, #4
 800bcb8:	603a      	str	r2, [r7, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcbe:	e004      	b.n	800bcca <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	1d1a      	adds	r2, r3, #4
 800bcc4:	603a      	str	r2, [r7, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	1e5a      	subs	r2, r3, #1
 800bcce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	1acb      	subs	r3, r1, r3
 800bcd4:	1ad1      	subs	r1, r2, r3
 800bcd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	9302      	str	r3, [sp, #8]
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	9301      	str	r3, [sp, #4]
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bce8:	f7ff fde0 	bl	800b8ac <ee_number>
 800bcec:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bcee:	e000      	b.n	800bcf2 <tiny_vsnprintf_like+0x26a>
        continue;
 800bcf0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	607b      	str	r3, [r7, #4]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f47f aed2 	bne.w	800baa6 <tiny_vsnprintf_like+0x1e>
 800bd02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	1ad2      	subs	r2, r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	f6bf aeca 	bge.w	800baa6 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800bd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd14:	2200      	movs	r2, #0
 800bd16:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800bd18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	1ad3      	subs	r3, r2, r3
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3738      	adds	r7, #56	@ 0x38
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	0800ccf8 	.word	0x0800ccf8

0800bd2c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b090      	sub	sp, #64	@ 0x40
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bd34:	4b73      	ldr	r3, [pc, #460]	@ (800bf04 <UTIL_SEQ_Run+0x1d8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800bd3a:	4b72      	ldr	r3, [pc, #456]	@ (800bf04 <UTIL_SEQ_Run+0x1d8>)
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4013      	ands	r3, r2
 800bd42:	4a70      	ldr	r2, [pc, #448]	@ (800bf04 <UTIL_SEQ_Run+0x1d8>)
 800bd44:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bd46:	4b70      	ldr	r3, [pc, #448]	@ (800bf08 <UTIL_SEQ_Run+0x1dc>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800bd4c:	4b6f      	ldr	r3, [pc, #444]	@ (800bf0c <UTIL_SEQ_Run+0x1e0>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bd52:	4b6f      	ldr	r3, [pc, #444]	@ (800bf10 <UTIL_SEQ_Run+0x1e4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800bd58:	4b6e      	ldr	r3, [pc, #440]	@ (800bf14 <UTIL_SEQ_Run+0x1e8>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bd5e:	e08d      	b.n	800be7c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bd60:	2300      	movs	r3, #0
 800bd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bd64:	e002      	b.n	800bd6c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bd66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd68:	3301      	adds	r3, #1
 800bd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bd6c:	4a6a      	ldr	r2, [pc, #424]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800bd6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd76:	401a      	ands	r2, r3
 800bd78:	4b62      	ldr	r3, [pc, #392]	@ (800bf04 <UTIL_SEQ_Run+0x1d8>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0f1      	beq.n	800bd66 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bd82:	4a65      	ldr	r2, [pc, #404]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800bd84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd86:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8c:	401a      	ands	r2, r3
 800bd8e:	4b5d      	ldr	r3, [pc, #372]	@ (800bf04 <UTIL_SEQ_Run+0x1d8>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4013      	ands	r3, r2
 800bd94:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bd96:	4a60      	ldr	r2, [pc, #384]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800bd98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd9a:	00db      	lsls	r3, r3, #3
 800bd9c:	4413      	add	r3, r2
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda2:	4013      	ands	r3, r2
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d106      	bne.n	800bdb6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bda8:	4a5b      	ldr	r2, [pc, #364]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800bdaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdac:	00db      	lsls	r3, r3, #3
 800bdae:	4413      	add	r3, r2
 800bdb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bdb6:	4a58      	ldr	r2, [pc, #352]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	4413      	add	r3, r2
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f907 	bl	800bfd8 <SEQ_BitPosition>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	461a      	mov	r2, r3
 800bdce:	4b53      	ldr	r3, [pc, #332]	@ (800bf1c <UTIL_SEQ_Run+0x1f0>)
 800bdd0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bdd2:	4a51      	ldr	r2, [pc, #324]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800bdd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	4413      	add	r3, r2
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	4b4f      	ldr	r3, [pc, #316]	@ (800bf1c <UTIL_SEQ_Run+0x1f0>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2101      	movs	r1, #1
 800bde2:	fa01 f303 	lsl.w	r3, r1, r3
 800bde6:	43db      	mvns	r3, r3
 800bde8:	401a      	ands	r2, r3
 800bdea:	494b      	ldr	r1, [pc, #300]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800bdec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	440b      	add	r3, r1
 800bdf2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdf4:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf8:	61bb      	str	r3, [r7, #24]
  return(result);
 800bdfa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bdfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdfe:	b672      	cpsid	i
}
 800be00:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800be02:	4b46      	ldr	r3, [pc, #280]	@ (800bf1c <UTIL_SEQ_Run+0x1f0>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2201      	movs	r2, #1
 800be08:	fa02 f303 	lsl.w	r3, r2, r3
 800be0c:	43da      	mvns	r2, r3
 800be0e:	4b3e      	ldr	r3, [pc, #248]	@ (800bf08 <UTIL_SEQ_Run+0x1dc>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4013      	ands	r3, r2
 800be14:	4a3c      	ldr	r2, [pc, #240]	@ (800bf08 <UTIL_SEQ_Run+0x1dc>)
 800be16:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800be18:	2303      	movs	r3, #3
 800be1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be1c:	e013      	b.n	800be46 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800be1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be20:	3b01      	subs	r3, #1
 800be22:	4a3d      	ldr	r2, [pc, #244]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800be24:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800be28:	4b3c      	ldr	r3, [pc, #240]	@ (800bf1c <UTIL_SEQ_Run+0x1f0>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2201      	movs	r2, #1
 800be2e:	fa02 f303 	lsl.w	r3, r2, r3
 800be32:	43da      	mvns	r2, r3
 800be34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be36:	3b01      	subs	r3, #1
 800be38:	400a      	ands	r2, r1
 800be3a:	4937      	ldr	r1, [pc, #220]	@ (800bf18 <UTIL_SEQ_Run+0x1ec>)
 800be3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800be40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be42:	3b01      	subs	r3, #1
 800be44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1e8      	bne.n	800be1e <UTIL_SEQ_Run+0xf2>
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	f383 8810 	msr	PRIMASK, r3
}
 800be56:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800be58:	4b30      	ldr	r3, [pc, #192]	@ (800bf1c <UTIL_SEQ_Run+0x1f0>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a30      	ldr	r2, [pc, #192]	@ (800bf20 <UTIL_SEQ_Run+0x1f4>)
 800be5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be62:	4798      	blx	r3
    local_taskset = TaskSet;
 800be64:	4b28      	ldr	r3, [pc, #160]	@ (800bf08 <UTIL_SEQ_Run+0x1dc>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800be6a:	4b28      	ldr	r3, [pc, #160]	@ (800bf0c <UTIL_SEQ_Run+0x1e0>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800be70:	4b27      	ldr	r3, [pc, #156]	@ (800bf10 <UTIL_SEQ_Run+0x1e4>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800be76:	4b27      	ldr	r3, [pc, #156]	@ (800bf14 <UTIL_SEQ_Run+0x1e8>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800be7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be80:	401a      	ands	r2, r3
 800be82:	4b20      	ldr	r3, [pc, #128]	@ (800bf04 <UTIL_SEQ_Run+0x1d8>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4013      	ands	r3, r2
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d005      	beq.n	800be98 <UTIL_SEQ_Run+0x16c>
 800be8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be90:	4013      	ands	r3, r2
 800be92:	2b00      	cmp	r3, #0
 800be94:	f43f af64 	beq.w	800bd60 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800be98:	4b20      	ldr	r3, [pc, #128]	@ (800bf1c <UTIL_SEQ_Run+0x1f0>)
 800be9a:	f04f 32ff 	mov.w	r2, #4294967295
 800be9e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800bea0:	f000 f88e 	bl	800bfc0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bea4:	f3ef 8310 	mrs	r3, PRIMASK
 800bea8:	613b      	str	r3, [r7, #16]
  return(result);
 800beaa:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800beac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800beae:	b672      	cpsid	i
}
 800beb0:	bf00      	nop
  local_taskset = TaskSet;
 800beb2:	4b15      	ldr	r3, [pc, #84]	@ (800bf08 <UTIL_SEQ_Run+0x1dc>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800beb8:	4b14      	ldr	r3, [pc, #80]	@ (800bf0c <UTIL_SEQ_Run+0x1e0>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bebe:	4b14      	ldr	r3, [pc, #80]	@ (800bf10 <UTIL_SEQ_Run+0x1e4>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800bec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	401a      	ands	r2, r3
 800beca:	4b0e      	ldr	r3, [pc, #56]	@ (800bf04 <UTIL_SEQ_Run+0x1d8>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4013      	ands	r3, r2
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d107      	bne.n	800bee4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800bed4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf14 <UTIL_SEQ_Run+0x1e8>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800bee0:	f7f4 fe90 	bl	8000c04 <UTIL_SEQ_Idle>
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f383 8810 	msr	PRIMASK, r3
}
 800beee:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800bef0:	f000 f86c 	bl	800bfcc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800bef4:	4a03      	ldr	r2, [pc, #12]	@ (800bf04 <UTIL_SEQ_Run+0x1d8>)
 800bef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef8:	6013      	str	r3, [r2, #0]

  return;
 800befa:	bf00      	nop
}
 800befc:	3740      	adds	r7, #64	@ 0x40
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	20000018 	.word	0x20000018
 800bf08:	2000079c 	.word	0x2000079c
 800bf0c:	200007a0 	.word	0x200007a0
 800bf10:	20000014 	.word	0x20000014
 800bf14:	200007a4 	.word	0x200007a4
 800bf18:	200007b4 	.word	0x200007b4
 800bf1c:	200007a8 	.word	0x200007a8
 800bf20:	200007ac 	.word	0x200007ac

0800bf24 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf30:	f3ef 8310 	mrs	r3, PRIMASK
 800bf34:	617b      	str	r3, [r7, #20]
  return(result);
 800bf36:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800bf38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf3a:	b672      	cpsid	i
}
 800bf3c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f000 f84a 	bl	800bfd8 <SEQ_BitPosition>
 800bf44:	4603      	mov	r3, r0
 800bf46:	4619      	mov	r1, r3
 800bf48:	4a06      	ldr	r2, [pc, #24]	@ (800bf64 <UTIL_SEQ_RegTask+0x40>)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	f383 8810 	msr	PRIMASK, r3
}
 800bf5a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800bf5c:	bf00      	nop
}
 800bf5e:	3720      	adds	r7, #32
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	200007ac 	.word	0x200007ac

0800bf68 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf72:	f3ef 8310 	mrs	r3, PRIMASK
 800bf76:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf78:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf7c:	b672      	cpsid	i
}
 800bf7e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800bf80:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb8 <UTIL_SEQ_SetTask+0x50>)
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	4a0b      	ldr	r2, [pc, #44]	@ (800bfb8 <UTIL_SEQ_SetTask+0x50>)
 800bf8a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bf8c:	4a0b      	ldr	r2, [pc, #44]	@ (800bfbc <UTIL_SEQ_SetTask+0x54>)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	431a      	orrs	r2, r3
 800bf98:	4908      	ldr	r1, [pc, #32]	@ (800bfbc <UTIL_SEQ_SetTask+0x54>)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	f383 8810 	msr	PRIMASK, r3
}
 800bfaa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bfac:	bf00      	nop
}
 800bfae:	371c      	adds	r7, #28
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bc80      	pop	{r7}
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	2000079c 	.word	0x2000079c
 800bfbc:	200007b4 	.word	0x200007b4

0800bfc0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bfc4:	bf00      	nop
}
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bc80      	pop	{r7}
 800bfca:	4770      	bx	lr

0800bfcc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800bfcc:	b480      	push	{r7}
 800bfce:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bfd0:	bf00      	nop
}
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bc80      	pop	{r7}
 800bfd6:	4770      	bx	lr

0800bfd8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfee:	d204      	bcs.n	800bffa <SEQ_BitPosition+0x22>
 800bff0:	2310      	movs	r3, #16
 800bff2:	73fb      	strb	r3, [r7, #15]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	041b      	lsls	r3, r3, #16
 800bff8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c000:	d205      	bcs.n	800c00e <SEQ_BitPosition+0x36>
 800c002:	7bfb      	ldrb	r3, [r7, #15]
 800c004:	3308      	adds	r3, #8
 800c006:	73fb      	strb	r3, [r7, #15]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	021b      	lsls	r3, r3, #8
 800c00c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c014:	d205      	bcs.n	800c022 <SEQ_BitPosition+0x4a>
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	3304      	adds	r3, #4
 800c01a:	73fb      	strb	r3, [r7, #15]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	0f1b      	lsrs	r3, r3, #28
 800c026:	4a07      	ldr	r2, [pc, #28]	@ (800c044 <SEQ_BitPosition+0x6c>)
 800c028:	5cd2      	ldrb	r2, [r2, r3]
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
 800c02c:	4413      	add	r3, r2
 800c02e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	f1c3 031f 	rsb	r3, r3, #31
 800c036:	b2db      	uxtb	r3, r3
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bc80      	pop	{r7}
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	0800cf70 	.word	0x0800cf70

0800c048 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800c04c:	4b04      	ldr	r3, [pc, #16]	@ (800c060 <UTIL_TIMER_Init+0x18>)
 800c04e:	2200      	movs	r2, #0
 800c050:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800c052:	4b04      	ldr	r3, [pc, #16]	@ (800c064 <UTIL_TIMER_Init+0x1c>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4798      	blx	r3
 800c058:	4603      	mov	r3, r0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	200007cc 	.word	0x200007cc
 800c064:	0800cdb8 	.word	0x0800cdb8

0800c068 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	4613      	mov	r3, r2
 800c076:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d023      	beq.n	800c0c6 <UTIL_TIMER_Create+0x5e>
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d020      	beq.n	800c0c6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c08a:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <UTIL_TIMER_Create+0x68>)
 800c08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08e:	68b8      	ldr	r0, [r7, #8]
 800c090:	4798      	blx	r3
 800c092:	4602      	mov	r2, r0
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	69ba      	ldr	r2, [r7, #24]
 800c0b4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	79fa      	ldrb	r2, [r7, #7]
 800c0ba:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	e000      	b.n	800c0c8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c0c6:	2301      	movs	r3, #1
  }
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	0800cdb8 	.word	0x0800cdb8

0800c0d4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08a      	sub	sp, #40	@ 0x28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d056      	beq.n	800c196 <UTIL_TIMER_Start+0xc2>
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f929 	bl	800c340 <TimerExists>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	f083 0301 	eor.w	r3, r3, #1
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d04d      	beq.n	800c196 <UTIL_TIMER_Start+0xc2>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	7a5b      	ldrb	r3, [r3, #9]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d149      	bne.n	800c196 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c102:	f3ef 8310 	mrs	r3, PRIMASK
 800c106:	613b      	str	r3, [r7, #16]
  return(result);
 800c108:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c10a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c10c:	b672      	cpsid	i
}
 800c10e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c116:	4b24      	ldr	r3, [pc, #144]	@ (800c1a8 <UTIL_TIMER_Start+0xd4>)
 800c118:	6a1b      	ldr	r3, [r3, #32]
 800c11a:	4798      	blx	r3
 800c11c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c11e:	6a3a      	ldr	r2, [r7, #32]
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	429a      	cmp	r2, r3
 800c124:	d201      	bcs.n	800c12a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a3a      	ldr	r2, [r7, #32]
 800c12e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800c142:	4b1a      	ldr	r3, [pc, #104]	@ (800c1ac <UTIL_TIMER_Start+0xd8>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d106      	bne.n	800c158 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800c14a:	4b17      	ldr	r3, [pc, #92]	@ (800c1a8 <UTIL_TIMER_Start+0xd4>)
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f96b 	bl	800c42c <TimerInsertNewHeadTimer>
 800c156:	e017      	b.n	800c188 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c158:	4b13      	ldr	r3, [pc, #76]	@ (800c1a8 <UTIL_TIMER_Start+0xd4>)
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	4798      	blx	r3
 800c15e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	441a      	add	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	4b0e      	ldr	r3, [pc, #56]	@ (800c1ac <UTIL_TIMER_Start+0xd8>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d203      	bcs.n	800c182 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f956 	bl	800c42c <TimerInsertNewHeadTimer>
 800c180:	e002      	b.n	800c188 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f922 	bl	800c3cc <TimerInsertTimer>
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f383 8810 	msr	PRIMASK, r3
}
 800c192:	bf00      	nop
  {
 800c194:	e002      	b.n	800c19c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c196:	2301      	movs	r3, #1
 800c198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800c19c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3728      	adds	r7, #40	@ 0x28
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	0800cdb8 	.word	0x0800cdb8
 800c1ac:	200007cc 	.word	0x200007cc

0800c1b0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d05b      	beq.n	800c27a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1c2:	f3ef 8310 	mrs	r3, PRIMASK
 800c1c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c1ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1cc:	b672      	cpsid	i
}
 800c1ce:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c1d0:	4b2d      	ldr	r3, [pc, #180]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800c1d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800c1e2:	4b29      	ldr	r3, [pc, #164]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d041      	beq.n	800c26e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c1f0:	4b25      	ldr	r3, [pc, #148]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d134      	bne.n	800c264 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800c1fa:	4b23      	ldr	r3, [pc, #140]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2200      	movs	r2, #0
 800c200:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800c202:	4b21      	ldr	r3, [pc, #132]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00a      	beq.n	800c222 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800c20c:	4b1e      	ldr	r3, [pc, #120]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	4a1d      	ldr	r2, [pc, #116]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c214:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800c216:	4b1c      	ldr	r3, [pc, #112]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 f8ac 	bl	800c378 <TimerSetTimeout>
 800c220:	e023      	b.n	800c26a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800c222:	4b1a      	ldr	r3, [pc, #104]	@ (800c28c <UTIL_TIMER_Stop+0xdc>)
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	4798      	blx	r3
            TimerListHead = NULL;
 800c228:	4b17      	ldr	r3, [pc, #92]	@ (800c288 <UTIL_TIMER_Stop+0xd8>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	e01c      	b.n	800c26a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	429a      	cmp	r2, r3
 800c236:	d110      	bne.n	800c25a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	695b      	ldr	r3, [r3, #20]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d006      	beq.n	800c24e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800c24c:	e00d      	b.n	800c26a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800c24e:	2300      	movs	r3, #0
 800c250:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	615a      	str	r2, [r3, #20]
            break;
 800c258:	e007      	b.n	800c26a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	695b      	ldr	r3, [r3, #20]
 800c262:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1e2      	bne.n	800c230 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	77fb      	strb	r3, [r7, #31]
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	f383 8810 	msr	PRIMASK, r3
}
 800c278:	e001      	b.n	800c27e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800c27a:	2301      	movs	r3, #1
 800c27c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800c27e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3720      	adds	r7, #32
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	200007cc 	.word	0x200007cc
 800c28c:	0800cdb8 	.word	0x0800cdb8

0800c290 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	73fb      	strb	r3, [r7, #15]
 800c2a8:	e014      	b.n	800c2d4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e0 <UTIL_TIMER_SetPeriod+0x50>)
 800c2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ae:	6838      	ldr	r0, [r7, #0]
 800c2b0:	4798      	blx	r3
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f841 	bl	800c340 <TimerExists>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d007      	beq.n	800c2d4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff ff73 	bl	800c1b0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff ff02 	bl	800c0d4 <UTIL_TIMER_Start>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	0800cdb8 	.word	0x0800cdb8

0800c2e4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800c2ea:	4b06      	ldr	r3, [pc, #24]	@ (800c304 <UTIL_TIMER_GetCurrentTime+0x20>)
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	4798      	blx	r3
 800c2f0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800c2f2:	4b04      	ldr	r3, [pc, #16]	@ (800c304 <UTIL_TIMER_GetCurrentTime+0x20>)
 800c2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	4798      	blx	r3
 800c2fa:	4603      	mov	r3, r0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	0800cdb8 	.word	0x0800cdb8

0800c308 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c310:	4b0a      	ldr	r3, [pc, #40]	@ (800c33c <UTIL_TIMER_GetElapsedTime+0x34>)
 800c312:	69db      	ldr	r3, [r3, #28]
 800c314:	4798      	blx	r3
 800c316:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c318:	4b08      	ldr	r3, [pc, #32]	@ (800c33c <UTIL_TIMER_GetElapsedTime+0x34>)
 800c31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	4798      	blx	r3
 800c320:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c322:	4b06      	ldr	r3, [pc, #24]	@ (800c33c <UTIL_TIMER_GetElapsedTime+0x34>)
 800c324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c326:	68f9      	ldr	r1, [r7, #12]
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	1a8a      	subs	r2, r1, r2
 800c32c:	4610      	mov	r0, r2
 800c32e:	4798      	blx	r3
 800c330:	4603      	mov	r3, r0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	0800cdb8 	.word	0x0800cdb8

0800c340 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c348:	4b0a      	ldr	r3, [pc, #40]	@ (800c374 <TimerExists+0x34>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800c34e:	e008      	b.n	800c362 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d101      	bne.n	800c35c <TimerExists+0x1c>
    {
      return true;
 800c358:	2301      	movs	r3, #1
 800c35a:	e006      	b.n	800c36a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	695b      	ldr	r3, [r3, #20]
 800c360:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1f3      	bne.n	800c350 <TimerExists+0x10>
  }
  return false;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	bc80      	pop	{r7}
 800c372:	4770      	bx	lr
 800c374:	200007cc 	.word	0x200007cc

0800c378 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800c378:	b590      	push	{r4, r7, lr}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c380:	4b11      	ldr	r3, [pc, #68]	@ (800c3c8 <TimerSetTimeout+0x50>)
 800c382:	6a1b      	ldr	r3, [r3, #32]
 800c384:	4798      	blx	r3
 800c386:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681c      	ldr	r4, [r3, #0]
 800c392:	4b0d      	ldr	r3, [pc, #52]	@ (800c3c8 <TimerSetTimeout+0x50>)
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	4798      	blx	r3
 800c398:	4602      	mov	r2, r0
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4413      	add	r3, r2
 800c39e:	429c      	cmp	r4, r3
 800c3a0:	d207      	bcs.n	800c3b2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c3a2:	4b09      	ldr	r3, [pc, #36]	@ (800c3c8 <TimerSetTimeout+0x50>)
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	4798      	blx	r3
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	441a      	add	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c3b2:	4b05      	ldr	r3, [pc, #20]	@ (800c3c8 <TimerSetTimeout+0x50>)
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	6812      	ldr	r2, [r2, #0]
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	4798      	blx	r3
}
 800c3be:	bf00      	nop
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd90      	pop	{r4, r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	0800cdb8 	.word	0x0800cdb8

0800c3cc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c3d4:	4b14      	ldr	r3, [pc, #80]	@ (800c428 <TimerInsertTimer+0x5c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c3da:	4b13      	ldr	r3, [pc, #76]	@ (800c428 <TimerInsertTimer+0x5c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800c3e2:	e012      	b.n	800c40a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d905      	bls.n	800c3fc <TimerInsertTimer+0x30>
    {
        cur = next;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	60bb      	str	r3, [r7, #8]
 800c3fa:	e006      	b.n	800c40a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	68ba      	ldr	r2, [r7, #8]
 800c406:	615a      	str	r2, [r3, #20]
        return;
 800c408:	e009      	b.n	800c41e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	695b      	ldr	r3, [r3, #20]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1e8      	bne.n	800c3e4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	615a      	str	r2, [r3, #20]
}
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	bc80      	pop	{r7}
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	200007cc 	.word	0x200007cc

0800c42c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c434:	4b0b      	ldr	r3, [pc, #44]	@ (800c464 <TimerInsertNewHeadTimer+0x38>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800c44c:	4a05      	ldr	r2, [pc, #20]	@ (800c464 <TimerInsertNewHeadTimer+0x38>)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c452:	4b04      	ldr	r3, [pc, #16]	@ (800c464 <TimerInsertNewHeadTimer+0x38>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff ff8e 	bl	800c378 <TimerSetTimeout>
}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	200007cc 	.word	0x200007cc

0800c468 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800c46c:	2218      	movs	r2, #24
 800c46e:	2100      	movs	r1, #0
 800c470:	4807      	ldr	r0, [pc, #28]	@ (800c490 <UTIL_ADV_TRACE_Init+0x28>)
 800c472:	f7ff f968 	bl	800b746 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800c476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c47a:	2100      	movs	r1, #0
 800c47c:	4805      	ldr	r0, [pc, #20]	@ (800c494 <UTIL_ADV_TRACE_Init+0x2c>)
 800c47e:	f7ff f962 	bl	800b746 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800c482:	4b05      	ldr	r3, [pc, #20]	@ (800c498 <UTIL_ADV_TRACE_Init+0x30>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4805      	ldr	r0, [pc, #20]	@ (800c49c <UTIL_ADV_TRACE_Init+0x34>)
 800c488:	4798      	blx	r3
 800c48a:	4603      	mov	r3, r0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	200007d0 	.word	0x200007d0
 800c494:	200007e8 	.word	0x200007e8
 800c498:	0800cdf8 	.word	0x0800cdf8
 800c49c:	0800c6e5 	.word	0x0800c6e5

0800c4a0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800c4a0:	b408      	push	{r3}
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b08d      	sub	sp, #52	@ 0x34
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	60f8      	str	r0, [r7, #12]
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800c4b6:	4b37      	ldr	r3, [pc, #220]	@ (800c594 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c4b8:	7a1b      	ldrb	r3, [r3, #8]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d902      	bls.n	800c4c8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800c4c2:	f06f 0304 	mvn.w	r3, #4
 800c4c6:	e05e      	b.n	800c586 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800c4c8:	4b32      	ldr	r3, [pc, #200]	@ (800c594 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c4ca:	68da      	ldr	r2, [r3, #12]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	4013      	ands	r3, r2
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d002      	beq.n	800c4dc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800c4d6:	f06f 0305 	mvn.w	r3, #5
 800c4da:	e054      	b.n	800c586 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800c4dc:	4b2d      	ldr	r3, [pc, #180]	@ (800c594 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00a      	beq.n	800c4fa <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d007      	beq.n	800c4fa <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800c4ea:	4b2a      	ldr	r3, [pc, #168]	@ (800c594 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f107 0116 	add.w	r1, r7, #22
 800c4f2:	f107 0218 	add.w	r2, r7, #24
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800c4fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c504:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c508:	4823      	ldr	r0, [pc, #140]	@ (800c598 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800c50a:	f7ff fabd 	bl	800ba88 <tiny_vsnprintf_like>
 800c50e:	4603      	mov	r3, r0
 800c510:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800c512:	f000 f9f1 	bl	800c8f8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800c516:	8afa      	ldrh	r2, [r7, #22]
 800c518:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c51a:	4413      	add	r3, r2
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f107 0214 	add.w	r2, r7, #20
 800c522:	4611      	mov	r1, r2
 800c524:	4618      	mov	r0, r3
 800c526:	f000 f969 	bl	800c7fc <TRACE_AllocateBufer>
 800c52a:	4603      	mov	r3, r0
 800c52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c530:	d025      	beq.n	800c57e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800c532:	2300      	movs	r3, #0
 800c534:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c536:	e00e      	b.n	800c556 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800c538:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c53a:	8aba      	ldrh	r2, [r7, #20]
 800c53c:	3330      	adds	r3, #48	@ 0x30
 800c53e:	443b      	add	r3, r7
 800c540:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800c544:	4b15      	ldr	r3, [pc, #84]	@ (800c59c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c546:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800c548:	8abb      	ldrh	r3, [r7, #20]
 800c54a:	3301      	adds	r3, #1
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800c550:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c552:	3301      	adds	r3, #1
 800c554:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c556:	8afb      	ldrh	r3, [r7, #22]
 800c558:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d3ec      	bcc.n	800c538 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c55e:	8abb      	ldrh	r3, [r7, #20]
 800c560:	461a      	mov	r2, r3
 800c562:	4b0e      	ldr	r3, [pc, #56]	@ (800c59c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c564:	18d0      	adds	r0, r2, r3
 800c566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c568:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c56a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c56e:	f7ff fa8b 	bl	800ba88 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800c572:	f000 f9df 	bl	800c934 <TRACE_UnLock>

    return TRACE_Send();
 800c576:	f000 f831 	bl	800c5dc <TRACE_Send>
 800c57a:	4603      	mov	r3, r0
 800c57c:	e003      	b.n	800c586 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800c57e:	f000 f9d9 	bl	800c934 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800c582:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800c586:	4618      	mov	r0, r3
 800c588:	3734      	adds	r7, #52	@ 0x34
 800c58a:	46bd      	mov	sp, r7
 800c58c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c590:	b001      	add	sp, #4
 800c592:	4770      	bx	lr
 800c594:	200007d0 	.word	0x200007d0
 800c598:	200009e8 	.word	0x200009e8
 800c59c:	200007e8 	.word	0x200007e8

0800c5a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800c5a8:	4a03      	ldr	r2, [pc, #12]	@ (800c5b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6053      	str	r3, [r2, #4]
}
 800c5ae:	bf00      	nop
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bc80      	pop	{r7}
 800c5b6:	4770      	bx	lr
 800c5b8:	200007d0 	.word	0x200007d0

0800c5bc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800c5c6:	4a04      	ldr	r2, [pc, #16]	@ (800c5d8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800c5c8:	79fb      	ldrb	r3, [r7, #7]
 800c5ca:	7213      	strb	r3, [r2, #8]
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bc80      	pop	{r7}
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	200007d0 	.word	0x200007d0

0800c5dc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c5ee:	613b      	str	r3, [r7, #16]
  return(result);
 800c5f0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c5f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5f4:	b672      	cpsid	i
}
 800c5f6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800c5f8:	f000 f9ba 	bl	800c970 <TRACE_IsLocked>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d15d      	bne.n	800c6be <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800c602:	f000 f979 	bl	800c8f8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800c606:	4b34      	ldr	r3, [pc, #208]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c608:	8a1a      	ldrh	r2, [r3, #16]
 800c60a:	4b33      	ldr	r3, [pc, #204]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c60c:	8a5b      	ldrh	r3, [r3, #18]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d04d      	beq.n	800c6ae <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c612:	4b31      	ldr	r3, [pc, #196]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c614:	789b      	ldrb	r3, [r3, #2]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d117      	bne.n	800c64a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800c61a:	4b2f      	ldr	r3, [pc, #188]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c61c:	881a      	ldrh	r2, [r3, #0]
 800c61e:	4b2e      	ldr	r3, [pc, #184]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c620:	8a1b      	ldrh	r3, [r3, #16]
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	b29a      	uxth	r2, r3
 800c626:	4b2c      	ldr	r3, [pc, #176]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c628:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c62a:	4b2b      	ldr	r3, [pc, #172]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c62c:	2202      	movs	r2, #2
 800c62e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c630:	4b29      	ldr	r3, [pc, #164]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c632:	2200      	movs	r2, #0
 800c634:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c636:	4b28      	ldr	r3, [pc, #160]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c638:	8a9b      	ldrh	r3, [r3, #20]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d105      	bne.n	800c64a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c63e:	4b26      	ldr	r3, [pc, #152]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c640:	2200      	movs	r2, #0
 800c642:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c644:	4b24      	ldr	r3, [pc, #144]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c646:	2200      	movs	r2, #0
 800c648:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c64a:	4b23      	ldr	r3, [pc, #140]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c64c:	789b      	ldrb	r3, [r3, #2]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d115      	bne.n	800c67e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c652:	4b21      	ldr	r3, [pc, #132]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c654:	8a5a      	ldrh	r2, [r3, #18]
 800c656:	4b20      	ldr	r3, [pc, #128]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c658:	8a1b      	ldrh	r3, [r3, #16]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d908      	bls.n	800c670 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c65e:	4b1e      	ldr	r3, [pc, #120]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c660:	8a5a      	ldrh	r2, [r3, #18]
 800c662:	4b1d      	ldr	r3, [pc, #116]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c664:	8a1b      	ldrh	r3, [r3, #16]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	b29a      	uxth	r2, r3
 800c66a:	4b1b      	ldr	r3, [pc, #108]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c66c:	829a      	strh	r2, [r3, #20]
 800c66e:	e006      	b.n	800c67e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c670:	4b19      	ldr	r3, [pc, #100]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c672:	8a1b      	ldrh	r3, [r3, #16]
 800c674:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c678:	b29a      	uxth	r2, r3
 800c67a:	4b17      	ldr	r3, [pc, #92]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c67c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c67e:	4b16      	ldr	r3, [pc, #88]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c680:	8a1b      	ldrh	r3, [r3, #16]
 800c682:	461a      	mov	r2, r3
 800c684:	4b15      	ldr	r3, [pc, #84]	@ (800c6dc <TRACE_Send+0x100>)
 800c686:	4413      	add	r3, r2
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f383 8810 	msr	PRIMASK, r3
}
 800c694:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800c696:	f7f4 fadb 	bl	8000c50 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c69a:	4b11      	ldr	r3, [pc, #68]	@ (800c6e0 <TRACE_Send+0x104>)
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	4a0e      	ldr	r2, [pc, #56]	@ (800c6d8 <TRACE_Send+0xfc>)
 800c6a0:	8a92      	ldrh	r2, [r2, #20]
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	69b8      	ldr	r0, [r7, #24]
 800c6a6:	4798      	blx	r3
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	77fb      	strb	r3, [r7, #31]
 800c6ac:	e00d      	b.n	800c6ca <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800c6ae:	f000 f941 	bl	800c934 <TRACE_UnLock>
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	f383 8810 	msr	PRIMASK, r3
}
 800c6bc:	e005      	b.n	800c6ca <TRACE_Send+0xee>
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f383 8810 	msr	PRIMASK, r3
}
 800c6c8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800c6ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	200007d0 	.word	0x200007d0
 800c6dc:	200007e8 	.word	0x200007e8
 800c6e0:	0800cdf8 	.word	0x0800cdf8

0800c6e4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b088      	sub	sp, #32
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c6f4:	617b      	str	r3, [r7, #20]
  return(result);
 800c6f6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c6f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6fa:	b672      	cpsid	i
}
 800c6fc:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c6fe:	4b3c      	ldr	r3, [pc, #240]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c700:	789b      	ldrb	r3, [r3, #2]
 800c702:	2b02      	cmp	r3, #2
 800c704:	d106      	bne.n	800c714 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c706:	4b3a      	ldr	r3, [pc, #232]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c708:	2200      	movs	r2, #0
 800c70a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c70c:	4b38      	ldr	r3, [pc, #224]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c70e:	2200      	movs	r2, #0
 800c710:	821a      	strh	r2, [r3, #16]
 800c712:	e00a      	b.n	800c72a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c714:	4b36      	ldr	r3, [pc, #216]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c716:	8a1a      	ldrh	r2, [r3, #16]
 800c718:	4b35      	ldr	r3, [pc, #212]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c71a:	8a9b      	ldrh	r3, [r3, #20]
 800c71c:	4413      	add	r3, r2
 800c71e:	b29b      	uxth	r3, r3
 800c720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c724:	b29a      	uxth	r2, r3
 800c726:	4b32      	ldr	r3, [pc, #200]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c728:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c72a:	4b31      	ldr	r3, [pc, #196]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c72c:	8a1a      	ldrh	r2, [r3, #16]
 800c72e:	4b30      	ldr	r3, [pc, #192]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c730:	8a5b      	ldrh	r3, [r3, #18]
 800c732:	429a      	cmp	r2, r3
 800c734:	d04d      	beq.n	800c7d2 <TRACE_TxCpltCallback+0xee>
 800c736:	4b2e      	ldr	r3, [pc, #184]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c738:	8adb      	ldrh	r3, [r3, #22]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d149      	bne.n	800c7d2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c73e:	4b2c      	ldr	r3, [pc, #176]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c740:	789b      	ldrb	r3, [r3, #2]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d117      	bne.n	800c776 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c746:	4b2a      	ldr	r3, [pc, #168]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c748:	881a      	ldrh	r2, [r3, #0]
 800c74a:	4b29      	ldr	r3, [pc, #164]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c74c:	8a1b      	ldrh	r3, [r3, #16]
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	b29a      	uxth	r2, r3
 800c752:	4b27      	ldr	r3, [pc, #156]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c754:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c756:	4b26      	ldr	r3, [pc, #152]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c758:	2202      	movs	r2, #2
 800c75a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c75c:	4b24      	ldr	r3, [pc, #144]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c75e:	2200      	movs	r2, #0
 800c760:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c762:	4b23      	ldr	r3, [pc, #140]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c764:	8a9b      	ldrh	r3, [r3, #20]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d105      	bne.n	800c776 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c76a:	4b21      	ldr	r3, [pc, #132]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c770:	4b1f      	ldr	r3, [pc, #124]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c772:	2200      	movs	r2, #0
 800c774:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c776:	4b1e      	ldr	r3, [pc, #120]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c778:	789b      	ldrb	r3, [r3, #2]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d115      	bne.n	800c7aa <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c77e:	4b1c      	ldr	r3, [pc, #112]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c780:	8a5a      	ldrh	r2, [r3, #18]
 800c782:	4b1b      	ldr	r3, [pc, #108]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c784:	8a1b      	ldrh	r3, [r3, #16]
 800c786:	429a      	cmp	r2, r3
 800c788:	d908      	bls.n	800c79c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c78a:	4b19      	ldr	r3, [pc, #100]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c78c:	8a5a      	ldrh	r2, [r3, #18]
 800c78e:	4b18      	ldr	r3, [pc, #96]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c790:	8a1b      	ldrh	r3, [r3, #16]
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	b29a      	uxth	r2, r3
 800c796:	4b16      	ldr	r3, [pc, #88]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c798:	829a      	strh	r2, [r3, #20]
 800c79a:	e006      	b.n	800c7aa <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c79c:	4b14      	ldr	r3, [pc, #80]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c79e:	8a1b      	ldrh	r3, [r3, #16]
 800c7a0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	4b12      	ldr	r3, [pc, #72]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c7a8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c7aa:	4b11      	ldr	r3, [pc, #68]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c7ac:	8a1b      	ldrh	r3, [r3, #16]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4b10      	ldr	r3, [pc, #64]	@ (800c7f4 <TRACE_TxCpltCallback+0x110>)
 800c7b2:	4413      	add	r3, r2
 800c7b4:	61fb      	str	r3, [r7, #28]
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	f383 8810 	msr	PRIMASK, r3
}
 800c7c0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7f8 <TRACE_TxCpltCallback+0x114>)
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	4a0a      	ldr	r2, [pc, #40]	@ (800c7f0 <TRACE_TxCpltCallback+0x10c>)
 800c7c8:	8a92      	ldrh	r2, [r2, #20]
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	69f8      	ldr	r0, [r7, #28]
 800c7ce:	4798      	blx	r3
 800c7d0:	e00a      	b.n	800c7e8 <TRACE_TxCpltCallback+0x104>
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f383 8810 	msr	PRIMASK, r3
}
 800c7dc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c7de:	f7f4 fa3f 	bl	8000c60 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c7e2:	f000 f8a7 	bl	800c934 <TRACE_UnLock>
  }
}
 800c7e6:	bf00      	nop
 800c7e8:	bf00      	nop
 800c7ea:	3720      	adds	r7, #32
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	200007d0 	.word	0x200007d0
 800c7f4:	200007e8 	.word	0x200007e8
 800c7f8:	0800cdf8 	.word	0x0800cdf8

0800c7fc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b087      	sub	sp, #28
 800c800:	af00      	add	r7, sp, #0
 800c802:	4603      	mov	r3, r0
 800c804:	6039      	str	r1, [r7, #0]
 800c806:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800c808:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c80c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c80e:	f3ef 8310 	mrs	r3, PRIMASK
 800c812:	60fb      	str	r3, [r7, #12]
  return(result);
 800c814:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c818:	b672      	cpsid	i
}
 800c81a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800c81c:	4b35      	ldr	r3, [pc, #212]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c81e:	8a5a      	ldrh	r2, [r3, #18]
 800c820:	4b34      	ldr	r3, [pc, #208]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c822:	8a1b      	ldrh	r3, [r3, #16]
 800c824:	429a      	cmp	r2, r3
 800c826:	d11b      	bne.n	800c860 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c828:	4b32      	ldr	r3, [pc, #200]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c82a:	8a5b      	ldrh	r3, [r3, #18]
 800c82c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c830:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c832:	88fa      	ldrh	r2, [r7, #6]
 800c834:	8afb      	ldrh	r3, [r7, #22]
 800c836:	429a      	cmp	r2, r3
 800c838:	d33a      	bcc.n	800c8b0 <TRACE_AllocateBufer+0xb4>
 800c83a:	4b2e      	ldr	r3, [pc, #184]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c83c:	8a1b      	ldrh	r3, [r3, #16]
 800c83e:	88fa      	ldrh	r2, [r7, #6]
 800c840:	429a      	cmp	r2, r3
 800c842:	d235      	bcs.n	800c8b0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c844:	4b2b      	ldr	r3, [pc, #172]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c846:	2201      	movs	r2, #1
 800c848:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c84a:	4b2a      	ldr	r3, [pc, #168]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c84c:	8a5a      	ldrh	r2, [r3, #18]
 800c84e:	4b29      	ldr	r3, [pc, #164]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c850:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c852:	4b28      	ldr	r3, [pc, #160]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c854:	8a1b      	ldrh	r3, [r3, #16]
 800c856:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c858:	4b26      	ldr	r3, [pc, #152]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c85a:	2200      	movs	r2, #0
 800c85c:	825a      	strh	r2, [r3, #18]
 800c85e:	e027      	b.n	800c8b0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c860:	4b24      	ldr	r3, [pc, #144]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c862:	8a5a      	ldrh	r2, [r3, #18]
 800c864:	4b23      	ldr	r3, [pc, #140]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c866:	8a1b      	ldrh	r3, [r3, #16]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d91b      	bls.n	800c8a4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c86c:	4b21      	ldr	r3, [pc, #132]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c86e:	8a5b      	ldrh	r3, [r3, #18]
 800c870:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c874:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c876:	88fa      	ldrh	r2, [r7, #6]
 800c878:	8afb      	ldrh	r3, [r7, #22]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d318      	bcc.n	800c8b0 <TRACE_AllocateBufer+0xb4>
 800c87e:	4b1d      	ldr	r3, [pc, #116]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c880:	8a1b      	ldrh	r3, [r3, #16]
 800c882:	88fa      	ldrh	r2, [r7, #6]
 800c884:	429a      	cmp	r2, r3
 800c886:	d213      	bcs.n	800c8b0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c888:	4b1a      	ldr	r3, [pc, #104]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c88a:	2201      	movs	r2, #1
 800c88c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c88e:	4b19      	ldr	r3, [pc, #100]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c890:	8a5a      	ldrh	r2, [r3, #18]
 800c892:	4b18      	ldr	r3, [pc, #96]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c894:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c896:	4b17      	ldr	r3, [pc, #92]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c898:	8a1b      	ldrh	r3, [r3, #16]
 800c89a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c89c:	4b15      	ldr	r3, [pc, #84]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	825a      	strh	r2, [r3, #18]
 800c8a2:	e005      	b.n	800c8b0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c8a4:	4b13      	ldr	r3, [pc, #76]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c8a6:	8a1a      	ldrh	r2, [r3, #16]
 800c8a8:	4b12      	ldr	r3, [pc, #72]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c8aa:	8a5b      	ldrh	r3, [r3, #18]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800c8b0:	8afa      	ldrh	r2, [r7, #22]
 800c8b2:	88fb      	ldrh	r3, [r7, #6]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d90f      	bls.n	800c8d8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800c8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c8ba:	8a5a      	ldrh	r2, [r3, #18]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c8c2:	8a5a      	ldrh	r2, [r3, #18]
 800c8c4:	88fb      	ldrh	r3, [r7, #6]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	4b08      	ldr	r3, [pc, #32]	@ (800c8f4 <TRACE_AllocateBufer+0xf8>)
 800c8d2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	82bb      	strh	r3, [r7, #20]
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	f383 8810 	msr	PRIMASK, r3
}
 800c8e2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c8e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	371c      	adds	r7, #28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bc80      	pop	{r7}
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	200007d0 	.word	0x200007d0

0800c8f8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c902:	607b      	str	r3, [r7, #4]
  return(result);
 800c904:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c906:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c908:	b672      	cpsid	i
}
 800c90a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c90c:	4b08      	ldr	r3, [pc, #32]	@ (800c930 <TRACE_Lock+0x38>)
 800c90e:	8adb      	ldrh	r3, [r3, #22]
 800c910:	3301      	adds	r3, #1
 800c912:	b29a      	uxth	r2, r3
 800c914:	4b06      	ldr	r3, [pc, #24]	@ (800c930 <TRACE_Lock+0x38>)
 800c916:	82da      	strh	r2, [r3, #22]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f383 8810 	msr	PRIMASK, r3
}
 800c922:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c924:	bf00      	nop
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	bc80      	pop	{r7}
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	200007d0 	.word	0x200007d0

0800c934 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c93a:	f3ef 8310 	mrs	r3, PRIMASK
 800c93e:	607b      	str	r3, [r7, #4]
  return(result);
 800c940:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c942:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c944:	b672      	cpsid	i
}
 800c946:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c948:	4b08      	ldr	r3, [pc, #32]	@ (800c96c <TRACE_UnLock+0x38>)
 800c94a:	8adb      	ldrh	r3, [r3, #22]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	b29a      	uxth	r2, r3
 800c950:	4b06      	ldr	r3, [pc, #24]	@ (800c96c <TRACE_UnLock+0x38>)
 800c952:	82da      	strh	r2, [r3, #22]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	f383 8810 	msr	PRIMASK, r3
}
 800c95e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c960:	bf00      	nop
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	bc80      	pop	{r7}
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	200007d0 	.word	0x200007d0

0800c970 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c974:	4b05      	ldr	r3, [pc, #20]	@ (800c98c <TRACE_IsLocked+0x1c>)
 800c976:	8adb      	ldrh	r3, [r3, #22]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	bf14      	ite	ne
 800c97c:	2301      	movne	r3, #1
 800c97e:	2300      	moveq	r3, #0
 800c980:	b2db      	uxtb	r3, r3
}
 800c982:	4618      	mov	r0, r3
 800c984:	46bd      	mov	sp, r7
 800c986:	bc80      	pop	{r7}
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	200007d0 	.word	0x200007d0

0800c990 <memset>:
 800c990:	4402      	add	r2, r0
 800c992:	4603      	mov	r3, r0
 800c994:	4293      	cmp	r3, r2
 800c996:	d100      	bne.n	800c99a <memset+0xa>
 800c998:	4770      	bx	lr
 800c99a:	f803 1b01 	strb.w	r1, [r3], #1
 800c99e:	e7f9      	b.n	800c994 <memset+0x4>

0800c9a0 <__libc_init_array>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	4d0d      	ldr	r5, [pc, #52]	@ (800c9d8 <__libc_init_array+0x38>)
 800c9a4:	4c0d      	ldr	r4, [pc, #52]	@ (800c9dc <__libc_init_array+0x3c>)
 800c9a6:	1b64      	subs	r4, r4, r5
 800c9a8:	10a4      	asrs	r4, r4, #2
 800c9aa:	2600      	movs	r6, #0
 800c9ac:	42a6      	cmp	r6, r4
 800c9ae:	d109      	bne.n	800c9c4 <__libc_init_array+0x24>
 800c9b0:	4d0b      	ldr	r5, [pc, #44]	@ (800c9e0 <__libc_init_array+0x40>)
 800c9b2:	4c0c      	ldr	r4, [pc, #48]	@ (800c9e4 <__libc_init_array+0x44>)
 800c9b4:	f000 f818 	bl	800c9e8 <_init>
 800c9b8:	1b64      	subs	r4, r4, r5
 800c9ba:	10a4      	asrs	r4, r4, #2
 800c9bc:	2600      	movs	r6, #0
 800c9be:	42a6      	cmp	r6, r4
 800c9c0:	d105      	bne.n	800c9ce <__libc_init_array+0x2e>
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9c8:	4798      	blx	r3
 800c9ca:	3601      	adds	r6, #1
 800c9cc:	e7ee      	b.n	800c9ac <__libc_init_array+0xc>
 800c9ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9d2:	4798      	blx	r3
 800c9d4:	3601      	adds	r6, #1
 800c9d6:	e7f2      	b.n	800c9be <__libc_init_array+0x1e>
 800c9d8:	0800cf88 	.word	0x0800cf88
 800c9dc:	0800cf88 	.word	0x0800cf88
 800c9e0:	0800cf88 	.word	0x0800cf88
 800c9e4:	0800cf8c 	.word	0x0800cf8c

0800c9e8 <_init>:
 800c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ea:	bf00      	nop
 800c9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ee:	bc08      	pop	{r3}
 800c9f0:	469e      	mov	lr, r3
 800c9f2:	4770      	bx	lr

0800c9f4 <_fini>:
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	bf00      	nop
 800c9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9fa:	bc08      	pop	{r3}
 800c9fc:	469e      	mov	lr, r3
 800c9fe:	4770      	bx	lr
