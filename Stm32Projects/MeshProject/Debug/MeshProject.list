
MeshProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd98  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800bed0  0800bed0  0001bed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c398  0800c398  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800c398  0800c398  0001c398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3a0  0800c3a0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3a4  0800c3a4  0001c3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800c3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  20000014  0800c3bc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  0800c3bc  00020890  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020593  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b04  00000000  00000000  00040614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e90  00000000  00000000  00046118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016f3  00000000  00000000  00047fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8a0  00000000  00000000  0004969b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023133  00000000  00000000  00068f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2a13  00000000  00000000  0008c06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bd8  00000000  00000000  0013ea84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0014665c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000014 	.word	0x20000014
 8000154:	00000000 	.word	0x00000000
 8000158:	0800beb8 	.word	0x0800beb8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000018 	.word	0x20000018
 8000174:	0800beb8 	.word	0x0800beb8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b970 	b.w	8000480 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	460f      	mov	r7, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d965      	bls.n	800029a <__udivmoddi4+0xe2>
 80001ce:	fab2 f382 	clz	r3, r2
 80001d2:	b143      	cbz	r3, 80001e6 <__udivmoddi4+0x2e>
 80001d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d8:	f1c3 0220 	rsb	r2, r3, #32
 80001dc:	409f      	lsls	r7, r3
 80001de:	fa20 f202 	lsr.w	r2, r0, r2
 80001e2:	4317      	orrs	r7, r2
 80001e4:	409c      	lsls	r4, r3
 80001e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ea:	fa1f f58c 	uxth.w	r5, ip
 80001ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001fc:	fb01 f005 	mul.w	r0, r1, r5
 8000200:	4290      	cmp	r0, r2
 8000202:	d90a      	bls.n	800021a <__udivmoddi4+0x62>
 8000204:	eb1c 0202 	adds.w	r2, ip, r2
 8000208:	f101 37ff 	add.w	r7, r1, #4294967295
 800020c:	f080 811b 	bcs.w	8000446 <__udivmoddi4+0x28e>
 8000210:	4290      	cmp	r0, r2
 8000212:	f240 8118 	bls.w	8000446 <__udivmoddi4+0x28e>
 8000216:	3902      	subs	r1, #2
 8000218:	4462      	add	r2, ip
 800021a:	1a12      	subs	r2, r2, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022a:	fb00 f505 	mul.w	r5, r0, r5
 800022e:	42a5      	cmp	r5, r4
 8000230:	d90a      	bls.n	8000248 <__udivmoddi4+0x90>
 8000232:	eb1c 0404 	adds.w	r4, ip, r4
 8000236:	f100 32ff 	add.w	r2, r0, #4294967295
 800023a:	f080 8106 	bcs.w	800044a <__udivmoddi4+0x292>
 800023e:	42a5      	cmp	r5, r4
 8000240:	f240 8103 	bls.w	800044a <__udivmoddi4+0x292>
 8000244:	4464      	add	r4, ip
 8000246:	3802      	subs	r0, #2
 8000248:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40dc      	lsrs	r4, r3
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d908      	bls.n	8000274 <__udivmoddi4+0xbc>
 8000262:	2e00      	cmp	r6, #0
 8000264:	f000 80ec 	beq.w	8000440 <__udivmoddi4+0x288>
 8000268:	2100      	movs	r1, #0
 800026a:	e9c6 0500 	strd	r0, r5, [r6]
 800026e:	4608      	mov	r0, r1
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	fab3 f183 	clz	r1, r3
 8000278:	2900      	cmp	r1, #0
 800027a:	d149      	bne.n	8000310 <__udivmoddi4+0x158>
 800027c:	42ab      	cmp	r3, r5
 800027e:	d302      	bcc.n	8000286 <__udivmoddi4+0xce>
 8000280:	4282      	cmp	r2, r0
 8000282:	f200 80f7 	bhi.w	8000474 <__udivmoddi4+0x2bc>
 8000286:	1a84      	subs	r4, r0, r2
 8000288:	eb65 0203 	sbc.w	r2, r5, r3
 800028c:	2001      	movs	r0, #1
 800028e:	4617      	mov	r7, r2
 8000290:	2e00      	cmp	r6, #0
 8000292:	d0e2      	beq.n	800025a <__udivmoddi4+0xa2>
 8000294:	e9c6 4700 	strd	r4, r7, [r6]
 8000298:	e7df      	b.n	800025a <__udivmoddi4+0xa2>
 800029a:	b902      	cbnz	r2, 800029e <__udivmoddi4+0xe6>
 800029c:	deff      	udf	#255	; 0xff
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f040 808f 	bne.w	80003c6 <__udivmoddi4+0x20e>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2101      	movs	r1, #1
 80002b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b8:	fb07 2015 	mls	r0, r7, r5, r2
 80002bc:	0c22      	lsrs	r2, r4, #16
 80002be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c2:	fb0e f005 	mul.w	r0, lr, r5
 80002c6:	4290      	cmp	r0, r2
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x124>
 80002ca:	eb1c 0202 	adds.w	r2, ip, r2
 80002ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x122>
 80002d4:	4290      	cmp	r0, r2
 80002d6:	f200 80ca 	bhi.w	800046e <__udivmoddi4+0x2b6>
 80002da:	4645      	mov	r5, r8
 80002dc:	1a12      	subs	r2, r2, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e4:	fb07 2210 	mls	r2, r7, r0, r2
 80002e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x14e>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x14c>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80ba 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 8000304:	4610      	mov	r0, r2
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800030e:	e79f      	b.n	8000250 <__udivmoddi4+0x98>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa05 f401 	lsl.w	r4, r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	40fd      	lsrs	r5, r7
 8000328:	4323      	orrs	r3, r4
 800032a:	fa00 f901 	lsl.w	r9, r0, r1
 800032e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	fbb5 f8f0 	udiv	r8, r5, r0
 800033a:	0c1c      	lsrs	r4, r3, #16
 800033c:	fb00 5518 	mls	r5, r0, r8, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b0>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8087 	bcs.w	800046a <__udivmoddi4+0x2b2>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f240 8084 	bls.w	800046a <__udivmoddi4+0x2b2>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	b29d      	uxth	r5, r3
 800036c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000370:	fb00 4413 	mls	r4, r0, r3, r4
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	fb03 fe0e 	mul.w	lr, r3, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1da>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f103 30ff 	add.w	r0, r3, #4294967295
 8000388:	d26b      	bcs.n	8000462 <__udivmoddi4+0x2aa>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d969      	bls.n	8000462 <__udivmoddi4+0x2aa>
 800038e:	3b02      	subs	r3, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000396:	fba0 8302 	umull	r8, r3, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	429c      	cmp	r4, r3
 80003a0:	46c6      	mov	lr, r8
 80003a2:	461d      	mov	r5, r3
 80003a4:	d355      	bcc.n	8000452 <__udivmoddi4+0x29a>
 80003a6:	d052      	beq.n	800044e <__udivmoddi4+0x296>
 80003a8:	b156      	cbz	r6, 80003c0 <__udivmoddi4+0x208>
 80003aa:	ebb9 030e 	subs.w	r3, r9, lr
 80003ae:	eb64 0405 	sbc.w	r4, r4, r5
 80003b2:	fa04 f707 	lsl.w	r7, r4, r7
 80003b6:	40cb      	lsrs	r3, r1
 80003b8:	40cc      	lsrs	r4, r1
 80003ba:	431f      	orrs	r7, r3
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c3 0120 	rsb	r1, r3, #32
 80003ca:	fa02 fc03 	lsl.w	ip, r2, r3
 80003ce:	fa20 f201 	lsr.w	r2, r0, r1
 80003d2:	fa25 f101 	lsr.w	r1, r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	432a      	orrs	r2, r5
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e6:	fb07 1510 	mls	r5, r7, r0, r1
 80003ea:	0c11      	lsrs	r1, r2, #16
 80003ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f0:	fb00 f50e 	mul.w	r5, r0, lr
 80003f4:	428d      	cmp	r5, r1
 80003f6:	fa04 f403 	lsl.w	r4, r4, r3
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x256>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 38ff 	add.w	r8, r0, #4294967295
 8000404:	d22f      	bcs.n	8000466 <__udivmoddi4+0x2ae>
 8000406:	428d      	cmp	r5, r1
 8000408:	d92d      	bls.n	8000466 <__udivmoddi4+0x2ae>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	b292      	uxth	r2, r2
 8000412:	fbb1 f5f7 	udiv	r5, r1, r7
 8000416:	fb07 1115 	mls	r1, r7, r5, r1
 800041a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800041e:	fb05 f10e 	mul.w	r1, r5, lr
 8000422:	4291      	cmp	r1, r2
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x280>
 8000426:	eb1c 0202 	adds.w	r2, ip, r2
 800042a:	f105 38ff 	add.w	r8, r5, #4294967295
 800042e:	d216      	bcs.n	800045e <__udivmoddi4+0x2a6>
 8000430:	4291      	cmp	r1, r2
 8000432:	d914      	bls.n	800045e <__udivmoddi4+0x2a6>
 8000434:	3d02      	subs	r5, #2
 8000436:	4462      	add	r2, ip
 8000438:	1a52      	subs	r2, r2, r1
 800043a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800043e:	e739      	b.n	80002b4 <__udivmoddi4+0xfc>
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e709      	b.n	800025a <__udivmoddi4+0xa2>
 8000446:	4639      	mov	r1, r7
 8000448:	e6e7      	b.n	800021a <__udivmoddi4+0x62>
 800044a:	4610      	mov	r0, r2
 800044c:	e6fc      	b.n	8000248 <__udivmoddi4+0x90>
 800044e:	45c1      	cmp	r9, r8
 8000450:	d2aa      	bcs.n	80003a8 <__udivmoddi4+0x1f0>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb63 050c 	sbc.w	r5, r3, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7a4      	b.n	80003a8 <__udivmoddi4+0x1f0>
 800045e:	4645      	mov	r5, r8
 8000460:	e7ea      	b.n	8000438 <__udivmoddi4+0x280>
 8000462:	4603      	mov	r3, r0
 8000464:	e795      	b.n	8000392 <__udivmoddi4+0x1da>
 8000466:	4640      	mov	r0, r8
 8000468:	e7d1      	b.n	800040e <__udivmoddi4+0x256>
 800046a:	46d0      	mov	r8, sl
 800046c:	e77c      	b.n	8000368 <__udivmoddi4+0x1b0>
 800046e:	3d02      	subs	r5, #2
 8000470:	4462      	add	r2, ip
 8000472:	e733      	b.n	80002dc <__udivmoddi4+0x124>
 8000474:	4608      	mov	r0, r1
 8000476:	e70b      	b.n	8000290 <__udivmoddi4+0xd8>
 8000478:	4464      	add	r4, ip
 800047a:	3802      	subs	r0, #2
 800047c:	e743      	b.n	8000306 <__udivmoddi4+0x14e>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4313      	orrs	r3, r2
 800049a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800049c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a8:	68fb      	ldr	r3, [r7, #12]
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004b8:	2004      	movs	r0, #4
 80004ba:	f7ff ffe3 	bl	8000484 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ffe0 	bl	8000484 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	200f      	movs	r0, #15
 80004ca:	f001 f9dc 	bl	8001886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004ce:	200f      	movs	r0, #15
 80004d0:	f001 f9f3 	bl	80018ba <HAL_NVIC_EnableIRQ>

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4013      	ands	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fc:	68fb      	ldr	r3, [r7, #12]
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	2002      	movs	r0, #2
 800051e:	f7ff ffdb 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	2004      	movs	r0, #4
 8000524:	f7ff ffd8 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff ffd5 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8000534:	481d      	ldr	r0, [pc, #116]	; (80005ac <MX_GPIO_Init+0xa4>)
 8000536:	f001 fff5 	bl	8002524 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800053a:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800053e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2302      	movs	r3, #2
 800054a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4816      	ldr	r0, [pc, #88]	; (80005ac <MX_GPIO_Init+0xa4>)
 8000552:	f001 fdb9 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8000556:	2303      	movs	r3, #3
 8000558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800055e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000560:	2301      	movs	r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f001 fdac 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8000570:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000574:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_GPIO_Init+0xa4>)
 8000588:	f001 fd9e 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000590:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000596:	2301      	movs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4619      	mov	r1, r3
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_GPIO_Init+0xa8>)
 80005a0:	f001 fd92 	bl	80020c8 <HAL_GPIO_Init>

}
 80005a4:	bf00      	nop
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	48000400 	.word	0x48000400
 80005b0:	48000800 	.word	0x48000800

080005b4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005c4:	f023 0218 	bic.w	r2, r3, #24
 80005c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 f845 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f807 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f7ff ff8d 	bl	8000508 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80005ee:	f009 ff8a 	bl	800a506 <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80005f2:	f009 ff90 	bl	800a516 <MX_SubGHz_Phy_Process>
 80005f6:	e7fc      	b.n	80005f2 <main+0x14>

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09a      	sub	sp, #104	; 0x68
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2248      	movs	r2, #72	; 0x48
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f00b fc0a 	bl	800be20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061e:	f001 ffb1 	bl	8002584 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff ffc6 	bl	80005b4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xb0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000630:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <SystemClock_Config+0xb0>)
 8000632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <SystemClock_Config+0xb0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000644:	2324      	movs	r3, #36	; 0x24
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000648:	2381      	movs	r3, #129	; 0x81
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000650:	2300      	movs	r3, #0
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000654:	23b0      	movs	r3, #176	; 0xb0
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fa39 	bl	8002ad8 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800066c:	f000 f81e 	bl	80006ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000670:	234f      	movs	r3, #79	; 0x4f
 8000672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2102      	movs	r1, #2
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fda4 	bl	80031dc <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800069a:	f000 f807 	bl	80006ac <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3768      	adds	r7, #104	; 0x68
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	58000400 	.word	0x58000400

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>

080006b6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b085      	sub	sp, #20
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4013      	ands	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	222c      	movs	r2, #44	; 0x2c
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f00b fb83 	bl	800be20 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_RTC_Init+0x9c>)
 800071c:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <MX_RTC_Init+0xa0>)
 800071e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_RTC_Init+0x9c>)
 8000722:	221f      	movs	r2, #31
 8000724:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_RTC_Init+0x9c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_RTC_Init+0x9c>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_RTC_Init+0x9c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_RTC_Init+0x9c>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_RTC_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_RTC_Init+0x9c>)
 8000748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800074e:	4815      	ldr	r0, [pc, #84]	; (80007a4 <MX_RTC_Init+0x9c>)
 8000750:	f003 fa00 	bl	8003b54 <HAL_RTC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800075a:	f7ff ffa7 	bl	80006ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_RTC_Init+0x9c>)
 8000760:	f003 fcf6 	bl	8004150 <HAL_RTCEx_SetSSRU_IT>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800076a:	f7ff ff9f 	bl	80006ac <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800077a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800077e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_RTC_Init+0x9c>)
 800078e:	f003 fa63 	bl	8003c58 <HAL_RTC_SetAlarm_IT>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000798:	f7ff ff88 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3730      	adds	r7, #48	; 0x30
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000030 	.word	0x20000030
 80007a8:	40002800 	.word	0x40002800

080007ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b090      	sub	sp, #64	; 0x40
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2238      	movs	r2, #56	; 0x38
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f00b fb2f 	bl	800be20 <memset>
  if(rtcHandle->Instance==RTC)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <HAL_RTC_MspInit+0x74>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d125      	bne.n	8000818 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 f89f 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80007e8:	f7ff ff60 	bl	80006ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007ec:	f7ff ff63 	bl	80006b6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007f4:	f7ff ff6f 	bl	80006d6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2002      	movs	r0, #2
 80007fe:	f001 f842 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000802:	2002      	movs	r0, #2
 8000804:	f001 f859 	bl	80018ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	202a      	movs	r0, #42	; 0x2a
 800080e:	f001 f83a 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000812:	202a      	movs	r0, #42	; 0x2a
 8000814:	f001 f851 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000818:	bf00      	nop
 800081a:	3740      	adds	r7, #64	; 0x40
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40002800 	.word	0x40002800

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000886:	f003 fc9f 	bl	80041c8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000030 	.word	0x20000030

08000894 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <DMA1_Channel5_IRQHandler+0x10>)
 800089a:	f001 faa5 	bl	8001de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000110 	.word	0x20000110

080008a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USART2_IRQHandler+0x10>)
 80008ae:	f004 fad9 	bl	8004e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000007c 	.word	0x2000007c

080008bc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <RTC_Alarm_IRQHandler+0x10>)
 80008c2:	f003 fb31 	bl	8003f28 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000030 	.word	0x20000030

080008d0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <SUBGHZ_Radio_IRQHandler+0x10>)
 80008d6:	f003 ffe5 	bl	80048a4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000068 	.word	0x20000068

080008e4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80008ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80008f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80008fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000900:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000908:	68fb      	ldr	r3, [r7, #12]
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SUBGHZ_Init+0x20>)
 800091a:	2208      	movs	r2, #8
 800091c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_SUBGHZ_Init+0x20>)
 8000920:	f003 fd3e 	bl	80043a0 <HAL_SUBGHZ_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800092a:	f7ff febf 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000068 	.word	0x20000068

08000938 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff ffcf 	bl	80008e4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2032      	movs	r0, #50	; 0x32
 800094c:	f000 ff9b 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000950:	2032      	movs	r0, #50	; 0x32
 8000952:	f000 ffb2 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <LL_RCC_SetClkAfterWakeFromStop>:
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4313      	orrs	r3, r2
 8000978:	608b      	str	r3, [r1, #8]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ffe8 	bl	800095e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800098e:	f00a fd23 	bl	800b3d8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <SystemApp_Init+0x38>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000998:	f000 f89c 	bl	8000ad4 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800099c:	f00a ffac 	bl	800b8f8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <SystemApp_Init+0x3c>)
 80009a2:	f00b f845 	bl	800ba30 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f00b f850 	bl	800ba4c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80009ac:	f00a f90a 	bl	800abc4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80009b0:	2101      	movs	r1, #1
 80009b2:	2001      	movs	r0, #1
 80009b4:	f00a f946 	bl	800ac44 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000074 	.word	0x20000074
 80009c0:	080009c5 	.word	0x080009c5

080009c4 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00a f9da 	bl	800ad8c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009de:	9200      	str	r2, [sp, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <TimestampNow+0x3c>)
 80009e2:	2110      	movs	r1, #16
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f81d 	bl	8000a24 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fbc4 	bl	8000178 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	0800bed0 	.word	0x0800bed0

08000a04 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f00a f8ea 	bl	800abe4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f00a f8e2 	bl	800abe4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000a24:	b40c      	push	{r2, r3}
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f00a faf1 	bl	800b024 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a4c:	b002      	add	sp, #8
 8000a4e:	4770      	bx	lr

08000a50 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_GetTick+0x24>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000a76:	f000 f92d 	bl	8000cd4 <TIMER_IF_GetTimerValue>
 8000a7a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000074 	.word	0x20000074

08000a8c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f9a3 	bl	8000de2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <LL_AHB2_GRP1_EnableClock>:
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000ada:	f000 fde9 	bl	80016b0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000ade:	f000 fded 	bl	80016bc <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000ae2:	f000 fdf1 	bl	80016c8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000b00:	2002      	movs	r0, #2
 8000b02:	f7ff ffcf 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000b06:	2002      	movs	r0, #2
 8000b08:	f7ff ffcc 	bl	8000aa4 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <DBG_Init+0x78>)
 8000b18:	f001 fad6 	bl	80020c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <DBG_Init+0x78>)
 8000b28:	f001 face 	bl	80020c8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <DBG_Init+0x78>)
 8000b34:	f001 fcf6 	bl	8002524 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <DBG_Init+0x78>)
 8000b40:	f001 fcf0 	bl	8002524 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	48000400 	.word	0x48000400

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
	...

08000b74 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <TIMER_IF_Init+0x5c>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f083 0301 	eor.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d01b      	beq.n	8000bc4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <TIMER_IF_Init+0x60>)
 8000b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b92:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000b94:	f7ff fdb8 	bl	8000708 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000b98:	f000 f856 	bl	8000c48 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <TIMER_IF_Init+0x60>)
 8000ba2:	f003 f965 	bl	8003e70 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <TIMER_IF_Init+0x60>)
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <TIMER_IF_Init+0x60>)
 8000bb0:	f003 fa9c 	bl	80040ec <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f9d3 	bl	8000f60 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000bba:	f000 f85f 	bl	8000c7c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <TIMER_IF_Init+0x5c>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000075 	.word	0x20000075
 8000bd4:	20000030 	.word	0x20000030

08000bd8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	222c      	movs	r2, #44	; 0x2c
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00b f916 	bl	800be20 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000bf4:	f000 f828 	bl	8000c48 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <TIMER_IF_StartTimer+0x68>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000c10:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c14:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	2201      	movs	r2, #1
 8000c22:	4619      	mov	r1, r3
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <TIMER_IF_StartTimer+0x6c>)
 8000c26:	f003 f817 	bl	8003c58 <HAL_RTC_SetAlarm_IT>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000c30:	f7ff fd3c 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000c34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3738      	adds	r7, #56	; 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000078 	.word	0x20000078
 8000c44:	20000030 	.word	0x20000030

08000c48 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <TIMER_IF_StopTimer+0x2c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <TIMER_IF_StopTimer+0x30>)
 8000c5e:	f003 f907 	bl	8003e70 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <TIMER_IF_StopTimer+0x30>)
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40002800 	.word	0x40002800
 8000c78:	20000030 	.word	0x20000030

08000c7c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000c80:	f000 f98e 	bl	8000fa0 <GetTimerTicks>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <TIMER_IF_SetTimerContext+0x18>)
 8000c88:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000c8a:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <TIMER_IF_SetTimerContext+0x18>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000078 	.word	0x20000078

08000c98 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <TIMER_IF_GetTimerContext+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000078 	.word	0x20000078

08000cac <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000cb6:	f000 f973 	bl	8000fa0 <GetTimerTicks>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000078 	.word	0x20000078

08000cd4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <TIMER_IF_GetTimerValue+0x24>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000ce6:	f000 f95b 	bl	8000fa0 <GetTimerTicks>
 8000cea:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000075 	.word	0x20000075

08000cfc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000d06:	2303      	movs	r3, #3
 8000d08:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000d16:	b5b0      	push	{r4, r5, r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d1e:	2100      	movs	r1, #0
 8000d20:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2000      	movs	r0, #0
 8000d26:	460a      	mov	r2, r1
 8000d28:	4603      	mov	r3, r0
 8000d2a:	0d95      	lsrs	r5, r2, #22
 8000d2c:	0294      	lsls	r4, r2, #10
 8000d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	4620      	mov	r0, r4
 8000d38:	4629      	mov	r1, r5
 8000d3a:	f7ff fa25 	bl	8000188 <__aeabi_uldivmod>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4613      	mov	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000d50:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	2000      	movs	r0, #0
 8000d62:	460c      	mov	r4, r1
 8000d64:	4605      	mov	r5, r0
 8000d66:	4620      	mov	r0, r4
 8000d68:	4629      	mov	r1, r5
 8000d6a:	f04f 0a00 	mov.w	sl, #0
 8000d6e:	f04f 0b00 	mov.w	fp, #0
 8000d72:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000d76:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000d7a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000d7e:	4650      	mov	r0, sl
 8000d80:	4659      	mov	r1, fp
 8000d82:	1b02      	subs	r2, r0, r4
 8000d84:	eb61 0305 	sbc.w	r3, r1, r5
 8000d88:	f04f 0000 	mov.w	r0, #0
 8000d8c:	f04f 0100 	mov.w	r1, #0
 8000d90:	0099      	lsls	r1, r3, #2
 8000d92:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d96:	0090      	lsls	r0, r2, #2
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	eb12 0804 	adds.w	r8, r2, r4
 8000da0:	eb43 0905 	adc.w	r9, r3, r5
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000db0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000db4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000db8:	4690      	mov	r8, r2
 8000dba:	4699      	mov	r9, r3
 8000dbc:	4640      	mov	r0, r8
 8000dbe:	4649      	mov	r1, r9
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	0a82      	lsrs	r2, r0, #10
 8000dca:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000dce:	0a8b      	lsrs	r3, r1, #10
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000de0:	4770      	bx	lr

08000de2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff93 	bl	8000d16 <TIMER_IF_Convert_ms2Tick>
 8000df0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000df2:	f000 f8d5 	bl	8000fa0 <GetTimerTicks>
 8000df6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000df8:	e000      	b.n	8000dfc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000dfa:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000dfc:	f000 f8d0 	bl	8000fa0 <GetTimerTicks>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f6      	bhi.n	8000dfa <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000e1e:	f00a fc29 	bl	800b674 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000e32:	f000 f8a5 	bl	8000f80 <TIMER_IF_BkUp_Read_MSBticks>
 8000e36:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f88f 	bl	8000f60 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000e4a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000e58:	f000 f8a2 	bl	8000fa0 <GetTimerTicks>
 8000e5c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000e5e:	f000 f88f 	bl	8000f80 <TIMER_IF_BkUp_Read_MSBticks>
 8000e62:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	2200      	movs	r2, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	60fa      	str	r2, [r7, #12]
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	000b      	movs	r3, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	460c      	mov	r4, r1
 8000e80:	4605      	mov	r5, r0
 8000e82:	eb12 0804 	adds.w	r8, r2, r4
 8000e86:	eb43 0905 	adc.w	r9, r3, r5
 8000e8a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000e8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	0a82      	lsrs	r2, r0, #10
 8000e9c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000ea0:	0a8b      	lsrs	r3, r1, #10
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000eb4:	f04f 0b00 	mov.w	fp, #0
 8000eb8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff46 	bl	8000d50 <TIMER_IF_Convert_Tick2ms>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3730      	adds	r7, #48	; 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000ed8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000ee6:	f003 f993 	bl	8004210 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000030 	.word	0x20000030

08000ef8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	2101      	movs	r1, #1
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8000f06:	f003 f983 	bl	8004210 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000030 	.word	0x20000030

08000f18 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000f22:	2100      	movs	r1, #0
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8000f26:	f003 f98b 	bl	8004240 <HAL_RTCEx_BKUPRead>
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000030 	.word	0x20000030

08000f3c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000f46:	2101      	movs	r1, #1
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8000f4a:	f003 f979 	bl	8004240 <HAL_RTCEx_BKUPRead>
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000030 	.word	0x20000030

08000f60 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8000f6e:	f003 f94f 	bl	8004210 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000030 	.word	0x20000030

08000f80 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8000f86:	2102      	movs	r1, #2
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8000f8a:	f003 f959 	bl	8004240 <HAL_RTCEx_BKUPRead>
 8000f8e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8000f90:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000030 	.word	0x20000030

08000fa0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8000fa6:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <GetTimerTicks+0x34>)
 8000fa8:	f7ff fdd8 	bl	8000b5c <LL_RTC_TIME_GetSubSecond>
 8000fac:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000fae:	e003      	b.n	8000fb8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <GetTimerTicks+0x34>)
 8000fb2:	f7ff fdd3 	bl	8000b5c <LL_RTC_TIME_GetSubSecond>
 8000fb6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <GetTimerTicks+0x34>)
 8000fba:	f7ff fdcf 	bl	8000b5c <LL_RTC_TIME_GetSubSecond>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d1f4      	bne.n	8000fb0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40002800 	.word	0x40002800

08000fd8 <LL_AHB2_GRP1_EnableClock>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <LL_APB1_GRP1_EnableClock>:
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <LL_APB1_GRP1_DisableClock>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	43db      	mvns	r3, r3
 800104a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104e:	4013      	ands	r3, r2
 8001050:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_USART2_UART_Init+0x90>)
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <MX_USART2_UART_Init+0x94>)
 8001064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <MX_USART2_UART_Init+0x90>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_USART2_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_USART2_UART_Init+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_USART2_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_USART2_UART_Init+0x90>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_USART2_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_USART2_UART_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_USART2_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_USART2_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_USART2_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_USART2_UART_Init+0x90>)
 80010a6:	f003 fdc0 	bl	8004c2a <HAL_UART_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010b0:	f7ff fafc 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b4:	2100      	movs	r1, #0
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_USART2_UART_Init+0x90>)
 80010b8:	f005 fee9 	bl	8006e8e <HAL_UARTEx_SetTxFifoThreshold>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010c2:	f7ff faf3 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <MX_USART2_UART_Init+0x90>)
 80010ca:	f005 ff1e 	bl	8006f0a <HAL_UARTEx_SetRxFifoThreshold>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f7ff faea 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_USART2_UART_Init+0x90>)
 80010da:	f005 fe9d 	bl	8006e18 <HAL_UARTEx_EnableFifoMode>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010e4:	f7ff fae2 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000007c 	.word	0x2000007c
 80010f0:	40004400 	.word	0x40004400

080010f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b096      	sub	sp, #88	; 0x58
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2238      	movs	r2, #56	; 0x38
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00a fe83 	bl	800be20 <memset>
  if(uartHandle->Instance==USART2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <HAL_UART_MspInit+0xe8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d156      	bne.n	80011d2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001124:	2302      	movs	r3, #2
 8001126:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_UART_MspInit+0xec>)
 800112a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fbf5 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800113c:	f7ff fab6 	bl	80006ac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001140:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001144:	f7ff ff60 	bl	8001008 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff ff45 	bl	8000fd8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800114e:	230c      	movs	r3, #12
 8001150:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115e:	2307      	movs	r3, #7
 8001160:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 ffac 	bl	80020c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001172:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_UART_MspInit+0xf4>)
 8001174:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001178:	2214      	movs	r2, #20
 800117a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 800117e:	2210      	movs	r2, #16
 8001180:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011a6:	480f      	ldr	r0, [pc, #60]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 80011a8:	f000 fba4 	bl	80018f4 <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80011b2:	f7ff fa7b 	bl	80006ac <Error_Handler>
//    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
//    {
//      Error_Handler();
//    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 80011ba:	67da      	str	r2, [r3, #124]	; 0x7c
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_UART_MspInit+0xf0>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2102      	movs	r1, #2
 80011c6:	2025      	movs	r0, #37	; 0x25
 80011c8:	f000 fb5d 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011cc:	2025      	movs	r0, #37	; 0x25
 80011ce:	f000 fb74 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3758      	adds	r7, #88	; 0x58
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40004400 	.word	0x40004400
 80011e0:	000c0004 	.word	0x000c0004
 80011e4:	20000110 	.word	0x20000110
 80011e8:	40020058 	.word	0x40020058

080011ec <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <HAL_UART_MspDeInit+0x3c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d110      	bne.n	8001220 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80011fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001202:	f7ff ff19 	bl	8001038 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001206:	210c      	movs	r1, #12
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f001 f8bc 	bl	8002388 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fc15 	bl	8001a44 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800121a:	2025      	movs	r0, #37	; 0x25
 800121c:	f000 fb5b 	bl	80018d6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40004400 	.word	0x40004400

0800122c <LL_APB1_GRP1_ForceReset>:
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800123a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4313      	orrs	r3, r2
 8001242:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <LL_APB1_GRP1_ReleaseReset>:
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	43db      	mvns	r3, r3
 8001260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001264:	4013      	ands	r3, r2
 8001266:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_EXTI_EnableIT_0_31+0x24>)
 800127e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001282:	4905      	ldr	r1, [pc, #20]	; (8001298 <LL_EXTI_EnableIT_0_31+0x24>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	58000800 	.word	0x58000800

0800129c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <vcom_Init+0x28>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80012aa:	f7ff f903 	bl	80004b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012ae:	f7ff fed5 	bl	800105c <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80012b2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80012b6:	f7ff ffdd 	bl	8001274 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80012ba:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000174 	.word	0x20000174

080012c8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80012cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012d0:	f7ff ffac 	bl	800122c <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 80012d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012d8:	f7ff ffb9 	bl	800124e <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <vcom_DeInit+0x28>)
 80012de:	f7ff ff85 	bl	80011ec <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f000 faf7 	bl	80018d6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80012e8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000007c 	.word	0x2000007c

080012f4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	461a      	mov	r2, r3
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <vcom_Trace_DMA+0x24>)
 8001308:	f003 fd2c 	bl	8004d64 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800130c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000007c 	.word	0x2000007c

0800131c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <vcom_ReceiveInit+0x70>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800132a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800132e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001338:	4815      	ldr	r0, [pc, #84]	; (8001390 <vcom_ReceiveInit+0x74>)
 800133a:	f005 fce0 	bl	8006cfe <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800133e:	bf00      	nop
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <vcom_ReceiveInit+0x74>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134e:	d0f7      	beq.n	8001340 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001350:	bf00      	nop
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <vcom_ReceiveInit+0x74>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001360:	d1f7      	bne.n	8001352 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <vcom_ReceiveInit+0x74>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <vcom_ReceiveInit+0x74>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001370:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <vcom_ReceiveInit+0x74>)
 8001374:	f005 fd1e 	bl	8006db4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	4906      	ldr	r1, [pc, #24]	; (8001394 <vcom_ReceiveInit+0x78>)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <vcom_ReceiveInit+0x74>)
 800137e:	f003 fca5 	bl	8004ccc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001382:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000178 	.word	0x20000178
 8001390:	2000007c 	.word	0x2000007c
 8001394:	20000170 	.word	0x20000170

08001398 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a05      	ldr	r2, [pc, #20]	; (80013bc <HAL_UART_TxCpltCallback+0x24>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d103      	bne.n	80013b2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_UART_TxCpltCallback+0x28>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2000      	movs	r0, #0
 80013b0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40004400 	.word	0x40004400
 80013c0:	20000174 	.word	0x20000174

080013c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_UART_RxCpltCallback+0x44>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d113      	bne.n	80013fe <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_UART_RxCpltCallback+0x48>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <HAL_UART_RxCpltCallback+0x30>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_UART_RxCpltCallback+0x48>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	2101      	movs	r1, #1
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <HAL_UART_RxCpltCallback+0x4c>)
 80013f2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	4906      	ldr	r1, [pc, #24]	; (8001410 <HAL_UART_RxCpltCallback+0x4c>)
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f003 fc67 	bl	8004ccc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40004400 	.word	0x40004400
 800140c:	20000178 	.word	0x20000178
 8001410:	20000170 	.word	0x20000170

08001414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001416:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001418:	f7ff fb9a 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001442:	f00a fd07 	bl	800be54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001446:	f7ff f8ca 	bl	80005de <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   r0, =_estack
 800144c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001458:	0800c3a8 	.word	0x0800c3a8
  ldr r2, =_sbss
 800145c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001460:	20000890 	.word	0x20000890

08001464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>

08001466 <LL_AHB2_GRP1_EnableClock>:
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4013      	ands	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
	...

08001498 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80014ac:	2004      	movs	r0, #4
 80014ae:	f7ff ffda 	bl	8001466 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80014b2:	2310      	movs	r3, #16
 80014b4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4812      	ldr	r0, [pc, #72]	; (8001510 <BSP_RADIO_Init+0x78>)
 80014c8:	f000 fdfe 	bl	80020c8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80014cc:	2320      	movs	r3, #32
 80014ce:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	480e      	ldr	r0, [pc, #56]	; (8001510 <BSP_RADIO_Init+0x78>)
 80014d6:	f000 fdf7 	bl	80020c8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80014da:	2308      	movs	r3, #8
 80014dc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	480b      	ldr	r0, [pc, #44]	; (8001510 <BSP_RADIO_Init+0x78>)
 80014e4:	f000 fdf0 	bl	80020c8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80014e8:	2200      	movs	r2, #0
 80014ea:	2120      	movs	r1, #32
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <BSP_RADIO_Init+0x78>)
 80014ee:	f001 f819 	bl	8002524 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80014f2:	2200      	movs	r2, #0
 80014f4:	2110      	movs	r1, #16
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <BSP_RADIO_Init+0x78>)
 80014f8:	f001 f814 	bl	8002524 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80014fc:	2200      	movs	r2, #0
 80014fe:	2108      	movs	r1, #8
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <BSP_RADIO_Init+0x78>)
 8001502:	f001 f80f 	bl	8002524 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	48000800 	.word	0x48000800

08001514 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d84b      	bhi.n	80015bc <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001524:	a201      	add	r2, pc, #4	; (adr r2, 800152c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	0800153d 	.word	0x0800153d
 8001530:	0800155d 	.word	0x0800155d
 8001534:	0800157d 	.word	0x0800157d
 8001538:	0800159d 	.word	0x0800159d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2108      	movs	r1, #8
 8001540:	4821      	ldr	r0, [pc, #132]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001542:	f000 ffef 	bl	8002524 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2110      	movs	r1, #16
 800154a:	481f      	ldr	r0, [pc, #124]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800154c:	f000 ffea 	bl	8002524 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2120      	movs	r1, #32
 8001554:	481c      	ldr	r0, [pc, #112]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001556:	f000 ffe5 	bl	8002524 <HAL_GPIO_WritePin>
      break;      
 800155a:	e030      	b.n	80015be <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	2108      	movs	r1, #8
 8001560:	4819      	ldr	r0, [pc, #100]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001562:	f000 ffdf 	bl	8002524 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001566:	2201      	movs	r2, #1
 8001568:	2110      	movs	r1, #16
 800156a:	4817      	ldr	r0, [pc, #92]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800156c:	f000 ffda 	bl	8002524 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001570:	2200      	movs	r2, #0
 8001572:	2120      	movs	r1, #32
 8001574:	4814      	ldr	r0, [pc, #80]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001576:	f000 ffd5 	bl	8002524 <HAL_GPIO_WritePin>
      break;
 800157a:	e020      	b.n	80015be <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2108      	movs	r1, #8
 8001580:	4811      	ldr	r0, [pc, #68]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001582:	f000 ffcf 	bl	8002524 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001586:	2201      	movs	r2, #1
 8001588:	2110      	movs	r1, #16
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800158c:	f000 ffca 	bl	8002524 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001590:	2201      	movs	r2, #1
 8001592:	2120      	movs	r1, #32
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001596:	f000 ffc5 	bl	8002524 <HAL_GPIO_WritePin>
      break;
 800159a:	e010      	b.n	80015be <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2108      	movs	r1, #8
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80015a2:	f000 ffbf 	bl	8002524 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80015a6:	2200      	movs	r2, #0
 80015a8:	2110      	movs	r1, #16
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80015ac:	f000 ffba 	bl	8002524 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80015b0:	2201      	movs	r2, #1
 80015b2:	2120      	movs	r1, #32
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80015b6:	f000 ffb5 	bl	8002524 <HAL_GPIO_WritePin>
      break;
 80015ba:	e000      	b.n	80015be <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80015bc:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	48000800 	.word	0x48000800

080015cc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001606:	230f      	movs	r3, #15
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	e001      	b.n	8001610 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800160c:	2316      	movs	r3, #22
 800160e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001610:	68fb      	ldr	r3, [r7, #12]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6053      	str	r3, [r2, #4]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	e0042000 	.word	0xe0042000

08001638 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8001642:	f023 0302 	bic.w	r3, r3, #2
 8001646:	6053      	str	r3, [r2, #4]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	e0042000 	.word	0xe0042000

08001654 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a03      	ldr	r2, [pc, #12]	; (800166c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6053      	str	r3, [r2, #4]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	e0042000 	.word	0xe0042000

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167a:	2003      	movs	r0, #3
 800167c:	f000 f8f8 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001680:	f001 ff70 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8001684:	4603      	mov	r3, r0
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_Init+0x3c>)
 8001688:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168a:	200f      	movs	r0, #15
 800168c:	f7ff f9e0 	bl	8000a50 <HAL_InitTick>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	e001      	b.n	80016a0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800169c:	f7ff f8c2 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000000 	.word	0x20000000

080016b0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80016b4:	f7ff ffb2 	bl	800161c <LL_DBGMCU_DisableDBGSleepMode>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80016c0:	f7ff ffba 	bl	8001638 <LL_DBGMCU_DisableDBGStopMode>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80016cc:	f7ff ffc2 	bl	8001654 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db12      	blt.n	80017a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	490a      	ldr	r1, [pc, #40]	; (80017b4 <__NVIC_DisableIRQ+0x44>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	3320      	adds	r3, #32
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800179c:	f3bf 8f4f 	dsb	sy
}
 80017a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017a2:	f3bf 8f6f 	isb	sy
}
 80017a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff2b 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ffb4 	bl	800180c <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff83 	bl	80017b8 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff43 	bl	8001770 <__NVIC_DisableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e08e      	b.n	8001a24 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_DMA_Init+0x138>)
 800190e:	429a      	cmp	r2, r3
 8001910:	d80f      	bhi.n	8001932 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	4b45      	ldr	r3, [pc, #276]	; (8001a30 <HAL_DMA_Init+0x13c>)
 800191a:	4413      	add	r3, r2
 800191c:	4a45      	ldr	r2, [pc, #276]	; (8001a34 <HAL_DMA_Init+0x140>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	009a      	lsls	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a42      	ldr	r2, [pc, #264]	; (8001a38 <HAL_DMA_Init+0x144>)
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
 8001930:	e00e      	b.n	8001950 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <HAL_DMA_Init+0x148>)
 800193a:	4413      	add	r3, r2
 800193c:	4a3d      	ldr	r2, [pc, #244]	; (8001a34 <HAL_DMA_Init+0x140>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a3c      	ldr	r2, [pc, #240]	; (8001a40 <HAL_DMA_Init+0x14c>)
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800196a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fb24 	bl	8001ff0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019b0:	d102      	bne.n	80019b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d010      	beq.n	80019fa <HAL_DMA_Init+0x106>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d80c      	bhi.n	80019fa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb4d 	bl	8002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	e008      	b.n	8001a0c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020407 	.word	0x40020407
 8001a30:	bffdfff8 	.word	0xbffdfff8
 8001a34:	cccccccd 	.word	0xcccccccd
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	bffdfbf8 	.word	0xbffdfbf8
 8001a40:	40020400 	.word	0x40020400

08001a44 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07b      	b.n	8001b4e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <HAL_DMA_DeInit+0x114>)
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d80f      	bhi.n	8001a92 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_DMA_DeInit+0x118>)
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a38      	ldr	r2, [pc, #224]	; (8001b60 <HAL_DMA_DeInit+0x11c>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	009a      	lsls	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a35      	ldr	r2, [pc, #212]	; (8001b64 <HAL_DMA_DeInit+0x120>)
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a90:	e00e      	b.n	8001ab0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_DMA_DeInit+0x124>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <HAL_DMA_DeInit+0x11c>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	009a      	lsls	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <HAL_DMA_DeInit+0x128>)
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f003 021c 	and.w	r2, r3, #28
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aca:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fa8f 	bl	8001ff0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ae2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00f      	beq.n	8001b0c <HAL_DMA_DeInit+0xc8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d80b      	bhi.n	8001b0c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fac3 	bl	8002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b0a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020407 	.word	0x40020407
 8001b5c:	bffdfff8 	.word	0xbffdfff8
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	40020000 	.word	0x40020000
 8001b68:	bffdfbf8 	.word	0xbffdfbf8
 8001b6c:	40020400 	.word	0x40020400

08001b70 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA_Start_IT+0x20>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e069      	b.n	8001c64 <HAL_DMA_Start_IT+0xf4>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d155      	bne.n	8001c50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f9d3 	bl	8001f74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 020e 	orr.w	r2, r2, #14
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e00f      	b.n	8001c08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 020a 	orr.w	r2, r2, #10
 8001c06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e008      	b.n	8001c62 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e04f      	b.n	8001d1e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d008      	beq.n	8001c9c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e040      	b.n	8001d1e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 020e 	bic.w	r2, r2, #14
 8001caa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	f003 021c 	and.w	r2, r3, #28
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ce8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00c      	beq.n	8001d0c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d005      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2204      	movs	r2, #4
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	e047      	b.n	8001ddc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020e 	bic.w	r2, r2, #14
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f003 021c 	and.w	r2, r3, #28
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
    }
  }
  return status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f003 031c 	and.w	r3, r3, #28
 8001e08:	2204      	movs	r2, #4
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d027      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x7c>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d022      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0204 	bic.w	r2, r2, #4
 8001e3a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f003 021c 	and.w	r2, r3, #28
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	2104      	movs	r1, #4
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8081 	beq.w	8001f5c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001e62:	e07b      	b.n	8001f5c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f003 031c 	and.w	r3, r3, #28
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d03d      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x10c>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d038      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 020a 	bic.w	r2, r2, #10
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_DMA_IRQHandler+0x180>)
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d909      	bls.n	8001ec8 <HAL_DMA_IRQHandler+0xe0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f003 031c 	and.w	r3, r3, #28
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <HAL_DMA_IRQHandler+0x184>)
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	6053      	str	r3, [r2, #4]
 8001ec6:	e008      	b.n	8001eda <HAL_DMA_IRQHandler+0xf2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f003 031c 	and.w	r3, r3, #28
 8001ed0:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_DMA_IRQHandler+0x188>)
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d038      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001ef2:	e033      	b.n	8001f5c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f003 031c 	and.w	r3, r3, #28
 8001efc:	2208      	movs	r2, #8
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02a      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x176>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d025      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 020e 	bic.w	r2, r2, #14
 8001f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f003 021c 	and.w	r2, r3, #28
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
}
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40020080 	.word	0x40020080
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020000 	.word	0x40020000

08001f74 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f003 021c 	and.w	r2, r3, #28
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d108      	bne.n	8001fd4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fd2:	e007      	b.n	8001fe4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	60da      	str	r2, [r3, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
	...

08001ff0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002000:	429a      	cmp	r2, r3
 8002002:	d813      	bhi.n	800202c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002010:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3b08      	subs	r3, #8
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e011      	b.n	8002050 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	009a      	lsls	r2, r3, #2
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002036:	4413      	add	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3b08      	subs	r3, #8
 8002044:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	3307      	adds	r3, #7
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002054:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	2201      	movs	r2, #1
 800205e:	409a      	lsls	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40020407 	.word	0x40020407
 8002074:	cccccccd 	.word	0xcccccccd
 8002078:	4002081c 	.word	0x4002081c
 800207c:	40020880 	.word	0x40020880

08002080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002090:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2201      	movs	r2, #1
 80020b0:	409a      	lsls	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	1000823f 	.word	0x1000823f
 80020c4:	40020940 	.word	0x40020940

080020c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	e140      	b.n	800235a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8132 	beq.w	8002354 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d005      	beq.n	8002108 <HAL_GPIO_Init+0x40>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d130      	bne.n	800216a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800213e:	2201      	movs	r2, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 0201 	and.w	r2, r3, #1
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b03      	cmp	r3, #3
 8002174:	d017      	beq.n	80021a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d123      	bne.n	80021fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 808c 	beq.w	8002354 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <HAL_GPIO_Init+0x2b0>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	2207      	movs	r2, #7
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002266:	d00d      	beq.n	8002284 <HAL_GPIO_Init+0x1bc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a44      	ldr	r2, [pc, #272]	; (800237c <HAL_GPIO_Init+0x2b4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d007      	beq.n	8002280 <HAL_GPIO_Init+0x1b8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a43      	ldr	r2, [pc, #268]	; (8002380 <HAL_GPIO_Init+0x2b8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d101      	bne.n	800227c <HAL_GPIO_Init+0x1b4>
 8002278:	2302      	movs	r3, #2
 800227a:	e004      	b.n	8002286 <HAL_GPIO_Init+0x1be>
 800227c:	2307      	movs	r3, #7
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x1be>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_GPIO_Init+0x1be>
 8002284:	2300      	movs	r3, #0
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4093      	lsls	r3, r2
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002296:	4938      	ldr	r1, [pc, #224]	; (8002378 <HAL_GPIO_Init+0x2b0>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 80022fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 8002328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_GPIO_Init+0x2bc>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	f47f aeb7 	bne.w	80020d8 <HAL_GPIO_Init+0x10>
  }
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40010000 	.word	0x40010000
 800237c:	48000400 	.word	0x48000400
 8002380:	48000800 	.word	0x48000800
 8002384:	58000800 	.word	0x58000800

08002388 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002396:	e0af      	b.n	80024f8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002398:	2201      	movs	r2, #1
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a2 	beq.w	80024f2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80023ae:	4a59      	ldr	r2, [pc, #356]	; (8002514 <HAL_GPIO_DeInit+0x18c>)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	2207      	movs	r2, #7
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023d6:	d00d      	beq.n	80023f4 <HAL_GPIO_DeInit+0x6c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_DeInit+0x190>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_DeInit+0x68>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_DeInit+0x194>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_GPIO_DeInit+0x64>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e004      	b.n	80023f6 <HAL_GPIO_DeInit+0x6e>
 80023ec:	2307      	movs	r3, #7
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_DeInit+0x6e>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_GPIO_DeInit+0x6e>
 80023f4:	2300      	movs	r3, #0
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	f002 0203 	and.w	r2, r2, #3
 80023fc:	0092      	lsls	r2, r2, #2
 80023fe:	4093      	lsls	r3, r2
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	429a      	cmp	r2, r3
 8002404:	d136      	bne.n	8002474 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002406:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_GPIO_DeInit+0x198>)
 8002408:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	4943      	ldr	r1, [pc, #268]	; (8002520 <HAL_GPIO_DeInit+0x198>)
 8002412:	4013      	ands	r3, r2
 8002414:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_GPIO_DeInit+0x198>)
 800241a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	493f      	ldr	r1, [pc, #252]	; (8002520 <HAL_GPIO_DeInit+0x198>)
 8002424:	4013      	ands	r3, r2
 8002426:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_GPIO_DeInit+0x198>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	493b      	ldr	r1, [pc, #236]	; (8002520 <HAL_GPIO_DeInit+0x198>)
 8002434:	4013      	ands	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_GPIO_DeInit+0x198>)
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	4937      	ldr	r1, [pc, #220]	; (8002520 <HAL_GPIO_DeInit+0x198>)
 8002442:	4013      	ands	r3, r2
 8002444:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	2207      	movs	r2, #7
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002456:	4a2f      	ldr	r2, [pc, #188]	; (8002514 <HAL_GPIO_DeInit+0x18c>)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43da      	mvns	r2, r3
 8002466:	482b      	ldr	r0, [pc, #172]	; (8002514 <HAL_GPIO_DeInit+0x18c>)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	400a      	ands	r2, r1
 800246e:	3302      	adds	r3, #2
 8002470:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2103      	movs	r1, #3
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	08da      	lsrs	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3208      	adds	r2, #8
 8002490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	08d2      	lsrs	r2, r2, #3
 80024a8:	4019      	ands	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3208      	adds	r2, #8
 80024ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2103      	movs	r1, #3
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	401a      	ands	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	2101      	movs	r1, #1
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2103      	movs	r1, #3
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	401a      	ands	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60da      	str	r2, [r3, #12]
    }

    position++;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	f47f af49 	bne.w	8002398 <HAL_GPIO_DeInit+0x10>
  }
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40010000 	.word	0x40010000
 8002518:	48000400 	.word	0x48000400
 800251c:	48000800 	.word	0x48000800
 8002520:	58000800 	.word	0x58000800

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002540:	e002      	b.n	8002548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43d9      	mvns	r1, r3
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	400b      	ands	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <HAL_PWR_EnableBkUpAccess+0x18>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_PWR_EnableBkUpAccess+0x18>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	58000400 	.word	0x58000400

080025a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_PWREx_GetVoltageRange+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	58000400 	.word	0x58000400

080025b8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c8:	d101      	bne.n	80025ce <LL_PWR_IsEnabledBkUpAccess+0x16>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	58000400 	.word	0x58000400

080025dc <LL_RCC_HSE_EnableTcxo>:
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_HSE_DisableTcxo>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002606:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002626:	d101      	bne.n	800262c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <LL_RCC_HSE_Enable>:
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_RCC_HSE_Disable>:
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <LL_RCC_HSE_IsReady>:
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002680:	d101      	bne.n	8002686 <LL_RCC_HSE_IsReady+0x18>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_RCC_HSE_IsReady+0x1a>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <LL_RCC_HSI_Enable>:
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <LL_RCC_HSI_Disable>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <LL_RCC_HSI_IsReady>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	d101      	bne.n	80026e0 <LL_RCC_HSI_IsReady+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_RCC_HSI_IsReady+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <LL_RCC_HSI_SetCalibTrimming>:
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <LL_RCC_LSE_IsReady>:
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d101      	bne.n	800272a <LL_RCC_LSE_IsReady+0x18>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_RCC_LSE_IsReady+0x1a>
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <LL_RCC_LSI_Enable>:
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <LL_RCC_LSI_Disable>:
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <LL_RCC_LSI_IsReady>:
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d101      	bne.n	800278c <LL_RCC_LSI_IsReady+0x18>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <LL_RCC_LSI_IsReady+0x1a>
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <LL_RCC_MSI_Enable>:
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6013      	str	r3, [r2, #0]
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_MSI_Disable>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6013      	str	r3, [r2, #0]
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <LL_RCC_MSI_IsReady>:
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d101      	bne.n	80027e4 <LL_RCC_MSI_IsReady+0x16>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_RCC_MSI_IsReady+0x18>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d101      	bne.n	8002804 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <LL_RCC_MSI_GetRange>:
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002830:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <LL_RCC_MSI_SetCalibTrimming>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <LL_RCC_SetSysClkSource>:
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <LL_RCC_GetSysClkSource>:
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <LL_RCC_SetAHBPrescaler>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_SetAHB3Prescaler>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028d6:	f023 020f 	bic.w	r2, r3, #15
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_SetAPB1Prescaler>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <LL_RCC_SetAPB2Prescaler>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800292a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <LL_RCC_GetAHBPrescaler>:
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <LL_RCC_GetAHB3Prescaler>:
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <LL_RCC_GetAPB1Prescaler>:
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_RCC_GetAPB2Prescaler>:
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ac:	6013      	str	r3, [r2, #0]
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e4:	d101      	bne.n	80029ea <LL_RCC_PLL_IsReady+0x18>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_RCC_PLL_IsReady+0x1a>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d101      	bne.n	8002a66 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d101      	bne.n	8002a8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa6:	d101      	bne.n	8002aac <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ac8:	d101      	bne.n	8002ace <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e36f      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aea:	f7ff fece 	bl	800288a <LL_RCC_GetSysClkSource>
 8002aee:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af0:	f7ff ffa2 	bl	8002a38 <LL_RCC_PLL_GetMainSource>
 8002af4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80c4 	beq.w	8002c8c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x3e>
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d176      	bne.n	8002bfe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d173      	bne.n	8002bfe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e353      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_OscConfig+0x68>
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b3e:	e006      	b.n	8002b4e <HAL_RCC_OscConfig+0x76>
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d222      	bcs.n	8002b98 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fd3c 	bl	80035d4 <RCC_SetFlashLatencyFromMSIRange>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e331      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fe53 	bl	800283c <LL_RCC_MSI_SetCalibTrimming>
 8002b96:	e021      	b.n	8002bdc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba2:	f043 0308 	orr.w	r3, r3, #8
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fe3a 	bl	800283c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fd01 	bl	80035d4 <RCC_SetFlashLatencyFromMSIRange>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e2f6      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bdc:	f000 fcc2 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4aa7      	ldr	r2, [pc, #668]	; (8002e80 <HAL_RCC_OscConfig+0x3a8>)
 8002be4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002be6:	4ba7      	ldr	r3, [pc, #668]	; (8002e84 <HAL_RCC_OscConfig+0x3ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd ff30 	bl	8000a50 <HAL_InitTick>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d047      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	e2e5      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d02c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c06:	f7ff fdc6 	bl	8002796 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c0a:	f7fd ff2b 	bl	8000a64 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c12:	f7fd ff27 	bl	8000a64 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e2d2      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c24:	f7ff fdd3 	bl	80027ce <LL_RCC_MSI_IsReady>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f1      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c50:	4313      	orrs	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fdef 	bl	800283c <LL_RCC_MSI_SetCalibTrimming>
 8002c5e:	e015      	b.n	8002c8c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c60:	f7ff fda7 	bl	80027b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c64:	f7fd fefe 	bl	8000a64 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c6c:	f7fd fefa 	bl	8000a64 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e2a5      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c7e:	f7ff fda6 	bl	80027ce <LL_RCC_MSI_IsReady>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f1      	bne.n	8002c6c <HAL_RCC_OscConfig+0x194>
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c8a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d058      	beq.n	8002d4a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x1d2>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d108      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d14b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e289      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd4:	d102      	bne.n	8002cdc <HAL_RCC_OscConfig+0x204>
 8002cd6:	f7ff fcae 	bl	8002636 <LL_RCC_HSE_Enable>
 8002cda:	e00d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x220>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002ce4:	d104      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x218>
 8002ce6:	f7ff fc79 	bl	80025dc <LL_RCC_HSE_EnableTcxo>
 8002cea:	f7ff fca4 	bl	8002636 <LL_RCC_HSE_Enable>
 8002cee:	e003      	b.n	8002cf8 <HAL_RCC_OscConfig+0x220>
 8002cf0:	f7ff fcaf 	bl	8002652 <LL_RCC_HSE_Disable>
 8002cf4:	f7ff fc80 	bl	80025f8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d012      	beq.n	8002d26 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fd feb0 	bl	8000a64 <HAL_GetTick>
 8002d04:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fd feac 	bl	8000a64 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e257      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d1a:	f7ff fca8 	bl	800266e <LL_RCC_HSE_IsReady>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f1      	beq.n	8002d08 <HAL_RCC_OscConfig+0x230>
 8002d24:	e011      	b.n	8002d4a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fd fe9d 	bl	8000a64 <HAL_GetTick>
 8002d2a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fd fe99 	bl	8000a64 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e244      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d40:	f7ff fc95 	bl	800266e <LL_RCC_HSE_IsReady>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f1      	bne.n	8002d2e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d046      	beq.n	8002de4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x290>
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d10e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e22a      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fcb6 	bl	80026ea <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d7e:	e031      	b.n	8002de4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d019      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	f7ff fc82 	bl	8002690 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fd fe6a 	bl	8000a64 <HAL_GetTick>
 8002d90:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fd fe66 	bl	8000a64 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e211      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002da6:	f7ff fc8f 	bl	80026c8 <LL_RCC_HSI_IsReady>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f1      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fc98 	bl	80026ea <LL_RCC_HSI_SetCalibTrimming>
 8002dba:	e013      	b.n	8002de4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbc:	f7ff fc76 	bl	80026ac <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fd fe50 	bl	8000a64 <HAL_GetTick>
 8002dc4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fd fe4c 	bl	8000a64 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1f7      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dda:	f7ff fc75 	bl	80026c8 <LL_RCC_HSI_IsReady>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f1      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d06e      	beq.n	8002ece <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d056      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e00:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d031      	beq.n	8002e74 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e1d0      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d013      	beq.n	8002e5a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e32:	f7ff fc8f 	bl	8002754 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e36:	f7fd fe15 	bl	8000a64 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fd fe11 	bl	8000a64 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b11      	cmp	r3, #17
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1bc      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e50:	f7ff fc90 	bl	8002774 <LL_RCC_LSI_IsReady>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f1      	bne.n	8002e3e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e62:	f023 0210 	bic.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e74:	f7ff fc5e 	bl	8002734 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e78:	f7fd fdf4 	bl	8000a64 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e7e:	e00c      	b.n	8002e9a <HAL_RCC_OscConfig+0x3c2>
 8002e80:	20000000 	.word	0x20000000
 8002e84:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fd fdec 	bl	8000a64 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b11      	cmp	r3, #17
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e197      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e9a:	f7ff fc6b 	bl	8002774 <LL_RCC_LSI_IsReady>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f1      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3b0>
 8002ea4:	e013      	b.n	8002ece <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea6:	f7ff fc55 	bl	8002754 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fd fddb 	bl	8000a64 <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fd fdd7 	bl	8000a64 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b11      	cmp	r3, #17
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e182      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ec4:	f7ff fc56 	bl	8002774 <LL_RCC_LSI_IsReady>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f1      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80d8 	beq.w	800308c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002edc:	f7ff fb6c 	bl	80025b8 <LL_PWR_IsEnabledBkUpAccess>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ee6:	f7ff fb4d 	bl	8002584 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fd fdbb 	bl	8000a64 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fd fdb7 	bl	8000a64 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e162      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f04:	f7ff fb58 	bl	80025b8 <LL_PWR_IsEnabledBkUpAccess>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f1      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07b      	beq.n	800300e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b85      	cmp	r3, #133	; 0x85
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fd93 	bl	8000a64 <HAL_GetTick>
 8002f3e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fd fd85 	bl	8000a64 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e12e      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f6c:	f7ff fbd1 	bl	8002712 <LL_RCC_LSE_IsReady>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ef      	beq.n	8002f56 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b81      	cmp	r3, #129	; 0x81
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b85      	cmp	r3, #133	; 0x85
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fd fd6d 	bl	8000a64 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fd fd5f 	bl	8000a64 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e108      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ec      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002fc8:	e060      	b.n	800308c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fd fd4b 	bl	8000a64 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fd fd3d 	bl	8000a64 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0e6      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1ec      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x50e>
 800300c:	e03e      	b.n	800308c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fd fd29 	bl	8000a64 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fd fd1b 	bl	8000a64 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0c4      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ec      	bne.n	800302a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fd fd08 	bl	8000a64 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fd fcfa 	bl	8000a64 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0a3      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003082:	f7ff fb46 	bl	8002712 <LL_RCC_LSE_IsReady>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ef      	bne.n	800306c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8099 	beq.w	80031c8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d06c      	beq.n	8003176 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d14b      	bne.n	800313c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	f7ff fc87 	bl	80029b6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fcdc 	bl	8000a64 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fd fcd8 	bl	8000a64 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b0a      	cmp	r3, #10
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e083      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80030c2:	f7ff fc86 	bl	80029d2 <LL_RCC_PLL_IsReady>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f1      	bne.n	80030b0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <HAL_RCC_OscConfig+0x6fc>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030e4:	0212      	lsls	r2, r2, #8
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030f8:	430a      	orrs	r2, r1
 80030fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003102:	f7ff fc4a 	bl	800299a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003114:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fd fca5 	bl	8000a64 <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7fd fca1 	bl	8000a64 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b0a      	cmp	r3, #10
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e04c      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003130:	f7ff fc4f 	bl	80029d2 <LL_RCC_PLL_IsReady>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f1      	beq.n	800311e <HAL_RCC_OscConfig+0x646>
 800313a:	e045      	b.n	80031c8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	f7ff fc3b 	bl	80029b6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fd fc90 	bl	8000a64 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd fc8c 	bl	8000a64 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b0a      	cmp	r3, #10
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e037      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800315a:	f7ff fc3a 	bl	80029d2 <LL_RCC_PLL_IsReady>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f1      	bne.n	8003148 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCC_OscConfig+0x700>)
 8003170:	4013      	ands	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]
 8003174:	e028      	b.n	80031c8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e023      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	429a      	cmp	r2, r3
 8003196:	d115      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d10e      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	11c1808c 	.word	0x11c1808c
 80031d8:	eefefffc 	.word	0xeefefffc

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e10f      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b89      	ldr	r3, [pc, #548]	; (8003418 <HAL_RCC_ClockConfig+0x23c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d91b      	bls.n	8003236 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b86      	ldr	r3, [pc, #536]	; (8003418 <HAL_RCC_ClockConfig+0x23c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 0207 	bic.w	r2, r3, #7
 8003206:	4984      	ldr	r1, [pc, #528]	; (8003418 <HAL_RCC_ClockConfig+0x23c>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320e:	f7fd fc29 	bl	8000a64 <HAL_GetTick>
 8003212:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003214:	e008      	b.n	8003228 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003216:	f7fd fc25 	bl	8000a64 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0f3      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003228:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <HAL_RCC_ClockConfig+0x23c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d1ef      	bne.n	8003216 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fb2a 	bl	80028a0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800324c:	f7fd fc0a 	bl	8000a64 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003254:	f7fd fc06 	bl	8000a64 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0d4      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003266:	f7ff fbf2 	bl	8002a4e <LL_RCC_IsActiveFlag_HPRE>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f1      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fb20 	bl	80028c6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003286:	f7fd fbed 	bl	8000a64 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800328e:	f7fd fbe9 	bl	8000a64 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0b7      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032a0:	f7ff fbe6 	bl	8002a70 <LL_RCC_IsActiveFlag_SHDHPRE>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f1      	beq.n	800328e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fb19 	bl	80028f2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032c0:	f7fd fbd0 	bl	8000a64 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032c8:	f7fd fbcc 	bl	8000a64 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e09a      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80032da:	f7ff fbdb 	bl	8002a94 <LL_RCC_IsActiveFlag_PPRE1>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f1      	beq.n	80032c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d017      	beq.n	8003320 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fb0e 	bl	8002918 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032fc:	f7fd fbb2 	bl	8000a64 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003304:	f7fd fbae 	bl	8000a64 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e07c      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003316:	f7ff fbce 	bl	8002ab6 <LL_RCC_IsActiveFlag_PPRE2>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f1      	beq.n	8003304 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d043      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d106      	bne.n	8003342 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003334:	f7ff f99b 	bl	800266e <LL_RCC_HSE_IsReady>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11e      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e066      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d106      	bne.n	8003358 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800334a:	f7ff fb42 	bl	80029d2 <LL_RCC_PLL_IsReady>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d113      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e05b      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003360:	f7ff fa35 	bl	80027ce <LL_RCC_MSI_IsReady>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d108      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e050      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800336e:	f7ff f9ab 	bl	80026c8 <LL_RCC_HSI_IsReady>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e049      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fa6f 	bl	8002864 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003386:	f7fd fb6d 	bl	8000a64 <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338e:	f7fd fb69 	bl	8000a64 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e035      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a4:	f7ff fa71 	bl	800288a <LL_RCC_GetSysClkSource>
 80033a8:	4602      	mov	r2, r0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1ec      	bne.n	800338e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b4:	4b18      	ldr	r3, [pc, #96]	; (8003418 <HAL_RCC_ClockConfig+0x23c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d21b      	bcs.n	80033fa <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_RCC_ClockConfig+0x23c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 0207 	bic.w	r2, r3, #7
 80033ca:	4913      	ldr	r1, [pc, #76]	; (8003418 <HAL_RCC_ClockConfig+0x23c>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d2:	f7fd fb47 	bl	8000a64 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033da:	f7fd fb43 	bl	8000a64 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e011      	b.n	8003410 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_RCC_ClockConfig+0x23c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d1ef      	bne.n	80033da <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033fa:	f000 f8b3 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80033fe:	4603      	mov	r3, r0
 8003400:	4a06      	ldr	r2, [pc, #24]	; (800341c <HAL_RCC_ClockConfig+0x240>)
 8003402:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_ClockConfig+0x244>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fb21 	bl	8000a50 <HAL_InitTick>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58004000 	.word	0x58004000
 800341c:	20000000 	.word	0x20000000
 8003420:	20000004 	.word	0x20000004

08003424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003432:	f7ff fa2a 	bl	800288a <LL_RCC_GetSysClkSource>
 8003436:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003438:	f7ff fafe 	bl	8002a38 <LL_RCC_PLL_GetMainSource>
 800343c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x2c>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d139      	bne.n	80034be <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d136      	bne.n	80034be <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003450:	f7ff f9cd 	bl	80027ee <LL_RCC_MSI_IsEnabledRangeSelect>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d115      	bne.n	8003486 <HAL_RCC_GetSysClockFreq+0x62>
 800345a:	f7ff f9c8 	bl	80027ee <LL_RCC_MSI_IsEnabledRangeSelect>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x4e>
 8003464:	f7ff f9d3 	bl	800280e <LL_RCC_MSI_GetRange>
 8003468:	4603      	mov	r3, r0
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	e005      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x5a>
 8003472:	f7ff f9d7 	bl	8002824 <LL_RCC_MSI_GetRangeAfterStandby>
 8003476:	4603      	mov	r3, r0
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	4a36      	ldr	r2, [pc, #216]	; (8003558 <HAL_RCC_GetSysClockFreq+0x134>)
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	e014      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x8c>
 8003486:	f7ff f9b2 	bl	80027ee <LL_RCC_MSI_IsEnabledRangeSelect>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_GetSysClockFreq+0x7a>
 8003490:	f7ff f9bd 	bl	800280e <LL_RCC_MSI_GetRange>
 8003494:	4603      	mov	r3, r0
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	e005      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x86>
 800349e:	f7ff f9c1 	bl	8002824 <LL_RCC_MSI_GetRangeAfterStandby>
 80034a2:	4603      	mov	r3, r0
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <HAL_RCC_GetSysClockFreq+0x134>)
 80034ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034bc:	e012      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_GetSysClockFreq+0x138>)
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	e00c      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d109      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034d0:	f7ff f8a0 	bl	8002614 <LL_RCC_HSE_IsEnabledDiv2>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_GetSysClockFreq+0x138>)
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e001      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80034e0:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034e2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e4:	f7ff f9d1 	bl	800288a <LL_RCC_GetSysClkSource>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d12f      	bne.n	800354e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80034ee:	f7ff faa3 	bl	8002a38 <LL_RCC_PLL_GetMainSource>
 80034f2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0xde>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d003      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0xe4>
 8003500:	e00d      	b.n	800351e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_RCC_GetSysClockFreq+0x138>)
 8003504:	60fb      	str	r3, [r7, #12]
        break;
 8003506:	e00d      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003508:	f7ff f884 	bl	8002614 <LL_RCC_HSE_IsEnabledDiv2>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_RCC_GetSysClockFreq+0x138>)
 8003514:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003516:	e005      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_GetSysClockFreq+0x13c>)
 800351a:	60fb      	str	r3, [r7, #12]
        break;
 800351c:	e002      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	60fb      	str	r3, [r7, #12]
        break;
 8003522:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003524:	f7ff fa66 	bl	80029f4 <LL_RCC_PLL_GetN>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	fb03 f402 	mul.w	r4, r3, r2
 8003530:	f7ff fa77 	bl	8002a22 <LL_RCC_PLL_GetDivider>
 8003534:	4603      	mov	r3, r0
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	3301      	adds	r3, #1
 800353a:	fbb4 f4f3 	udiv	r4, r4, r3
 800353e:	f7ff fa65 	bl	8002a0c <LL_RCC_PLL_GetR>
 8003542:	4603      	mov	r3, r0
 8003544:	0f5b      	lsrs	r3, r3, #29
 8003546:	3301      	adds	r3, #1
 8003548:	fbb4 f3f3 	udiv	r3, r4, r3
 800354c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800354e:	697b      	ldr	r3, [r7, #20]
}
 8003550:	4618      	mov	r0, r3
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	0800c190 	.word	0x0800c190
 800355c:	00f42400 	.word	0x00f42400
 8003560:	01e84800 	.word	0x01e84800

08003564 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b598      	push	{r3, r4, r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003568:	f7ff ff5c 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 800356c:	4604      	mov	r4, r0
 800356e:	f7ff f9e6 	bl	800293e <LL_RCC_GetAHBPrescaler>
 8003572:	4603      	mov	r3, r0
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	4a03      	ldr	r2, [pc, #12]	; (8003588 <HAL_RCC_GetHCLKFreq+0x24>)
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd98      	pop	{r3, r4, r7, pc}
 8003588:	0800c130 	.word	0x0800c130

0800358c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b598      	push	{r3, r4, r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003590:	f7ff ffe8 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003594:	4604      	mov	r4, r0
 8003596:	f7ff f9ea 	bl	800296e <LL_RCC_GetAPB1Prescaler>
 800359a:	4603      	mov	r3, r0
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	4a03      	ldr	r2, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd98      	pop	{r3, r4, r7, pc}
 80035ac:	0800c170 	.word	0x0800c170

080035b0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b598      	push	{r3, r4, r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80035b4:	f7ff ffd6 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035b8:	4604      	mov	r4, r0
 80035ba:	f7ff f9e3 	bl	8002984 <LL_RCC_GetAPB2Prescaler>
 80035be:	4603      	mov	r3, r0
 80035c0:	0adb      	lsrs	r3, r3, #11
 80035c2:	4a03      	ldr	r2, [pc, #12]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd98      	pop	{r3, r4, r7, pc}
 80035d0:	0800c170 	.word	0x0800c170

080035d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	4a10      	ldr	r2, [pc, #64]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ea:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80035ec:	f7ff f9b2 	bl	8002954 <LL_RCC_GetAHB3Prescaler>
 80035f0:	4603      	mov	r3, r0
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	4a0c      	ldr	r2, [pc, #48]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80035fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4a09      	ldr	r2, [pc, #36]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0c9c      	lsrs	r4, r3, #18
 8003610:	f7fe ffc6 	bl	80025a0 <HAL_PWREx_GetVoltageRange>
 8003614:	4603      	mov	r3, r0
 8003616:	4619      	mov	r1, r3
 8003618:	4620      	mov	r0, r4
 800361a:	f000 f80b 	bl	8003634 <RCC_SetFlashLatency>
 800361e:	4603      	mov	r3, r0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bd90      	pop	{r4, r7, pc}
 8003628:	0800c190 	.word	0x0800c190
 800362c:	0800c130 	.word	0x0800c130
 8003630:	431bde83 	.word	0x431bde83

08003634 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08e      	sub	sp, #56	; 0x38
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800363e:	4a3a      	ldr	r2, [pc, #232]	; (8003728 <RCC_SetFlashLatency+0xf4>)
 8003640:	f107 0320 	add.w	r3, r7, #32
 8003644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003648:	6018      	str	r0, [r3, #0]
 800364a:	3304      	adds	r3, #4
 800364c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800364e:	4a37      	ldr	r2, [pc, #220]	; (800372c <RCC_SetFlashLatency+0xf8>)
 8003650:	f107 0318 	add.w	r3, r7, #24
 8003654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003658:	6018      	str	r0, [r3, #0]
 800365a:	3304      	adds	r3, #4
 800365c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800365e:	4a34      	ldr	r2, [pc, #208]	; (8003730 <RCC_SetFlashLatency+0xfc>)
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	ca07      	ldmia	r2, {r0, r1, r2}
 8003666:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800366a:	2300      	movs	r3, #0
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003674:	d11b      	bne.n	80036ae <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003676:	2300      	movs	r3, #0
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
 800367a:	e014      	b.n	80036a6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	3338      	adds	r3, #56	; 0x38
 8003682:	443b      	add	r3, r7
 8003684:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4293      	cmp	r3, r2
 800368e:	d807      	bhi.n	80036a0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3338      	adds	r3, #56	; 0x38
 8003696:	443b      	add	r3, r7
 8003698:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800369e:	e021      	b.n	80036e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	3301      	adds	r3, #1
 80036a4:	633b      	str	r3, [r7, #48]	; 0x30
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d9e7      	bls.n	800367c <RCC_SetFlashLatency+0x48>
 80036ac:	e01a      	b.n	80036e4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b2:	e014      	b.n	80036de <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	3338      	adds	r3, #56	; 0x38
 80036ba:	443b      	add	r3, r7
 80036bc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d807      	bhi.n	80036d8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	3338      	adds	r3, #56	; 0x38
 80036ce:	443b      	add	r3, r7
 80036d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036d6:	e005      	b.n	80036e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	3301      	adds	r3, #1
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d9e7      	bls.n	80036b4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <RCC_SetFlashLatency+0x100>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 0207 	bic.w	r2, r3, #7
 80036ec:	4911      	ldr	r1, [pc, #68]	; (8003734 <RCC_SetFlashLatency+0x100>)
 80036ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036f4:	f7fd f9b6 	bl	8000a64 <HAL_GetTick>
 80036f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036fa:	e008      	b.n	800370e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036fc:	f7fd f9b2 	bl	8000a64 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e007      	b.n	800371e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <RCC_SetFlashLatency+0x100>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003718:	429a      	cmp	r2, r3
 800371a:	d1ef      	bne.n	80036fc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3738      	adds	r7, #56	; 0x38
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	0800bedc 	.word	0x0800bedc
 800372c:	0800bee4 	.word	0x0800bee4
 8003730:	0800beec 	.word	0x0800beec
 8003734:	58004000 	.word	0x58004000

08003738 <LL_RCC_LSE_IsReady>:
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d101      	bne.n	8003750 <LL_RCC_LSE_IsReady+0x18>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <LL_RCC_LSE_IsReady+0x1a>
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <LL_RCC_SetUSARTClockSource>:
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003766:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	43db      	mvns	r3, r3
 8003770:	401a      	ands	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <LL_RCC_SetI2SClockSource>:
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <LL_RCC_SetLPUARTClockSource>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <LL_RCC_SetI2CClockSource>:
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80037e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80037f6:	43db      	mvns	r3, r3
 80037f8:	401a      	ands	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <LL_RCC_SetLPTIMClockSource>:
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	041b      	lsls	r3, r3, #16
 800382c:	43db      	mvns	r3, r3
 800382e:	401a      	ands	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <LL_RCC_SetRNGClockSource>:
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800385c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <LL_RCC_SetADCClockSource>:
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <LL_RCC_SetRTCClockSource>:
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <LL_RCC_GetRTCClockSource>:
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <LL_RCC_ForceBackupDomainReset>:
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <LL_RCC_ReleaseBackupDomainReset>:
{
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800390e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
	...

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800392c:	2300      	movs	r3, #0
 800392e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003930:	2300      	movs	r3, #0
 8003932:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d058      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003940:	f7fe fe20 	bl	8002584 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003944:	f7fd f88e 	bl	8000a64 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800394a:	e009      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394c:	f7fd f88a 	bl	8000a64 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d902      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	74fb      	strb	r3, [r7, #19]
        break;
 800395e:	e006      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003960:	4b7b      	ldr	r3, [pc, #492]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396c:	d1ee      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d13c      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003974:	f7ff ffa7 	bl	80038c6 <LL_RCC_GetRTCClockSource>
 8003978:	4602      	mov	r2, r0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397e:	429a      	cmp	r2, r3
 8003980:	d00f      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003990:	f7ff ffa5 	bl	80038de <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003994:	f7ff ffb3 	bl	80038fe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d014      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fd f85a 	bl	8000a64 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80039b2:	e00b      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd f856 	bl	8000a64 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d902      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	74fb      	strb	r3, [r7, #19]
            break;
 80039ca:	e004      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80039cc:	f7ff feb4 	bl	8003738 <LL_RCC_LSE_IsReady>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d1ee      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5b 	bl	800389c <LL_RCC_SetRTCClockSource>
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
 80039ec:	e001      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fea9 	bl	800375a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fe9e 	bl	800375a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fec0 	bl	80037b4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fee6 	bl	8003816 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fedb 	bl	8003816 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fed0 	bl	8003816 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fea9 	bl	80037de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fe9e 	bl	80037de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fe93 	bl	80037de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d011      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fe5e 	bl	800378a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d010      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fea5 	bl	8003848 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d107      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d011      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fea3 	bl	8003872 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b34:	d107      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003b46:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	58000400 	.word	0x58000400

08003b54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d071      	beq.n	8003c4a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fc fe16 	bl	80007ac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b88:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d051      	beq.n	8003c38 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b94:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003b96:	22ca      	movs	r2, #202	; 0xca
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003b9c:	2253      	movs	r2, #83	; 0x53
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fa11 	bl	8003fc8 <RTC_EnterInitMode>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d13f      	bne.n	8003c30 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003bb0:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003bb6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bbe:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	4319      	orrs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	491f      	ldr	r1, [pc, #124]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	491b      	ldr	r1, [pc, #108]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	4915      	ldr	r1, [pc, #84]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa14 	bl	8004030 <RTC_ExitInitMode>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10e      	bne.n	8003c30 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a19      	ldr	r1, [r3, #32]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4319      	orrs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	490a      	ldr	r1, [pc, #40]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_RTC_Init+0x100>)
 8003c32:	22ff      	movs	r2, #255	; 0xff
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
 8003c36:	e001      	b.n	8003c3c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40002800 	.word	0x40002800

08003c58 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_RTC_SetAlarm_IT+0x1e>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e0f3      	b.n	8003e5e <HAL_RTC_SetAlarm_IT+0x206>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003c86:	4b78      	ldr	r3, [pc, #480]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c96:	d06a      	beq.n	8003d6e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d13a      	bne.n	8003d14 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003c9e:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2200      	movs	r2, #0
 8003cae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 f9f5 	bl	80040ac <RTC_ByteToBcd2>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f9ee 	bl	80040ac <RTC_ByteToBcd2>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003cd4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	789b      	ldrb	r3, [r3, #2]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f9e6 	bl	80040ac <RTC_ByteToBcd2>
 8003ce0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ce2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	78db      	ldrb	r3, [r3, #3]
 8003cea:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003cec:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9d8 	bl	80040ac <RTC_ByteToBcd2>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d00:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d08:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e02c      	b.n	8003d6e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003d1c:	d00d      	beq.n	8003d3a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d26:	d008      	beq.n	8003d3a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003d28:	4b4f      	ldr	r3, [pc, #316]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d46:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d4c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	78db      	ldrb	r3, [r3, #3]
 8003d52:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d54:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d5c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d5e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d64:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d70:	22ca      	movs	r2, #202	; 0xca
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
 8003d74:	4b3c      	ldr	r3, [pc, #240]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d76:	2253      	movs	r2, #83	; 0x53
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d82:	d12c      	bne.n	8003dde <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003d84:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	4a37      	ldr	r2, [pc, #220]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d8e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9c:	d107      	bne.n	8003dae <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4930      	ldr	r1, [pc, #192]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	644b      	str	r3, [r1, #68]	; 0x44
 8003dac:	e006      	b.n	8003dbc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003dae:	4a2e      	ldr	r2, [pc, #184]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003db4:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003dbc:	4a2a      	ldr	r2, [pc, #168]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dd6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003dda:	6193      	str	r3, [r2, #24]
 8003ddc:	e02b      	b.n	8003e36 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003dde:	4b22      	ldr	r3, [pc, #136]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003de4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003de8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dec:	2202      	movs	r2, #2
 8003dee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d107      	bne.n	8003e08 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	4919      	ldr	r1, [pc, #100]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e06:	e006      	b.n	8003e16 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003e08:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003e0e:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003e16:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f043 0202 	orr.w	r2, r3, #2
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e30:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003e34:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <HAL_RTC_SetAlarm_IT+0x214>)
 8003e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <HAL_RTC_SetAlarm_IT+0x214>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e48:	22ff      	movs	r2, #255	; 0xff
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd90      	pop	{r4, r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40002800 	.word	0x40002800
 8003e6c:	58000800 	.word	0x58000800

08003e70 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_RTC_DeactivateAlarm+0x18>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e048      	b.n	8003f1a <HAL_RTC_DeactivateAlarm+0xaa>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e98:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003e9a:	22ca      	movs	r2, #202	; 0xca
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24
 8003e9e:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ea0:	2253      	movs	r2, #83	; 0x53
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eaa:	d115      	bne.n	8003ed8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003eb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003eb6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ec2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f023 0201 	bic.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ed6:	e014      	b.n	8003f02 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ede:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003ee2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee8:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003eea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eee:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f023 0202 	bic.w	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003efe:	2202      	movs	r2, #2
 8003f00:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f04:	22ff      	movs	r2, #255	; 0xff
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40002800 	.word	0x40002800

08003f28 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003f32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fc ff62 	bl	8000e16 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003f5e:	2202      	movs	r2, #2
 8003f60:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f94a 	bl	80041fc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40002800 	.word	0x40002800

08003f7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <HAL_RTC_WaitForSynchro+0x48>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_RTC_WaitForSynchro+0x48>)
 8003f8a:	f023 0320 	bic.w	r3, r3, #32
 8003f8e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003f90:	f7fc fd68 	bl	8000a64 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003f96:	e009      	b.n	8003fac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f98:	f7fc fd64 	bl	8000a64 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa6:	d901      	bls.n	8003fac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e006      	b.n	8003fba <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RTC_WaitForSynchro+0x48>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ef      	beq.n	8003f98 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40002800 	.word	0x40002800

08003fc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003fd4:	4b15      	ldr	r3, [pc, #84]	; (800402c <RTC_EnterInitMode+0x64>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d120      	bne.n	8004022 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <RTC_EnterInitMode+0x64>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a11      	ldr	r2, [pc, #68]	; (800402c <RTC_EnterInitMode+0x64>)
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fea:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003fec:	f7fc fd3a 	bl	8000a64 <HAL_GetTick>
 8003ff0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ff2:	e00d      	b.n	8004010 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ff4:	f7fc fd36 	bl	8000a64 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004002:	d905      	bls.n	8004010 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2203      	movs	r2, #3
 800400c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <RTC_EnterInitMode+0x64>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <RTC_EnterInitMode+0x5a>
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d1e8      	bne.n	8003ff4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40002800 	.word	0x40002800

08004030 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <RTC_ExitInitMode+0x78>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <RTC_ExitInitMode+0x78>)
 8004042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004046:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004048:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <RTC_ExitInitMode+0x78>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10c      	bne.n	800406e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff91 	bl	8003f7c <HAL_RTC_WaitForSynchro>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01e      	beq.n	800409e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2203      	movs	r2, #3
 8004064:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	e017      	b.n	800409e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <RTC_ExitInitMode+0x78>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <RTC_ExitInitMode+0x78>)
 8004074:	f023 0320 	bic.w	r3, r3, #32
 8004078:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ff7e 	bl	8003f7c <HAL_RTC_WaitForSynchro>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <RTC_ExitInitMode+0x78>)
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <RTC_ExitInitMode+0x78>)
 8004098:	f043 0320 	orr.w	r3, r3, #32
 800409c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40002800 	.word	0x40002800

080040ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80040be:	e005      	b.n	80040cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	3b0a      	subs	r3, #10
 80040ca:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80040cc:	7afb      	ldrb	r3, [r7, #11]
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	d8f6      	bhi.n	80040c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	7afb      	ldrb	r3, [r7, #11]
 80040dc:	4313      	orrs	r3, r2
 80040de:	b2db      	uxtb	r3, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_RTCEx_EnableBypassShadow+0x16>
 80040fe:	2302      	movs	r3, #2
 8004100:	e01f      	b.n	8004142 <HAL_RTCEx_EnableBypassShadow+0x56>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004114:	22ca      	movs	r2, #202	; 0xca
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800411a:	2253      	movs	r2, #83	; 0x53
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004124:	f043 0320 	orr.w	r3, r3, #32
 8004128:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800412c:	22ff      	movs	r2, #255	; 0xff
 800412e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	40002800 	.word	0x40002800

08004150 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_RTCEx_SetSSRU_IT+0x16>
 8004162:	2302      	movs	r3, #2
 8004164:	e027      	b.n	80041b6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004178:	22ca      	movs	r2, #202	; 0xca
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800417e:	2253      	movs	r2, #83	; 0x53
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800418e:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004194:	4a0b      	ldr	r2, [pc, #44]	; (80041c4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	40002800 	.word	0x40002800
 80041c4:	58000800 	.word	0x58000800

080041c8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80041de:	2240      	movs	r2, #64	; 0x40
 80041e0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc fe21 	bl	8000e2a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40002800 	.word	0x40002800

080041fc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
	...

08004210 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <HAL_RTCEx_BKUPWrite+0x2c>)
 800421e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4413      	add	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	4000b100 	.word	0x4000b100

08004240 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_RTCEx_BKUPRead+0x28>)
 800424c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	4000b100 	.word	0x4000b100

0800426c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800427c:	4904      	ldr	r1, [pc, #16]	; (8004290 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4313      	orrs	r3, r2
 8004282:	608b      	str	r3, [r1, #8]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	58000400 	.word	0x58000400

08004294 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80042a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	58000400 	.word	0x58000400

080042b4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80042c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	58000400 	.word	0x58000400

080042d4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80042da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042de:	619a      	str	r2, [r3, #24]
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	58000400 	.word	0x58000400

080042ec <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d101      	bne.n	8004300 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	58000400 	.word	0x58000400

08004310 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d101      	bne.n	8004324 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	58000400 	.word	0x58000400

08004334 <LL_RCC_RF_DisableReset>:
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004344:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <LL_RCC_IsRFUnderReset>:
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004368:	d101      	bne.n	800436e <LL_RCC_IsRFUnderReset+0x1a>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <LL_RCC_IsRFUnderReset+0x1c>
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <LL_EXTI_EnableIT_32_63+0x24>)
 8004382:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004386:	4905      	ldr	r1, [pc, #20]	; (800439c <LL_EXTI_EnableIT_32_63+0x24>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	58000800 	.word	0x58000800

080043a0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
    return status;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	e052      	b.n	800445c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	799b      	ldrb	r3, [r3, #6]
 80043be:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80043c0:	7bbb      	ldrb	r3, [r7, #14]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_SUBGHZ_Init+0x2c>
 80043c6:	7bbb      	ldrb	r3, [r7, #14]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d109      	bne.n	80043e0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc fab0 	bl	8000938 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80043d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80043dc:	f7ff ffcc 	bl	8004378 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80043e0:	7bbb      	ldrb	r3, [r7, #14]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d126      	bne.n	8004434 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80043ec:	f7ff ffa2 	bl	8004334 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80043f0:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_SUBGHZ_Init+0xc4>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	0cdb      	lsrs	r3, r3, #19
 80043fe:	2264      	movs	r2, #100	; 0x64
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	609a      	str	r2, [r3, #8]
        break;
 8004416:	e007      	b.n	8004428 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	3b01      	subs	r3, #1
 800441c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800441e:	f7ff ff99 	bl	8004354 <LL_RCC_IsRFUnderReset>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ee      	bne.n	8004406 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004428:	f7ff ff34 	bl	8004294 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800442c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004430:	f7ff ff1c 	bl	800426c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004434:	f7ff ff4e 	bl	80042d4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fab0 	bl	80049a8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	719a      	strb	r2, [r3, #6]

  return status;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000000 	.word	0x20000000

08004468 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	460b      	mov	r3, r1
 8004476:	817b      	strh	r3, [r7, #10]
 8004478:	4613      	mov	r3, r2
 800447a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	799b      	ldrb	r3, [r3, #6]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d14a      	bne.n	800451c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	795b      	ldrb	r3, [r3, #5]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800448e:	2302      	movs	r3, #2
 8004490:	e045      	b.n	800451e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2202      	movs	r2, #2
 800449c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fb50 	bl	8004b44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044a4:	f7ff ff06 	bl	80042b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80044a8:	210d      	movs	r1, #13
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fa9c 	bl	80049e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80044b0:	897b      	ldrh	r3, [r7, #10]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa94 	bl	80049e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	4619      	mov	r1, r3
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fa8e 	bl	80049e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	82bb      	strh	r3, [r7, #20]
 80044d0:	e00a      	b.n	80044e8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80044d2:	8abb      	ldrh	r3, [r7, #20]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	4619      	mov	r1, r3
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fa83 	bl	80049e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80044e2:	8abb      	ldrh	r3, [r7, #20]
 80044e4:	3301      	adds	r3, #1
 80044e6:	82bb      	strh	r3, [r7, #20]
 80044e8:	8aba      	ldrh	r2, [r7, #20]
 80044ea:	893b      	ldrh	r3, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3f0      	bcc.n	80044d2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044f0:	f7ff fed0 	bl	8004294 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fb49 	bl	8004b8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	75fb      	strb	r3, [r7, #23]
 8004506:	e001      	b.n	800450c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	715a      	strb	r2, [r3, #5]

    return status;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	e000      	b.n	800451e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b088      	sub	sp, #32
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	461a      	mov	r2, r3
 8004532:	460b      	mov	r3, r1
 8004534:	817b      	strh	r3, [r7, #10]
 8004536:	4613      	mov	r3, r2
 8004538:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	799b      	ldrb	r3, [r3, #6]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d14a      	bne.n	80045de <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	795b      	ldrb	r3, [r3, #5]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004550:	2302      	movs	r3, #2
 8004552:	e045      	b.n	80045e0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 faf2 	bl	8004b44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004560:	f7ff fea8 	bl	80042b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004564:	211d      	movs	r1, #29
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fa3e 	bl	80049e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800456c:	897b      	ldrh	r3, [r7, #10]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b29b      	uxth	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fa36 	bl	80049e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800457c:	897b      	ldrh	r3, [r7, #10]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 fa30 	bl	80049e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004588:	2100      	movs	r1, #0
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fa2c 	bl	80049e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004590:	2300      	movs	r3, #0
 8004592:	82fb      	strh	r3, [r7, #22]
 8004594:	e009      	b.n	80045aa <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fa7b 	bl	8004a94 <SUBGHZSPI_Receive>
      pData++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3301      	adds	r3, #1
 80045a2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80045a4:	8afb      	ldrh	r3, [r7, #22]
 80045a6:	3301      	adds	r3, #1
 80045a8:	82fb      	strh	r3, [r7, #22]
 80045aa:	8afa      	ldrh	r2, [r7, #22]
 80045ac:	893b      	ldrh	r3, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3f1      	bcc.n	8004596 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80045b2:	f7ff fe6f 	bl	8004294 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fae8 	bl	8004b8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e001      	b.n	80045ce <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	715a      	strb	r2, [r3, #5]

    return status;
 80045da:	7ffb      	ldrb	r3, [r7, #31]
 80045dc:	e000      	b.n	80045e0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	461a      	mov	r2, r3
 80045f4:	460b      	mov	r3, r1
 80045f6:	72fb      	strb	r3, [r7, #11]
 80045f8:	4613      	mov	r3, r2
 80045fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	799b      	ldrb	r3, [r3, #6]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b01      	cmp	r3, #1
 8004604:	d14a      	bne.n	800469c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	795b      	ldrb	r3, [r3, #5]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800460e:	2302      	movs	r3, #2
 8004610:	e045      	b.n	800469e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fa93 	bl	8004b44 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	2b84      	cmp	r3, #132	; 0x84
 8004622:	d002      	beq.n	800462a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004624:	7afb      	ldrb	r3, [r7, #11]
 8004626:	2b94      	cmp	r3, #148	; 0x94
 8004628:	d103      	bne.n	8004632 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	711a      	strb	r2, [r3, #4]
 8004630:	e002      	b.n	8004638 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004638:	f7ff fe3c 	bl	80042b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800463c:	7afb      	ldrb	r3, [r7, #11]
 800463e:	4619      	mov	r1, r3
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f9d1 	bl	80049e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	82bb      	strh	r3, [r7, #20]
 800464a:	e00a      	b.n	8004662 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800464c:	8abb      	ldrh	r3, [r7, #20]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	4619      	mov	r1, r3
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f9c6 	bl	80049e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800465c:	8abb      	ldrh	r3, [r7, #20]
 800465e:	3301      	adds	r3, #1
 8004660:	82bb      	strh	r3, [r7, #20]
 8004662:	8aba      	ldrh	r2, [r7, #20]
 8004664:	893b      	ldrh	r3, [r7, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	d3f0      	bcc.n	800464c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800466a:	f7ff fe13 	bl	8004294 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800466e:	7afb      	ldrb	r3, [r7, #11]
 8004670:	2b84      	cmp	r3, #132	; 0x84
 8004672:	d002      	beq.n	800467a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fa89 	bl	8004b8c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
 8004686:	e001      	b.n	800468c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	715a      	strb	r2, [r3, #5]

    return status;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	e000      	b.n	800469e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b088      	sub	sp, #32
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	461a      	mov	r2, r3
 80046b2:	460b      	mov	r3, r1
 80046b4:	72fb      	strb	r3, [r7, #11]
 80046b6:	4613      	mov	r3, r2
 80046b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	799b      	ldrb	r3, [r3, #6]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d13d      	bne.n	8004744 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	795b      	ldrb	r3, [r3, #5]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e038      	b.n	8004746 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fa32 	bl	8004b44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046e0:	f7ff fde8 	bl	80042b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80046e4:	7afb      	ldrb	r3, [r7, #11]
 80046e6:	4619      	mov	r1, r3
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f97d 	bl	80049e8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80046ee:	2100      	movs	r1, #0
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f979 	bl	80049e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	82fb      	strh	r3, [r7, #22]
 80046fa:	e009      	b.n	8004710 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80046fc:	69b9      	ldr	r1, [r7, #24]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f9c8 	bl	8004a94 <SUBGHZSPI_Receive>
      pData++;
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	3301      	adds	r3, #1
 8004708:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800470a:	8afb      	ldrh	r3, [r7, #22]
 800470c:	3301      	adds	r3, #1
 800470e:	82fb      	strh	r3, [r7, #22]
 8004710:	8afa      	ldrh	r2, [r7, #22]
 8004712:	893b      	ldrh	r3, [r7, #8]
 8004714:	429a      	cmp	r2, r3
 8004716:	d3f1      	bcc.n	80046fc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004718:	f7ff fdbc 	bl	8004294 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fa35 	bl	8004b8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e001      	b.n	8004734 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	715a      	strb	r2, [r3, #5]

    return status;
 8004740:	7ffb      	ldrb	r3, [r7, #31]
 8004742:	e000      	b.n	8004746 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	461a      	mov	r2, r3
 800475a:	460b      	mov	r3, r1
 800475c:	72fb      	strb	r3, [r7, #11]
 800475e:	4613      	mov	r3, r2
 8004760:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	799b      	ldrb	r3, [r3, #6]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d13e      	bne.n	80047ea <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	795b      	ldrb	r3, [r3, #5]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004774:	2302      	movs	r3, #2
 8004776:	e039      	b.n	80047ec <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f9e0 	bl	8004b44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004784:	f7ff fd96 	bl	80042b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004788:	210e      	movs	r1, #14
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f92c 	bl	80049e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004790:	7afb      	ldrb	r3, [r7, #11]
 8004792:	4619      	mov	r1, r3
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f927 	bl	80049e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800479a:	2300      	movs	r3, #0
 800479c:	82bb      	strh	r3, [r7, #20]
 800479e:	e00a      	b.n	80047b6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80047a0:	8abb      	ldrh	r3, [r7, #20]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	4619      	mov	r1, r3
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f91c 	bl	80049e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80047b0:	8abb      	ldrh	r3, [r7, #20]
 80047b2:	3301      	adds	r3, #1
 80047b4:	82bb      	strh	r3, [r7, #20]
 80047b6:	8aba      	ldrh	r2, [r7, #20]
 80047b8:	893b      	ldrh	r3, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3f0      	bcc.n	80047a0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047be:	f7ff fd69 	bl	8004294 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f9e2 	bl	8004b8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	75fb      	strb	r3, [r7, #23]
 80047d4:	e001      	b.n	80047da <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	715a      	strb	r2, [r3, #5]

    return status;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	e000      	b.n	80047ec <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	460b      	mov	r3, r1
 8004802:	72fb      	strb	r3, [r7, #11]
 8004804:	4613      	mov	r3, r2
 8004806:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	799b      	ldrb	r3, [r3, #6]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d141      	bne.n	800489a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	795b      	ldrb	r3, [r3, #5]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800481e:	2302      	movs	r3, #2
 8004820:	e03c      	b.n	800489c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f98b 	bl	8004b44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800482e:	f7ff fd41 	bl	80042b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004832:	211e      	movs	r1, #30
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f8d7 	bl	80049e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800483a:	7afb      	ldrb	r3, [r7, #11]
 800483c:	4619      	mov	r1, r3
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f8d2 	bl	80049e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004844:	2100      	movs	r1, #0
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f8ce 	bl	80049e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800484c:	2300      	movs	r3, #0
 800484e:	82fb      	strh	r3, [r7, #22]
 8004850:	e009      	b.n	8004866 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004852:	69b9      	ldr	r1, [r7, #24]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f91d 	bl	8004a94 <SUBGHZSPI_Receive>
      pData++;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	3301      	adds	r3, #1
 800485e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004860:	8afb      	ldrh	r3, [r7, #22]
 8004862:	3301      	adds	r3, #1
 8004864:	82fb      	strh	r3, [r7, #22]
 8004866:	8afa      	ldrh	r2, [r7, #22]
 8004868:	893b      	ldrh	r3, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d3f1      	bcc.n	8004852 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800486e:	f7ff fd11 	bl	8004294 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f98a 	bl	8004b8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e001      	b.n	800488a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	715a      	strb	r2, [r3, #5]

    return status;
 8004896:	7ffb      	ldrb	r3, [r7, #31]
 8004898:	e000      	b.n	800489c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80048ac:	2300      	movs	r3, #0
 80048ae:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80048b0:	f107 020c 	add.w	r2, r7, #12
 80048b4:	2302      	movs	r3, #2
 80048b6:	2112      	movs	r1, #18
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff fef4 	bl	80046a6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80048be:	7b3b      	ldrb	r3, [r7, #12]
 80048c0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80048c2:	89fb      	ldrh	r3, [r7, #14]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	b21a      	sxth	r2, r3
 80048c8:	7b7b      	ldrb	r3, [r7, #13]
 80048ca:	b21b      	sxth	r3, r3
 80048cc:	4313      	orrs	r3, r2
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80048d2:	f107 020c 	add.w	r2, r7, #12
 80048d6:	2302      	movs	r3, #2
 80048d8:	2102      	movs	r1, #2
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff fe84 	bl	80045e8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80048e0:	89fb      	ldrh	r3, [r7, #14]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f005 fc30 	bl	800a150 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80048f0:	89fb      	ldrh	r3, [r7, #14]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 80048fa:	89fb      	ldrh	r3, [r7, #14]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f005 fc31 	bl	800a16c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800490a:	89fb      	ldrh	r3, [r7, #14]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f005 fc81 	bl	800a21c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800491a:	89fb      	ldrh	r3, [r7, #14]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f005 fc87 	bl	800a238 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f005 fc8d 	bl	800a254 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800493a:	89fb      	ldrh	r3, [r7, #14]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f005 fc5b 	bl	800a200 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f005 fc17 	bl	800a188 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800495a:	89fb      	ldrh	r3, [r7, #14]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004964:	89fb      	ldrh	r3, [r7, #14]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800496e:	2101      	movs	r1, #1
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f005 fc17 	bl	800a1a4 <HAL_SUBGHZ_CADStatusCallback>
 8004976:	e003      	b.n	8004980 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004978:	2100      	movs	r1, #0
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f005 fc12 	bl	800a1a4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004980:	89fb      	ldrh	r3, [r7, #14]
 8004982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f005 fc28 	bl	800a1e0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004990:	89fb      	ldrh	r3, [r7, #14]
 8004992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f005 fc68 	bl	800a270 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <SUBGHZSPI_Init+0x3c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0b      	ldr	r2, [pc, #44]	; (80049e4 <SUBGHZSPI_Init+0x3c>)
 80049b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ba:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80049bc:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <SUBGHZSPI_Init+0x3c>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80049c4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <SUBGHZSPI_Init+0x3c>)
 80049c8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80049cc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <SUBGHZSPI_Init+0x3c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <SUBGHZSPI_Init+0x3c>)
 80049d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d8:	6013      	str	r3, [r2, #0]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	58010000 	.word	0x58010000

080049e8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049f8:	4b23      	ldr	r3, [pc, #140]	; (8004a88 <SUBGHZSPI_Transmit+0xa0>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	0cdb      	lsrs	r3, r3, #19
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	609a      	str	r2, [r3, #8]
      break;
 8004a1e:	e008      	b.n	8004a32 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004a26:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <SUBGHZSPI_Transmit+0xa4>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d1ed      	bne.n	8004a0e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004a32:	4b17      	ldr	r3, [pc, #92]	; (8004a90 <SUBGHZSPI_Transmit+0xa8>)
 8004a34:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <SUBGHZSPI_Transmit+0xa0>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	0cdb      	lsrs	r3, r3, #19
 8004a4a:	2264      	movs	r2, #100	; 0x64
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	609a      	str	r2, [r3, #8]
      break;
 8004a62:	e008      	b.n	8004a76 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <SUBGHZSPI_Transmit+0xa4>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d1ed      	bne.n	8004a52 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <SUBGHZSPI_Transmit+0xa4>)
 8004a78:	68db      	ldr	r3, [r3, #12]

  return status;
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	58010000 	.word	0x58010000
 8004a90:	5801000c 	.word	0x5801000c

08004a94 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004aa2:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <SUBGHZSPI_Receive+0xa4>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	0cdb      	lsrs	r3, r3, #19
 8004ab0:	2264      	movs	r2, #100	; 0x64
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e008      	b.n	8004adc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <SUBGHZSPI_Receive+0xa8>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d1ed      	bne.n	8004ab8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <SUBGHZSPI_Receive+0xac>)
 8004ade:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	22ff      	movs	r2, #255	; 0xff
 8004ae4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <SUBGHZSPI_Receive+0xa4>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	0cdb      	lsrs	r3, r3, #19
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	609a      	str	r2, [r3, #8]
      break;
 8004b0c:	e008      	b.n	8004b20 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <SUBGHZSPI_Receive+0xa8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d1ed      	bne.n	8004afc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <SUBGHZSPI_Receive+0xa8>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	701a      	strb	r2, [r3, #0]

  return status;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	58010000 	.word	0x58010000
 8004b40:	5801000c 	.word	0x5801000c

08004b44 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	791b      	ldrb	r3, [r3, #4]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d111      	bne.n	8004b78 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <SUBGHZ_CheckDeviceReady+0x44>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b64:	f7ff fba6 	bl	80042b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f9      	bne.n	8004b68 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b74:	f7ff fb8e 	bl	8004294 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f807 	bl	8004b8c <SUBGHZ_WaitOnBusy>
 8004b7e:	4603      	mov	r3, r0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000000 	.word	0x20000000

08004b8c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <SUBGHZ_WaitOnBusy+0x58>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	0d1b      	lsrs	r3, r3, #20
 8004ba6:	2264      	movs	r2, #100	; 0x64
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004bae:	f7ff fbaf 	bl	8004310 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004bb2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	609a      	str	r2, [r3, #8]
      break;
 8004bc4:	e009      	b.n	8004bda <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004bcc:	f7ff fb8e 	bl	80042ec <LL_PWR_IsActiveFlag_RFBUSYS>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d0e9      	beq.n	8004bae <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000000 	.word	0x20000000

08004be8 <LL_RCC_GetUSARTClockSource>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	4313      	orrs	r3, r2
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <LL_RCC_GetLPUARTClockSource>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4013      	ands	r3, r2
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e042      	b.n	8004cc2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fa50 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 feab 	bl	80059d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fc34 	bl	80054e8 <UART_SetConfig>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e01b      	b.n	8004cc2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 ff29 	bl	8005b12 <UART_CheckIdleState>
 8004cc0:	4603      	mov	r3, r0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d137      	bne.n	8004d54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_UART_Receive_IT+0x24>
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e030      	b.n	8004d56 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_UART_Receive_IT+0x94>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d01f      	beq.n	8004d44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d018      	beq.n	8004d44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	69f9      	ldr	r1, [r7, #28]
 8004d36:	6a3a      	ldr	r2, [r7, #32]
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e6      	bne.n	8004d12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fffe 	bl	8005d4c <UART_Start_Receive_IT>
 8004d50:	4603      	mov	r3, r0
 8004d52:	e000      	b.n	8004d56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3728      	adds	r7, #40	; 0x28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40008000 	.word	0x40008000

08004d64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	; 0x28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d167      	bne.n	8004e4c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_UART_Transmit_DMA+0x24>
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e060      	b.n	8004e4e <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	88fa      	ldrh	r2, [r7, #6]
 8004d96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	88fa      	ldrh	r2, [r7, #6]
 8004d9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2221      	movs	r2, #33	; 0x21
 8004dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d028      	beq.n	8004e0c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dbe:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <HAL_UART_Transmit_DMA+0xf4>)
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc6:	4a25      	ldr	r2, [pc, #148]	; (8004e5c <HAL_UART_Transmit_DMA+0xf8>)
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dce:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <HAL_UART_Transmit_DMA+0xfc>)
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de2:	4619      	mov	r1, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3328      	adds	r3, #40	; 0x28
 8004dea:	461a      	mov	r2, r3
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	f7fc febf 	bl	8001b70 <HAL_DMA_Start_IT>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e020      	b.n	8004e4e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2240      	movs	r2, #64	; 0x40
 8004e12:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	613b      	str	r3, [r7, #16]
   return(result);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	623a      	str	r2, [r7, #32]
 8004e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	69f9      	ldr	r1, [r7, #28]
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3728      	adds	r7, #40	; 0x28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	080060d7 	.word	0x080060d7
 8004e5c:	08006171 	.word	0x08006171
 8004e60:	0800618d 	.word	0x0800618d

08004e64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b0ba      	sub	sp, #232	; 0xe8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e92:	4013      	ands	r3, r2
 8004e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 82e3 	beq.w	8005494 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
      }
      return;
 8004ed6:	e2dd      	b.n	8005494 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8123 	beq.w	8005128 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ee2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ee6:	4b8d      	ldr	r3, [pc, #564]	; (800511c <HAL_UART_IRQHandler+0x2b8>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004eee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ef2:	4b8b      	ldr	r3, [pc, #556]	; (8005120 <HAL_UART_IRQHandler+0x2bc>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8116 	beq.w	8005128 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d011      	beq.n	8004f2c <HAL_UART_IRQHandler+0xc8>
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	f043 0201 	orr.w	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d011      	beq.n	8004f5c <HAL_UART_IRQHandler+0xf8>
 8004f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d011      	beq.n	8004f8c <HAL_UART_IRQHandler+0x128>
 8004f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00b      	beq.n	8004f8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2204      	movs	r2, #4
 8004f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	f043 0202 	orr.w	r2, r3, #2
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d017      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004fa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004fa8:	4b5c      	ldr	r3, [pc, #368]	; (800511c <HAL_UART_IRQHandler+0x2b8>)
 8004faa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f043 0208 	orr.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d012      	beq.n	8004ffa <HAL_UART_IRQHandler+0x196>
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8249 	beq.w	8005498 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d013      	beq.n	800503a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800501e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d005      	beq.n	800505e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005056:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800505a:	2b00      	cmp	r3, #0
 800505c:	d054      	beq.n	8005108 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 ffd4 	bl	800600c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d146      	bne.n	8005100 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800508c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800509e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1d9      	bne.n	8005072 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d017      	beq.n	80050f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ce:	4a15      	ldr	r2, [pc, #84]	; (8005124 <HAL_UART_IRQHandler+0x2c0>)
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fc fe25 	bl	8001d28 <HAL_DMA_Abort_IT>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d019      	beq.n	8005118 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80050f2:	4610      	mov	r0, r2
 80050f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f6:	e00f      	b.n	8005118 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9e0 	bl	80054be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fe:	e00b      	b.n	8005118 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f9dc 	bl	80054be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005106:	e007      	b.n	8005118 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f9d8 	bl	80054be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005116:	e1bf      	b.n	8005498 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	bf00      	nop
    return;
 800511a:	e1bd      	b.n	8005498 <HAL_UART_IRQHandler+0x634>
 800511c:	10000001 	.word	0x10000001
 8005120:	04000120 	.word	0x04000120
 8005124:	0800620d 	.word	0x0800620d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 8153 	bne.w	80053d8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 814c 	beq.w	80053d8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8145 	beq.w	80053d8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2210      	movs	r2, #16
 8005154:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	f040 80bb 	bne.w	80052dc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005174:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 818f 	beq.w	800549c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005184:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005188:	429a      	cmp	r2, r3
 800518a:	f080 8187 	bcs.w	800549c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005194:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 8087 	bne.w	80052ba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1da      	bne.n	80051ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800521a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800521e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005222:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800522c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e1      	bne.n	80051f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005256:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005258:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800525c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e3      	bne.n	8005232 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005288:	f023 0310 	bic.w	r3, r3, #16
 800528c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800529a:	65bb      	str	r3, [r7, #88]	; 0x58
 800529c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e4      	bne.n	8005278 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fc fcd9 	bl	8001c6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f8fb 	bl	80054d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052da:	e0df      	b.n	800549c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80d1 	beq.w	80054a0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80052fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80cc 	beq.w	80054a0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800531c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800532a:	647b      	str	r3, [r7, #68]	; 0x44
 800532c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e4      	bne.n	8005308 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	623b      	str	r3, [r7, #32]
   return(result);
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3308      	adds	r3, #8
 8005362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005366:	633a      	str	r2, [r7, #48]	; 0x30
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800536c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e1      	bne.n	800533e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60fb      	str	r3, [r7, #12]
   return(result);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0310 	bic.w	r3, r3, #16
 80053a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	617b      	str	r3, [r7, #20]
   return(result);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e4      	bne.n	800538e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f87d 	bl	80054d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053d6:	e063      	b.n	80054a0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <HAL_UART_IRQHandler+0x59e>
 80053e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fc64 	bl	8006cc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005400:	e051      	b.n	80054a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d014      	beq.n	8005438 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800540e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800541a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800542a:	2b00      	cmp	r3, #0
 800542c:	d03a      	beq.n	80054a4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
    }
    return;
 8005436:	e035      	b.n	80054a4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <HAL_UART_IRQHandler+0x5f4>
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fef1 	bl	8006238 <UART_EndTransmit_IT>
    return;
 8005456:	e026      	b.n	80054a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <HAL_UART_IRQHandler+0x614>
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 fc3b 	bl	8006cec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005476:	e016      	b.n	80054a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d010      	beq.n	80054a6 <HAL_UART_IRQHandler+0x642>
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005488:	2b00      	cmp	r3, #0
 800548a:	da0c      	bge.n	80054a6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 fc24 	bl	8006cda <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005492:	e008      	b.n	80054a6 <HAL_UART_IRQHandler+0x642>
      return;
 8005494:	bf00      	nop
 8005496:	e006      	b.n	80054a6 <HAL_UART_IRQHandler+0x642>
    return;
 8005498:	bf00      	nop
 800549a:	e004      	b.n	80054a6 <HAL_UART_IRQHandler+0x642>
      return;
 800549c:	bf00      	nop
 800549e:	e002      	b.n	80054a6 <HAL_UART_IRQHandler+0x642>
      return;
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <HAL_UART_IRQHandler+0x642>
    return;
 80054a4:	bf00      	nop
  }
}
 80054a6:	37e8      	adds	r7, #232	; 0xe8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
	...

080054e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ec:	b08c      	sub	sp, #48	; 0x30
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	431a      	orrs	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	431a      	orrs	r2, r3
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	4313      	orrs	r3, r2
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b94      	ldr	r3, [pc, #592]	; (8005768 <UART_SetConfig+0x280>)
 8005518:	4013      	ands	r3, r2
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005520:	430b      	orrs	r3, r1
 8005522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a89      	ldr	r2, [pc, #548]	; (800576c <UART_SetConfig+0x284>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005550:	4313      	orrs	r3, r2
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800555e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005568:	430b      	orrs	r3, r1
 800556a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	f023 010f 	bic.w	r1, r3, #15
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a7a      	ldr	r2, [pc, #488]	; (8005770 <UART_SetConfig+0x288>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d127      	bne.n	80055dc <UART_SetConfig+0xf4>
 800558c:	2003      	movs	r0, #3
 800558e:	f7ff fb2b 	bl	8004be8 <LL_RCC_GetUSARTClockSource>
 8005592:	4603      	mov	r3, r0
 8005594:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005598:	2b03      	cmp	r3, #3
 800559a:	d81b      	bhi.n	80055d4 <UART_SetConfig+0xec>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <UART_SetConfig+0xbc>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055c5 	.word	0x080055c5
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	080055cd 	.word	0x080055cd
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ba:	e080      	b.n	80056be <UART_SetConfig+0x1d6>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c2:	e07c      	b.n	80056be <UART_SetConfig+0x1d6>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ca:	e078      	b.n	80056be <UART_SetConfig+0x1d6>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d2:	e074      	b.n	80056be <UART_SetConfig+0x1d6>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055da:	e070      	b.n	80056be <UART_SetConfig+0x1d6>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a64      	ldr	r2, [pc, #400]	; (8005774 <UART_SetConfig+0x28c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d138      	bne.n	8005658 <UART_SetConfig+0x170>
 80055e6:	200c      	movs	r0, #12
 80055e8:	f7ff fafe 	bl	8004be8 <LL_RCC_GetUSARTClockSource>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80055f2:	2b0c      	cmp	r3, #12
 80055f4:	d82c      	bhi.n	8005650 <UART_SetConfig+0x168>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0x114>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005651 	.word	0x08005651
 8005604:	08005651 	.word	0x08005651
 8005608:	08005651 	.word	0x08005651
 800560c:	08005641 	.word	0x08005641
 8005610:	08005651 	.word	0x08005651
 8005614:	08005651 	.word	0x08005651
 8005618:	08005651 	.word	0x08005651
 800561c:	08005639 	.word	0x08005639
 8005620:	08005651 	.word	0x08005651
 8005624:	08005651 	.word	0x08005651
 8005628:	08005651 	.word	0x08005651
 800562c:	08005649 	.word	0x08005649
 8005630:	2300      	movs	r3, #0
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e042      	b.n	80056be <UART_SetConfig+0x1d6>
 8005638:	2302      	movs	r3, #2
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e03e      	b.n	80056be <UART_SetConfig+0x1d6>
 8005640:	2304      	movs	r3, #4
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e03a      	b.n	80056be <UART_SetConfig+0x1d6>
 8005648:	2308      	movs	r3, #8
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564e:	e036      	b.n	80056be <UART_SetConfig+0x1d6>
 8005650:	2310      	movs	r3, #16
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005656:	e032      	b.n	80056be <UART_SetConfig+0x1d6>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a43      	ldr	r2, [pc, #268]	; (800576c <UART_SetConfig+0x284>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d12a      	bne.n	80056b8 <UART_SetConfig+0x1d0>
 8005662:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005666:	f7ff fad1 	bl	8004c0c <LL_RCC_GetLPUARTClockSource>
 800566a:	4603      	mov	r3, r0
 800566c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005670:	d01a      	beq.n	80056a8 <UART_SetConfig+0x1c0>
 8005672:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005676:	d81b      	bhi.n	80056b0 <UART_SetConfig+0x1c8>
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567c:	d00c      	beq.n	8005698 <UART_SetConfig+0x1b0>
 800567e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005682:	d815      	bhi.n	80056b0 <UART_SetConfig+0x1c8>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <UART_SetConfig+0x1a8>
 8005688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568c:	d008      	beq.n	80056a0 <UART_SetConfig+0x1b8>
 800568e:	e00f      	b.n	80056b0 <UART_SetConfig+0x1c8>
 8005690:	2300      	movs	r3, #0
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e012      	b.n	80056be <UART_SetConfig+0x1d6>
 8005698:	2302      	movs	r3, #2
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569e:	e00e      	b.n	80056be <UART_SetConfig+0x1d6>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a6:	e00a      	b.n	80056be <UART_SetConfig+0x1d6>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ae:	e006      	b.n	80056be <UART_SetConfig+0x1d6>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b6:	e002      	b.n	80056be <UART_SetConfig+0x1d6>
 80056b8:	2310      	movs	r3, #16
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2a      	ldr	r2, [pc, #168]	; (800576c <UART_SetConfig+0x284>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	f040 80a4 	bne.w	8005812 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d823      	bhi.n	800571a <UART_SetConfig+0x232>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <UART_SetConfig+0x1f0>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	0800571b 	.word	0x0800571b
 80056e0:	08005705 	.word	0x08005705
 80056e4:	0800571b 	.word	0x0800571b
 80056e8:	0800570b 	.word	0x0800570b
 80056ec:	0800571b 	.word	0x0800571b
 80056f0:	0800571b 	.word	0x0800571b
 80056f4:	0800571b 	.word	0x0800571b
 80056f8:	08005713 	.word	0x08005713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fc:	f7fd ff46 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005702:	e010      	b.n	8005726 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005704:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <UART_SetConfig+0x290>)
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005708:	e00d      	b.n	8005726 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570a:	f7fd fe8b 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005710:	e009      	b.n	8005726 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005718:	e005      	b.n	8005726 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005724:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8137 	beq.w	800599c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	4a12      	ldr	r2, [pc, #72]	; (800577c <UART_SetConfig+0x294>)
 8005734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005738:	461a      	mov	r2, r3
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005740:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	429a      	cmp	r2, r3
 8005750:	d305      	bcc.n	800575e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	429a      	cmp	r2, r3
 800575c:	d910      	bls.n	8005780 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005764:	e11a      	b.n	800599c <UART_SetConfig+0x4b4>
 8005766:	bf00      	nop
 8005768:	cfff69f3 	.word	0xcfff69f3
 800576c:	40008000 	.word	0x40008000
 8005770:	40013800 	.word	0x40013800
 8005774:	40004400 	.word	0x40004400
 8005778:	00f42400 	.word	0x00f42400
 800577c:	0800c220 	.word	0x0800c220
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	2200      	movs	r2, #0
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	60fa      	str	r2, [r7, #12]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	4a8e      	ldr	r2, [pc, #568]	; (80059c8 <UART_SetConfig+0x4e0>)
 800578e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005792:	b29b      	uxth	r3, r3
 8005794:	2200      	movs	r2, #0
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057a2:	f7fa fcf1 	bl	8000188 <__aeabi_uldivmod>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4610      	mov	r0, r2
 80057ac:	4619      	mov	r1, r3
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	020b      	lsls	r3, r1, #8
 80057b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057bc:	0202      	lsls	r2, r0, #8
 80057be:	6979      	ldr	r1, [r7, #20]
 80057c0:	6849      	ldr	r1, [r1, #4]
 80057c2:	0849      	lsrs	r1, r1, #1
 80057c4:	2000      	movs	r0, #0
 80057c6:	460c      	mov	r4, r1
 80057c8:	4605      	mov	r5, r0
 80057ca:	eb12 0804 	adds.w	r8, r2, r4
 80057ce:	eb43 0905 	adc.w	r9, r3, r5
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	469a      	mov	sl, r3
 80057da:	4693      	mov	fp, r2
 80057dc:	4652      	mov	r2, sl
 80057de:	465b      	mov	r3, fp
 80057e0:	4640      	mov	r0, r8
 80057e2:	4649      	mov	r1, r9
 80057e4:	f7fa fcd0 	bl	8000188 <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4613      	mov	r3, r2
 80057ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057f6:	d308      	bcc.n	800580a <UART_SetConfig+0x322>
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fe:	d204      	bcs.n	800580a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	e0c8      	b.n	800599c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005810:	e0c4      	b.n	800599c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581a:	d167      	bne.n	80058ec <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800581c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005820:	2b08      	cmp	r3, #8
 8005822:	d828      	bhi.n	8005876 <UART_SetConfig+0x38e>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x344>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	08005877 	.word	0x08005877
 800583c:	08005867 	.word	0x08005867
 8005840:	08005877 	.word	0x08005877
 8005844:	08005877 	.word	0x08005877
 8005848:	08005877 	.word	0x08005877
 800584c:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fd fe9c 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8005854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005856:	e014      	b.n	8005882 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fd feaa 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 800585c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800585e:	e010      	b.n	8005882 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b5a      	ldr	r3, [pc, #360]	; (80059cc <UART_SetConfig+0x4e4>)
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005864:	e00d      	b.n	8005882 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fd fddd 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 800586a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800586c:	e009      	b.n	8005882 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005874:	e005      	b.n	8005882 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8089 	beq.w	800599c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	4a4e      	ldr	r2, [pc, #312]	; (80059c8 <UART_SetConfig+0x4e0>)
 8005890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005894:	461a      	mov	r2, r3
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	fbb3 f3f2 	udiv	r3, r3, r2
 800589c:	005a      	lsls	r2, r3, #1
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	441a      	add	r2, r3
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	d916      	bls.n	80058e4 <UART_SetConfig+0x3fc>
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058bc:	d212      	bcs.n	80058e4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f023 030f 	bic.w	r3, r3, #15
 80058c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	8bfb      	ldrh	r3, [r7, #30]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	8bfa      	ldrh	r2, [r7, #30]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	e05b      	b.n	800599c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058ea:	e057      	b.n	800599c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d828      	bhi.n	8005946 <UART_SetConfig+0x45e>
 80058f4:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0x414>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	08005921 	.word	0x08005921
 8005900:	08005929 	.word	0x08005929
 8005904:	08005931 	.word	0x08005931
 8005908:	08005947 	.word	0x08005947
 800590c:	08005937 	.word	0x08005937
 8005910:	08005947 	.word	0x08005947
 8005914:	08005947 	.word	0x08005947
 8005918:	08005947 	.word	0x08005947
 800591c:	0800593f 	.word	0x0800593f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fd fe34 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8005924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005926:	e014      	b.n	8005952 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fd fe42 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800592e:	e010      	b.n	8005952 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005930:	4b26      	ldr	r3, [pc, #152]	; (80059cc <UART_SetConfig+0x4e4>)
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005934:	e00d      	b.n	8005952 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005936:	f7fd fd75 	bl	8003424 <HAL_RCC_GetSysClockFreq>
 800593a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800593c:	e009      	b.n	8005952 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005944:	e005      	b.n	8005952 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005950:	bf00      	nop
    }

    if (pclk != 0U)
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d021      	beq.n	800599c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <UART_SetConfig+0x4e0>)
 800595e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005962:	461a      	mov	r2, r3
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	fbb3 f2f2 	udiv	r2, r3, r2
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	441a      	add	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	2b0f      	cmp	r3, #15
 8005980:	d909      	bls.n	8005996 <UART_SetConfig+0x4ae>
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d205      	bcs.n	8005996 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	b29a      	uxth	r2, r3
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	e002      	b.n	800599c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2201      	movs	r2, #1
 80059a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2200      	movs	r2, #0
 80059b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3730      	adds	r7, #48	; 0x30
 80059c0:	46bd      	mov	sp, r7
 80059c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c6:	bf00      	nop
 80059c8:	0800c220 	.word	0x0800c220
 80059cc:	00f42400 	.word	0x00f42400

080059d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01a      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ace:	d10a      	bne.n	8005ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af02      	add	r7, sp, #8
 8005b18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b22:	f7fa ff9f 	bl	8000a64 <HAL_GetTick>
 8005b26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d10e      	bne.n	8005b54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f832 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e028      	b.n	8005ba6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d10e      	bne.n	8005b80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f81c 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e012      	b.n	8005ba6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b09c      	sub	sp, #112	; 0x70
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bbe:	e0af      	b.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	f000 80ab 	beq.w	8005d20 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bca:	f7fa ff4b 	bl	8000a64 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d140      	bne.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e6      	bne.n	8005be0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	663b      	str	r3, [r7, #96]	; 0x60
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e06f      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d057      	beq.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x172>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d054      	beq.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x172>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d051      	beq.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8a:	d149      	bne.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e6      	bne.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ce8:	623a      	str	r2, [r7, #32]
 8005cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e010      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	f43f af40 	beq.w	8005bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3770      	adds	r7, #112	; 0x70
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b0a3      	sub	sp, #140	; 0x8c
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	88fa      	ldrh	r2, [r7, #6]
 8005d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	d10e      	bne.n	8005d9e <UART_Start_Receive_IT+0x52>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <UART_Start_Receive_IT+0x48>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d92:	e02d      	b.n	8005df0 <UART_Start_Receive_IT+0xa4>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	22ff      	movs	r2, #255	; 0xff
 8005d98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d9c:	e028      	b.n	8005df0 <UART_Start_Receive_IT+0xa4>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10d      	bne.n	8005dc2 <UART_Start_Receive_IT+0x76>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d104      	bne.n	8005db8 <UART_Start_Receive_IT+0x6c>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	22ff      	movs	r2, #255	; 0xff
 8005db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005db6:	e01b      	b.n	8005df0 <UART_Start_Receive_IT+0xa4>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	227f      	movs	r2, #127	; 0x7f
 8005dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dc0:	e016      	b.n	8005df0 <UART_Start_Receive_IT+0xa4>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dca:	d10d      	bne.n	8005de8 <UART_Start_Receive_IT+0x9c>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <UART_Start_Receive_IT+0x92>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	227f      	movs	r2, #127	; 0x7f
 8005dd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ddc:	e008      	b.n	8005df0 <UART_Start_Receive_IT+0xa4>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	223f      	movs	r2, #63	; 0x3f
 8005de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005de6:	e003      	b.n	8005df0 <UART_Start_Receive_IT+0xa4>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2222      	movs	r2, #34	; 0x22
 8005dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3308      	adds	r3, #8
 8005e06:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3308      	adds	r3, #8
 8005e20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e24:	673a      	str	r2, [r7, #112]	; 0x70
 8005e26:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005e2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e3      	bne.n	8005e00 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e40:	d14f      	bne.n	8005ee2 <UART_Start_Receive_IT+0x196>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e48:	88fa      	ldrh	r2, [r7, #6]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d349      	bcc.n	8005ee2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	d107      	bne.n	8005e68 <UART_Start_Receive_IT+0x11c>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a46      	ldr	r2, [pc, #280]	; (8005f7c <UART_Start_Receive_IT+0x230>)
 8005e64:	675a      	str	r2, [r3, #116]	; 0x74
 8005e66:	e002      	b.n	8005e6e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4a45      	ldr	r2, [pc, #276]	; (8005f80 <UART_Start_Receive_IT+0x234>)
 8005e6c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01a      	beq.n	8005eac <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e9a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e4      	bne.n	8005e76 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ecc:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ece:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e5      	bne.n	8005eac <UART_Start_Receive_IT+0x160>
 8005ee0:	e046      	b.n	8005f70 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d107      	bne.n	8005efc <UART_Start_Receive_IT+0x1b0>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a23      	ldr	r2, [pc, #140]	; (8005f84 <UART_Start_Receive_IT+0x238>)
 8005ef8:	675a      	str	r2, [r3, #116]	; 0x74
 8005efa:	e002      	b.n	8005f02 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a22      	ldr	r2, [pc, #136]	; (8005f88 <UART_Start_Receive_IT+0x23c>)
 8005f00:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d019      	beq.n	8005f3e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f1e:	677b      	str	r3, [r7, #116]	; 0x74
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_Start_Receive_IT+0x1be>
 8005f3c:	e018      	b.n	8005f70 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f043 0320 	orr.w	r3, r3, #32
 8005f52:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5c:	623b      	str	r3, [r7, #32]
 8005f5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	69f9      	ldr	r1, [r7, #28]
 8005f62:	6a3a      	ldr	r2, [r7, #32]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e6      	bne.n	8005f3e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	378c      	adds	r7, #140	; 0x8c
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	08006961 	.word	0x08006961
 8005f80:	08006601 	.word	0x08006601
 8005f84:	08006449 	.word	0x08006449
 8005f88:	08006291 	.word	0x08006291

08005f8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b08f      	sub	sp, #60	; 0x3c
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe6:	61ba      	str	r2, [r7, #24]
 8005fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6979      	ldr	r1, [r7, #20]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006002:	bf00      	nop
 8006004:	373c      	adds	r7, #60	; 0x3c
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b095      	sub	sp, #84	; 0x54
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006032:	643b      	str	r3, [r7, #64]	; 0x40
 8006034:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e6      	bne.n	8006014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	61fb      	str	r3, [r7, #28]
   return(result);
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	64bb      	str	r3, [r7, #72]	; 0x48
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800606a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800606c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e3      	bne.n	8006046 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d118      	bne.n	80060b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	60bb      	str	r3, [r7, #8]
   return(result);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f023 0310 	bic.w	r3, r3, #16
 800609a:	647b      	str	r3, [r7, #68]	; 0x44
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6979      	ldr	r1, [r7, #20]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	613b      	str	r3, [r7, #16]
   return(result);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e6      	bne.n	8006086 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80060cc:	bf00      	nop
 80060ce:	3754      	adds	r7, #84	; 0x54
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b090      	sub	sp, #64	; 0x40
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d137      	bne.n	8006162 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80060f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	623b      	str	r3, [r7, #32]
   return(result);
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006110:	63bb      	str	r3, [r7, #56]	; 0x38
 8006112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611a:	633a      	str	r2, [r7, #48]	; 0x30
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e5      	bne.n	80060fa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800612e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	60fb      	str	r3, [r7, #12]
   return(result);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	69b9      	ldr	r1, [r7, #24]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	617b      	str	r3, [r7, #20]
   return(result);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e6      	bne.n	800612e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006160:	e002      	b.n	8006168 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006162:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006164:	f7fb f918 	bl	8001398 <HAL_UART_TxCpltCallback>
}
 8006168:	bf00      	nop
 800616a:	3740      	adds	r7, #64	; 0x40
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff f994 	bl	80054ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b80      	cmp	r3, #128	; 0x80
 80061b6:	d109      	bne.n	80061cc <UART_DMAError+0x40>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b21      	cmp	r3, #33	; 0x21
 80061bc:	d106      	bne.n	80061cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80061c6:	6978      	ldr	r0, [r7, #20]
 80061c8:	f7ff fee0 	bl	8005f8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d109      	bne.n	80061ee <UART_DMAError+0x62>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b22      	cmp	r3, #34	; 0x22
 80061de:	d106      	bne.n	80061ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80061e8:	6978      	ldr	r0, [r7, #20]
 80061ea:	f7ff ff0f 	bl	800600c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f4:	f043 0210 	orr.w	r2, r3, #16
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061fe:	6978      	ldr	r0, [r7, #20]
 8006200:	f7ff f95d 	bl	80054be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006204:	bf00      	nop
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff f947 	bl	80054be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	60bb      	str	r3, [r7, #8]
   return(result);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6979      	ldr	r1, [r7, #20]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	613b      	str	r3, [r7, #16]
   return(result);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e6      	bne.n	8006240 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fb f889 	bl	8001398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006286:	bf00      	nop
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b09c      	sub	sp, #112	; 0x70
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800629e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a8:	2b22      	cmp	r3, #34	; 0x22
 80062aa:	f040 80be 	bne.w	800642a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80062bc:	b2d9      	uxtb	r1, r3
 80062be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c8:	400a      	ands	r2, r1
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 80a1 	bne.w	800643a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800630c:	66bb      	str	r3, [r7, #104]	; 0x68
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006316:	65bb      	str	r3, [r7, #88]	; 0x58
 8006318:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800631c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e6      	bne.n	80062f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800633a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	667b      	str	r3, [r7, #100]	; 0x64
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800634a:	647a      	str	r2, [r7, #68]	; 0x44
 800634c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e5      	bne.n	800632a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a33      	ldr	r2, [pc, #204]	; (8006444 <UART_RxISR_8BIT+0x1b4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d01f      	beq.n	80063bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	623b      	str	r3, [r7, #32]
   return(result);
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800639e:	663b      	str	r3, [r7, #96]	; 0x60
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30
 80063aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e6      	bne.n	800638a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d12e      	bne.n	8006422 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0310 	bic.w	r3, r3, #16
 80063de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	69b9      	ldr	r1, [r7, #24]
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	617b      	str	r3, [r7, #20]
   return(result);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	2b10      	cmp	r3, #16
 8006408:	d103      	bne.n	8006412 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff f858 	bl	80054d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006420:	e00b      	b.n	800643a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fa ffce 	bl	80013c4 <HAL_UART_RxCpltCallback>
}
 8006428:	e007      	b.n	800643a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0208 	orr.w	r2, r2, #8
 8006438:	619a      	str	r2, [r3, #24]
}
 800643a:	bf00      	nop
 800643c:	3770      	adds	r7, #112	; 0x70
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40008000 	.word	0x40008000

08006448 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b09c      	sub	sp, #112	; 0x70
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006456:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006460:	2b22      	cmp	r3, #34	; 0x22
 8006462:	f040 80be 	bne.w	80065e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006476:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800647a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800647e:	4013      	ands	r3, r2
 8006480:	b29a      	uxth	r2, r3
 8006482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006484:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648a:	1c9a      	adds	r2, r3, #2
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 80a1 	bne.w	80065f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80064be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c4:	667b      	str	r3, [r7, #100]	; 0x64
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
 80064d0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e6      	bne.n	80064b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	663b      	str	r3, [r7, #96]	; 0x60
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006502:	643a      	str	r2, [r7, #64]	; 0x40
 8006504:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006508:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e5      	bne.n	80064e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a33      	ldr	r2, [pc, #204]	; (80065fc <UART_RxISR_16BIT+0x1b4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01f      	beq.n	8006574 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d018      	beq.n	8006574 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006562:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d12e      	bne.n	80065da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f023 0310 	bic.w	r3, r3, #16
 8006596:	65bb      	str	r3, [r7, #88]	; 0x58
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	613b      	str	r3, [r7, #16]
   return(result);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e6      	bne.n	8006582 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d103      	bne.n	80065ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2210      	movs	r2, #16
 80065c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fe ff7c 	bl	80054d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065d8:	e00b      	b.n	80065f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fa fef2 	bl	80013c4 <HAL_UART_RxCpltCallback>
}
 80065e0:	e007      	b.n	80065f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0208 	orr.w	r2, r2, #8
 80065f0:	619a      	str	r2, [r3, #24]
}
 80065f2:	bf00      	nop
 80065f4:	3770      	adds	r7, #112	; 0x70
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40008000 	.word	0x40008000

08006600 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b0ac      	sub	sp, #176	; 0xb0
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800660e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006636:	2b22      	cmp	r3, #34	; 0x22
 8006638:	f040 8182 	bne.w	8006940 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006642:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006646:	e125      	b.n	8006894 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006652:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006656:	b2d9      	uxtb	r1, r3
 8006658:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800665c:	b2da      	uxtb	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006662:	400a      	ands	r2, r1
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800668e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	2b00      	cmp	r3, #0
 8006698:	d053      	beq.n	8006742 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800669a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d011      	beq.n	80066ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80066a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d011      	beq.n	80066fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80066d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2202      	movs	r2, #2
 80066e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f0:	f043 0204 	orr.w	r2, r3, #4
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d011      	beq.n	800672a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2204      	movs	r2, #4
 8006718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006720:	f043 0202 	orr.w	r2, r3, #2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fe fec2 	bl	80054be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	f040 80a2 	bne.w	8006894 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800675e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006772:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006774:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006778:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e4      	bne.n	8006750 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3308      	adds	r3, #8
 80067aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067ae:	66ba      	str	r2, [r7, #104]	; 0x68
 80067b0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80067b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80067bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e1      	bne.n	8006786 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a5f      	ldr	r2, [pc, #380]	; (8006958 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d021      	beq.n	8006824 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01a      	beq.n	8006824 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80067fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006810:	657b      	str	r3, [r7, #84]	; 0x54
 8006812:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006816:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800681e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e4      	bne.n	80067ee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d130      	bne.n	800688e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	f023 0310 	bic.w	r3, r3, #16
 8006846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006854:	643b      	str	r3, [r7, #64]	; 0x40
 8006856:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800685a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e4      	bne.n	8006832 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f003 0310 	and.w	r3, r3, #16
 8006872:	2b10      	cmp	r3, #16
 8006874:	d103      	bne.n	800687e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2210      	movs	r2, #16
 800687c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fe fe22 	bl	80054d0 <HAL_UARTEx_RxEventCallback>
 800688c:	e002      	b.n	8006894 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fa fd98 	bl	80013c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006894:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006898:	2b00      	cmp	r3, #0
 800689a:	d006      	beq.n	80068aa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800689c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f47f aecf 	bne.w	8006648 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80068b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d049      	beq.n	8006950 <UART_RxISR_8BIT_FIFOEN+0x350>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068c2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d242      	bcs.n	8006950 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80068ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e3      	bne.n	80068ca <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006906:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	60bb      	str	r3, [r7, #8]
   return(result);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f043 0320 	orr.w	r3, r3, #32
 800691c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	613b      	str	r3, [r7, #16]
   return(result);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e4      	bne.n	8006908 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800693e:	e007      	b.n	8006950 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0208 	orr.w	r2, r2, #8
 800694e:	619a      	str	r2, [r3, #24]
}
 8006950:	bf00      	nop
 8006952:	37b0      	adds	r7, #176	; 0xb0
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40008000 	.word	0x40008000
 800695c:	08006291 	.word	0x08006291

08006960 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b0ae      	sub	sp, #184	; 0xb8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800696e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006996:	2b22      	cmp	r3, #34	; 0x22
 8006998:	f040 8186 	bne.w	8006ca8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069a6:	e129      	b.n	8006bfc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80069ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80069be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80069c2:	4013      	ands	r3, r2
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d0:	1c9a      	adds	r2, r3, #2
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d053      	beq.n	8006aa6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d011      	beq.n	8006a2e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a24:	f043 0201 	orr.w	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d011      	beq.n	8006a5e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00b      	beq.n	8006a5e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	f043 0204 	orr.w	r2, r3, #4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d011      	beq.n	8006a8e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a84:	f043 0202 	orr.w	r2, r3, #2
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7fe fd10 	bl	80054be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 80a4 	bne.w	8006bfc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ada:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e2      	bne.n	8006ab4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006b16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e1      	bne.n	8006aee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a5f      	ldr	r2, [pc, #380]	; (8006cc0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d021      	beq.n	8006b8c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01a      	beq.n	8006b8c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e4      	bne.n	8006b56 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d130      	bne.n	8006bf6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	f023 0310 	bic.w	r3, r3, #16
 8006bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e4      	bne.n	8006b9a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b10      	cmp	r3, #16
 8006bdc:	d103      	bne.n	8006be6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2210      	movs	r2, #16
 8006be4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fe fc6e 	bl	80054d0 <HAL_UARTEx_RxEventCallback>
 8006bf4:	e002      	b.n	8006bfc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fa fbe4 	bl	80013c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bfc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c08:	f003 0320 	and.w	r3, r3, #32
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f47f aecb 	bne.w	80069a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c18:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c1c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d049      	beq.n	8006cb8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c2a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d242      	bcs.n	8006cb8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	623b      	str	r3, [r7, #32]
   return(result);
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006c56:	633a      	str	r2, [r7, #48]	; 0x30
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e3      	bne.n	8006c32 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a15      	ldr	r2, [pc, #84]	; (8006cc4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006c6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f043 0320 	orr.w	r3, r3, #32
 8006c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	69b9      	ldr	r1, [r7, #24]
 8006c98:	69fa      	ldr	r2, [r7, #28]
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	617b      	str	r3, [r7, #20]
   return(result);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e4      	bne.n	8006c70 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ca6:	e007      	b.n	8006cb8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0208 	orr.w	r2, r2, #8
 8006cb6:	619a      	str	r2, [r3, #24]
}
 8006cb8:	bf00      	nop
 8006cba:	37b8      	adds	r7, #184	; 0xb8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40008000 	.word	0x40008000
 8006cc4:	08006449 	.word	0x08006449

08006cc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b088      	sub	sp, #32
 8006d02:	af02      	add	r7, sp, #8
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e046      	b.n	8006dac <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2224      	movs	r2, #36	; 0x24
 8006d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d105      	bne.n	8006d64 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006d58:	1d3b      	adds	r3, r7, #4
 8006d5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f911 	bl	8006f86 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d74:	f7f9 fe76 	bl	8000a64 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7fe ff10 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	75fb      	strb	r3, [r7, #23]
 8006d98:	e003      	b.n	8006da2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b089      	sub	sp, #36	; 0x24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_UARTEx_EnableStopMode+0x16>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e021      	b.n	8006e0e <HAL_UARTEx_EnableStopMode+0x5a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f043 0302 	orr.w	r3, r3, #2
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6979      	ldr	r1, [r7, #20]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3724      	adds	r7, #36	; 0x24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_UARTEx_EnableFifoMode+0x16>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e02b      	b.n	8006e86 <HAL_UARTEx_EnableFifoMode+0x6e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2224      	movs	r2, #36	; 0x24
 8006e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006e64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8ac 	bl	8006fcc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e02d      	b.n	8006f02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2224      	movs	r2, #36	; 0x24
 8006eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0201 	bic.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f872 	bl	8006fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e02d      	b.n	8006f7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2224      	movs	r2, #36	; 0x24
 8006f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0201 	bic.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f834 	bl	8006fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	1d3b      	adds	r3, r7, #4
 8006f90:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f023 0210 	bic.w	r2, r3, #16
 8006f9e:	893b      	ldrh	r3, [r7, #8]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8006fb4:	7abb      	ldrb	r3, [r7, #10]
 8006fb6:	061a      	lsls	r2, r3, #24
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]
}
 8006fc0:	bf00      	nop
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr
	...

08006fcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d108      	bne.n	8006fee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fec:	e031      	b.n	8007052 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fee:	2308      	movs	r3, #8
 8006ff0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	0e5b      	lsrs	r3, r3, #25
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	0f5b      	lsrs	r3, r3, #29
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	7b3a      	ldrb	r2, [r7, #12]
 800701a:	4910      	ldr	r1, [pc, #64]	; (800705c <UARTEx_SetNbDataToProcess+0x90>)
 800701c:	5c8a      	ldrb	r2, [r1, r2]
 800701e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007022:	7b3a      	ldrb	r2, [r7, #12]
 8007024:	490e      	ldr	r1, [pc, #56]	; (8007060 <UARTEx_SetNbDataToProcess+0x94>)
 8007026:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007028:	fb93 f3f2 	sdiv	r3, r3, r2
 800702c:	b29a      	uxth	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	7b7a      	ldrb	r2, [r7, #13]
 8007038:	4908      	ldr	r1, [pc, #32]	; (800705c <UARTEx_SetNbDataToProcess+0x90>)
 800703a:	5c8a      	ldrb	r2, [r1, r2]
 800703c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007040:	7b7a      	ldrb	r2, [r7, #13]
 8007042:	4907      	ldr	r1, [pc, #28]	; (8007060 <UARTEx_SetNbDataToProcess+0x94>)
 8007044:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007046:	fb93 f3f2 	sdiv	r3, r3, r2
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr
 800705c:	0800c238 	.word	0x0800c238
 8007060:	0800c240 	.word	0x0800c240

08007064 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	619a      	str	r2, [r3, #24]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr

08007098 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af02      	add	r7, sp, #8
 800709e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80070a0:	4a24      	ldr	r2, [pc, #144]	; (8007134 <RadioInit+0x9c>)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80070a6:	4b24      	ldr	r3, [pc, #144]	; (8007138 <RadioInit+0xa0>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80070ac:	4b22      	ldr	r3, [pc, #136]	; (8007138 <RadioInit+0xa0>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80070b2:	4b21      	ldr	r3, [pc, #132]	; (8007138 <RadioInit+0xa0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80070b8:	4b1f      	ldr	r3, [pc, #124]	; (8007138 <RadioInit+0xa0>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80070be:	481f      	ldr	r0, [pc, #124]	; (800713c <RadioInit+0xa4>)
 80070c0:	f001 ffbe 	bl	8009040 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80070c4:	4b1c      	ldr	r3, [pc, #112]	; (8007138 <RadioInit+0xa0>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80070ca:	4b1b      	ldr	r3, [pc, #108]	; (8007138 <RadioInit+0xa0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80070d0:	f002 fa52 	bl	8009578 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80070d4:	2100      	movs	r1, #0
 80070d6:	2000      	movs	r0, #0
 80070d8:	f002 fe1e 	bl	8009d18 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80070dc:	2204      	movs	r2, #4
 80070de:	2100      	movs	r1, #0
 80070e0:	2001      	movs	r0, #1
 80070e2:	f002 fbdb 	bl	800989c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80070e6:	2300      	movs	r3, #0
 80070e8:	2200      	movs	r2, #0
 80070ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80070f2:	f002 fb0b 	bl	800970c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80070f6:	f000 fe97 	bl	8007e28 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80070fa:	2300      	movs	r3, #0
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4b10      	ldr	r3, [pc, #64]	; (8007140 <RadioInit+0xa8>)
 8007100:	2200      	movs	r2, #0
 8007102:	f04f 31ff 	mov.w	r1, #4294967295
 8007106:	480f      	ldr	r0, [pc, #60]	; (8007144 <RadioInit+0xac>)
 8007108:	f004 f976 	bl	800b3f8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800710c:	2300      	movs	r3, #0
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <RadioInit+0xb0>)
 8007112:	2200      	movs	r2, #0
 8007114:	f04f 31ff 	mov.w	r1, #4294967295
 8007118:	480c      	ldr	r0, [pc, #48]	; (800714c <RadioInit+0xb4>)
 800711a:	f004 f96d 	bl	800b3f8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800711e:	4809      	ldr	r0, [pc, #36]	; (8007144 <RadioInit+0xac>)
 8007120:	f004 fa0e 	bl	800b540 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007124:	4809      	ldr	r0, [pc, #36]	; (800714c <RadioInit+0xb4>)
 8007126:	f004 fa0b 	bl	800b540 <UTIL_TIMER_Stop>
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2000027c 	.word	0x2000027c
 8007138:	20000280 	.word	0x20000280
 800713c:	08008251 	.word	0x08008251
 8007140:	080081c1 	.word	0x080081c1
 8007144:	200002dc 	.word	0x200002dc
 8007148:	080081d5 	.word	0x080081d5
 800714c:	200002f4 	.word	0x200002f4

08007150 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007154:	f001 ffbc 	bl	80090d0 <SUBGRF_GetOperatingMode>
 8007158:	4603      	mov	r3, r0
 800715a:	2b07      	cmp	r3, #7
 800715c:	d00a      	beq.n	8007174 <RadioGetStatus+0x24>
 800715e:	2b07      	cmp	r3, #7
 8007160:	dc0a      	bgt.n	8007178 <RadioGetStatus+0x28>
 8007162:	2b04      	cmp	r3, #4
 8007164:	d002      	beq.n	800716c <RadioGetStatus+0x1c>
 8007166:	2b05      	cmp	r3, #5
 8007168:	d002      	beq.n	8007170 <RadioGetStatus+0x20>
 800716a:	e005      	b.n	8007178 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800716c:	2302      	movs	r3, #2
 800716e:	e004      	b.n	800717a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007170:	2301      	movs	r3, #1
 8007172:	e002      	b.n	800717a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007174:	2303      	movs	r3, #3
 8007176:	e000      	b.n	800717a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007178:	2300      	movs	r3, #0
    }
}
 800717a:	4618      	mov	r0, r3
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800718a:	4a2a      	ldr	r2, [pc, #168]	; (8007234 <RadioSetModem+0xb4>)
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	4618      	mov	r0, r3
 8007194:	f003 f9ad 	bl	800a4f2 <RFW_SetRadioModem>
    switch( modem )
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	2b05      	cmp	r3, #5
 800719c:	d80e      	bhi.n	80071bc <RadioSetModem+0x3c>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <RadioSetModem+0x24>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071cb 	.word	0x080071cb
 80071a8:	080071d9 	.word	0x080071d9
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	080071ff 	.word	0x080071ff
 80071b4:	0800720d 	.word	0x0800720d
 80071b8:	0800721b 	.word	0x0800721b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80071bc:	2003      	movs	r0, #3
 80071be:	f002 fb47 	bl	8009850 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <RadioSetModem+0xb4>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	735a      	strb	r2, [r3, #13]
        break;
 80071c8:	e02f      	b.n	800722a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80071ca:	2000      	movs	r0, #0
 80071cc:	f002 fb40 	bl	8009850 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80071d0:	4b18      	ldr	r3, [pc, #96]	; (8007234 <RadioSetModem+0xb4>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	735a      	strb	r2, [r3, #13]
        break;
 80071d6:	e028      	b.n	800722a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80071d8:	2001      	movs	r0, #1
 80071da:	f002 fb39 	bl	8009850 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80071de:	4b15      	ldr	r3, [pc, #84]	; (8007234 <RadioSetModem+0xb4>)
 80071e0:	7b5a      	ldrb	r2, [r3, #13]
 80071e2:	4b14      	ldr	r3, [pc, #80]	; (8007234 <RadioSetModem+0xb4>)
 80071e4:	7b1b      	ldrb	r3, [r3, #12]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d01e      	beq.n	8007228 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80071ea:	4b12      	ldr	r3, [pc, #72]	; (8007234 <RadioSetModem+0xb4>)
 80071ec:	7b1a      	ldrb	r2, [r3, #12]
 80071ee:	4b11      	ldr	r3, [pc, #68]	; (8007234 <RadioSetModem+0xb4>)
 80071f0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <RadioSetModem+0xb4>)
 80071f4:	7b5b      	ldrb	r3, [r3, #13]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 ffac 	bl	8008154 <RadioSetPublicNetwork>
        }
        break;
 80071fc:	e014      	b.n	8007228 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80071fe:	2002      	movs	r0, #2
 8007200:	f002 fb26 	bl	8009850 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <RadioSetModem+0xb4>)
 8007206:	2200      	movs	r2, #0
 8007208:	735a      	strb	r2, [r3, #13]
        break;
 800720a:	e00e      	b.n	800722a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800720c:	2002      	movs	r0, #2
 800720e:	f002 fb1f 	bl	8009850 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <RadioSetModem+0xb4>)
 8007214:	2200      	movs	r2, #0
 8007216:	735a      	strb	r2, [r3, #13]
        break;
 8007218:	e007      	b.n	800722a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800721a:	2000      	movs	r0, #0
 800721c:	f002 fb18 	bl	8009850 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <RadioSetModem+0xb4>)
 8007222:	2200      	movs	r2, #0
 8007224:	735a      	strb	r2, [r3, #13]
        break;
 8007226:	e000      	b.n	800722a <RadioSetModem+0xaa>
        break;
 8007228:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000280 	.word	0x20000280

08007238 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f002 fabf 	bl	80097c4 <SUBGRF_SetRfFrequency>
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b090      	sub	sp, #64	; 0x40
 8007252:	af0a      	add	r7, sp, #40	; 0x28
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	603b      	str	r3, [r7, #0]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800725e:	2301      	movs	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800726a:	f000 fdf0 	bl	8007e4e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800726e:	2000      	movs	r0, #0
 8007270:	f7ff ff86 	bl	8007180 <RadioSetModem>

    RadioSetChannel( freq );
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff ffdf 	bl	8007238 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800727a:	2301      	movs	r3, #1
 800727c:	9309      	str	r3, [sp, #36]	; 0x24
 800727e:	2300      	movs	r3, #0
 8007280:	9308      	str	r3, [sp, #32]
 8007282:	2300      	movs	r3, #0
 8007284:	9307      	str	r3, [sp, #28]
 8007286:	2300      	movs	r3, #0
 8007288:	9306      	str	r3, [sp, #24]
 800728a:	2300      	movs	r3, #0
 800728c:	9305      	str	r3, [sp, #20]
 800728e:	2300      	movs	r3, #0
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	2300      	movs	r3, #0
 8007294:	9303      	str	r3, [sp, #12]
 8007296:	2300      	movs	r3, #0
 8007298:	9302      	str	r3, [sp, #8]
 800729a:	2303      	movs	r3, #3
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	2300      	movs	r3, #0
 80072a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80072a8:	68b9      	ldr	r1, [r7, #8]
 80072aa:	2000      	movs	r0, #0
 80072ac:	f000 f83c 	bl	8007328 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80072b0:	2000      	movs	r0, #0
 80072b2:	f000 fdd3 	bl	8007e5c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80072b6:	f000 ff7b 	bl	80081b0 <RadioGetWakeupTime>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4618      	mov	r0, r3
 80072be:	f7f9 fbe5 	bl	8000a8c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80072c2:	f004 fa57 	bl	800b774 <UTIL_TIMER_GetCurrentTime>
 80072c6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80072c8:	e00d      	b.n	80072e6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80072ca:	2000      	movs	r0, #0
 80072cc:	f000 fec0 	bl	8008050 <RadioRssi>
 80072d0:	4603      	mov	r3, r0
 80072d2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80072d4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80072d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072dc:	429a      	cmp	r2, r3
 80072de:	dd02      	ble.n	80072e6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80072e0:	2300      	movs	r3, #0
 80072e2:	75fb      	strb	r3, [r7, #23]
            break;
 80072e4:	e006      	b.n	80072f4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80072e6:	6938      	ldr	r0, [r7, #16]
 80072e8:	f004 fa56 	bl	800b798 <UTIL_TIMER_GetElapsedTime>
 80072ec:	4602      	mov	r2, r0
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d8ea      	bhi.n	80072ca <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80072f4:	f000 fdab 	bl	8007e4e <RadioStandby>

    return status;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800730c:	2300      	movs	r3, #0
 800730e:	2200      	movs	r2, #0
 8007310:	2100      	movs	r1, #0
 8007312:	2000      	movs	r0, #0
 8007314:	f002 f9fa 	bl	800970c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007318:	f001 ffab 	bl	8009272 <SUBGRF_GetRandom>
 800731c:	6078      	str	r0, [r7, #4]

    return rnd;
 800731e:	687b      	ldr	r3, [r7, #4]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	; 0x28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	461a      	mov	r2, r3
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
 8007338:	4613      	mov	r3, r2
 800733a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800733c:	4ab9      	ldr	r2, [pc, #740]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800733e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007342:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007344:	f003 f893 	bl	800a46e <RFW_DeInit>
    if( rxContinuous == true )
 8007348:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007354:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800735c:	4ab2      	ldr	r2, [pc, #712]	; (8007628 <RadioSetRxConfig+0x300>)
 800735e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007362:	7013      	strb	r3, [r2, #0]
 8007364:	e002      	b.n	800736c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007366:	4bb0      	ldr	r3, [pc, #704]	; (8007628 <RadioSetRxConfig+0x300>)
 8007368:	22ff      	movs	r2, #255	; 0xff
 800736a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	2b05      	cmp	r3, #5
 8007370:	d009      	beq.n	8007386 <RadioSetRxConfig+0x5e>
 8007372:	2b05      	cmp	r3, #5
 8007374:	f300 81d7 	bgt.w	8007726 <RadioSetRxConfig+0x3fe>
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 80bf 	beq.w	80074fc <RadioSetRxConfig+0x1d4>
 800737e:	2b01      	cmp	r3, #1
 8007380:	f000 8124 	beq.w	80075cc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007384:	e1cf      	b.n	8007726 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007386:	2001      	movs	r0, #1
 8007388:	f002 f8b8 	bl	80094fc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800738c:	4ba5      	ldr	r3, [pc, #660]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007394:	4aa3      	ldr	r2, [pc, #652]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800739a:	4ba2      	ldr	r3, [pc, #648]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800739c:	2209      	movs	r2, #9
 800739e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80073a2:	4ba0      	ldr	r3, [pc, #640]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80073aa:	68b8      	ldr	r0, [r7, #8]
 80073ac:	f002 ff92 	bl	800a2d4 <SUBGRF_GetFskBandwidthRegValue>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	4b9b      	ldr	r3, [pc, #620]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80073ba:	4b9a      	ldr	r3, [pc, #616]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073bc:	2200      	movs	r2, #0
 80073be:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80073c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	4b97      	ldr	r3, [pc, #604]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073c8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80073ca:	4b96      	ldr	r3, [pc, #600]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80073d0:	4b94      	ldr	r3, [pc, #592]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073d2:	2210      	movs	r2, #16
 80073d4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80073d6:	4b93      	ldr	r3, [pc, #588]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073d8:	2200      	movs	r2, #0
 80073da:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80073dc:	4b91      	ldr	r3, [pc, #580]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073de:	2200      	movs	r2, #0
 80073e0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80073e2:	4b91      	ldr	r3, [pc, #580]	; (8007628 <RadioSetRxConfig+0x300>)
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	4b8f      	ldr	r3, [pc, #572]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073e8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80073ea:	4b8e      	ldr	r3, [pc, #568]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073ec:	2201      	movs	r2, #1
 80073ee:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80073f0:	4b8c      	ldr	r3, [pc, #560]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80073f6:	2005      	movs	r0, #5
 80073f8:	f7ff fec2 	bl	8007180 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80073fc:	488b      	ldr	r0, [pc, #556]	; (800762c <RadioSetRxConfig+0x304>)
 80073fe:	f002 fb1b 	bl	8009a38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007402:	488b      	ldr	r0, [pc, #556]	; (8007630 <RadioSetRxConfig+0x308>)
 8007404:	f002 fbea 	bl	8009bdc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007408:	4a8a      	ldr	r2, [pc, #552]	; (8007634 <RadioSetRxConfig+0x30c>)
 800740a:	f107 031c 	add.w	r3, r7, #28
 800740e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007412:	e883 0003 	stmia.w	r3, {r0, r1}
 8007416:	f107 031c 	add.w	r3, r7, #28
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fea7 	bl	800916e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007420:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007424:	f001 fef2 	bl	800920c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007428:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800742c:	f000 fe2f 	bl	800808e <RadioRead>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800743a:	f023 0310 	bic.w	r3, r3, #16
 800743e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007446:	4619      	mov	r1, r3
 8007448:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800744c:	f000 fe0d 	bl	800806a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007450:	2104      	movs	r1, #4
 8007452:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007456:	f000 fe08 	bl	800806a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800745a:	f640 009b 	movw	r0, #2203	; 0x89b
 800745e:	f000 fe16 	bl	800808e <RadioRead>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746c:	f023 031c 	bic.w	r3, r3, #28
 8007470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007478:	f043 0308 	orr.w	r3, r3, #8
 800747c:	b2db      	uxtb	r3, r3
 800747e:	4619      	mov	r1, r3
 8007480:	f640 009b 	movw	r0, #2203	; 0x89b
 8007484:	f000 fdf1 	bl	800806a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007488:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800748c:	f000 fdff 	bl	800808e <RadioRead>
 8007490:	4603      	mov	r3, r0
 8007492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749a:	f023 0318 	bic.w	r3, r3, #24
 800749e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80074a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a6:	f043 0318 	orr.w	r3, r3, #24
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80074b2:	f000 fdda 	bl	800806a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80074b6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80074ba:	f000 fde8 	bl	800808e <RadioRead>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80074c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80074d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80074e0:	f000 fdc3 	bl	800806a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80074e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074e6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f6:	4a4b      	ldr	r2, [pc, #300]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80074f8:	6093      	str	r3, [r2, #8]
            break;
 80074fa:	e115      	b.n	8007728 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80074fc:	2000      	movs	r0, #0
 80074fe:	f001 fffd 	bl	80094fc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007502:	4b48      	ldr	r3, [pc, #288]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800750a:	4a46      	ldr	r2, [pc, #280]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007510:	4b44      	ldr	r3, [pc, #272]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007512:	220b      	movs	r2, #11
 8007514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007518:	68b8      	ldr	r0, [r7, #8]
 800751a:	f002 fedb 	bl	800a2d4 <SUBGRF_GetFskBandwidthRegValue>
 800751e:	4603      	mov	r3, r0
 8007520:	461a      	mov	r2, r3
 8007522:	4b40      	ldr	r3, [pc, #256]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007528:	4b3e      	ldr	r3, [pc, #248]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800752a:	2200      	movs	r2, #0
 800752c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800752e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	b29a      	uxth	r2, r3
 8007534:	4b3b      	ldr	r3, [pc, #236]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007536:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007538:	4b3a      	ldr	r3, [pc, #232]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800753a:	2204      	movs	r2, #4
 800753c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800753e:	4b39      	ldr	r3, [pc, #228]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007540:	2218      	movs	r2, #24
 8007542:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007544:	4b37      	ldr	r3, [pc, #220]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007546:	2200      	movs	r2, #0
 8007548:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800754a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800754e:	f083 0301 	eor.w	r3, r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	4b33      	ldr	r3, [pc, #204]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007558:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800755a:	4b33      	ldr	r3, [pc, #204]	; (8007628 <RadioSetRxConfig+0x300>)
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	4b31      	ldr	r3, [pc, #196]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007560:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007562:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800756a:	4b2e      	ldr	r3, [pc, #184]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800756c:	22f2      	movs	r2, #242	; 0xf2
 800756e:	75da      	strb	r2, [r3, #23]
 8007570:	e002      	b.n	8007578 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007572:	4b2c      	ldr	r3, [pc, #176]	; (8007624 <RadioSetRxConfig+0x2fc>)
 8007574:	2201      	movs	r2, #1
 8007576:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007578:	4b2a      	ldr	r3, [pc, #168]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800757a:	2201      	movs	r2, #1
 800757c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800757e:	f000 fc66 	bl	8007e4e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007582:	2000      	movs	r0, #0
 8007584:	f7ff fdfc 	bl	8007180 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007588:	4828      	ldr	r0, [pc, #160]	; (800762c <RadioSetRxConfig+0x304>)
 800758a:	f002 fa55 	bl	8009a38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800758e:	4828      	ldr	r0, [pc, #160]	; (8007630 <RadioSetRxConfig+0x308>)
 8007590:	f002 fb24 	bl	8009bdc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007594:	4a28      	ldr	r2, [pc, #160]	; (8007638 <RadioSetRxConfig+0x310>)
 8007596:	f107 0314 	add.w	r3, r7, #20
 800759a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800759e:	e883 0003 	stmia.w	r3, {r0, r1}
 80075a2:	f107 0314 	add.w	r3, r7, #20
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fde1 	bl	800916e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80075ac:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075b0:	f001 fe2c 	bl	800920c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80075b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c6:	4a17      	ldr	r2, [pc, #92]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80075c8:	6093      	str	r3, [r2, #8]
            break;
 80075ca:	e0ad      	b.n	8007728 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80075cc:	2000      	movs	r0, #0
 80075ce:	f001 ff95 	bl	80094fc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80075e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80075e4:	4a15      	ldr	r2, [pc, #84]	; (800763c <RadioSetRxConfig+0x314>)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	781a      	ldrb	r2, [r3, #0]
 80075ec:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80075ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80075f2:	4a0c      	ldr	r2, [pc, #48]	; (8007624 <RadioSetRxConfig+0x2fc>)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d105      	bne.n	800760c <RadioSetRxConfig+0x2e4>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b0b      	cmp	r3, #11
 8007604:	d008      	beq.n	8007618 <RadioSetRxConfig+0x2f0>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b0c      	cmp	r3, #12
 800760a:	d005      	beq.n	8007618 <RadioSetRxConfig+0x2f0>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d116      	bne.n	8007640 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b0c      	cmp	r3, #12
 8007616:	d113      	bne.n	8007640 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007618:	4b02      	ldr	r3, [pc, #8]	; (8007624 <RadioSetRxConfig+0x2fc>)
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007620:	e012      	b.n	8007648 <RadioSetRxConfig+0x320>
 8007622:	bf00      	nop
 8007624:	20000280 	.word	0x20000280
 8007628:	20000008 	.word	0x20000008
 800762c:	200002b8 	.word	0x200002b8
 8007630:	2000028e 	.word	0x2000028e
 8007634:	0800bef8 	.word	0x0800bef8
 8007638:	0800bf00 	.word	0x0800bf00
 800763c:	0800c2d4 	.word	0x0800c2d4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007640:	4b3b      	ldr	r3, [pc, #236]	; (8007730 <RadioSetRxConfig+0x408>)
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007648:	4b39      	ldr	r3, [pc, #228]	; (8007730 <RadioSetRxConfig+0x408>)
 800764a:	2201      	movs	r2, #1
 800764c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800764e:	4b38      	ldr	r3, [pc, #224]	; (8007730 <RadioSetRxConfig+0x408>)
 8007650:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007654:	2b05      	cmp	r3, #5
 8007656:	d004      	beq.n	8007662 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007658:	4b35      	ldr	r3, [pc, #212]	; (8007730 <RadioSetRxConfig+0x408>)
 800765a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800765e:	2b06      	cmp	r3, #6
 8007660:	d10a      	bne.n	8007678 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8007662:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007664:	2b0b      	cmp	r3, #11
 8007666:	d803      	bhi.n	8007670 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007668:	4b31      	ldr	r3, [pc, #196]	; (8007730 <RadioSetRxConfig+0x408>)
 800766a:	220c      	movs	r2, #12
 800766c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800766e:	e006      	b.n	800767e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007670:	4a2f      	ldr	r2, [pc, #188]	; (8007730 <RadioSetRxConfig+0x408>)
 8007672:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007674:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007676:	e002      	b.n	800767e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007678:	4a2d      	ldr	r2, [pc, #180]	; (8007730 <RadioSetRxConfig+0x408>)
 800767a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800767c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800767e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007682:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <RadioSetRxConfig+0x408>)
 8007684:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007686:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <RadioSetRxConfig+0x40c>)
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	4b29      	ldr	r3, [pc, #164]	; (8007730 <RadioSetRxConfig+0x408>)
 800768c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800768e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007692:	4b27      	ldr	r3, [pc, #156]	; (8007730 <RadioSetRxConfig+0x408>)
 8007694:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007698:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800769c:	4b24      	ldr	r3, [pc, #144]	; (8007730 <RadioSetRxConfig+0x408>)
 800769e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80076a2:	f000 fbd4 	bl	8007e4e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80076a6:	2001      	movs	r0, #1
 80076a8:	f7ff fd6a 	bl	8007180 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80076ac:	4822      	ldr	r0, [pc, #136]	; (8007738 <RadioSetRxConfig+0x410>)
 80076ae:	f002 f9c3 	bl	8009a38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80076b2:	4822      	ldr	r0, [pc, #136]	; (800773c <RadioSetRxConfig+0x414>)
 80076b4:	f002 fa92 	bl	8009bdc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80076b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 ff2c 	bl	800951a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80076c2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80076c6:	f002 fbf3 	bl	8009eb0 <SUBGRF_ReadRegister>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	4619      	mov	r1, r3
 80076d4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80076d8:	f002 fbc8 	bl	8009e6c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80076dc:	4b14      	ldr	r3, [pc, #80]	; (8007730 <RadioSetRxConfig+0x408>)
 80076de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d10d      	bne.n	8007702 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80076e6:	f240 7036 	movw	r0, #1846	; 0x736
 80076ea:	f002 fbe1 	bl	8009eb0 <SUBGRF_ReadRegister>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f023 0304 	bic.w	r3, r3, #4
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	f240 7036 	movw	r0, #1846	; 0x736
 80076fc:	f002 fbb6 	bl	8009e6c <SUBGRF_WriteRegister>
 8007700:	e00c      	b.n	800771c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007702:	f240 7036 	movw	r0, #1846	; 0x736
 8007706:	f002 fbd3 	bl	8009eb0 <SUBGRF_ReadRegister>
 800770a:	4603      	mov	r3, r0
 800770c:	f043 0304 	orr.w	r3, r3, #4
 8007710:	b2db      	uxtb	r3, r3
 8007712:	4619      	mov	r1, r3
 8007714:	f240 7036 	movw	r0, #1846	; 0x736
 8007718:	f002 fba8 	bl	8009e6c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <RadioSetRxConfig+0x408>)
 800771e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007722:	609a      	str	r2, [r3, #8]
            break;
 8007724:	e000      	b.n	8007728 <RadioSetRxConfig+0x400>
            break;
 8007726:	bf00      	nop
    }
}
 8007728:	bf00      	nop
 800772a:	3728      	adds	r7, #40	; 0x28
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000280 	.word	0x20000280
 8007734:	20000008 	.word	0x20000008
 8007738:	200002b8 	.word	0x200002b8
 800773c:	2000028e 	.word	0x2000028e

08007740 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60ba      	str	r2, [r7, #8]
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
 800774e:	460b      	mov	r3, r1
 8007750:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8007752:	f002 fe8c 	bl	800a46e <RFW_DeInit>
    switch( modem )
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	2b04      	cmp	r3, #4
 800775a:	f000 80c7 	beq.w	80078ec <RadioSetTxConfig+0x1ac>
 800775e:	2b04      	cmp	r3, #4
 8007760:	f300 80d6 	bgt.w	8007910 <RadioSetTxConfig+0x1d0>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <RadioSetTxConfig+0x2e>
 8007768:	2b01      	cmp	r3, #1
 800776a:	d059      	beq.n	8007820 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800776c:	e0d0      	b.n	8007910 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800776e:	4b77      	ldr	r3, [pc, #476]	; (800794c <RadioSetTxConfig+0x20c>)
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007776:	4a75      	ldr	r2, [pc, #468]	; (800794c <RadioSetTxConfig+0x20c>)
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800777c:	4b73      	ldr	r3, [pc, #460]	; (800794c <RadioSetTxConfig+0x20c>)
 800777e:	220b      	movs	r2, #11
 8007780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f002 fda5 	bl	800a2d4 <SUBGRF_GetFskBandwidthRegValue>
 800778a:	4603      	mov	r3, r0
 800778c:	461a      	mov	r2, r3
 800778e:	4b6f      	ldr	r3, [pc, #444]	; (800794c <RadioSetTxConfig+0x20c>)
 8007790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007794:	4a6d      	ldr	r2, [pc, #436]	; (800794c <RadioSetTxConfig+0x20c>)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800779a:	4b6c      	ldr	r3, [pc, #432]	; (800794c <RadioSetTxConfig+0x20c>)
 800779c:	2200      	movs	r2, #0
 800779e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80077a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	4b69      	ldr	r3, [pc, #420]	; (800794c <RadioSetTxConfig+0x20c>)
 80077a8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80077aa:	4b68      	ldr	r3, [pc, #416]	; (800794c <RadioSetTxConfig+0x20c>)
 80077ac:	2204      	movs	r2, #4
 80077ae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80077b0:	4b66      	ldr	r3, [pc, #408]	; (800794c <RadioSetTxConfig+0x20c>)
 80077b2:	2218      	movs	r2, #24
 80077b4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80077b6:	4b65      	ldr	r3, [pc, #404]	; (800794c <RadioSetTxConfig+0x20c>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80077bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077c0:	f083 0301 	eor.w	r3, r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	4b60      	ldr	r3, [pc, #384]	; (800794c <RadioSetTxConfig+0x20c>)
 80077ca:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80077cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80077d4:	4b5d      	ldr	r3, [pc, #372]	; (800794c <RadioSetTxConfig+0x20c>)
 80077d6:	22f2      	movs	r2, #242	; 0xf2
 80077d8:	75da      	strb	r2, [r3, #23]
 80077da:	e002      	b.n	80077e2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80077dc:	4b5b      	ldr	r3, [pc, #364]	; (800794c <RadioSetTxConfig+0x20c>)
 80077de:	2201      	movs	r2, #1
 80077e0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80077e2:	4b5a      	ldr	r3, [pc, #360]	; (800794c <RadioSetTxConfig+0x20c>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80077e8:	f000 fb31 	bl	8007e4e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80077ec:	2000      	movs	r0, #0
 80077ee:	f7ff fcc7 	bl	8007180 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80077f2:	4857      	ldr	r0, [pc, #348]	; (8007950 <RadioSetTxConfig+0x210>)
 80077f4:	f002 f920 	bl	8009a38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077f8:	4856      	ldr	r0, [pc, #344]	; (8007954 <RadioSetTxConfig+0x214>)
 80077fa:	f002 f9ef 	bl	8009bdc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80077fe:	4a56      	ldr	r2, [pc, #344]	; (8007958 <RadioSetTxConfig+0x218>)
 8007800:	f107 0310 	add.w	r3, r7, #16
 8007804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007808:	e883 0003 	stmia.w	r3, {r0, r1}
 800780c:	f107 0310 	add.w	r3, r7, #16
 8007810:	4618      	mov	r0, r3
 8007812:	f001 fcac 	bl	800916e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007816:	f240 10ff 	movw	r0, #511	; 0x1ff
 800781a:	f001 fcf7 	bl	800920c <SUBGRF_SetWhiteningSeed>
            break;
 800781e:	e078      	b.n	8007912 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007820:	4b4a      	ldr	r3, [pc, #296]	; (800794c <RadioSetTxConfig+0x20c>)
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	4b47      	ldr	r3, [pc, #284]	; (800794c <RadioSetTxConfig+0x20c>)
 800782e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007832:	4a4a      	ldr	r2, [pc, #296]	; (800795c <RadioSetTxConfig+0x21c>)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4413      	add	r3, r2
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	4b44      	ldr	r3, [pc, #272]	; (800794c <RadioSetTxConfig+0x20c>)
 800783c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007840:	4a42      	ldr	r2, [pc, #264]	; (800794c <RadioSetTxConfig+0x20c>)
 8007842:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007846:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <RadioSetTxConfig+0x11c>
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b0b      	cmp	r3, #11
 8007854:	d008      	beq.n	8007868 <RadioSetTxConfig+0x128>
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d005      	beq.n	8007868 <RadioSetTxConfig+0x128>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d107      	bne.n	8007872 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	2b0c      	cmp	r3, #12
 8007866:	d104      	bne.n	8007872 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007868:	4b38      	ldr	r3, [pc, #224]	; (800794c <RadioSetTxConfig+0x20c>)
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007870:	e003      	b.n	800787a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007872:	4b36      	ldr	r3, [pc, #216]	; (800794c <RadioSetTxConfig+0x20c>)
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800787a:	4b34      	ldr	r3, [pc, #208]	; (800794c <RadioSetTxConfig+0x20c>)
 800787c:	2201      	movs	r2, #1
 800787e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007880:	4b32      	ldr	r3, [pc, #200]	; (800794c <RadioSetTxConfig+0x20c>)
 8007882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007886:	2b05      	cmp	r3, #5
 8007888:	d004      	beq.n	8007894 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800788a:	4b30      	ldr	r3, [pc, #192]	; (800794c <RadioSetTxConfig+0x20c>)
 800788c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007890:	2b06      	cmp	r3, #6
 8007892:	d10a      	bne.n	80078aa <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007894:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007896:	2b0b      	cmp	r3, #11
 8007898:	d803      	bhi.n	80078a2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800789a:	4b2c      	ldr	r3, [pc, #176]	; (800794c <RadioSetTxConfig+0x20c>)
 800789c:	220c      	movs	r2, #12
 800789e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80078a0:	e006      	b.n	80078b0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80078a2:	4a2a      	ldr	r2, [pc, #168]	; (800794c <RadioSetTxConfig+0x20c>)
 80078a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078a6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80078a8:	e002      	b.n	80078b0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80078aa:	4a28      	ldr	r2, [pc, #160]	; (800794c <RadioSetTxConfig+0x20c>)
 80078ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078ae:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80078b0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80078b4:	4b25      	ldr	r3, [pc, #148]	; (800794c <RadioSetTxConfig+0x20c>)
 80078b6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80078b8:	4b29      	ldr	r3, [pc, #164]	; (8007960 <RadioSetTxConfig+0x220>)
 80078ba:	781a      	ldrb	r2, [r3, #0]
 80078bc:	4b23      	ldr	r3, [pc, #140]	; (800794c <RadioSetTxConfig+0x20c>)
 80078be:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80078c0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80078c4:	4b21      	ldr	r3, [pc, #132]	; (800794c <RadioSetTxConfig+0x20c>)
 80078c6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80078ca:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80078ce:	4b1f      	ldr	r3, [pc, #124]	; (800794c <RadioSetTxConfig+0x20c>)
 80078d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80078d4:	f000 fabb 	bl	8007e4e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80078d8:	2001      	movs	r0, #1
 80078da:	f7ff fc51 	bl	8007180 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078de:	481c      	ldr	r0, [pc, #112]	; (8007950 <RadioSetTxConfig+0x210>)
 80078e0:	f002 f8aa 	bl	8009a38 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078e4:	481b      	ldr	r0, [pc, #108]	; (8007954 <RadioSetTxConfig+0x214>)
 80078e6:	f002 f979 	bl	8009bdc <SUBGRF_SetPacketParams>
            break;
 80078ea:	e012      	b.n	8007912 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80078ec:	2004      	movs	r0, #4
 80078ee:	f7ff fc47 	bl	8007180 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80078f2:	4b16      	ldr	r3, [pc, #88]	; (800794c <RadioSetTxConfig+0x20c>)
 80078f4:	2202      	movs	r2, #2
 80078f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80078fa:	4a14      	ldr	r2, [pc, #80]	; (800794c <RadioSetTxConfig+0x20c>)
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007900:	4b12      	ldr	r3, [pc, #72]	; (800794c <RadioSetTxConfig+0x20c>)
 8007902:	2216      	movs	r2, #22
 8007904:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007908:	4811      	ldr	r0, [pc, #68]	; (8007950 <RadioSetTxConfig+0x210>)
 800790a:	f002 f895 	bl	8009a38 <SUBGRF_SetModulationParams>
            break;
 800790e:	e000      	b.n	8007912 <RadioSetTxConfig+0x1d2>
            break;
 8007910:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007916:	4618      	mov	r0, r3
 8007918:	f002 fbde 	bl	800a0d8 <SUBGRF_SetRfTxPower>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	4b0a      	ldr	r3, [pc, #40]	; (800794c <RadioSetTxConfig+0x20c>)
 8007922:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007926:	210e      	movs	r1, #14
 8007928:	f640 101f 	movw	r0, #2335	; 0x91f
 800792c:	f002 fa9e 	bl	8009e6c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007930:	4b06      	ldr	r3, [pc, #24]	; (800794c <RadioSetTxConfig+0x20c>)
 8007932:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007936:	4618      	mov	r0, r3
 8007938:	f002 fdad 	bl	800a496 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800793c:	4a03      	ldr	r2, [pc, #12]	; (800794c <RadioSetTxConfig+0x20c>)
 800793e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007940:	6053      	str	r3, [r2, #4]
}
 8007942:	bf00      	nop
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000280 	.word	0x20000280
 8007950:	200002b8 	.word	0x200002b8
 8007954:	2000028e 	.word	0x2000028e
 8007958:	0800bf00 	.word	0x0800bf00
 800795c:	0800c2d4 	.word	0x0800c2d4
 8007960:	20000008 	.word	0x20000008

08007964 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
    return true;
 800796c:	2301      	movs	r3, #1
}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr

08007978 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	2b0a      	cmp	r3, #10
 800798a:	d83e      	bhi.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <RadioGetLoRaBandwidthInHz+0x1c>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079c1 	.word	0x080079c1
 8007998:	080079d1 	.word	0x080079d1
 800799c:	080079e1 	.word	0x080079e1
 80079a0:	080079f1 	.word	0x080079f1
 80079a4:	080079f9 	.word	0x080079f9
 80079a8:	080079ff 	.word	0x080079ff
 80079ac:	08007a05 	.word	0x08007a05
 80079b0:	08007a0b 	.word	0x08007a0b
 80079b4:	080079c9 	.word	0x080079c9
 80079b8:	080079d9 	.word	0x080079d9
 80079bc:	080079e9 	.word	0x080079e9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80079c0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80079c4:	60fb      	str	r3, [r7, #12]
        break;
 80079c6:	e020      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80079c8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80079cc:	60fb      	str	r3, [r7, #12]
        break;
 80079ce:	e01c      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80079d0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80079d4:	60fb      	str	r3, [r7, #12]
        break;
 80079d6:	e018      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80079d8:	f245 1361 	movw	r3, #20833	; 0x5161
 80079dc:	60fb      	str	r3, [r7, #12]
        break;
 80079de:	e014      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80079e0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80079e4:	60fb      	str	r3, [r7, #12]
        break;
 80079e6:	e010      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80079e8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80079ec:	60fb      	str	r3, [r7, #12]
        break;
 80079ee:	e00c      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80079f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80079f4:	60fb      	str	r3, [r7, #12]
        break;
 80079f6:	e008      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80079f8:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <RadioGetLoRaBandwidthInHz+0xa0>)
 80079fa:	60fb      	str	r3, [r7, #12]
        break;
 80079fc:	e005      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80079fe:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <RadioGetLoRaBandwidthInHz+0xa4>)
 8007a00:	60fb      	str	r3, [r7, #12]
        break;
 8007a02:	e002      	b.n	8007a0a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007a06:	60fb      	str	r3, [r7, #12]
        break;
 8007a08:	bf00      	nop
    }

    return bandwidthInHz;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	0001e848 	.word	0x0001e848
 8007a1c:	0003d090 	.word	0x0003d090
 8007a20:	0007a120 	.word	0x0007a120

08007a24 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	4611      	mov	r1, r2
 8007a30:	461a      	mov	r2, r3
 8007a32:	4603      	mov	r3, r0
 8007a34:	70fb      	strb	r3, [r7, #3]
 8007a36:	460b      	mov	r3, r1
 8007a38:	803b      	strh	r3, [r7, #0]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007a3e:	883b      	ldrh	r3, [r7, #0]
 8007a40:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a42:	78ba      	ldrb	r2, [r7, #2]
 8007a44:	f082 0201 	eor.w	r2, r2, #1
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	d001      	beq.n	8007a52 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007a4e:	2208      	movs	r2, #8
 8007a50:	e000      	b.n	8007a54 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007a52:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007a54:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a56:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007a5a:	7c3b      	ldrb	r3, [r7, #16]
 8007a5c:	7d39      	ldrb	r1, [r7, #20]
 8007a5e:	2900      	cmp	r1, #0
 8007a60:	d001      	beq.n	8007a66 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007a62:	2102      	movs	r1, #2
 8007a64:	e000      	b.n	8007a68 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007a66:	2100      	movs	r1, #0
 8007a68:	440b      	add	r3, r1
 8007a6a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a6c:	4413      	add	r3, r2
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr

08007a78 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b08b      	sub	sp, #44	; 0x2c
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4611      	mov	r1, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	460b      	mov	r3, r1
 8007a88:	71fb      	strb	r3, [r7, #7]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	3304      	adds	r3, #4
 8007a92:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007a94:	2300      	movs	r3, #0
 8007a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2b05      	cmp	r3, #5
 8007a9e:	d002      	beq.n	8007aa6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b06      	cmp	r3, #6
 8007aa4:	d104      	bne.n	8007ab0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007aa6:	88bb      	ldrh	r3, [r7, #4]
 8007aa8:	2b0b      	cmp	r3, #11
 8007aaa:	d801      	bhi.n	8007ab0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007aac:	230c      	movs	r3, #12
 8007aae:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b0b      	cmp	r3, #11
 8007aba:	d008      	beq.n	8007ace <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b0c      	cmp	r3, #12
 8007ac0:	d005      	beq.n	8007ace <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d105      	bne.n	8007ad4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b0c      	cmp	r3, #12
 8007acc:	d102      	bne.n	8007ad4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007ad4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007ad8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007ada:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ade:	2a00      	cmp	r2, #0
 8007ae0:	d001      	beq.n	8007ae6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007ae2:	2210      	movs	r2, #16
 8007ae4:	e000      	b.n	8007ae8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007ae6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007ae8:	4413      	add	r3, r2
 8007aea:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007af0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007af2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	d001      	beq.n	8007afe <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007afa:	2200      	movs	r2, #0
 8007afc:	e000      	b.n	8007b00 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007afe:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007b00:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007b02:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d803      	bhi.n	8007b12 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	623b      	str	r3, [r7, #32]
 8007b10:	e00e      	b.n	8007b30 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	3308      	adds	r3, #8
 8007b16:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	3b02      	subs	r3, #2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	623b      	str	r3, [r7, #32]
 8007b28:	e002      	b.n	8007b30 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da01      	bge.n	8007b3a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	4413      	add	r3, r2
 8007b40:	1e5a      	subs	r2, r3, #1
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	fb92 f3f3 	sdiv	r3, r2, r3
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	fb03 f202 	mul.w	r2, r3, r2
 8007b4e:	88bb      	ldrh	r3, [r7, #4]
 8007b50:	4413      	add	r3, r2
    int32_t intermediate =
 8007b52:	330c      	adds	r3, #12
 8007b54:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b06      	cmp	r3, #6
 8007b5a:	d802      	bhi.n	8007b62 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	3302      	adds	r3, #2
 8007b60:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	3b02      	subs	r3, #2
 8007b6c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	372c      	adds	r7, #44	; 0x2c
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
	...

08007b7c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08a      	sub	sp, #40	; 0x28
 8007b80:	af04      	add	r7, sp, #16
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	607a      	str	r2, [r7, #4]
 8007b86:	461a      	mov	r2, r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007b94:	2301      	movs	r3, #1
 8007b96:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <RadioTimeOnAir+0x28>
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d017      	beq.n	8007bd2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007ba2:	e035      	b.n	8007c10 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007ba4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007ba8:	8c3a      	ldrh	r2, [r7, #32]
 8007baa:	7bb9      	ldrb	r1, [r7, #14]
 8007bac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	4603      	mov	r3, r0
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff ff32 	bl	8007a24 <RadioGetGfskTimeOnAirNumerator>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	613b      	str	r3, [r7, #16]
        break;
 8007bd0:	e01e      	b.n	8007c10 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007bd2:	8c39      	ldrh	r1, [r7, #32]
 8007bd4:	7bba      	ldrb	r2, [r7, #14]
 8007bd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	460b      	mov	r3, r1
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	68b8      	ldr	r0, [r7, #8]
 8007bee:	f7ff ff43 	bl	8007a78 <RadioGetLoRaTimeOnAirNumerator>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bf8:	fb02 f303 	mul.w	r3, r2, r3
 8007bfc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007bfe:	4a0a      	ldr	r2, [pc, #40]	; (8007c28 <RadioTimeOnAir+0xac>)
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4413      	add	r3, r2
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff feb6 	bl	8007978 <RadioGetLoRaBandwidthInHz>
 8007c0c:	6138      	str	r0, [r7, #16]
        break;
 8007c0e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	4413      	add	r3, r2
 8007c16:	1e5a      	subs	r2, r3, #1
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	0800c2d4 	.word	0x0800c2d4

08007c2c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007c38:	2300      	movs	r3, #0
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f240 2101 	movw	r1, #513	; 0x201
 8007c40:	f240 2001 	movw	r0, #513	; 0x201
 8007c44:	f001 fd62 	bl	800970c <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8007c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c4c:	4871      	ldr	r0, [pc, #452]	; (8007e14 <RadioSend+0x1e8>)
 8007c4e:	f7ff fa09 	bl	8007064 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007c52:	4b71      	ldr	r3, [pc, #452]	; (8007e18 <RadioSend+0x1ec>)
 8007c54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007c58:	2101      	movs	r1, #1
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f002 fa14 	bl	800a088 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007c60:	4b6d      	ldr	r3, [pc, #436]	; (8007e18 <RadioSend+0x1ec>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d112      	bne.n	8007c8e <RadioSend+0x62>
 8007c68:	4b6b      	ldr	r3, [pc, #428]	; (8007e18 <RadioSend+0x1ec>)
 8007c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c6e:	2b06      	cmp	r3, #6
 8007c70:	d10d      	bne.n	8007c8e <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007c72:	f640 0089 	movw	r0, #2185	; 0x889
 8007c76:	f002 f91b 	bl	8009eb0 <SUBGRF_ReadRegister>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f023 0304 	bic.w	r3, r3, #4
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	4619      	mov	r1, r3
 8007c84:	f640 0089 	movw	r0, #2185	; 0x889
 8007c88:	f002 f8f0 	bl	8009e6c <SUBGRF_WriteRegister>
 8007c8c:	e00c      	b.n	8007ca8 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007c8e:	f640 0089 	movw	r0, #2185	; 0x889
 8007c92:	f002 f90d 	bl	8009eb0 <SUBGRF_ReadRegister>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f043 0304 	orr.w	r3, r3, #4
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	f640 0089 	movw	r0, #2185	; 0x889
 8007ca4:	f002 f8e2 	bl	8009e6c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007ca8:	4b5b      	ldr	r3, [pc, #364]	; (8007e18 <RadioSend+0x1ec>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	f200 80a1 	bhi.w	8007df4 <RadioSend+0x1c8>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <RadioSend+0x8c>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007ce7 	.word	0x08007ce7
 8007cbc:	08007ccd 	.word	0x08007ccd
 8007cc0:	08007ce7 	.word	0x08007ce7
 8007cc4:	08007d3d 	.word	0x08007d3d
 8007cc8:	08007d5d 	.word	0x08007d5d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007ccc:	4a52      	ldr	r2, [pc, #328]	; (8007e18 <RadioSend+0x1ec>)
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007cd2:	4852      	ldr	r0, [pc, #328]	; (8007e1c <RadioSend+0x1f0>)
 8007cd4:	f001 ff82 	bl	8009bdc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fa32 	bl	8009148 <SUBGRF_SendPayload>
            break;
 8007ce4:	e087      	b.n	8007df6 <RadioSend+0x1ca>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007ce6:	f002 fbc8 	bl	800a47a <RFW_Is_Init>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d118      	bne.n	8007d22 <RadioSend+0xf6>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007cf0:	f107 020d 	add.w	r2, r7, #13
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f002 fbd6 	bl	800a4aa <RFW_TransmitInit>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10c      	bne.n	8007d1e <RadioSend+0xf2>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007d04:	7b7a      	ldrb	r2, [r7, #13]
 8007d06:	4b44      	ldr	r3, [pc, #272]	; (8007e18 <RadioSend+0x1ec>)
 8007d08:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d0a:	4844      	ldr	r0, [pc, #272]	; (8007e1c <RadioSend+0x1f0>)
 8007d0c:	f001 ff66 	bl	8009bdc <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007d10:	7b7b      	ldrb	r3, [r7, #13]
 8007d12:	2200      	movs	r2, #0
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 fa16 	bl	8009148 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007d1c:	e06b      	b.n	8007df6 <RadioSend+0x1ca>
                    return RADIO_STATUS_ERROR;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e073      	b.n	8007e0a <RadioSend+0x1de>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007d22:	4a3d      	ldr	r2, [pc, #244]	; (8007e18 <RadioSend+0x1ec>)
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d28:	483c      	ldr	r0, [pc, #240]	; (8007e1c <RadioSend+0x1f0>)
 8007d2a:	f001 ff57 	bl	8009bdc <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	2200      	movs	r2, #0
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 fa07 	bl	8009148 <SUBGRF_SendPayload>
            break;
 8007d3a:	e05c      	b.n	8007df6 <RadioSend+0x1ca>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007d3c:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <RadioSend+0x1ec>)
 8007d3e:	2202      	movs	r2, #2
 8007d40:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007d42:	4a35      	ldr	r2, [pc, #212]	; (8007e18 <RadioSend+0x1ec>)
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d48:	4834      	ldr	r0, [pc, #208]	; (8007e1c <RadioSend+0x1f0>)
 8007d4a:	f001 ff47 	bl	8009bdc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	2200      	movs	r2, #0
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 f9f7 	bl	8009148 <SUBGRF_SendPayload>
            break;
 8007d5a:	e04c      	b.n	8007df6 <RadioSend+0x1ca>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	482f      	ldr	r0, [pc, #188]	; (8007e20 <RadioSend+0x1f4>)
 8007d64:	f000 fcc8 	bl	80086f8 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007d68:	4b2b      	ldr	r3, [pc, #172]	; (8007e18 <RadioSend+0x1ec>)
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	3301      	adds	r3, #1
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	4b28      	ldr	r3, [pc, #160]	; (8007e18 <RadioSend+0x1ec>)
 8007d76:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d78:	4828      	ldr	r0, [pc, #160]	; (8007e1c <RadioSend+0x1f0>)
 8007d7a:	f001 ff2f 	bl	8009bdc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007d7e:	2100      	movs	r1, #0
 8007d80:	20f1      	movs	r0, #241	; 0xf1
 8007d82:	f000 f972 	bl	800806a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007d86:	2100      	movs	r1, #0
 8007d88:	20f0      	movs	r0, #240	; 0xf0
 8007d8a:	f000 f96e 	bl	800806a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007d8e:	4b22      	ldr	r3, [pc, #136]	; (8007e18 <RadioSend+0x1ec>)
 8007d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d92:	2b64      	cmp	r3, #100	; 0x64
 8007d94:	d108      	bne.n	8007da8 <RadioSend+0x17c>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007d96:	2170      	movs	r1, #112	; 0x70
 8007d98:	20f3      	movs	r0, #243	; 0xf3
 8007d9a:	f000 f966 	bl	800806a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007d9e:	211d      	movs	r1, #29
 8007da0:	20f2      	movs	r0, #242	; 0xf2
 8007da2:	f000 f962 	bl	800806a <RadioWrite>
 8007da6:	e007      	b.n	8007db8 <RadioSend+0x18c>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007da8:	21e1      	movs	r1, #225	; 0xe1
 8007daa:	20f3      	movs	r0, #243	; 0xf3
 8007dac:	f000 f95d 	bl	800806a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007db0:	2104      	movs	r1, #4
 8007db2:	20f2      	movs	r0, #242	; 0xf2
 8007db4:	f000 f959 	bl	800806a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3302      	adds	r3, #2
 8007dc2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007dc4:	89fb      	ldrh	r3, [r7, #14]
 8007dc6:	0a1b      	lsrs	r3, r3, #8
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	4619      	mov	r1, r3
 8007dce:	20f4      	movs	r0, #244	; 0xf4
 8007dd0:	f000 f94b 	bl	800806a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	20f5      	movs	r0, #245	; 0xf5
 8007ddc:	f000 f945 	bl	800806a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	3301      	adds	r3, #1
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007dea:	4619      	mov	r1, r3
 8007dec:	480c      	ldr	r0, [pc, #48]	; (8007e20 <RadioSend+0x1f4>)
 8007dee:	f001 f9ab 	bl	8009148 <SUBGRF_SendPayload>
            break;
 8007df2:	e000      	b.n	8007df6 <RadioSend+0x1ca>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007df4:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007df6:	4b08      	ldr	r3, [pc, #32]	; (8007e18 <RadioSend+0x1ec>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4809      	ldr	r0, [pc, #36]	; (8007e24 <RadioSend+0x1f8>)
 8007dfe:	f003 fc0f 	bl	800b620 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8007e02:	4808      	ldr	r0, [pc, #32]	; (8007e24 <RadioSend+0x1f8>)
 8007e04:	f003 fb2e 	bl	800b464 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	48000400 	.word	0x48000400
 8007e18:	20000280 	.word	0x20000280
 8007e1c:	2000028e 	.word	0x2000028e
 8007e20:	2000017c 	.word	0x2000017c
 8007e24:	200002dc 	.word	0x200002dc

08007e28 <RadioSleep>:

static void RadioSleep( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007e2e:	2300      	movs	r3, #0
 8007e30:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007e32:	793b      	ldrb	r3, [r7, #4]
 8007e34:	f043 0304 	orr.w	r3, r3, #4
 8007e38:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007e3a:	7938      	ldrb	r0, [r7, #4]
 8007e3c:	f001 fa60 	bl	8009300 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007e40:	2002      	movs	r0, #2
 8007e42:	f7f8 fe23 	bl	8000a8c <HAL_Delay>
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <RadioStandby>:

static void RadioStandby( void )
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007e52:	2000      	movs	r0, #0
 8007e54:	f001 fa86 	bl	8009364 <SUBGRF_SetStandby>
}
 8007e58:	bf00      	nop
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8007e64:	f002 fb09 	bl	800a47a <RFW_Is_Init>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d102      	bne.n	8007e74 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007e6e:	f002 fb2c 	bl	800a4ca <RFW_ReceiveInit>
 8007e72:	e007      	b.n	8007e84 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007e74:	2300      	movs	r3, #0
 8007e76:	2200      	movs	r2, #0
 8007e78:	f240 2162 	movw	r1, #610	; 0x262
 8007e7c:	f240 2062 	movw	r0, #610	; 0x262
 8007e80:	f001 fc44 	bl	800970c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d006      	beq.n	8007e98 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	4813      	ldr	r0, [pc, #76]	; (8007edc <RadioRx+0x80>)
 8007e8e:	f003 fbc7 	bl	800b620 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007e92:	4812      	ldr	r0, [pc, #72]	; (8007edc <RadioRx+0x80>)
 8007e94:	f003 fae6 	bl	800b464 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007e98:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <RadioRx+0x84>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 8007e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ea2:	4810      	ldr	r0, [pc, #64]	; (8007ee4 <RadioRx+0x88>)
 8007ea4:	f7ff f8de 	bl	8007064 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007ea8:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <RadioRx+0x84>)
 8007eaa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007eae:	2100      	movs	r1, #0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f002 f8e9 	bl	800a088 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007eb6:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <RadioRx+0x84>)
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007ebe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007ec2:	f001 fa8b 	bl	80093dc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007ec6:	e005      	b.n	8007ed4 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <RadioRx+0x84>)
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	019b      	lsls	r3, r3, #6
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f001 fa84 	bl	80093dc <SUBGRF_SetRx>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	200002f4 	.word	0x200002f4
 8007ee0:	20000280 	.word	0x20000280
 8007ee4:	48000400 	.word	0x48000400

08007ee8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8007ef0:	f002 fac3 	bl	800a47a <RFW_Is_Init>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d102      	bne.n	8007f00 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007efa:	f002 fae6 	bl	800a4ca <RFW_ReceiveInit>
 8007efe:	e007      	b.n	8007f10 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007f00:	2300      	movs	r3, #0
 8007f02:	2200      	movs	r2, #0
 8007f04:	f240 2162 	movw	r1, #610	; 0x262
 8007f08:	f240 2062 	movw	r0, #610	; 0x262
 8007f0c:	f001 fbfe 	bl	800970c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d006      	beq.n	8007f24 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4813      	ldr	r0, [pc, #76]	; (8007f68 <RadioRxBoosted+0x80>)
 8007f1a:	f003 fb81 	bl	800b620 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007f1e:	4812      	ldr	r0, [pc, #72]	; (8007f68 <RadioRxBoosted+0x80>)
 8007f20:	f003 faa0 	bl	800b464 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007f24:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <RadioRxBoosted+0x84>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 8007f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f2e:	4810      	ldr	r0, [pc, #64]	; (8007f70 <RadioRxBoosted+0x88>)
 8007f30:	f7ff f898 	bl	8007064 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007f34:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <RadioRxBoosted+0x84>)
 8007f36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 f8a3 	bl	800a088 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <RadioRxBoosted+0x84>)
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8007f4a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007f4e:	f001 fa65 	bl	800941c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007f52:	e005      	b.n	8007f60 <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <RadioRxBoosted+0x84>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	019b      	lsls	r3, r3, #6
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 fa5e 	bl	800941c <SUBGRF_SetRxBoosted>
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	200002f4 	.word	0x200002f4
 8007f6c:	20000280 	.word	0x20000280
 8007f70:	48000400 	.word	0x48000400

08007f74 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	005a      	lsls	r2, r3, #1
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	4413      	add	r3, r2
 8007f86:	4a0c      	ldr	r2, [pc, #48]	; (8007fb8 <RadioSetRxDutyCycle+0x44>)
 8007f88:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007f96:	f001 fbb9 	bl	800970c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <RadioSetRxDutyCycle+0x44>)
 8007f9c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f002 f870 	bl	800a088 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 fa5a 	bl	8009464 <SUBGRF_SetRxDutyCycle>
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000280 	.word	0x20000280

08007fbc <RadioStartCad>:

static void RadioStartCad( void )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <RadioStartCad+0x2c>)
 8007fc2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f002 f85d 	bl	800a088 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007fd6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007fda:	f001 fb97 	bl	800970c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8007fde:	f001 fa6d 	bl	80094bc <SUBGRF_SetCad>
}
 8007fe2:	bf00      	nop
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000280 	.word	0x20000280

08007fec <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8007ffc:	883b      	ldrh	r3, [r7, #0]
 8007ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008002:	fb02 f303 	mul.w	r3, r2, r3
 8008006:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 fbdb 	bl	80097c4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800800e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008012:	4618      	mov	r0, r3
 8008014:	f002 f860 	bl	800a0d8 <SUBGRF_SetRfTxPower>
 8008018:	4603      	mov	r3, r0
 800801a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800801c:	210e      	movs	r1, #14
 800801e:	f640 101f 	movw	r0, #2335	; 0x91f
 8008022:	f001 ff23 	bl	8009e6c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008026:	7afb      	ldrb	r3, [r7, #11]
 8008028:	2101      	movs	r1, #1
 800802a:	4618      	mov	r0, r3
 800802c:	f002 f82c 	bl	800a088 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008030:	f001 fa52 	bl	80094d8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008034:	68f9      	ldr	r1, [r7, #12]
 8008036:	4805      	ldr	r0, [pc, #20]	; (800804c <RadioSetTxContinuousWave+0x60>)
 8008038:	f003 faf2 	bl	800b620 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800803c:	4803      	ldr	r0, [pc, #12]	; (800804c <RadioSetTxContinuousWave+0x60>)
 800803e:	f003 fa11 	bl	800b464 <UTIL_TIMER_Start>
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200002dc 	.word	0x200002dc

08008050 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800805a:	f001 fe74 	bl	8009d46 <SUBGRF_GetRssiInst>
 800805e:	4603      	mov	r3, r0
 8008060:	b21b      	sxth	r3, r3
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	4603      	mov	r3, r0
 8008072:	460a      	mov	r2, r1
 8008074:	80fb      	strh	r3, [r7, #6]
 8008076:	4613      	mov	r3, r2
 8008078:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800807a:	797a      	ldrb	r2, [r7, #5]
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f001 fef3 	bl	8009e6c <SUBGRF_WriteRegister>
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	4603      	mov	r3, r0
 8008096:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	4618      	mov	r0, r3
 800809c:	f001 ff08 	bl	8009eb0 <SUBGRF_ReadRegister>
 80080a0:	4603      	mov	r3, r0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	4603      	mov	r3, r0
 80080b2:	6039      	str	r1, [r7, #0]
 80080b4:	80fb      	strh	r3, [r7, #6]
 80080b6:	4613      	mov	r3, r2
 80080b8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80080ba:	797b      	ldrb	r3, [r7, #5]
 80080bc:	b29a      	uxth	r2, r3
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 ff14 	bl	8009ef0 <SUBGRF_WriteRegisters>
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	80fb      	strh	r3, [r7, #6]
 80080dc:	4613      	mov	r3, r2
 80080de:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80080e0:	797b      	ldrb	r3, [r7, #5]
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	88fb      	ldrh	r3, [r7, #6]
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 ff23 	bl	8009f34 <SUBGRF_ReadRegisters>
}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	460a      	mov	r2, r1
 8008102:	71fb      	strb	r3, [r7, #7]
 8008104:	4613      	mov	r3, r2
 8008106:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d10a      	bne.n	8008124 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800810e:	4a0e      	ldr	r2, [pc, #56]	; (8008148 <RadioSetMaxPayloadLength+0x50>)
 8008110:	79bb      	ldrb	r3, [r7, #6]
 8008112:	7013      	strb	r3, [r2, #0]
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <RadioSetMaxPayloadLength+0x50>)
 8008116:	781a      	ldrb	r2, [r3, #0]
 8008118:	4b0c      	ldr	r3, [pc, #48]	; (800814c <RadioSetMaxPayloadLength+0x54>)
 800811a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800811c:	480c      	ldr	r0, [pc, #48]	; (8008150 <RadioSetMaxPayloadLength+0x58>)
 800811e:	f001 fd5d 	bl	8009bdc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008122:	e00d      	b.n	8008140 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008124:	4b09      	ldr	r3, [pc, #36]	; (800814c <RadioSetMaxPayloadLength+0x54>)
 8008126:	7d5b      	ldrb	r3, [r3, #21]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d109      	bne.n	8008140 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800812c:	4a06      	ldr	r2, [pc, #24]	; (8008148 <RadioSetMaxPayloadLength+0x50>)
 800812e:	79bb      	ldrb	r3, [r7, #6]
 8008130:	7013      	strb	r3, [r2, #0]
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <RadioSetMaxPayloadLength+0x50>)
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	4b05      	ldr	r3, [pc, #20]	; (800814c <RadioSetMaxPayloadLength+0x54>)
 8008138:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800813a:	4805      	ldr	r0, [pc, #20]	; (8008150 <RadioSetMaxPayloadLength+0x58>)
 800813c:	f001 fd4e 	bl	8009bdc <SUBGRF_SetPacketParams>
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20000008 	.word	0x20000008
 800814c:	20000280 	.word	0x20000280
 8008150:	2000028e 	.word	0x2000028e

08008154 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800815e:	4a13      	ldr	r2, [pc, #76]	; (80081ac <RadioSetPublicNetwork+0x58>)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	7313      	strb	r3, [r2, #12]
 8008164:	4b11      	ldr	r3, [pc, #68]	; (80081ac <RadioSetPublicNetwork+0x58>)
 8008166:	7b1a      	ldrb	r2, [r3, #12]
 8008168:	4b10      	ldr	r3, [pc, #64]	; (80081ac <RadioSetPublicNetwork+0x58>)
 800816a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800816c:	2001      	movs	r0, #1
 800816e:	f7ff f807 	bl	8007180 <RadioSetModem>
    if( enable == true )
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008178:	2134      	movs	r1, #52	; 0x34
 800817a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800817e:	f001 fe75 	bl	8009e6c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008182:	2144      	movs	r1, #68	; 0x44
 8008184:	f240 7041 	movw	r0, #1857	; 0x741
 8008188:	f001 fe70 	bl	8009e6c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800818c:	e009      	b.n	80081a2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800818e:	2114      	movs	r1, #20
 8008190:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008194:	f001 fe6a 	bl	8009e6c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008198:	2124      	movs	r1, #36	; 0x24
 800819a:	f240 7041 	movw	r0, #1857	; 0x741
 800819e:	f001 fe65 	bl	8009e6c <SUBGRF_WriteRegister>
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000280 	.word	0x20000280

080081b0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80081b4:	f001 ffc4 	bl	800a140 <SUBGRF_GetRadioWakeUpTime>
 80081b8:	4603      	mov	r3, r0
 80081ba:	3303      	adds	r3, #3
}
 80081bc:	4618      	mov	r0, r3
 80081be:	bd80      	pop	{r7, pc}

080081c0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80081c8:	f000 f80e 	bl	80081e8 <RadioOnTxTimeoutProcess>
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80081dc:	f000 f81e 	bl	800821c <RadioOnRxTimeoutProcess>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 80081ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081f0:	4808      	ldr	r0, [pc, #32]	; (8008214 <RadioOnTxTimeoutProcess+0x2c>)
 80081f2:	f7fe ff44 	bl	800707e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80081f6:	4b08      	ldr	r3, [pc, #32]	; (8008218 <RadioOnTxTimeoutProcess+0x30>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d008      	beq.n	8008210 <RadioOnTxTimeoutProcess+0x28>
 80081fe:	4b06      	ldr	r3, [pc, #24]	; (8008218 <RadioOnTxTimeoutProcess+0x30>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8008208:	4b03      	ldr	r3, [pc, #12]	; (8008218 <RadioOnTxTimeoutProcess+0x30>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	4798      	blx	r3
    }
}
 8008210:	bf00      	nop
 8008212:	bd80      	pop	{r7, pc}
 8008214:	48000400 	.word	0x48000400
 8008218:	2000027c 	.word	0x2000027c

0800821c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 8008220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008224:	4808      	ldr	r0, [pc, #32]	; (8008248 <RadioOnRxTimeoutProcess+0x2c>)
 8008226:	f7fe ff2a 	bl	800707e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800822a:	4b08      	ldr	r3, [pc, #32]	; (800824c <RadioOnRxTimeoutProcess+0x30>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d008      	beq.n	8008244 <RadioOnRxTimeoutProcess+0x28>
 8008232:	4b06      	ldr	r3, [pc, #24]	; (800824c <RadioOnRxTimeoutProcess+0x30>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 800823c:	4b03      	ldr	r3, [pc, #12]	; (800824c <RadioOnRxTimeoutProcess+0x30>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	4798      	blx	r3
    }
}
 8008244:	bf00      	nop
 8008246:	bd80      	pop	{r7, pc}
 8008248:	48000400 	.word	0x48000400
 800824c:	2000027c 	.word	0x2000027c

08008250 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800825a:	4a05      	ldr	r2, [pc, #20]	; (8008270 <RadioOnDioIrq+0x20>)
 800825c:	88fb      	ldrh	r3, [r7, #6]
 800825e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8008262:	f000 f807 	bl	8008274 <RadioIrqProcess>
}
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000280 	.word	0x20000280

08008274 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008274:	b5b0      	push	{r4, r5, r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008282:	4baf      	ldr	r3, [pc, #700]	; (8008540 <RadioIrqProcess+0x2cc>)
 8008284:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800828c:	f000 8117 	beq.w	80084be <RadioIrqProcess+0x24a>
 8008290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008294:	f300 81d6 	bgt.w	8008644 <RadioIrqProcess+0x3d0>
 8008298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829c:	f000 80fb 	beq.w	8008496 <RadioIrqProcess+0x222>
 80082a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a4:	f300 81ce 	bgt.w	8008644 <RadioIrqProcess+0x3d0>
 80082a8:	2b80      	cmp	r3, #128	; 0x80
 80082aa:	f000 80e0 	beq.w	800846e <RadioIrqProcess+0x1fa>
 80082ae:	2b80      	cmp	r3, #128	; 0x80
 80082b0:	f300 81c8 	bgt.w	8008644 <RadioIrqProcess+0x3d0>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	dc49      	bgt.n	800834c <RadioIrqProcess+0xd8>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f340 81c3 	ble.w	8008644 <RadioIrqProcess+0x3d0>
 80082be:	3b01      	subs	r3, #1
 80082c0:	2b1f      	cmp	r3, #31
 80082c2:	f200 81bf 	bhi.w	8008644 <RadioIrqProcess+0x3d0>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <RadioIrqProcess+0x58>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	08008355 	.word	0x08008355
 80082d0:	08008399 	.word	0x08008399
 80082d4:	08008645 	.word	0x08008645
 80082d8:	08008561 	.word	0x08008561
 80082dc:	08008645 	.word	0x08008645
 80082e0:	08008645 	.word	0x08008645
 80082e4:	08008645 	.word	0x08008645
 80082e8:	080085cf 	.word	0x080085cf
 80082ec:	08008645 	.word	0x08008645
 80082f0:	08008645 	.word	0x08008645
 80082f4:	08008645 	.word	0x08008645
 80082f8:	08008645 	.word	0x08008645
 80082fc:	08008645 	.word	0x08008645
 8008300:	08008645 	.word	0x08008645
 8008304:	08008645 	.word	0x08008645
 8008308:	08008645 	.word	0x08008645
 800830c:	08008645 	.word	0x08008645
 8008310:	08008645 	.word	0x08008645
 8008314:	08008645 	.word	0x08008645
 8008318:	08008645 	.word	0x08008645
 800831c:	08008645 	.word	0x08008645
 8008320:	08008645 	.word	0x08008645
 8008324:	08008645 	.word	0x08008645
 8008328:	08008645 	.word	0x08008645
 800832c:	08008645 	.word	0x08008645
 8008330:	08008645 	.word	0x08008645
 8008334:	08008645 	.word	0x08008645
 8008338:	08008645 	.word	0x08008645
 800833c:	08008645 	.word	0x08008645
 8008340:	08008645 	.word	0x08008645
 8008344:	08008645 	.word	0x08008645
 8008348:	080085df 	.word	0x080085df
 800834c:	2b40      	cmp	r3, #64	; 0x40
 800834e:	f000 8161 	beq.w	8008614 <RadioIrqProcess+0x3a0>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008352:	e177      	b.n	8008644 <RadioIrqProcess+0x3d0>
        DBG_GPIO_RADIO_TX( RST );
 8008354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008358:	487a      	ldr	r0, [pc, #488]	; (8008544 <RadioIrqProcess+0x2d0>)
 800835a:	f7fe fe90 	bl	800707e <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 800835e:	487a      	ldr	r0, [pc, #488]	; (8008548 <RadioIrqProcess+0x2d4>)
 8008360:	f003 f8ee 	bl	800b540 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008364:	2000      	movs	r0, #0
 8008366:	f000 fffd 	bl	8009364 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800836a:	f002 f88d 	bl	800a488 <RFW_Is_LongPacketModeEnabled>
 800836e:	4603      	mov	r3, r0
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8008374:	f002 f8b1 	bl	800a4da <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008378:	4b74      	ldr	r3, [pc, #464]	; (800854c <RadioIrqProcess+0x2d8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8163 	beq.w	8008648 <RadioIrqProcess+0x3d4>
 8008382:	4b72      	ldr	r3, [pc, #456]	; (800854c <RadioIrqProcess+0x2d8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 815d 	beq.w	8008648 <RadioIrqProcess+0x3d4>
            RadioEvents->TxDone( );
 800838e:	4b6f      	ldr	r3, [pc, #444]	; (800854c <RadioIrqProcess+0x2d8>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4798      	blx	r3
        break;
 8008396:	e157      	b.n	8008648 <RadioIrqProcess+0x3d4>
        DBG_GPIO_RADIO_RX( RST );
 8008398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800839c:	4869      	ldr	r0, [pc, #420]	; (8008544 <RadioIrqProcess+0x2d0>)
 800839e:	f7fe fe6e 	bl	800707e <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 80083a2:	486b      	ldr	r0, [pc, #428]	; (8008550 <RadioIrqProcess+0x2dc>)
 80083a4:	f003 f8cc 	bl	800b540 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80083a8:	4b65      	ldr	r3, [pc, #404]	; (8008540 <RadioIrqProcess+0x2cc>)
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	f083 0301 	eor.w	r3, r3, #1
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d014      	beq.n	80083e0 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 80083b6:	2000      	movs	r0, #0
 80083b8:	f000 ffd4 	bl	8009364 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80083bc:	2100      	movs	r1, #0
 80083be:	f640 1002 	movw	r0, #2306	; 0x902
 80083c2:	f001 fd53 	bl	8009e6c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80083c6:	f640 1044 	movw	r0, #2372	; 0x944
 80083ca:	f001 fd71 	bl	8009eb0 <SUBGRF_ReadRegister>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f043 0302 	orr.w	r3, r3, #2
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	f640 1044 	movw	r0, #2372	; 0x944
 80083dc:	f001 fd46 	bl	8009e6c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80083e0:	1dfb      	adds	r3, r7, #7
 80083e2:	22ff      	movs	r2, #255	; 0xff
 80083e4:	4619      	mov	r1, r3
 80083e6:	485b      	ldr	r0, [pc, #364]	; (8008554 <RadioIrqProcess+0x2e0>)
 80083e8:	f000 fe8c 	bl	8009104 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80083ec:	485a      	ldr	r0, [pc, #360]	; (8008558 <RadioIrqProcess+0x2e4>)
 80083ee:	f001 fceb 	bl	8009dc8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80083f2:	4b56      	ldr	r3, [pc, #344]	; (800854c <RadioIrqProcess+0x2d8>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8128 	beq.w	800864c <RadioIrqProcess+0x3d8>
 80083fc:	4b53      	ldr	r3, [pc, #332]	; (800854c <RadioIrqProcess+0x2d8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 8122 	beq.w	800864c <RadioIrqProcess+0x3d8>
            switch( SubgRf.PacketStatus.packetType )
 8008408:	4b4d      	ldr	r3, [pc, #308]	; (8008540 <RadioIrqProcess+0x2cc>)
 800840a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800840e:	2b01      	cmp	r3, #1
 8008410:	d10e      	bne.n	8008430 <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008412:	4b4e      	ldr	r3, [pc, #312]	; (800854c <RadioIrqProcess+0x2d8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689c      	ldr	r4, [r3, #8]
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	b299      	uxth	r1, r3
 800841c:	4b48      	ldr	r3, [pc, #288]	; (8008540 <RadioIrqProcess+0x2cc>)
 800841e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008422:	b21a      	sxth	r2, r3
 8008424:	4b46      	ldr	r3, [pc, #280]	; (8008540 <RadioIrqProcess+0x2cc>)
 8008426:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800842a:	484a      	ldr	r0, [pc, #296]	; (8008554 <RadioIrqProcess+0x2e0>)
 800842c:	47a0      	blx	r4
                break;
 800842e:	e01d      	b.n	800846c <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008430:	4b43      	ldr	r3, [pc, #268]	; (8008540 <RadioIrqProcess+0x2cc>)
 8008432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008434:	463a      	mov	r2, r7
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f001 ff73 	bl	800a324 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800843e:	4b43      	ldr	r3, [pc, #268]	; (800854c <RadioIrqProcess+0x2d8>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689c      	ldr	r4, [r3, #8]
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	b299      	uxth	r1, r3
 8008448:	4b3d      	ldr	r3, [pc, #244]	; (8008540 <RadioIrqProcess+0x2cc>)
 800844a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800844e:	b218      	sxth	r0, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008456:	4a41      	ldr	r2, [pc, #260]	; (800855c <RadioIrqProcess+0x2e8>)
 8008458:	fb82 5203 	smull	r5, r2, r2, r3
 800845c:	1192      	asrs	r2, r2, #6
 800845e:	17db      	asrs	r3, r3, #31
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	b25b      	sxtb	r3, r3
 8008464:	4602      	mov	r2, r0
 8008466:	483b      	ldr	r0, [pc, #236]	; (8008554 <RadioIrqProcess+0x2e0>)
 8008468:	47a0      	blx	r4
                break;
 800846a:	bf00      	nop
        break;
 800846c:	e0ee      	b.n	800864c <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 800846e:	2000      	movs	r0, #0
 8008470:	f000 ff78 	bl	8009364 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008474:	4b35      	ldr	r3, [pc, #212]	; (800854c <RadioIrqProcess+0x2d8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80e9 	beq.w	8008650 <RadioIrqProcess+0x3dc>
 800847e:	4b33      	ldr	r3, [pc, #204]	; (800854c <RadioIrqProcess+0x2d8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 80e3 	beq.w	8008650 <RadioIrqProcess+0x3dc>
            RadioEvents->CadDone( false );
 800848a:	4b30      	ldr	r3, [pc, #192]	; (800854c <RadioIrqProcess+0x2d8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	2000      	movs	r0, #0
 8008492:	4798      	blx	r3
        break;
 8008494:	e0dc      	b.n	8008650 <RadioIrqProcess+0x3dc>
        SUBGRF_SetStandby( STDBY_RC );
 8008496:	2000      	movs	r0, #0
 8008498:	f000 ff64 	bl	8009364 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800849c:	4b2b      	ldr	r3, [pc, #172]	; (800854c <RadioIrqProcess+0x2d8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80d7 	beq.w	8008654 <RadioIrqProcess+0x3e0>
 80084a6:	4b29      	ldr	r3, [pc, #164]	; (800854c <RadioIrqProcess+0x2d8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 80d1 	beq.w	8008654 <RadioIrqProcess+0x3e0>
            RadioEvents->CadDone( true );
 80084b2:	4b26      	ldr	r3, [pc, #152]	; (800854c <RadioIrqProcess+0x2d8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	2001      	movs	r0, #1
 80084ba:	4798      	blx	r3
        break;
 80084bc:	e0ca      	b.n	8008654 <RadioIrqProcess+0x3e0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80084be:	f000 fe07 	bl	80090d0 <SUBGRF_GetOperatingMode>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d11a      	bne.n	80084fe <RadioIrqProcess+0x28a>
            DBG_GPIO_RADIO_TX( RST );
 80084c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084cc:	481d      	ldr	r0, [pc, #116]	; (8008544 <RadioIrqProcess+0x2d0>)
 80084ce:	f7fe fdd6 	bl	800707e <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 80084d2:	481d      	ldr	r0, [pc, #116]	; (8008548 <RadioIrqProcess+0x2d4>)
 80084d4:	f003 f834 	bl	800b540 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80084d8:	2000      	movs	r0, #0
 80084da:	f000 ff43 	bl	8009364 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80084de:	4b1b      	ldr	r3, [pc, #108]	; (800854c <RadioIrqProcess+0x2d8>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80b8 	beq.w	8008658 <RadioIrqProcess+0x3e4>
 80084e8:	4b18      	ldr	r3, [pc, #96]	; (800854c <RadioIrqProcess+0x2d8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80b2 	beq.w	8008658 <RadioIrqProcess+0x3e4>
                RadioEvents->TxTimeout( );
 80084f4:	4b15      	ldr	r3, [pc, #84]	; (800854c <RadioIrqProcess+0x2d8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	4798      	blx	r3
        break;
 80084fc:	e0ac      	b.n	8008658 <RadioIrqProcess+0x3e4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80084fe:	f000 fde7 	bl	80090d0 <SUBGRF_GetOperatingMode>
 8008502:	4603      	mov	r3, r0
 8008504:	2b05      	cmp	r3, #5
 8008506:	f040 80a7 	bne.w	8008658 <RadioIrqProcess+0x3e4>
            DBG_GPIO_RADIO_RX( RST );
 800850a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800850e:	480d      	ldr	r0, [pc, #52]	; (8008544 <RadioIrqProcess+0x2d0>)
 8008510:	f7fe fdb5 	bl	800707e <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8008514:	480e      	ldr	r0, [pc, #56]	; (8008550 <RadioIrqProcess+0x2dc>)
 8008516:	f003 f813 	bl	800b540 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800851a:	2000      	movs	r0, #0
 800851c:	f000 ff22 	bl	8009364 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008520:	4b0a      	ldr	r3, [pc, #40]	; (800854c <RadioIrqProcess+0x2d8>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 8097 	beq.w	8008658 <RadioIrqProcess+0x3e4>
 800852a:	4b08      	ldr	r3, [pc, #32]	; (800854c <RadioIrqProcess+0x2d8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 8091 	beq.w	8008658 <RadioIrqProcess+0x3e4>
                RadioEvents->RxTimeout( );
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <RadioIrqProcess+0x2d8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	4798      	blx	r3
        break;
 800853e:	e08b      	b.n	8008658 <RadioIrqProcess+0x3e4>
 8008540:	20000280 	.word	0x20000280
 8008544:	48000400 	.word	0x48000400
 8008548:	200002dc 	.word	0x200002dc
 800854c:	2000027c 	.word	0x2000027c
 8008550:	200002f4 	.word	0x200002f4
 8008554:	2000017c 	.word	0x2000017c
 8008558:	200002a4 	.word	0x200002a4
 800855c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008560:	4b44      	ldr	r3, [pc, #272]	; (8008674 <RadioIrqProcess+0x400>)
 8008562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008564:	2b00      	cmp	r3, #0
 8008566:	d079      	beq.n	800865c <RadioIrqProcess+0x3e8>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8008568:	4a43      	ldr	r2, [pc, #268]	; (8008678 <RadioIrqProcess+0x404>)
 800856a:	4b42      	ldr	r3, [pc, #264]	; (8008674 <RadioIrqProcess+0x400>)
 800856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856e:	0c1b      	lsrs	r3, r3, #16
 8008570:	b2db      	uxtb	r3, r3
 8008572:	4619      	mov	r1, r3
 8008574:	f640 1003 	movw	r0, #2307	; 0x903
 8008578:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800857a:	4a3f      	ldr	r2, [pc, #252]	; (8008678 <RadioIrqProcess+0x404>)
 800857c:	4b3d      	ldr	r3, [pc, #244]	; (8008674 <RadioIrqProcess+0x400>)
 800857e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008580:	0a1b      	lsrs	r3, r3, #8
 8008582:	b2db      	uxtb	r3, r3
 8008584:	4619      	mov	r1, r3
 8008586:	f640 1004 	movw	r0, #2308	; 0x904
 800858a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800858c:	4a3a      	ldr	r2, [pc, #232]	; (8008678 <RadioIrqProcess+0x404>)
 800858e:	4b39      	ldr	r3, [pc, #228]	; (8008674 <RadioIrqProcess+0x400>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008592:	b2db      	uxtb	r3, r3
 8008594:	4619      	mov	r1, r3
 8008596:	f640 1005 	movw	r0, #2309	; 0x905
 800859a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800859c:	4c36      	ldr	r4, [pc, #216]	; (8008678 <RadioIrqProcess+0x404>)
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <RadioIrqProcess+0x408>)
 80085a0:	f640 1002 	movw	r0, #2306	; 0x902
 80085a4:	4798      	blx	r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	4619      	mov	r1, r3
 80085b0:	f640 1002 	movw	r0, #2306	; 0x902
 80085b4:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80085b6:	4b2f      	ldr	r3, [pc, #188]	; (8008674 <RadioIrqProcess+0x400>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80085bc:	2300      	movs	r3, #0
 80085be:	2200      	movs	r2, #0
 80085c0:	f240 2162 	movw	r1, #610	; 0x262
 80085c4:	f240 2062 	movw	r0, #610	; 0x262
 80085c8:	f001 f8a0 	bl	800970c <SUBGRF_SetDioIrqParams>
        break;
 80085cc:	e046      	b.n	800865c <RadioIrqProcess+0x3e8>
        if( 1UL == RFW_Is_Init( ) )
 80085ce:	f001 ff54 	bl	800a47a <RFW_Is_Init>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d143      	bne.n	8008660 <RadioIrqProcess+0x3ec>
            RFW_ReceivePayload( );
 80085d8:	f001 ff85 	bl	800a4e6 <RFW_ReceivePayload>
        break;
 80085dc:	e040      	b.n	8008660 <RadioIrqProcess+0x3ec>
        TimerStop( &RxTimeoutTimer );
 80085de:	4828      	ldr	r0, [pc, #160]	; (8008680 <RadioIrqProcess+0x40c>)
 80085e0:	f002 ffae 	bl	800b540 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80085e4:	4b23      	ldr	r3, [pc, #140]	; (8008674 <RadioIrqProcess+0x400>)
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	f083 0301 	eor.w	r3, r3, #1
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <RadioIrqProcess+0x384>
            SUBGRF_SetStandby( STDBY_RC );
 80085f2:	2000      	movs	r0, #0
 80085f4:	f000 feb6 	bl	8009364 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80085f8:	4b22      	ldr	r3, [pc, #136]	; (8008684 <RadioIrqProcess+0x410>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d031      	beq.n	8008664 <RadioIrqProcess+0x3f0>
 8008600:	4b20      	ldr	r3, [pc, #128]	; (8008684 <RadioIrqProcess+0x410>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d02c      	beq.n	8008664 <RadioIrqProcess+0x3f0>
            RadioEvents->RxTimeout( );
 800860a:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <RadioIrqProcess+0x410>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	4798      	blx	r3
        break;
 8008612:	e027      	b.n	8008664 <RadioIrqProcess+0x3f0>
        if( SubgRf.RxContinuous == false )
 8008614:	4b17      	ldr	r3, [pc, #92]	; (8008674 <RadioIrqProcess+0x400>)
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	f083 0301 	eor.w	r3, r3, #1
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <RadioIrqProcess+0x3b4>
            SUBGRF_SetStandby( STDBY_RC );
 8008622:	2000      	movs	r0, #0
 8008624:	f000 fe9e 	bl	8009364 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008628:	4b16      	ldr	r3, [pc, #88]	; (8008684 <RadioIrqProcess+0x410>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01b      	beq.n	8008668 <RadioIrqProcess+0x3f4>
 8008630:	4b14      	ldr	r3, [pc, #80]	; (8008684 <RadioIrqProcess+0x410>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d016      	beq.n	8008668 <RadioIrqProcess+0x3f4>
            RadioEvents->RxError( );
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <RadioIrqProcess+0x410>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	4798      	blx	r3
        break;
 8008642:	e011      	b.n	8008668 <RadioIrqProcess+0x3f4>
        break;
 8008644:	bf00      	nop
 8008646:	e010      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 8008648:	bf00      	nop
 800864a:	e00e      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 800864c:	bf00      	nop
 800864e:	e00c      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 8008650:	bf00      	nop
 8008652:	e00a      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 8008654:	bf00      	nop
 8008656:	e008      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 8008658:	bf00      	nop
 800865a:	e006      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 800865c:	bf00      	nop
 800865e:	e004      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 8008660:	bf00      	nop
 8008662:	e002      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <RadioIrqProcess+0x3f6>
        break;
 8008668:	bf00      	nop
    }
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bdb0      	pop	{r4, r5, r7, pc}
 8008672:	bf00      	nop
 8008674:	20000280 	.word	0x20000280
 8008678:	0800806b 	.word	0x0800806b
 800867c:	0800808f 	.word	0x0800808f
 8008680:	200002f4 	.word	0x200002f4
 8008684:	2000027c 	.word	0x2000027c

08008688 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800868c:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <RadioTxPrbs+0x2c>)
 800868e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008692:	2101      	movs	r1, #1
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fcf7 	bl	800a088 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800869a:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <RadioTxPrbs+0x30>)
 800869c:	212d      	movs	r1, #45	; 0x2d
 800869e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80086a2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80086a4:	f000 ff21 	bl	80094ea <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80086a8:	4804      	ldr	r0, [pc, #16]	; (80086bc <RadioTxPrbs+0x34>)
 80086aa:	f000 fe77 	bl	800939c <SUBGRF_SetTx>
}
 80086ae:	bf00      	nop
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000280 	.word	0x20000280
 80086b8:	0800806b 	.word	0x0800806b
 80086bc:	000fffff 	.word	0x000fffff

080086c0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80086ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fd02 	bl	800a0d8 <SUBGRF_SetRfTxPower>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80086d8:	210e      	movs	r1, #14
 80086da:	f640 101f 	movw	r0, #2335	; 0x91f
 80086de:	f001 fbc5 	bl	8009e6c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2101      	movs	r1, #1
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 fcce 	bl	800a088 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80086ec:	f000 fef4 	bl	80094d8 <SUBGRF_SetTxContinuousWave>
}
 80086f0:	bf00      	nop
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b089      	sub	sp, #36	; 0x24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800870e:	2300      	movs	r3, #0
 8008710:	61bb      	str	r3, [r7, #24]
 8008712:	e011      	b.n	8008738 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	4413      	add	r3, r2
 800871a:	781a      	ldrb	r2, [r3, #0]
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	68b9      	ldr	r1, [r7, #8]
 8008720:	440b      	add	r3, r1
 8008722:	43d2      	mvns	r2, r2
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	3301      	adds	r3, #1
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	429a      	cmp	r2, r3
 800873e:	dbe9      	blt.n	8008714 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008740:	2300      	movs	r3, #0
 8008742:	61bb      	str	r3, [r7, #24]
 8008744:	e049      	b.n	80087da <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	425a      	negs	r2, r3
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	f002 0207 	and.w	r2, r2, #7
 8008752:	bf58      	it	pl
 8008754:	4253      	negpl	r3, r2
 8008756:	b2db      	uxtb	r3, r3
 8008758:	f1c3 0307 	rsb	r3, r3, #7
 800875c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	da00      	bge.n	8008766 <payload_integration+0x6e>
 8008764:	3307      	adds	r3, #7
 8008766:	10db      	asrs	r3, r3, #3
 8008768:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	3301      	adds	r3, #1
 800876e:	425a      	negs	r2, r3
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	f002 0207 	and.w	r2, r2, #7
 8008778:	bf58      	it	pl
 800877a:	4253      	negpl	r3, r2
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f1c3 0307 	rsb	r3, r3, #7
 8008782:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	3301      	adds	r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	da00      	bge.n	800878e <payload_integration+0x96>
 800878c:	3307      	adds	r3, #7
 800878e:	10db      	asrs	r3, r3, #3
 8008790:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8008792:	7dbb      	ldrb	r3, [r7, #22]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	4413      	add	r3, r2
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	fa42 f303 	asr.w	r3, r2, r3
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80087aa:	7ffa      	ldrb	r2, [r7, #31]
 80087ac:	7cfb      	ldrb	r3, [r7, #19]
 80087ae:	4053      	eors	r3, r2
 80087b0:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80087b2:	7d3b      	ldrb	r3, [r7, #20]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	b25a      	sxtb	r2, r3
 80087bc:	7ff9      	ldrb	r1, [r7, #31]
 80087be:	7d7b      	ldrb	r3, [r7, #21]
 80087c0:	fa01 f303 	lsl.w	r3, r1, r3
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	4313      	orrs	r3, r2
 80087c8:	b259      	sxtb	r1, r3
 80087ca:	7d3b      	ldrb	r3, [r7, #20]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	b2ca      	uxtb	r2, r1
 80087d2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	3301      	adds	r3, #1
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	00db      	lsls	r3, r3, #3
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	dbb0      	blt.n	8008746 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80087e4:	7ffb      	ldrb	r3, [r7, #31]
 80087e6:	01db      	lsls	r3, r3, #7
 80087e8:	b25a      	sxtb	r2, r3
 80087ea:	7ffb      	ldrb	r3, [r7, #31]
 80087ec:	019b      	lsls	r3, r3, #6
 80087ee:	b25b      	sxtb	r3, r3
 80087f0:	4313      	orrs	r3, r2
 80087f2:	b25b      	sxtb	r3, r3
 80087f4:	7ffa      	ldrb	r2, [r7, #31]
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	d101      	bne.n	80087fe <payload_integration+0x106>
 80087fa:	2220      	movs	r2, #32
 80087fc:	e000      	b.n	8008800 <payload_integration+0x108>
 80087fe:	2200      	movs	r2, #0
 8008800:	4313      	orrs	r3, r2
 8008802:	b259      	sxtb	r1, r3
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4413      	add	r3, r2
 800880a:	b2ca      	uxtb	r2, r1
 800880c:	701a      	strb	r2, [r3, #0]
}
 800880e:	bf00      	nop
 8008810:	3724      	adds	r7, #36	; 0x24
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08c      	sub	sp, #48	; 0x30
 800881c:	af00      	add	r7, sp, #0
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	607a      	str	r2, [r7, #4]
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800882c:	2300      	movs	r3, #0
 800882e:	623b      	str	r3, [r7, #32]
 8008830:	2300      	movs	r3, #0
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008834:	f001 fe1b 	bl	800a46e <RFW_DeInit>

    if( rxContinuous != 0 )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf14      	ite	ne
 8008848:	2301      	movne	r3, #1
 800884a:	2300      	moveq	r3, #0
 800884c:	b2da      	uxtb	r2, r3
 800884e:	4ba4      	ldr	r3, [pc, #656]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008850:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <RadioSetRxGenericConfig+0x48>
 8008858:	2b01      	cmp	r3, #1
 800885a:	f000 80dc 	beq.w	8008a16 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800885e:	e196      	b.n	8008b8e <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <RadioSetRxGenericConfig+0x58>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8008870:	f04f 33ff 	mov.w	r3, #4294967295
 8008874:	e18c      	b.n	8008b90 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	7f9b      	ldrb	r3, [r3, #30]
 800887a:	2b08      	cmp	r3, #8
 800887c:	d902      	bls.n	8008884 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800887e:	f04f 33ff 	mov.w	r3, #4294967295
 8008882:	e185      	b.n	8008b90 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	6919      	ldr	r1, [r3, #16]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	7f9b      	ldrb	r3, [r3, #30]
 800888c:	b29a      	uxth	r2, r3
 800888e:	f107 0320 	add.w	r3, r7, #32
 8008892:	4618      	mov	r0, r3
 8008894:	f002 fa06 	bl	800aca4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	bf14      	ite	ne
 80088a0:	2301      	movne	r3, #1
 80088a2:	2300      	moveq	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 fe28 	bl	80094fc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80088ac:	4b8c      	ldr	r3, [pc, #560]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	4a89      	ldr	r2, [pc, #548]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80088ba:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f893 2020 	ldrb.w	r2, [r3, #32]
 80088c2:	4b87      	ldr	r3, [pc, #540]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fd01 	bl	800a2d4 <SUBGRF_GetFskBandwidthRegValue>
 80088d2:	4603      	mov	r3, r0
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b82      	ldr	r3, [pc, #520]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80088d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80088dc:	4b80      	ldr	r3, [pc, #512]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80088de:	2200      	movs	r2, #0
 80088e0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	4b7c      	ldr	r3, [pc, #496]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80088ee:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	7fda      	ldrb	r2, [r3, #31]
 80088f4:	4b7a      	ldr	r3, [pc, #488]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80088f6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	7f9b      	ldrb	r3, [r3, #30]
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	4b77      	ldr	r3, [pc, #476]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008902:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800890a:	4b75      	ldr	r3, [pc, #468]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 800890c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008914:	2b00      	cmp	r3, #0
 8008916:	d105      	bne.n	8008924 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	b2da      	uxtb	r2, r3
 800891e:	4b70      	ldr	r3, [pc, #448]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008920:	759a      	strb	r2, [r3, #22]
 8008922:	e00b      	b.n	800893c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800892a:	2b02      	cmp	r3, #2
 800892c:	d103      	bne.n	8008936 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800892e:	4b6c      	ldr	r3, [pc, #432]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008930:	22ff      	movs	r2, #255	; 0xff
 8008932:	759a      	strb	r2, [r3, #22]
 8008934:	e002      	b.n	800893c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008936:	4b6a      	ldr	r3, [pc, #424]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008938:	22ff      	movs	r2, #255	; 0xff
 800893a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008942:	2b02      	cmp	r3, #2
 8008944:	d004      	beq.n	8008950 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800894c:	2b02      	cmp	r3, #2
 800894e:	d12d      	bne.n	80089ac <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008956:	2bf1      	cmp	r3, #241	; 0xf1
 8008958:	d00c      	beq.n	8008974 <RadioSetRxGenericConfig+0x15c>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008960:	2bf2      	cmp	r3, #242	; 0xf2
 8008962:	d007      	beq.n	8008974 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800896a:	2b01      	cmp	r3, #1
 800896c:	d002      	beq.n	8008974 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	e10d      	b.n	8008b90 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8008974:	2300      	movs	r3, #0
 8008976:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800897c:	4b59      	ldr	r3, [pc, #356]	; (8008ae4 <RadioSetRxGenericConfig+0x2cc>)
 800897e:	6819      	ldr	r1, [r3, #0]
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	4a58      	ldr	r2, [pc, #352]	; (8008ae8 <RadioSetRxGenericConfig+0x2d0>)
 8008986:	4618      	mov	r0, r3
 8008988:	f001 fd64 	bl	800a454 <RFW_Init>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <RadioSetRxGenericConfig+0x180>
                return -1;
 8008992:	f04f 33ff 	mov.w	r3, #4294967295
 8008996:	e0fb      	b.n	8008b90 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008998:	4b51      	ldr	r3, [pc, #324]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 800899a:	2200      	movs	r2, #0
 800899c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800899e:	4b50      	ldr	r3, [pc, #320]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80089a4:	4b4e      	ldr	r3, [pc, #312]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	755a      	strb	r2, [r3, #21]
        {
 80089aa:	e00e      	b.n	80089ca <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80089b2:	4b4b      	ldr	r3, [pc, #300]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80089b4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80089bc:	4b48      	ldr	r3, [pc, #288]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80089be:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80089c6:	4b46      	ldr	r3, [pc, #280]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 80089c8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80089ca:	f7ff fa40 	bl	8007e4e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80089ce:	2000      	movs	r0, #0
 80089d0:	f7fe fbd6 	bl	8007180 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80089d4:	4845      	ldr	r0, [pc, #276]	; (8008aec <RadioSetRxGenericConfig+0x2d4>)
 80089d6:	f001 f82f 	bl	8009a38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80089da:	4845      	ldr	r0, [pc, #276]	; (8008af0 <RadioSetRxGenericConfig+0x2d8>)
 80089dc:	f001 f8fe 	bl	8009bdc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80089e0:	f107 0320 	add.w	r3, r7, #32
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fbc2 	bl	800916e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	8b9b      	ldrh	r3, [r3, #28]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fc0c 	bl	800920c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	8b1b      	ldrh	r3, [r3, #24]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fbe7 	bl	80091cc <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008a04:	fb03 f202 	mul.w	r2, r3, r2
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	4a33      	ldr	r2, [pc, #204]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008a12:	6093      	str	r3, [r2, #8]
        break;
 8008a14:	e0bb      	b.n	8008b8e <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d102      	bne.n	8008a24 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a22:	e0b5      	b.n	8008b90 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d105      	bne.n	8008a3a <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008a38:	e002      	b.n	8008a40 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 8008a3a:	23ff      	movs	r3, #255	; 0xff
 8008a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bf14      	ite	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fd54 	bl	80094fc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fd5e 	bl	800951a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008a5e:	4b20      	ldr	r3, [pc, #128]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008a6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008a78:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008a84:	4b16      	ldr	r3, [pc, #88]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008a86:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d010      	beq.n	8008ab6 <RadioSetRxGenericConfig+0x29e>
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	dc2d      	bgt.n	8008af4 <RadioSetRxGenericConfig+0x2dc>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <RadioSetRxGenericConfig+0x28a>
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d005      	beq.n	8008aac <RadioSetRxGenericConfig+0x294>
            break;
 8008aa0:	e028      	b.n	8008af4 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008aaa:	e024      	b.n	8008af6 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008aac:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008ab4:	e01f      	b.n	8008af6 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008abc:	2b0b      	cmp	r3, #11
 8008abe:	d004      	beq.n	8008aca <RadioSetRxGenericConfig+0x2b2>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ac6:	2b0c      	cmp	r3, #12
 8008ac8:	d104      	bne.n	8008ad4 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008aca:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008ad2:	e010      	b.n	8008af6 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <RadioSetRxGenericConfig+0x2c8>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008adc:	e00b      	b.n	8008af6 <RadioSetRxGenericConfig+0x2de>
 8008ade:	bf00      	nop
 8008ae0:	20000280 	.word	0x20000280
 8008ae4:	2000027c 	.word	0x2000027c
 8008ae8:	200002f4 	.word	0x200002f4
 8008aec:	200002b8 	.word	0x200002b8
 8008af0:	2000028e 	.word	0x2000028e
            break;
 8008af4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008af6:	4b28      	ldr	r3, [pc, #160]	; (8008b98 <RadioSetRxGenericConfig+0x380>)
 8008af8:	2201      	movs	r2, #1
 8008afa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008b00:	4b25      	ldr	r3, [pc, #148]	; (8008b98 <RadioSetRxGenericConfig+0x380>)
 8008b02:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008b0a:	4b23      	ldr	r3, [pc, #140]	; (8008b98 <RadioSetRxGenericConfig+0x380>)
 8008b0c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008b0e:	4a22      	ldr	r2, [pc, #136]	; (8008b98 <RadioSetRxGenericConfig+0x380>)
 8008b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b14:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008b1c:	4b1e      	ldr	r3, [pc, #120]	; (8008b98 <RadioSetRxGenericConfig+0x380>)
 8008b1e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008b28:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <RadioSetRxGenericConfig+0x380>)
 8008b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008b2e:	f7ff f98e 	bl	8007e4e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008b32:	2001      	movs	r0, #1
 8008b34:	f7fe fb24 	bl	8007180 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008b38:	4818      	ldr	r0, [pc, #96]	; (8008b9c <RadioSetRxGenericConfig+0x384>)
 8008b3a:	f000 ff7d 	bl	8009a38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b3e:	4818      	ldr	r0, [pc, #96]	; (8008ba0 <RadioSetRxGenericConfig+0x388>)
 8008b40:	f001 f84c 	bl	8009bdc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008b44:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <RadioSetRxGenericConfig+0x380>)
 8008b46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d10d      	bne.n	8008b6a <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008b4e:	f240 7036 	movw	r0, #1846	; 0x736
 8008b52:	f001 f9ad 	bl	8009eb0 <SUBGRF_ReadRegister>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f023 0304 	bic.w	r3, r3, #4
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	4619      	mov	r1, r3
 8008b60:	f240 7036 	movw	r0, #1846	; 0x736
 8008b64:	f001 f982 	bl	8009e6c <SUBGRF_WriteRegister>
 8008b68:	e00c      	b.n	8008b84 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008b6a:	f240 7036 	movw	r0, #1846	; 0x736
 8008b6e:	f001 f99f 	bl	8009eb0 <SUBGRF_ReadRegister>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f043 0304 	orr.w	r3, r3, #4
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f240 7036 	movw	r0, #1846	; 0x736
 8008b80:	f001 f974 	bl	8009e6c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008b84:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <RadioSetRxGenericConfig+0x380>)
 8008b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b8a:	609a      	str	r2, [r3, #8]
        break;
 8008b8c:	bf00      	nop
    }
    return status;
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3730      	adds	r7, #48	; 0x30
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	20000280 	.word	0x20000280
 8008b9c:	200002b8 	.word	0x200002b8
 8008ba0:	2000028e 	.word	0x2000028e

08008ba4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08e      	sub	sp, #56	; 0x38
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73fb      	strb	r3, [r7, #15]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bba:	2300      	movs	r3, #0
 8008bbc:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008bbe:	f001 fc56 	bl	800a46e <RFW_DeInit>
    switch( modem )
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	f200 8204 	bhi.w	8008fd2 <RadioSetTxGenericConfig+0x42e>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <RadioSetTxGenericConfig+0x2c>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008d55 	.word	0x08008d55
 8008bd4:	08008e9d 	.word	0x08008e9d
 8008bd8:	08008f95 	.word	0x08008f95
 8008bdc:	08008be1 	.word	0x08008be1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	7c9b      	ldrb	r3, [r3, #18]
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d902      	bls.n	8008bee <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bec:	e206      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6899      	ldr	r1, [r3, #8]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	7c9b      	ldrb	r3, [r3, #18]
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f002 f851 	bl	800aca4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d102      	bne.n	8008c10 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0e:	e1f5      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d813      	bhi.n	8008c44 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008c22:	4b99      	ldr	r3, [pc, #612]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c24:	2203      	movs	r2, #3
 8008c26:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008c28:	4b97      	ldr	r3, [pc, #604]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a94      	ldr	r2, [pc, #592]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c36:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	7cda      	ldrb	r2, [r3, #19]
 8008c3c:	4b92      	ldr	r3, [pc, #584]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c42:	e017      	b.n	8008c74 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008c4a:	4b8f      	ldr	r3, [pc, #572]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008c50:	4b8d      	ldr	r3, [pc, #564]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a8a      	ldr	r2, [pc, #552]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c5e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	7cda      	ldrb	r2, [r3, #19]
 8008c64:	4b88      	ldr	r3, [pc, #544]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	089b      	lsrs	r3, r3, #2
 8008c70:	4a85      	ldr	r2, [pc, #532]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c72:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	4b82      	ldr	r3, [pc, #520]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c80:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008c82:	4b81      	ldr	r3, [pc, #516]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c84:	2204      	movs	r2, #4
 8008c86:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	7c9b      	ldrb	r3, [r3, #18]
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	4b7d      	ldr	r3, [pc, #500]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c92:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008c94:	4b7c      	ldr	r3, [pc, #496]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	7d9b      	ldrb	r3, [r3, #22]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d003      	beq.n	8008caa <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	7d1b      	ldrb	r3, [r3, #20]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d12b      	bne.n	8008d02 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	7d5b      	ldrb	r3, [r3, #21]
 8008cae:	2bf1      	cmp	r3, #241	; 0xf1
 8008cb0:	d00a      	beq.n	8008cc8 <RadioSetTxGenericConfig+0x124>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	7d5b      	ldrb	r3, [r3, #21]
 8008cb6:	2bf2      	cmp	r3, #242	; 0xf2
 8008cb8:	d006      	beq.n	8008cc8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	7d5b      	ldrb	r3, [r3, #21]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d002      	beq.n	8008cc8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc6:	e199      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008cd2:	4b6e      	ldr	r3, [pc, #440]	; (8008e8c <RadioSetTxGenericConfig+0x2e8>)
 8008cd4:	6819      	ldr	r1, [r3, #0]
 8008cd6:	f107 0320 	add.w	r3, r7, #32
 8008cda:	4a6d      	ldr	r2, [pc, #436]	; (8008e90 <RadioSetTxGenericConfig+0x2ec>)
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f001 fbb9 	bl	800a454 <RFW_Init>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cec:	e186      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008cee:	4b66      	ldr	r3, [pc, #408]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008cf4:	4b64      	ldr	r3, [pc, #400]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008cfa:	4b63      	ldr	r3, [pc, #396]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	755a      	strb	r2, [r3, #21]
        {
 8008d00:	e00b      	b.n	8008d1a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	7d5a      	ldrb	r2, [r3, #21]
 8008d06:	4b60      	ldr	r3, [pc, #384]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008d08:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	7d9a      	ldrb	r2, [r3, #22]
 8008d0e:	4b5e      	ldr	r3, [pc, #376]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008d10:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	7d1a      	ldrb	r2, [r3, #20]
 8008d16:	4b5c      	ldr	r3, [pc, #368]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008d18:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008d1a:	f7ff f898 	bl	8007e4e <RadioStandby>
        RadioSetModem( radio_modem );
 8008d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fa2c 	bl	8007180 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d28:	485a      	ldr	r0, [pc, #360]	; (8008e94 <RadioSetTxGenericConfig+0x2f0>)
 8008d2a:	f000 fe85 	bl	8009a38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d2e:	485a      	ldr	r0, [pc, #360]	; (8008e98 <RadioSetTxGenericConfig+0x2f4>)
 8008d30:	f000 ff54 	bl	8009bdc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fa18 	bl	800916e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	8a1b      	ldrh	r3, [r3, #16]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fa62 	bl	800920c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	899b      	ldrh	r3, [r3, #12]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 fa3d 	bl	80091cc <SUBGRF_SetCrcPolynomial>
        break;
 8008d52:	e13f      	b.n	8008fd4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d60:	e14c      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	7c9b      	ldrb	r3, [r3, #18]
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	d902      	bls.n	8008d70 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	e145      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6899      	ldr	r1, [r3, #8]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	7c9b      	ldrb	r3, [r3, #18]
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 ff90 	bl	800aca4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008d84:	4b40      	ldr	r3, [pc, #256]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a3d      	ldr	r2, [pc, #244]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008d92:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	7cda      	ldrb	r2, [r3, #19]
 8008d98:	4b3b      	ldr	r3, [pc, #236]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	4a39      	ldr	r2, [pc, #228]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008da4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008da6:	4b38      	ldr	r3, [pc, #224]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	4b34      	ldr	r3, [pc, #208]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008db8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008dba:	4b33      	ldr	r3, [pc, #204]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	7c9b      	ldrb	r3, [r3, #18]
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	4b2f      	ldr	r3, [pc, #188]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008dca:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008dcc:	4b2e      	ldr	r3, [pc, #184]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	7d9b      	ldrb	r3, [r3, #22]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d003      	beq.n	8008de2 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	7d1b      	ldrb	r3, [r3, #20]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d12a      	bne.n	8008e38 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	7d5b      	ldrb	r3, [r3, #21]
 8008de6:	2bf1      	cmp	r3, #241	; 0xf1
 8008de8:	d00a      	beq.n	8008e00 <RadioSetTxGenericConfig+0x25c>
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	7d5b      	ldrb	r3, [r3, #21]
 8008dee:	2bf2      	cmp	r3, #242	; 0xf2
 8008df0:	d006      	beq.n	8008e00 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	7d5b      	ldrb	r3, [r3, #21]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d002      	beq.n	8008e00 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfe:	e0fd      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008e00:	2301      	movs	r3, #1
 8008e02:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008e08:	4b20      	ldr	r3, [pc, #128]	; (8008e8c <RadioSetTxGenericConfig+0x2e8>)
 8008e0a:	6819      	ldr	r1, [r3, #0]
 8008e0c:	f107 0314 	add.w	r3, r7, #20
 8008e10:	4a1f      	ldr	r2, [pc, #124]	; (8008e90 <RadioSetTxGenericConfig+0x2ec>)
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 fb1e 	bl	800a454 <RFW_Init>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e22:	e0eb      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008e24:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008e2a:	4b17      	ldr	r3, [pc, #92]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	755a      	strb	r2, [r3, #21]
        {
 8008e36:	e00b      	b.n	8008e50 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	7d5a      	ldrb	r2, [r3, #21]
 8008e3c:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008e3e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	7d9a      	ldrb	r2, [r3, #22]
 8008e44:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008e46:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	7d1a      	ldrb	r2, [r3, #20]
 8008e4c:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <RadioSetTxGenericConfig+0x2e4>)
 8008e4e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008e50:	f7fe fffd 	bl	8007e4e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008e54:	2000      	movs	r0, #0
 8008e56:	f7fe f993 	bl	8007180 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008e5a:	480e      	ldr	r0, [pc, #56]	; (8008e94 <RadioSetTxGenericConfig+0x2f0>)
 8008e5c:	f000 fdec 	bl	8009a38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e60:	480d      	ldr	r0, [pc, #52]	; (8008e98 <RadioSetTxGenericConfig+0x2f4>)
 8008e62:	f000 febb 	bl	8009bdc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 f97f 	bl	800916e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	8a1b      	ldrh	r3, [r3, #16]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 f9c9 	bl	800920c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	899b      	ldrh	r3, [r3, #12]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 f9a4 	bl	80091cc <SUBGRF_SetCrcPolynomial>
        break;
 8008e84:	e0a6      	b.n	8008fd4 <RadioSetTxGenericConfig+0x430>
 8008e86:	bf00      	nop
 8008e88:	20000280 	.word	0x20000280
 8008e8c:	2000027c 	.word	0x2000027c
 8008e90:	200002dc 	.word	0x200002dc
 8008e94:	200002b8 	.word	0x200002b8
 8008e98:	2000028e 	.word	0x2000028e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008e9c:	4b59      	ldr	r3, [pc, #356]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	781a      	ldrb	r2, [r3, #0]
 8008ea8:	4b56      	ldr	r3, [pc, #344]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	785a      	ldrb	r2, [r3, #1]
 8008eb2:	4b54      	ldr	r3, [pc, #336]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	789a      	ldrb	r2, [r3, #2]
 8008ebc:	4b51      	ldr	r3, [pc, #324]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008ebe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	78db      	ldrb	r3, [r3, #3]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d010      	beq.n	8008eec <RadioSetTxGenericConfig+0x348>
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	dc20      	bgt.n	8008f10 <RadioSetTxGenericConfig+0x36c>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d002      	beq.n	8008ed8 <RadioSetTxGenericConfig+0x334>
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d005      	beq.n	8008ee2 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8008ed6:	e01b      	b.n	8008f10 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008ed8:	4b4a      	ldr	r3, [pc, #296]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008ee0:	e017      	b.n	8008f12 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008ee2:	4b48      	ldr	r3, [pc, #288]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008eea:	e012      	b.n	8008f12 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b0b      	cmp	r3, #11
 8008ef2:	d003      	beq.n	8008efc <RadioSetTxGenericConfig+0x358>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b0c      	cmp	r3, #12
 8008efa:	d104      	bne.n	8008f06 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008efc:	4b41      	ldr	r3, [pc, #260]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008f04:	e005      	b.n	8008f12 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008f06:	4b3f      	ldr	r3, [pc, #252]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008f0e:	e000      	b.n	8008f12 <RadioSetTxGenericConfig+0x36e>
            break;
 8008f10:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008f12:	4b3c      	ldr	r3, [pc, #240]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	889a      	ldrh	r2, [r3, #4]
 8008f1c:	4b39      	ldr	r3, [pc, #228]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008f1e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	799a      	ldrb	r2, [r3, #6]
 8008f24:	4b37      	ldr	r3, [pc, #220]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008f26:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	79da      	ldrb	r2, [r3, #7]
 8008f2c:	4b35      	ldr	r3, [pc, #212]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008f2e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	7a1a      	ldrb	r2, [r3, #8]
 8008f36:	4b33      	ldr	r3, [pc, #204]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008f3c:	f7fe ff87 	bl	8007e4e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008f40:	2001      	movs	r0, #1
 8008f42:	f7fe f91d 	bl	8007180 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f46:	4830      	ldr	r0, [pc, #192]	; (8009008 <RadioSetTxGenericConfig+0x464>)
 8008f48:	f000 fd76 	bl	8009a38 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f4c:	482f      	ldr	r0, [pc, #188]	; (800900c <RadioSetTxGenericConfig+0x468>)
 8008f4e:	f000 fe45 	bl	8009bdc <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008f52:	4b2c      	ldr	r3, [pc, #176]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f58:	2b06      	cmp	r3, #6
 8008f5a:	d10d      	bne.n	8008f78 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008f5c:	f640 0089 	movw	r0, #2185	; 0x889
 8008f60:	f000 ffa6 	bl	8009eb0 <SUBGRF_ReadRegister>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f023 0304 	bic.w	r3, r3, #4
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	f640 0089 	movw	r0, #2185	; 0x889
 8008f72:	f000 ff7b 	bl	8009e6c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8008f76:	e02d      	b.n	8008fd4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008f78:	f640 0089 	movw	r0, #2185	; 0x889
 8008f7c:	f000 ff98 	bl	8009eb0 <SUBGRF_ReadRegister>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f043 0304 	orr.w	r3, r3, #4
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f640 0089 	movw	r0, #2185	; 0x889
 8008f8e:	f000 ff6d 	bl	8009e6c <SUBGRF_WriteRegister>
        break;
 8008f92:	e01f      	b.n	8008fd4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <RadioSetTxGenericConfig+0x402>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fa4:	d902      	bls.n	8008fac <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	e027      	b.n	8008ffc <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8008fac:	2003      	movs	r0, #3
 8008fae:	f7fe f8e7 	bl	8007180 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008fb2:	4b14      	ldr	r3, [pc, #80]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a11      	ldr	r2, [pc, #68]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008fc0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008fc2:	4b10      	ldr	r3, [pc, #64]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008fc4:	2216      	movs	r2, #22
 8008fc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008fca:	480f      	ldr	r0, [pc, #60]	; (8009008 <RadioSetTxGenericConfig+0x464>)
 8008fcc:	f000 fd34 	bl	8009a38 <SUBGRF_SetModulationParams>
        break;
 8008fd0:	e000      	b.n	8008fd4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8008fd2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 f87d 	bl	800a0d8 <SUBGRF_SetRfTxPower>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008fe4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008fea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 fa51 	bl	800a496 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008ff4:	4a03      	ldr	r2, [pc, #12]	; (8009004 <RadioSetTxGenericConfig+0x460>)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6053      	str	r3, [r2, #4]
    return 0;
 8008ffa:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3738      	adds	r7, #56	; 0x38
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	20000280 	.word	0x20000280
 8009008:	200002b8 	.word	0x200002b8
 800900c:	2000028e 	.word	0x2000028e

08009010 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	bc80      	pop	{r7}
 8009026:	4770      	bx	lr

08009028 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009032:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr
	...

08009040 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800904e:	4a1d      	ldr	r2, [pc, #116]	; (80090c4 <SUBGRF_Init+0x84>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009054:	f7f7 fc5e 	bl	8000914 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009058:	2002      	movs	r0, #2
 800905a:	f001 f919 	bl	800a290 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800905e:	4b1a      	ldr	r3, [pc, #104]	; (80090c8 <SUBGRF_Init+0x88>)
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009064:	2000      	movs	r0, #0
 8009066:	f000 f97d 	bl	8009364 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800906a:	f001 fd8f 	bl	800ab8c <RBI_IsTCXO>
 800906e:	4603      	mov	r3, r0
 8009070:	2b01      	cmp	r3, #1
 8009072:	d10e      	bne.n	8009092 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009074:	2140      	movs	r1, #64	; 0x40
 8009076:	2001      	movs	r0, #1
 8009078:	f000 fb82 	bl	8009780 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800907c:	2100      	movs	r1, #0
 800907e:	f640 1011 	movw	r0, #2321	; 0x911
 8009082:	f000 fef3 	bl	8009e6c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009086:	237f      	movs	r3, #127	; 0x7f
 8009088:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800908a:	7b38      	ldrb	r0, [r7, #12]
 800908c:	f000 fa8b 	bl	80095a6 <SUBGRF_Calibrate>
 8009090:	e009      	b.n	80090a6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009092:	2120      	movs	r1, #32
 8009094:	f640 1011 	movw	r0, #2321	; 0x911
 8009098:	f000 fee8 	bl	8009e6c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800909c:	2120      	movs	r1, #32
 800909e:	f640 1012 	movw	r0, #2322	; 0x912
 80090a2:	f000 fee3 	bl	8009e6c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80090a6:	210e      	movs	r1, #14
 80090a8:	f640 101f 	movw	r0, #2335	; 0x91f
 80090ac:	f000 fede 	bl	8009e6c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80090b0:	f001 fd50 	bl	800ab54 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80090b4:	4b05      	ldr	r3, [pc, #20]	; (80090cc <SUBGRF_Init+0x8c>)
 80090b6:	2201      	movs	r2, #1
 80090b8:	701a      	strb	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000318 	.word	0x20000318
 80090c8:	20000314 	.word	0x20000314
 80090cc:	2000030c 	.word	0x2000030c

080090d0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
    return OperatingMode;
 80090d4:	4b02      	ldr	r3, [pc, #8]	; (80090e0 <SUBGRF_GetOperatingMode+0x10>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	46bd      	mov	sp, r7
 80090dc:	bc80      	pop	{r7}
 80090de:	4770      	bx	lr
 80090e0:	2000030c 	.word	0x2000030c

080090e4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	461a      	mov	r2, r3
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	2000      	movs	r0, #0
 80090f8:	f000 ff3e 	bl	8009f78 <SUBGRF_WriteBuffer>
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009116:	f107 0317 	add.w	r3, r7, #23
 800911a:	4619      	mov	r1, r3
 800911c:	68b8      	ldr	r0, [r7, #8]
 800911e:	f000 fe27 	bl	8009d70 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	79fa      	ldrb	r2, [r7, #7]
 8009128:	429a      	cmp	r2, r3
 800912a:	d201      	bcs.n	8009130 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800912c:	2301      	movs	r3, #1
 800912e:	e007      	b.n	8009140 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009130:	7df8      	ldrb	r0, [r7, #23]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	f000 ff3f 	bl	8009fbc <SUBGRF_ReadBuffer>

    return 0;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	460b      	mov	r3, r1
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009156:	7afb      	ldrb	r3, [r7, #11]
 8009158:	4619      	mov	r1, r3
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f7ff ffc2 	bl	80090e4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f91b 	bl	800939c <SUBGRF_SetTx>
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009176:	2208      	movs	r2, #8
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800917e:	f000 feb7 	bl	8009ef0 <SUBGRF_WriteRegisters>
    return 0;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009196:	88fb      	ldrh	r3, [r7, #6]
 8009198:	0a1b      	lsrs	r3, r3, #8
 800919a:	b29b      	uxth	r3, r3
 800919c:	b2db      	uxtb	r3, r3
 800919e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80091a0:	88fb      	ldrh	r3, [r7, #6]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80091a6:	f000 fb6f 	bl	8009888 <SUBGRF_GetPacketType>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d108      	bne.n	80091c2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80091b0:	f107 030c 	add.w	r3, r7, #12
 80091b4:	2202      	movs	r2, #2
 80091b6:	4619      	mov	r1, r3
 80091b8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80091bc:	f000 fe98 	bl	8009ef0 <SUBGRF_WriteRegisters>
            break;
 80091c0:	e000      	b.n	80091c4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80091c2:	bf00      	nop
    }
}
 80091c4:	bf00      	nop
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80091d6:	88fb      	ldrh	r3, [r7, #6]
 80091d8:	0a1b      	lsrs	r3, r3, #8
 80091da:	b29b      	uxth	r3, r3
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80091e6:	f000 fb4f 	bl	8009888 <SUBGRF_GetPacketType>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d108      	bne.n	8009202 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80091f0:	f107 030c 	add.w	r3, r7, #12
 80091f4:	2202      	movs	r2, #2
 80091f6:	4619      	mov	r1, r3
 80091f8:	f240 60be 	movw	r0, #1726	; 0x6be
 80091fc:	f000 fe78 	bl	8009ef0 <SUBGRF_WriteRegisters>
            break;
 8009200:	e000      	b.n	8009204 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009202:	bf00      	nop
    }
}
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800921a:	f000 fb35 	bl	8009888 <SUBGRF_GetPacketType>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d121      	bne.n	8009268 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009224:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009228:	f000 fe42 	bl	8009eb0 <SUBGRF_ReadRegister>
 800922c:	4603      	mov	r3, r0
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	b29b      	uxth	r3, r3
 800923a:	b25b      	sxtb	r3, r3
 800923c:	f003 0301 	and.w	r3, r3, #1
 8009240:	b25a      	sxtb	r2, r3
 8009242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009246:	4313      	orrs	r3, r2
 8009248:	b25b      	sxtb	r3, r3
 800924a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	4619      	mov	r1, r3
 8009250:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009254:	f000 fe0a 	bl	8009e6c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	4619      	mov	r1, r3
 800925e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8009262:	f000 fe03 	bl	8009e6c <SUBGRF_WriteRegister>
            break;
 8009266:	e000      	b.n	800926a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009268:	bf00      	nop
    }
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009284:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009288:	f000 fe12 	bl	8009eb0 <SUBGRF_ReadRegister>
 800928c:	4603      	mov	r3, r0
 800928e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	f023 0301 	bic.w	r3, r3, #1
 8009296:	b2db      	uxtb	r3, r3
 8009298:	4619      	mov	r1, r3
 800929a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800929e:	f000 fde5 	bl	8009e6c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80092a2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80092a6:	f000 fe03 	bl	8009eb0 <SUBGRF_ReadRegister>
 80092aa:	4603      	mov	r3, r0
 80092ac:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80092ae:	79bb      	ldrb	r3, [r7, #6]
 80092b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	4619      	mov	r1, r3
 80092b8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80092bc:	f000 fdd6 	bl	8009e6c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80092c0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80092c4:	f000 f88a 	bl	80093dc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80092c8:	463b      	mov	r3, r7
 80092ca:	2204      	movs	r2, #4
 80092cc:	4619      	mov	r1, r3
 80092ce:	f640 0019 	movw	r0, #2073	; 0x819
 80092d2:	f000 fe2f 	bl	8009f34 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80092d6:	2000      	movs	r0, #0
 80092d8:	f000 f844 	bl	8009364 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	4619      	mov	r1, r3
 80092e0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80092e4:	f000 fdc2 	bl	8009e6c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80092e8:	79bb      	ldrb	r3, [r7, #6]
 80092ea:	4619      	mov	r1, r3
 80092ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80092f0:	f000 fdbc 	bl	8009e6c <SUBGRF_WriteRegister>

    return number;
 80092f4:	683b      	ldr	r3, [r7, #0]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009308:	2000      	movs	r0, #0
 800930a:	f001 fc2a 	bl	800ab62 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800930e:	2002      	movs	r0, #2
 8009310:	f000 ffbe 	bl	800a290 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009314:	793b      	ldrb	r3, [r7, #4]
 8009316:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800931a:	b2db      	uxtb	r3, r3
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009320:	793b      	ldrb	r3, [r7, #4]
 8009322:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800932a:	b25b      	sxtb	r3, r3
 800932c:	4313      	orrs	r3, r2
 800932e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009330:	793b      	ldrb	r3, [r7, #4]
 8009332:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009336:	b2db      	uxtb	r3, r3
 8009338:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800933a:	4313      	orrs	r3, r2
 800933c:	b25b      	sxtb	r3, r3
 800933e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009340:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009342:	f107 030f 	add.w	r3, r7, #15
 8009346:	2201      	movs	r2, #1
 8009348:	4619      	mov	r1, r3
 800934a:	2084      	movs	r0, #132	; 0x84
 800934c:	f000 fe58 	bl	800a000 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009350:	4b03      	ldr	r3, [pc, #12]	; (8009360 <SUBGRF_SetSleep+0x60>)
 8009352:	2200      	movs	r2, #0
 8009354:	701a      	strb	r2, [r3, #0]
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	2000030c 	.word	0x2000030c

08009364 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800936e:	1dfb      	adds	r3, r7, #7
 8009370:	2201      	movs	r2, #1
 8009372:	4619      	mov	r1, r3
 8009374:	2080      	movs	r0, #128	; 0x80
 8009376:	f000 fe43 	bl	800a000 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d103      	bne.n	8009388 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <SUBGRF_SetStandby+0x34>)
 8009382:	2201      	movs	r2, #1
 8009384:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8009386:	e002      	b.n	800938e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009388:	4b03      	ldr	r3, [pc, #12]	; (8009398 <SUBGRF_SetStandby+0x34>)
 800938a:	2202      	movs	r2, #2
 800938c:	701a      	strb	r2, [r3, #0]
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000030c 	.word	0x2000030c

0800939c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80093a4:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <SUBGRF_SetTx+0x3c>)
 80093a6:	2204      	movs	r2, #4
 80093a8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	0c1b      	lsrs	r3, r3, #16
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	0a1b      	lsrs	r3, r3, #8
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80093c0:	f107 030c 	add.w	r3, r7, #12
 80093c4:	2203      	movs	r2, #3
 80093c6:	4619      	mov	r1, r3
 80093c8:	2083      	movs	r0, #131	; 0x83
 80093ca:	f000 fe19 	bl	800a000 <SUBGRF_WriteCommand>
}
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	2000030c 	.word	0x2000030c

080093dc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <SUBGRF_SetRx+0x3c>)
 80093e6:	2205      	movs	r2, #5
 80093e8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	0c1b      	lsrs	r3, r3, #16
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	0a1b      	lsrs	r3, r3, #8
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009400:	f107 030c 	add.w	r3, r7, #12
 8009404:	2203      	movs	r2, #3
 8009406:	4619      	mov	r1, r3
 8009408:	2082      	movs	r0, #130	; 0x82
 800940a:	f000 fdf9 	bl	800a000 <SUBGRF_WriteCommand>
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	2000030c 	.word	0x2000030c

0800941c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <SUBGRF_SetRxBoosted+0x44>)
 8009426:	2205      	movs	r2, #5
 8009428:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800942a:	2197      	movs	r1, #151	; 0x97
 800942c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009430:	f000 fd1c 	bl	8009e6c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	0c1b      	lsrs	r3, r3, #16
 8009438:	b2db      	uxtb	r3, r3
 800943a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	0a1b      	lsrs	r3, r3, #8
 8009440:	b2db      	uxtb	r3, r3
 8009442:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	b2db      	uxtb	r3, r3
 8009448:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800944a:	f107 030c 	add.w	r3, r7, #12
 800944e:	2203      	movs	r2, #3
 8009450:	4619      	mov	r1, r3
 8009452:	2082      	movs	r0, #130	; 0x82
 8009454:	f000 fdd4 	bl	800a000 <SUBGRF_WriteCommand>
}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	2000030c 	.word	0x2000030c

08009464 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	0c1b      	lsrs	r3, r3, #16
 8009472:	b2db      	uxtb	r3, r3
 8009474:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	0a1b      	lsrs	r3, r3, #8
 800947a:	b2db      	uxtb	r3, r3
 800947c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	0c1b      	lsrs	r3, r3, #16
 8009488:	b2db      	uxtb	r3, r3
 800948a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	0a1b      	lsrs	r3, r3, #8
 8009490:	b2db      	uxtb	r3, r3
 8009492:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800949a:	f107 0308 	add.w	r3, r7, #8
 800949e:	2206      	movs	r2, #6
 80094a0:	4619      	mov	r1, r3
 80094a2:	2094      	movs	r0, #148	; 0x94
 80094a4:	f000 fdac 	bl	800a000 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80094a8:	4b03      	ldr	r3, [pc, #12]	; (80094b8 <SUBGRF_SetRxDutyCycle+0x54>)
 80094aa:	2206      	movs	r2, #6
 80094ac:	701a      	strb	r2, [r3, #0]
}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	2000030c 	.word	0x2000030c

080094bc <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80094c0:	2200      	movs	r2, #0
 80094c2:	2100      	movs	r1, #0
 80094c4:	20c5      	movs	r0, #197	; 0xc5
 80094c6:	f000 fd9b 	bl	800a000 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80094ca:	4b02      	ldr	r3, [pc, #8]	; (80094d4 <SUBGRF_SetCad+0x18>)
 80094cc:	2207      	movs	r2, #7
 80094ce:	701a      	strb	r2, [r3, #0]
}
 80094d0:	bf00      	nop
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	2000030c 	.word	0x2000030c

080094d8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80094dc:	2200      	movs	r2, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	20d1      	movs	r0, #209	; 0xd1
 80094e2:	f000 fd8d 	bl	800a000 <SUBGRF_WriteCommand>
}
 80094e6:	bf00      	nop
 80094e8:	bd80      	pop	{r7, pc}

080094ea <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80094ee:	2200      	movs	r2, #0
 80094f0:	2100      	movs	r1, #0
 80094f2:	20d2      	movs	r0, #210	; 0xd2
 80094f4:	f000 fd84 	bl	800a000 <SUBGRF_WriteCommand>
}
 80094f8:	bf00      	nop
 80094fa:	bd80      	pop	{r7, pc}

080094fc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009506:	1dfb      	adds	r3, r7, #7
 8009508:	2201      	movs	r2, #1
 800950a:	4619      	mov	r1, r3
 800950c:	209f      	movs	r0, #159	; 0x9f
 800950e:	f000 fd77 	bl	800a000 <SUBGRF_WriteCommand>
}
 8009512:	bf00      	nop
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	4603      	mov	r3, r0
 8009522:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009524:	1dfb      	adds	r3, r7, #7
 8009526:	2201      	movs	r2, #1
 8009528:	4619      	mov	r1, r3
 800952a:	20a0      	movs	r0, #160	; 0xa0
 800952c:	f000 fd68 	bl	800a000 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	2b3f      	cmp	r3, #63	; 0x3f
 8009534:	d91c      	bls.n	8009570 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	085b      	lsrs	r3, r3, #1
 800953a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009544:	e005      	b.n	8009552 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	089b      	lsrs	r3, r3, #2
 800954a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	3301      	adds	r3, #1
 8009550:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	2b1f      	cmp	r3, #31
 8009556:	d8f6      	bhi.n	8009546 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	b2da      	uxtb	r2, r3
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	4413      	add	r3, r2
 8009562:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009564:	7b7b      	ldrb	r3, [r7, #13]
 8009566:	4619      	mov	r1, r3
 8009568:	f240 7006 	movw	r0, #1798	; 0x706
 800956c:	f000 fc7e 	bl	8009e6c <SUBGRF_WriteRegister>
    }
}
 8009570:	bf00      	nop
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800957e:	f001 fb0c 	bl	800ab9a <RBI_IsDCDC>
 8009582:	4603      	mov	r3, r0
 8009584:	2b01      	cmp	r3, #1
 8009586:	d102      	bne.n	800958e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8009588:	2301      	movs	r3, #1
 800958a:	71fb      	strb	r3, [r7, #7]
 800958c:	e001      	b.n	8009592 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800958e:	2300      	movs	r3, #0
 8009590:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8009592:	1dfb      	adds	r3, r7, #7
 8009594:	2201      	movs	r2, #1
 8009596:	4619      	mov	r1, r3
 8009598:	2096      	movs	r0, #150	; 0x96
 800959a:	f000 fd31 	bl	800a000 <SUBGRF_WriteCommand>
}
 800959e:	bf00      	nop
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80095ae:	793b      	ldrb	r3, [r7, #4]
 80095b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	019b      	lsls	r3, r3, #6
 80095b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80095ba:	793b      	ldrb	r3, [r7, #4]
 80095bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80095c4:	b25b      	sxtb	r3, r3
 80095c6:	4313      	orrs	r3, r2
 80095c8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80095ca:	793b      	ldrb	r3, [r7, #4]
 80095cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80095d4:	b25b      	sxtb	r3, r3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80095da:	793b      	ldrb	r3, [r7, #4]
 80095dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80095e4:	b25b      	sxtb	r3, r3
 80095e6:	4313      	orrs	r3, r2
 80095e8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80095ea:	793b      	ldrb	r3, [r7, #4]
 80095ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80095f4:	b25b      	sxtb	r3, r3
 80095f6:	4313      	orrs	r3, r2
 80095f8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80095fa:	793b      	ldrb	r3, [r7, #4]
 80095fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009600:	b2db      	uxtb	r3, r3
 8009602:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009604:	b25b      	sxtb	r3, r3
 8009606:	4313      	orrs	r3, r2
 8009608:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800960a:	793b      	ldrb	r3, [r7, #4]
 800960c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009610:	b2db      	uxtb	r3, r3
 8009612:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009614:	4313      	orrs	r3, r2
 8009616:	b25b      	sxtb	r3, r3
 8009618:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800961a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800961c:	f107 030f 	add.w	r3, r7, #15
 8009620:	2201      	movs	r2, #1
 8009622:	4619      	mov	r1, r3
 8009624:	2089      	movs	r0, #137	; 0x89
 8009626:	f000 fceb 	bl	800a000 <SUBGRF_WriteCommand>
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a1d      	ldr	r2, [pc, #116]	; (80096b4 <SUBGRF_CalibrateImage+0x80>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d904      	bls.n	800964e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009644:	23e1      	movs	r3, #225	; 0xe1
 8009646:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009648:	23e9      	movs	r3, #233	; 0xe9
 800964a:	737b      	strb	r3, [r7, #13]
 800964c:	e027      	b.n	800969e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a19      	ldr	r2, [pc, #100]	; (80096b8 <SUBGRF_CalibrateImage+0x84>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d904      	bls.n	8009660 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8009656:	23d7      	movs	r3, #215	; 0xd7
 8009658:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800965a:	23db      	movs	r3, #219	; 0xdb
 800965c:	737b      	strb	r3, [r7, #13]
 800965e:	e01e      	b.n	800969e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a16      	ldr	r2, [pc, #88]	; (80096bc <SUBGRF_CalibrateImage+0x88>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d904      	bls.n	8009672 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009668:	23c1      	movs	r3, #193	; 0xc1
 800966a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800966c:	23c5      	movs	r3, #197	; 0xc5
 800966e:	737b      	strb	r3, [r7, #13]
 8009670:	e015      	b.n	800969e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a12      	ldr	r2, [pc, #72]	; (80096c0 <SUBGRF_CalibrateImage+0x8c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d904      	bls.n	8009684 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800967a:	2375      	movs	r3, #117	; 0x75
 800967c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800967e:	2381      	movs	r3, #129	; 0x81
 8009680:	737b      	strb	r3, [r7, #13]
 8009682:	e00c      	b.n	800969e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a0f      	ldr	r2, [pc, #60]	; (80096c4 <SUBGRF_CalibrateImage+0x90>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d904      	bls.n	8009696 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800968c:	236b      	movs	r3, #107	; 0x6b
 800968e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8009690:	236f      	movs	r3, #111	; 0x6f
 8009692:	737b      	strb	r3, [r7, #13]
 8009694:	e003      	b.n	800969e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8009696:	2329      	movs	r3, #41	; 0x29
 8009698:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800969a:	232b      	movs	r3, #43	; 0x2b
 800969c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800969e:	f107 030c 	add.w	r3, r7, #12
 80096a2:	2202      	movs	r2, #2
 80096a4:	4619      	mov	r1, r3
 80096a6:	2098      	movs	r0, #152	; 0x98
 80096a8:	f000 fcaa 	bl	800a000 <SUBGRF_WriteCommand>
}
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	35a4e900 	.word	0x35a4e900
 80096b8:	32a9f880 	.word	0x32a9f880
 80096bc:	2de54480 	.word	0x2de54480
 80096c0:	1b6b0b00 	.word	0x1b6b0b00
 80096c4:	1954fc40 	.word	0x1954fc40

080096c8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80096c8:	b590      	push	{r4, r7, lr}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	4611      	mov	r1, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	4623      	mov	r3, r4
 80096d8:	71fb      	strb	r3, [r7, #7]
 80096da:	4603      	mov	r3, r0
 80096dc:	71bb      	strb	r3, [r7, #6]
 80096de:	460b      	mov	r3, r1
 80096e0:	717b      	strb	r3, [r7, #5]
 80096e2:	4613      	mov	r3, r2
 80096e4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80096ea:	79bb      	ldrb	r3, [r7, #6]
 80096ec:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80096ee:	797b      	ldrb	r3, [r7, #5]
 80096f0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80096f2:	793b      	ldrb	r3, [r7, #4]
 80096f4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	2204      	movs	r2, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	2095      	movs	r0, #149	; 0x95
 8009700:	f000 fc7e 	bl	800a000 <SUBGRF_WriteCommand>
}
 8009704:	bf00      	nop
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	bd90      	pop	{r4, r7, pc}

0800970c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800970c:	b590      	push	{r4, r7, lr}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	4604      	mov	r4, r0
 8009714:	4608      	mov	r0, r1
 8009716:	4611      	mov	r1, r2
 8009718:	461a      	mov	r2, r3
 800971a:	4623      	mov	r3, r4
 800971c:	80fb      	strh	r3, [r7, #6]
 800971e:	4603      	mov	r3, r0
 8009720:	80bb      	strh	r3, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	807b      	strh	r3, [r7, #2]
 8009726:	4613      	mov	r3, r2
 8009728:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800972a:	88fb      	ldrh	r3, [r7, #6]
 800972c:	0a1b      	lsrs	r3, r3, #8
 800972e:	b29b      	uxth	r3, r3
 8009730:	b2db      	uxtb	r3, r3
 8009732:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009734:	88fb      	ldrh	r3, [r7, #6]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800973a:	88bb      	ldrh	r3, [r7, #4]
 800973c:	0a1b      	lsrs	r3, r3, #8
 800973e:	b29b      	uxth	r3, r3
 8009740:	b2db      	uxtb	r3, r3
 8009742:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009744:	88bb      	ldrh	r3, [r7, #4]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800974a:	887b      	ldrh	r3, [r7, #2]
 800974c:	0a1b      	lsrs	r3, r3, #8
 800974e:	b29b      	uxth	r3, r3
 8009750:	b2db      	uxtb	r3, r3
 8009752:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009754:	887b      	ldrh	r3, [r7, #2]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800975a:	883b      	ldrh	r3, [r7, #0]
 800975c:	0a1b      	lsrs	r3, r3, #8
 800975e:	b29b      	uxth	r3, r3
 8009760:	b2db      	uxtb	r3, r3
 8009762:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009764:	883b      	ldrh	r3, [r7, #0]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800976a:	f107 0308 	add.w	r3, r7, #8
 800976e:	2208      	movs	r2, #8
 8009770:	4619      	mov	r1, r3
 8009772:	2008      	movs	r0, #8
 8009774:	f000 fc44 	bl	800a000 <SUBGRF_WriteCommand>
}
 8009778:	bf00      	nop
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	bd90      	pop	{r4, r7, pc}

08009780 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	b2db      	uxtb	r3, r3
 8009794:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	0c1b      	lsrs	r3, r3, #16
 800979a:	b2db      	uxtb	r3, r3
 800979c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	0a1b      	lsrs	r3, r3, #8
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80097ac:	f107 030c 	add.w	r3, r7, #12
 80097b0:	2204      	movs	r2, #4
 80097b2:	4619      	mov	r1, r3
 80097b4:	2097      	movs	r0, #151	; 0x97
 80097b6:	f000 fc23 	bl	800a000 <SUBGRF_WriteCommand>
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80097c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80097d2:	4b1d      	ldr	r3, [pc, #116]	; (8009848 <SUBGRF_SetRfFrequency+0x84>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	f083 0301 	eor.w	r3, r3, #1
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ff27 	bl	8009634 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80097e6:	4b18      	ldr	r3, [pc, #96]	; (8009848 <SUBGRF_SetRfFrequency+0x84>)
 80097e8:	2201      	movs	r2, #1
 80097ea:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	461c      	mov	r4, r3
 80097f2:	4615      	mov	r5, r2
 80097f4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80097f8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80097fc:	4a13      	ldr	r2, [pc, #76]	; (800984c <SUBGRF_SetRfFrequency+0x88>)
 80097fe:	f04f 0300 	mov.w	r3, #0
 8009802:	4640      	mov	r0, r8
 8009804:	4649      	mov	r1, r9
 8009806:	f7f6 fcbf 	bl	8000188 <__aeabi_uldivmod>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	4613      	mov	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	0e1b      	lsrs	r3, r3, #24
 8009816:	b2db      	uxtb	r3, r3
 8009818:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	0c1b      	lsrs	r3, r3, #16
 800981e:	b2db      	uxtb	r3, r3
 8009820:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	0a1b      	lsrs	r3, r3, #8
 8009826:	b2db      	uxtb	r3, r3
 8009828:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009830:	f107 0308 	add.w	r3, r7, #8
 8009834:	2204      	movs	r2, #4
 8009836:	4619      	mov	r1, r3
 8009838:	2086      	movs	r0, #134	; 0x86
 800983a:	f000 fbe1 	bl	800a000 <SUBGRF_WriteCommand>
}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009848:	20000314 	.word	0x20000314
 800984c:	01e84800 	.word	0x01e84800

08009850 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800985a:	79fa      	ldrb	r2, [r7, #7]
 800985c:	4b09      	ldr	r3, [pc, #36]	; (8009884 <SUBGRF_SetPacketType+0x34>)
 800985e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d104      	bne.n	8009870 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009866:	2100      	movs	r1, #0
 8009868:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800986c:	f000 fafe 	bl	8009e6c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009870:	1dfb      	adds	r3, r7, #7
 8009872:	2201      	movs	r2, #1
 8009874:	4619      	mov	r1, r3
 8009876:	208a      	movs	r0, #138	; 0x8a
 8009878:	f000 fbc2 	bl	800a000 <SUBGRF_WriteCommand>
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	2000030d 	.word	0x2000030d

08009888 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
    return PacketType;
 800988c:	4b02      	ldr	r3, [pc, #8]	; (8009898 <SUBGRF_GetPacketType+0x10>)
 800988e:	781b      	ldrb	r3, [r3, #0]
}
 8009890:	4618      	mov	r0, r3
 8009892:	46bd      	mov	sp, r7
 8009894:	bc80      	pop	{r7}
 8009896:	4770      	bx	lr
 8009898:	2000030d 	.word	0x2000030d

0800989c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	71fb      	strb	r3, [r7, #7]
 80098a6:	460b      	mov	r3, r1
 80098a8:	71bb      	strb	r3, [r7, #6]
 80098aa:	4613      	mov	r3, r2
 80098ac:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d149      	bne.n	8009948 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80098b4:	2000      	movs	r0, #0
 80098b6:	f001 f977 	bl	800aba8 <RBI_GetRFOMaxPowerConfig>
 80098ba:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80098bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	da01      	bge.n	80098ca <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b0e      	cmp	r3, #14
 80098ce:	d10e      	bne.n	80098ee <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80098d0:	2301      	movs	r3, #1
 80098d2:	2201      	movs	r2, #1
 80098d4:	2100      	movs	r1, #0
 80098d6:	2004      	movs	r0, #4
 80098d8:	f7ff fef6 	bl	80096c8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80098dc:	79ba      	ldrb	r2, [r7, #6]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	330e      	adds	r3, #14
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	71bb      	strb	r3, [r7, #6]
 80098ec:	e01f      	b.n	800992e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b0a      	cmp	r3, #10
 80098f2:	d10e      	bne.n	8009912 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80098f4:	2301      	movs	r3, #1
 80098f6:	2201      	movs	r2, #1
 80098f8:	2100      	movs	r1, #0
 80098fa:	2001      	movs	r0, #1
 80098fc:	f7ff fee4 	bl	80096c8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009900:	79ba      	ldrb	r2, [r7, #6]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	b2db      	uxtb	r3, r3
 800990a:	330d      	adds	r3, #13
 800990c:	b2db      	uxtb	r3, r3
 800990e:	71bb      	strb	r3, [r7, #6]
 8009910:	e00d      	b.n	800992e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009912:	2301      	movs	r3, #1
 8009914:	2201      	movs	r2, #1
 8009916:	2100      	movs	r1, #0
 8009918:	2007      	movs	r0, #7
 800991a:	f7ff fed5 	bl	80096c8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800991e:	79ba      	ldrb	r2, [r7, #6]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	b2db      	uxtb	r3, r3
 8009928:	330e      	adds	r3, #14
 800992a:	b2db      	uxtb	r3, r3
 800992c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800992e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009932:	f113 0f11 	cmn.w	r3, #17
 8009936:	da01      	bge.n	800993c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009938:	23ef      	movs	r3, #239	; 0xef
 800993a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800993c:	2118      	movs	r1, #24
 800993e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009942:	f000 fa93 	bl	8009e6c <SUBGRF_WriteRegister>
 8009946:	e067      	b.n	8009a18 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009948:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800994c:	f000 fab0 	bl	8009eb0 <SUBGRF_ReadRegister>
 8009950:	4603      	mov	r3, r0
 8009952:	f043 031e 	orr.w	r3, r3, #30
 8009956:	b2db      	uxtb	r3, r3
 8009958:	4619      	mov	r1, r3
 800995a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800995e:	f000 fa85 	bl	8009e6c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009962:	2001      	movs	r0, #1
 8009964:	f001 f920 	bl	800aba8 <RBI_GetRFOMaxPowerConfig>
 8009968:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800996a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	429a      	cmp	r2, r3
 8009972:	da01      	bge.n	8009978 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b14      	cmp	r3, #20
 800997c:	d10e      	bne.n	800999c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800997e:	2301      	movs	r3, #1
 8009980:	2200      	movs	r2, #0
 8009982:	2105      	movs	r1, #5
 8009984:	2003      	movs	r0, #3
 8009986:	f7ff fe9f 	bl	80096c8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800998a:	79ba      	ldrb	r2, [r7, #6]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	b2db      	uxtb	r3, r3
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	b2db      	uxtb	r3, r3
 8009994:	3316      	adds	r3, #22
 8009996:	b2db      	uxtb	r3, r3
 8009998:	71bb      	strb	r3, [r7, #6]
 800999a:	e031      	b.n	8009a00 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b11      	cmp	r3, #17
 80099a0:	d10e      	bne.n	80099c0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80099a2:	2301      	movs	r3, #1
 80099a4:	2200      	movs	r2, #0
 80099a6:	2103      	movs	r1, #3
 80099a8:	2002      	movs	r0, #2
 80099aa:	f7ff fe8d 	bl	80096c8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80099ae:	79ba      	ldrb	r2, [r7, #6]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	3316      	adds	r3, #22
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	71bb      	strb	r3, [r7, #6]
 80099be:	e01f      	b.n	8009a00 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b0e      	cmp	r3, #14
 80099c4:	d10e      	bne.n	80099e4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80099c6:	2301      	movs	r3, #1
 80099c8:	2200      	movs	r2, #0
 80099ca:	2102      	movs	r1, #2
 80099cc:	2002      	movs	r0, #2
 80099ce:	f7ff fe7b 	bl	80096c8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80099d2:	79ba      	ldrb	r2, [r7, #6]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	330e      	adds	r3, #14
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	71bb      	strb	r3, [r7, #6]
 80099e2:	e00d      	b.n	8009a00 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80099e4:	2301      	movs	r3, #1
 80099e6:	2200      	movs	r2, #0
 80099e8:	2107      	movs	r1, #7
 80099ea:	2004      	movs	r0, #4
 80099ec:	f7ff fe6c 	bl	80096c8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80099f0:	79ba      	ldrb	r2, [r7, #6]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	3316      	adds	r3, #22
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009a00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009a04:	f113 0f09 	cmn.w	r3, #9
 8009a08:	da01      	bge.n	8009a0e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009a0a:	23f7      	movs	r3, #247	; 0xf7
 8009a0c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009a0e:	2138      	movs	r1, #56	; 0x38
 8009a10:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009a14:	f000 fa2a 	bl	8009e6c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009a18:	79bb      	ldrb	r3, [r7, #6]
 8009a1a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009a1c:	797b      	ldrb	r3, [r7, #5]
 8009a1e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009a20:	f107 0308 	add.w	r3, r7, #8
 8009a24:	2202      	movs	r2, #2
 8009a26:	4619      	mov	r1, r3
 8009a28:	208e      	movs	r0, #142	; 0x8e
 8009a2a:	f000 fae9 	bl	800a000 <SUBGRF_WriteCommand>
}
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a3c:	b086      	sub	sp, #24
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009a46:	4a61      	ldr	r2, [pc, #388]	; (8009bcc <SUBGRF_SetModulationParams+0x194>)
 8009a48:	f107 0308 	add.w	r3, r7, #8
 8009a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a50:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	781a      	ldrb	r2, [r3, #0]
 8009a58:	4b5d      	ldr	r3, [pc, #372]	; (8009bd0 <SUBGRF_SetModulationParams+0x198>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d004      	beq.n	8009a6a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff fef3 	bl	8009850 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	f200 80a5 	bhi.w	8009bbe <SUBGRF_SetModulationParams+0x186>
 8009a74:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <SUBGRF_SetModulationParams+0x44>)
 8009a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7a:	bf00      	nop
 8009a7c:	08009a8d 	.word	0x08009a8d
 8009a80:	08009b4d 	.word	0x08009b4d
 8009a84:	08009b0f 	.word	0x08009b0f
 8009a88:	08009b7b 	.word	0x08009b7b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	4a4f      	ldr	r2, [pc, #316]	; (8009bd4 <SUBGRF_SetModulationParams+0x19c>)
 8009a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a9a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	0c1b      	lsrs	r3, r3, #16
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	0a1b      	lsrs	r3, r3, #8
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7b1b      	ldrb	r3, [r3, #12]
 8009ab6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7b5b      	ldrb	r3, [r3, #13]
 8009abc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	461c      	mov	r4, r3
 8009ac6:	4615      	mov	r5, r2
 8009ac8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009acc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009ad0:	4a41      	ldr	r2, [pc, #260]	; (8009bd8 <SUBGRF_SetModulationParams+0x1a0>)
 8009ad2:	f04f 0300 	mov.w	r3, #0
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	4649      	mov	r1, r9
 8009ada:	f7f6 fb55 	bl	8000188 <__aeabi_uldivmod>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	0c1b      	lsrs	r3, r3, #16
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	0a1b      	lsrs	r3, r3, #8
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009afc:	7cfb      	ldrb	r3, [r7, #19]
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4619      	mov	r1, r3
 8009b06:	208b      	movs	r0, #139	; 0x8b
 8009b08:	f000 fa7a 	bl	800a000 <SUBGRF_WriteCommand>
        break;
 8009b0c:	e058      	b.n	8009bc0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009b0e:	2304      	movs	r3, #4
 8009b10:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	4a2f      	ldr	r2, [pc, #188]	; (8009bd4 <SUBGRF_SetModulationParams+0x19c>)
 8009b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	0c1b      	lsrs	r3, r3, #16
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	0a1b      	lsrs	r3, r3, #8
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7d1b      	ldrb	r3, [r3, #20]
 8009b38:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009b3a:	7cfb      	ldrb	r3, [r7, #19]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	4619      	mov	r1, r3
 8009b44:	208b      	movs	r0, #139	; 0x8b
 8009b46:	f000 fa5b 	bl	800a000 <SUBGRF_WriteCommand>
        break;
 8009b4a:	e039      	b.n	8009bc0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	7e1b      	ldrb	r3, [r3, #24]
 8009b54:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	7e5b      	ldrb	r3, [r3, #25]
 8009b5a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	7e9b      	ldrb	r3, [r3, #26]
 8009b60:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	7edb      	ldrb	r3, [r3, #27]
 8009b66:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009b68:	7cfb      	ldrb	r3, [r7, #19]
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	f107 0308 	add.w	r3, r7, #8
 8009b70:	4619      	mov	r1, r3
 8009b72:	208b      	movs	r0, #139	; 0x8b
 8009b74:	f000 fa44 	bl	800a000 <SUBGRF_WriteCommand>

        break;
 8009b78:	e022      	b.n	8009bc0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009b7a:	2305      	movs	r3, #5
 8009b7c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	4a14      	ldr	r2, [pc, #80]	; (8009bd4 <SUBGRF_SetModulationParams+0x19c>)
 8009b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b88:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	0c1b      	lsrs	r3, r3, #16
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	0a1b      	lsrs	r3, r3, #8
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	7b1b      	ldrb	r3, [r3, #12]
 8009ba4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7b5b      	ldrb	r3, [r3, #13]
 8009baa:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009bac:	7cfb      	ldrb	r3, [r7, #19]
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	f107 0308 	add.w	r3, r7, #8
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	208b      	movs	r0, #139	; 0x8b
 8009bb8:	f000 fa22 	bl	800a000 <SUBGRF_WriteCommand>
        break;
 8009bbc:	e000      	b.n	8009bc0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009bbe:	bf00      	nop
    }
}
 8009bc0:	bf00      	nop
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009bca:	bf00      	nop
 8009bcc:	0800bf08 	.word	0x0800bf08
 8009bd0:	2000030d 	.word	0x2000030d
 8009bd4:	3d090000 	.word	0x3d090000
 8009bd8:	01e84800 	.word	0x01e84800

08009bdc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009be8:	4a48      	ldr	r2, [pc, #288]	; (8009d0c <SUBGRF_SetPacketParams+0x130>)
 8009bea:	f107 030c 	add.w	r3, r7, #12
 8009bee:	ca07      	ldmia	r2, {r0, r1, r2}
 8009bf0:	c303      	stmia	r3!, {r0, r1}
 8009bf2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	781a      	ldrb	r2, [r3, #0]
 8009bf8:	4b45      	ldr	r3, [pc, #276]	; (8009d10 <SUBGRF_SetPacketParams+0x134>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d004      	beq.n	8009c0a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7ff fe23 	bl	8009850 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d878      	bhi.n	8009d04 <SUBGRF_SetPacketParams+0x128>
 8009c12:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <SUBGRF_SetPacketParams+0x3c>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c29 	.word	0x08009c29
 8009c1c:	08009cb9 	.word	0x08009cb9
 8009c20:	08009cad 	.word	0x08009cad
 8009c24:	08009c29 	.word	0x08009c29
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	7a5b      	ldrb	r3, [r3, #9]
 8009c2c:	2bf1      	cmp	r3, #241	; 0xf1
 8009c2e:	d10a      	bne.n	8009c46 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009c30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009c34:	f7ff faaa 	bl	800918c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009c38:	f248 0005 	movw	r0, #32773	; 0x8005
 8009c3c:	f7ff fac6 	bl	80091cc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009c40:	2302      	movs	r3, #2
 8009c42:	75bb      	strb	r3, [r7, #22]
 8009c44:	e011      	b.n	8009c6a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7a5b      	ldrb	r3, [r3, #9]
 8009c4a:	2bf2      	cmp	r3, #242	; 0xf2
 8009c4c:	d10a      	bne.n	8009c64 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009c4e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009c52:	f7ff fa9b 	bl	800918c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009c56:	f241 0021 	movw	r0, #4129	; 0x1021
 8009c5a:	f7ff fab7 	bl	80091cc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009c5e:	2306      	movs	r3, #6
 8009c60:	75bb      	strb	r3, [r7, #22]
 8009c62:	e002      	b.n	8009c6a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	7a5b      	ldrb	r3, [r3, #9]
 8009c68:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009c6a:	2309      	movs	r3, #9
 8009c6c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	885b      	ldrh	r3, [r3, #2]
 8009c72:	0a1b      	lsrs	r3, r3, #8
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	885b      	ldrh	r3, [r3, #2]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	791b      	ldrb	r3, [r3, #4]
 8009c86:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	795b      	ldrb	r3, [r3, #5]
 8009c8c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	799b      	ldrb	r3, [r3, #6]
 8009c92:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	79db      	ldrb	r3, [r3, #7]
 8009c98:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	7a1b      	ldrb	r3, [r3, #8]
 8009c9e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009ca0:	7dbb      	ldrb	r3, [r7, #22]
 8009ca2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7a9b      	ldrb	r3, [r3, #10]
 8009ca8:	753b      	strb	r3, [r7, #20]
        break;
 8009caa:	e022      	b.n	8009cf2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009cac:	2301      	movs	r3, #1
 8009cae:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	7b1b      	ldrb	r3, [r3, #12]
 8009cb4:	733b      	strb	r3, [r7, #12]
        break;
 8009cb6:	e01c      	b.n	8009cf2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009cb8:	2306      	movs	r3, #6
 8009cba:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	89db      	ldrh	r3, [r3, #14]
 8009cc0:	0a1b      	lsrs	r3, r3, #8
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	89db      	ldrh	r3, [r3, #14]
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	7c1a      	ldrb	r2, [r3, #16]
 8009cd4:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <SUBGRF_SetPacketParams+0x138>)
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	7019      	strb	r1, [r3, #0]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7c5b      	ldrb	r3, [r3, #17]
 8009ce2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	7c9b      	ldrb	r3, [r3, #18]
 8009ce8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	7cdb      	ldrb	r3, [r3, #19]
 8009cee:	747b      	strb	r3, [r7, #17]
        break;
 8009cf0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	208c      	movs	r0, #140	; 0x8c
 8009cfe:	f000 f97f 	bl	800a000 <SUBGRF_WriteCommand>
 8009d02:	e000      	b.n	8009d06 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009d04:	bf00      	nop
}
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	0800bf10 	.word	0x0800bf10
 8009d10:	2000030d 	.word	0x2000030d
 8009d14:	2000030e 	.word	0x2000030e

08009d18 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	460a      	mov	r2, r1
 8009d22:	71fb      	strb	r3, [r7, #7]
 8009d24:	4613      	mov	r3, r2
 8009d26:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009d28:	79fb      	ldrb	r3, [r7, #7]
 8009d2a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009d2c:	79bb      	ldrb	r3, [r7, #6]
 8009d2e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009d30:	f107 030c 	add.w	r3, r7, #12
 8009d34:	2202      	movs	r2, #2
 8009d36:	4619      	mov	r1, r3
 8009d38:	208f      	movs	r0, #143	; 0x8f
 8009d3a:	f000 f961 	bl	800a000 <SUBGRF_WriteCommand>
}
 8009d3e:	bf00      	nop
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b082      	sub	sp, #8
 8009d4a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009d50:	1d3b      	adds	r3, r7, #4
 8009d52:	2201      	movs	r2, #1
 8009d54:	4619      	mov	r1, r3
 8009d56:	2015      	movs	r0, #21
 8009d58:	f000 f974 	bl	800a044 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009d5c:	793b      	ldrb	r3, [r7, #4]
 8009d5e:	425b      	negs	r3, r3
 8009d60:	105b      	asrs	r3, r3, #1
 8009d62:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009d7a:	f107 030c 	add.w	r3, r7, #12
 8009d7e:	2202      	movs	r2, #2
 8009d80:	4619      	mov	r1, r3
 8009d82:	2013      	movs	r0, #19
 8009d84:	f000 f95e 	bl	800a044 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009d88:	f7ff fd7e 	bl	8009888 <SUBGRF_GetPacketType>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d10d      	bne.n	8009dae <SUBGRF_GetRxBufferStatus+0x3e>
 8009d92:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <SUBGRF_GetRxBufferStatus+0x54>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d108      	bne.n	8009dae <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009d9c:	f240 7002 	movw	r0, #1794	; 0x702
 8009da0:	f000 f886 	bl	8009eb0 <SUBGRF_ReadRegister>
 8009da4:	4603      	mov	r3, r0
 8009da6:	461a      	mov	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	701a      	strb	r2, [r3, #0]
 8009dac:	e002      	b.n	8009db4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009dae:	7b3a      	ldrb	r2, [r7, #12]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009db4:	7b7a      	ldrb	r2, [r7, #13]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	701a      	strb	r2, [r3, #0]
}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	2000030e 	.word	0x2000030e

08009dc8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009dd0:	f107 030c 	add.w	r3, r7, #12
 8009dd4:	2203      	movs	r2, #3
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	2014      	movs	r0, #20
 8009dda:	f000 f933 	bl	800a044 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009dde:	f7ff fd53 	bl	8009888 <SUBGRF_GetPacketType>
 8009de2:	4603      	mov	r3, r0
 8009de4:	461a      	mov	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <SUBGRF_GetPacketStatus+0x30>
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d013      	beq.n	8009e1e <SUBGRF_GetPacketStatus+0x56>
 8009df6:	e02a      	b.n	8009e4e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009df8:	7b3a      	ldrb	r2, [r7, #12]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009dfe:	7b7b      	ldrb	r3, [r7, #13]
 8009e00:	425b      	negs	r3, r3
 8009e02:	105b      	asrs	r3, r3, #1
 8009e04:	b25a      	sxtb	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	425b      	negs	r3, r3
 8009e0e:	105b      	asrs	r3, r3, #1
 8009e10:	b25a      	sxtb	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	609a      	str	r2, [r3, #8]
            break;
 8009e1c:	e020      	b.n	8009e60 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009e1e:	7b3b      	ldrb	r3, [r7, #12]
 8009e20:	425b      	negs	r3, r3
 8009e22:	105b      	asrs	r3, r3, #1
 8009e24:	b25a      	sxtb	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009e2a:	7b7b      	ldrb	r3, [r7, #13]
 8009e2c:	b25b      	sxtb	r3, r3
 8009e2e:	3302      	adds	r3, #2
 8009e30:	109b      	asrs	r3, r3, #2
 8009e32:	b25a      	sxtb	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	425b      	negs	r3, r3
 8009e3c:	105b      	asrs	r3, r3, #1
 8009e3e:	b25a      	sxtb	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009e44:	4b08      	ldr	r3, [pc, #32]	; (8009e68 <SUBGRF_GetPacketStatus+0xa0>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	611a      	str	r2, [r3, #16]
            break;
 8009e4c:	e008      	b.n	8009e60 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009e4e:	2214      	movs	r2, #20
 8009e50:	2100      	movs	r1, #0
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 ff45 	bl	800ace2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	220f      	movs	r2, #15
 8009e5c:	701a      	strb	r2, [r3, #0]
            break;
 8009e5e:	bf00      	nop
    }
}
 8009e60:	bf00      	nop
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20000310 	.word	0x20000310

08009e6c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	460a      	mov	r2, r1
 8009e76:	80fb      	strh	r3, [r7, #6]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e80:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009e84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e86:	b672      	cpsid	i
}
 8009e88:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009e8a:	1d7a      	adds	r2, r7, #5
 8009e8c:	88f9      	ldrh	r1, [r7, #6]
 8009e8e:	2301      	movs	r3, #1
 8009e90:	4806      	ldr	r0, [pc, #24]	; (8009eac <SUBGRF_WriteRegister+0x40>)
 8009e92:	f7fa fae9 	bl	8004468 <HAL_SUBGHZ_WriteRegisters>
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f383 8810 	msr	PRIMASK, r3
}
 8009ea0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009ea2:	bf00      	nop
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000068 	.word	0x20000068

08009eb0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eba:	f3ef 8310 	mrs	r3, PRIMASK
 8009ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 8009ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ec4:	b672      	cpsid	i
}
 8009ec6:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009ec8:	f107 020b 	add.w	r2, r7, #11
 8009ecc:	88f9      	ldrh	r1, [r7, #6]
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4806      	ldr	r0, [pc, #24]	; (8009eec <SUBGRF_ReadRegister+0x3c>)
 8009ed2:	f7fa fb28 	bl	8004526 <HAL_SUBGHZ_ReadRegisters>
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	f383 8810 	msr	PRIMASK, r3
}
 8009ee0:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 8009ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000068 	.word	0x20000068

08009ef0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	80fb      	strh	r3, [r7, #6]
 8009efc:	4613      	mov	r3, r2
 8009efe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f00:	f3ef 8310 	mrs	r3, PRIMASK
 8009f04:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f06:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f0a:	b672      	cpsid	i
}
 8009f0c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009f0e:	88bb      	ldrh	r3, [r7, #4]
 8009f10:	88f9      	ldrh	r1, [r7, #6]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	4806      	ldr	r0, [pc, #24]	; (8009f30 <SUBGRF_WriteRegisters+0x40>)
 8009f16:	f7fa faa7 	bl	8004468 <HAL_SUBGHZ_WriteRegisters>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f383 8810 	msr	PRIMASK, r3
}
 8009f24:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f26:	bf00      	nop
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000068 	.word	0x20000068

08009f34 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	6039      	str	r1, [r7, #0]
 8009f3e:	80fb      	strh	r3, [r7, #6]
 8009f40:	4613      	mov	r3, r2
 8009f42:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f44:	f3ef 8310 	mrs	r3, PRIMASK
 8009f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f4e:	b672      	cpsid	i
}
 8009f50:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009f52:	88bb      	ldrh	r3, [r7, #4]
 8009f54:	88f9      	ldrh	r1, [r7, #6]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	4806      	ldr	r0, [pc, #24]	; (8009f74 <SUBGRF_ReadRegisters+0x40>)
 8009f5a:	f7fa fae4 	bl	8004526 <HAL_SUBGHZ_ReadRegisters>
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f383 8810 	msr	PRIMASK, r3
}
 8009f68:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f6a:	bf00      	nop
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20000068 	.word	0x20000068

08009f78 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	6039      	str	r1, [r7, #0]
 8009f82:	71fb      	strb	r3, [r7, #7]
 8009f84:	4613      	mov	r3, r2
 8009f86:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f88:	f3ef 8310 	mrs	r3, PRIMASK
 8009f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f92:	b672      	cpsid	i
}
 8009f94:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009f96:	79bb      	ldrb	r3, [r7, #6]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	79f9      	ldrb	r1, [r7, #7]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4806      	ldr	r0, [pc, #24]	; (8009fb8 <SUBGRF_WriteBuffer+0x40>)
 8009fa0:	f7fa fbd5 	bl	800474e <HAL_SUBGHZ_WriteBuffer>
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f383 8810 	msr	PRIMASK, r3
}
 8009fae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009fb0:	bf00      	nop
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	20000068 	.word	0x20000068

08009fbc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	6039      	str	r1, [r7, #0]
 8009fc6:	71fb      	strb	r3, [r7, #7]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009fd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fd6:	b672      	cpsid	i
}
 8009fd8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8009fda:	79bb      	ldrb	r3, [r7, #6]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	79f9      	ldrb	r1, [r7, #7]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	4806      	ldr	r0, [pc, #24]	; (8009ffc <SUBGRF_ReadBuffer+0x40>)
 8009fe4:	f7fa fc06 	bl	80047f4 <HAL_SUBGHZ_ReadBuffer>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f383 8810 	msr	PRIMASK, r3
}
 8009ff2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009ff4:	bf00      	nop
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20000068 	.word	0x20000068

0800a000 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	4603      	mov	r3, r0
 800a008:	6039      	str	r1, [r7, #0]
 800a00a:	71fb      	strb	r3, [r7, #7]
 800a00c:	4613      	mov	r3, r2
 800a00e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a010:	f3ef 8310 	mrs	r3, PRIMASK
 800a014:	60fb      	str	r3, [r7, #12]
  return(result);
 800a016:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a018:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a01a:	b672      	cpsid	i
}
 800a01c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a01e:	88bb      	ldrh	r3, [r7, #4]
 800a020:	79f9      	ldrb	r1, [r7, #7]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	4806      	ldr	r0, [pc, #24]	; (800a040 <SUBGRF_WriteCommand+0x40>)
 800a026:	f7fa fadf 	bl	80045e8 <HAL_SUBGHZ_ExecSetCmd>
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f383 8810 	msr	PRIMASK, r3
}
 800a034:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a036:	bf00      	nop
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20000068 	.word	0x20000068

0800a044 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	6039      	str	r1, [r7, #0]
 800a04e:	71fb      	strb	r3, [r7, #7]
 800a050:	4613      	mov	r3, r2
 800a052:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a054:	f3ef 8310 	mrs	r3, PRIMASK
 800a058:	60fb      	str	r3, [r7, #12]
  return(result);
 800a05a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a05c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a05e:	b672      	cpsid	i
}
 800a060:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a062:	88bb      	ldrh	r3, [r7, #4]
 800a064:	79f9      	ldrb	r1, [r7, #7]
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	4806      	ldr	r0, [pc, #24]	; (800a084 <SUBGRF_ReadCommand+0x40>)
 800a06a:	f7fa fb1c 	bl	80046a6 <HAL_SUBGHZ_ExecGetCmd>
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f383 8810 	msr	PRIMASK, r3
}
 800a078:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a07a:	bf00      	nop
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000068 	.word	0x20000068

0800a088 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	460a      	mov	r2, r1
 800a092:	71fb      	strb	r3, [r7, #7]
 800a094:	4613      	mov	r3, r2
 800a096:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a098:	2301      	movs	r3, #1
 800a09a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a09c:	79bb      	ldrb	r3, [r7, #6]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d10d      	bne.n	800a0be <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d104      	bne.n	800a0b2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a0ac:	2004      	movs	r0, #4
 800a0ae:	f000 f8ef 	bl	800a290 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a0b2:	79fb      	ldrb	r3, [r7, #7]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d107      	bne.n	800a0c8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	73fb      	strb	r3, [r7, #15]
 800a0bc:	e004      	b.n	800a0c8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a0be:	79bb      	ldrb	r3, [r7, #6]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 fd49 	bl	800ab62 <RBI_ConfigRFSwitch>
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a0e6:	f000 fd4a 	bl	800ab7e <RBI_GetTxConfig>
 800a0ea:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d016      	beq.n	800a120 <SUBGRF_SetRfTxPower+0x48>
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	dc16      	bgt.n	800a126 <SUBGRF_SetRfTxPower+0x4e>
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <SUBGRF_SetRfTxPower+0x2e>
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d00a      	beq.n	800a11a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a104:	e00f      	b.n	800a126 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a10a:	2b0f      	cmp	r3, #15
 800a10c:	dd02      	ble.n	800a114 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a10e:	2302      	movs	r3, #2
 800a110:	73fb      	strb	r3, [r7, #15]
            break;
 800a112:	e009      	b.n	800a128 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a114:	2301      	movs	r3, #1
 800a116:	73fb      	strb	r3, [r7, #15]
            break;
 800a118:	e006      	b.n	800a128 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a11a:	2301      	movs	r3, #1
 800a11c:	73fb      	strb	r3, [r7, #15]
            break;
 800a11e:	e003      	b.n	800a128 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a120:	2302      	movs	r3, #2
 800a122:	73fb      	strb	r3, [r7, #15]
            break;
 800a124:	e000      	b.n	800a128 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a126:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a128:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	2202      	movs	r2, #2
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff fbb3 	bl	800989c <SUBGRF_SetTxParams>

    return paSelect;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a144:	2301      	movs	r3, #1
}
 800a146:	4618      	mov	r0, r3
 800a148:	46bd      	mov	sp, r7
 800a14a:	bc80      	pop	{r7}
 800a14c:	4770      	bx	lr
	...

0800a150 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a158:	4b03      	ldr	r3, [pc, #12]	; (800a168 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2001      	movs	r0, #1
 800a15e:	4798      	blx	r3
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000318 	.word	0x20000318

0800a16c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a174:	4b03      	ldr	r3, [pc, #12]	; (800a184 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2002      	movs	r0, #2
 800a17a:	4798      	blx	r3
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000318 	.word	0x20000318

0800a188 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a190:	4b03      	ldr	r3, [pc, #12]	; (800a1a0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2040      	movs	r0, #64	; 0x40
 800a196:	4798      	blx	r3
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20000318 	.word	0x20000318

0800a1a4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d005      	beq.n	800a1c6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a1ba:	e00a      	b.n	800a1d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a1bc:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2080      	movs	r0, #128	; 0x80
 800a1c2:	4798      	blx	r3
            break;
 800a1c4:	e005      	b.n	800a1d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a1c6:	4b05      	ldr	r3, [pc, #20]	; (800a1dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a1ce:	4798      	blx	r3
            break;
 800a1d0:	bf00      	nop
    }
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000318 	.word	0x20000318

0800a1e0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a1f0:	4798      	blx	r3
}
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000318 	.word	0x20000318

0800a200 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a208:	4b03      	ldr	r3, [pc, #12]	; (800a218 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2020      	movs	r0, #32
 800a20e:	4798      	blx	r3
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000318 	.word	0x20000318

0800a21c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a224:	4b03      	ldr	r3, [pc, #12]	; (800a234 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2004      	movs	r0, #4
 800a22a:	4798      	blx	r3
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	20000318 	.word	0x20000318

0800a238 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a240:	4b03      	ldr	r3, [pc, #12]	; (800a250 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2008      	movs	r0, #8
 800a246:	4798      	blx	r3
}
 800a248:	bf00      	nop
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	20000318 	.word	0x20000318

0800a254 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a25c:	4b03      	ldr	r3, [pc, #12]	; (800a26c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2010      	movs	r0, #16
 800a262:	4798      	blx	r3
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20000318 	.word	0x20000318

0800a270 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a278:	4b04      	ldr	r3, [pc, #16]	; (800a28c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a280:	4798      	blx	r3
}
 800a282:	bf00      	nop
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20000318 	.word	0x20000318

0800a290 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a29a:	f000 fc7e 	bl	800ab9a <RBI_IsDCDC>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d112      	bne.n	800a2ca <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a2a4:	f640 1023 	movw	r0, #2339	; 0x923
 800a2a8:	f7ff fe02 	bl	8009eb0 <SUBGRF_ReadRegister>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	f023 0306 	bic.w	r3, r3, #6
 800a2b6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a2b8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	f640 1023 	movw	r0, #2339	; 0x923
 800a2c6:	f7ff fdd1 	bl	8009e6c <SUBGRF_WriteRegister>
  }
}
 800a2ca:	bf00      	nop
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d101      	bne.n	800a2e6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a2e2:	231f      	movs	r3, #31
 800a2e4:	e016      	b.n	800a314 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
 800a2ea:	e00f      	b.n	800a30c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	4a0c      	ldr	r2, [pc, #48]	; (800a320 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a2f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d205      	bcs.n	800a306 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	4a08      	ldr	r2, [pc, #32]	; (800a320 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a2fe:	00db      	lsls	r3, r3, #3
 800a300:	4413      	add	r3, r2
 800a302:	791b      	ldrb	r3, [r3, #4]
 800a304:	e006      	b.n	800a314 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	3301      	adds	r3, #1
 800a30a:	73fb      	strb	r3, [r7, #15]
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	2b15      	cmp	r3, #21
 800a310:	d9ec      	bls.n	800a2ec <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a312:	e7fe      	b.n	800a312 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	bc80      	pop	{r7}
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	0800c2d8 	.word	0x0800c2d8

0800a324 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08a      	sub	sp, #40	; 0x28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a32e:	4b35      	ldr	r3, [pc, #212]	; (800a404 <SUBGRF_GetCFO+0xe0>)
 800a330:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a332:	f640 0007 	movw	r0, #2055	; 0x807
 800a336:	f7ff fdbb 	bl	8009eb0 <SUBGRF_ReadRegister>
 800a33a:	4603      	mov	r3, r0
 800a33c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a33e:	7ffb      	ldrb	r3, [r7, #31]
 800a340:	08db      	lsrs	r3, r3, #3
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f003 0303 	and.w	r3, r3, #3
 800a348:	3328      	adds	r3, #40	; 0x28
 800a34a:	443b      	add	r3, r7
 800a34c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a350:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a352:	7ffb      	ldrb	r3, [r7, #31]
 800a354:	f003 0307 	and.w	r3, r3, #7
 800a358:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a35a:	7fba      	ldrb	r2, [r7, #30]
 800a35c:	7f7b      	ldrb	r3, [r7, #29]
 800a35e:	3301      	adds	r3, #1
 800a360:	fa02 f303 	lsl.w	r3, r2, r3
 800a364:	461a      	mov	r2, r3
 800a366:	4b28      	ldr	r3, [pc, #160]	; (800a408 <SUBGRF_GetCFO+0xe4>)
 800a368:	fbb3 f3f2 	udiv	r3, r3, r2
 800a36c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	fbb2 f3f3 	udiv	r3, r2, r3
 800a376:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a37e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	fb02 f303 	mul.w	r3, r2, r3
 800a388:	2b07      	cmp	r3, #7
 800a38a:	d802      	bhi.n	800a392 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a38c:	2302      	movs	r3, #2
 800a38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	fb02 f303 	mul.w	r3, r2, r3
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d802      	bhi.n	800a3a6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a3a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	fb02 f303 	mul.w	r3, r2, r3
 800a3b0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a3b2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a3b6:	f7ff fd7b 	bl	8009eb0 <SUBGRF_ReadRegister>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a3c2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a3c4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a3c8:	f7ff fd72 	bl	8009eb0 <SUBGRF_ReadRegister>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d005      	beq.n	800a3ec <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a3e6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a3ea:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	095b      	lsrs	r3, r3, #5
 800a3f0:	6a3a      	ldr	r2, [r7, #32]
 800a3f2:	fb02 f303 	mul.w	r3, r2, r3
 800a3f6:	11da      	asrs	r2, r3, #7
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	601a      	str	r2, [r3, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	3728      	adds	r7, #40	; 0x28
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	0c0a0804 	.word	0x0c0a0804
 800a408:	01e84800 	.word	0x01e84800

0800a40c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a41e:	f04f 33ff 	mov.w	r3, #4294967295
 800a422:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a424:	697b      	ldr	r3, [r7, #20]
}
 800a426:	4618      	mov	r0, r3
 800a428:	371c      	adds	r7, #28
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bc80      	pop	{r7}
 800a42e:	4770      	bx	lr

0800a430 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a448:	697b      	ldr	r3, [r7, #20]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	371c      	adds	r7, #28
 800a44e:	46bd      	mov	sp, r7
 800a450:	bc80      	pop	{r7}
 800a452:	4770      	bx	lr

0800a454 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a460:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr

0800a46e <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a46e:	b480      	push	{r7}
 800a470:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a472:	bf00      	nop
 800a474:	46bd      	mov	sp, r7
 800a476:	bc80      	pop	{r7}
 800a478:	4770      	bx	lr

0800a47a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a47a:	b480      	push	{r7}
 800a47c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a47e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a480:	4618      	mov	r0, r3
 800a482:	46bd      	mov	sp, r7
 800a484:	bc80      	pop	{r7}
 800a486:	4770      	bx	lr

0800a488 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a48c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a48e:	4618      	mov	r0, r3
 800a490:	46bd      	mov	sp, r7
 800a492:	bc80      	pop	{r7}
 800a494:	4770      	bx	lr

0800a496 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	4603      	mov	r3, r0
 800a49e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bc80      	pop	{r7}
 800a4a8:	4770      	bx	lr

0800a4aa <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b087      	sub	sp, #28
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	607a      	str	r2, [r7, #4]
 800a4b6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4bc:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a4be:	697b      	ldr	r3, [r7, #20]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	371c      	adds	r7, #28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bc80      	pop	{r7}
 800a4c8:	4770      	bx	lr

0800a4ca <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a4ce:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bc80      	pop	{r7}
 800a4d8:	4770      	bx	lr

0800a4da <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a4da:	b480      	push	{r7}
 800a4dc:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a4de:	bf00      	nop
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bc80      	pop	{r7}
 800a4e4:	4770      	bx	lr

0800a4e6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a4ea:	bf00      	nop
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr

0800a4f2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	bc80      	pop	{r7}
 800a504:	4770      	bx	lr

0800a506 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a50a:	f7f6 fa3b 	bl	8000984 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a50e:	f000 f809 	bl	800a524 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}

0800a516 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a516:	b480      	push	{r7}
 800a518:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800a51a:	bf00      	nop
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr
	...

0800a524 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a524:	b590      	push	{r4, r7, lr}
 800a526:	b08b      	sub	sp, #44	; 0x2c
 800a528:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800a52a:	4b5e      	ldr	r3, [pc, #376]	; (800a6a4 <SubghzApp_Init+0x180>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	2100      	movs	r1, #0
 800a530:	2002      	movs	r0, #2
 800a532:	f001 f9fd 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  /* Get SubGHY_Phy APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a536:	2300      	movs	r3, #0
 800a538:	9302      	str	r3, [sp, #8]
 800a53a:	2303      	movs	r3, #3
 800a53c:	9301      	str	r3, [sp, #4]
 800a53e:	2301      	movs	r3, #1
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	4b59      	ldr	r3, [pc, #356]	; (800a6a8 <SubghzApp_Init+0x184>)
 800a544:	2200      	movs	r2, #0
 800a546:	2100      	movs	r1, #0
 800a548:	2002      	movs	r0, #2
 800a54a:	f001 f9f1 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a54e:	2301      	movs	r3, #1
 800a550:	9302      	str	r3, [sp, #8]
 800a552:	2303      	movs	r3, #3
 800a554:	9301      	str	r3, [sp, #4]
 800a556:	2301      	movs	r3, #1
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	4b54      	ldr	r3, [pc, #336]	; (800a6ac <SubghzApp_Init+0x188>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	2100      	movs	r1, #0
 800a560:	2002      	movs	r0, #2
 800a562:	f001 f9e5 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Led Timers*/
  UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 800a566:	2300      	movs	r3, #0
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	4b51      	ldr	r3, [pc, #324]	; (800a6b0 <SubghzApp_Init+0x18c>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	21c8      	movs	r1, #200	; 0xc8
 800a570:	4850      	ldr	r0, [pc, #320]	; (800a6b4 <SubghzApp_Init+0x190>)
 800a572:	f000 ff41 	bl	800b3f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&timerLed);
 800a576:	484f      	ldr	r0, [pc, #316]	; (800a6b4 <SubghzApp_Init+0x190>)
 800a578:	f000 ff74 	bl	800b464 <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a57c:	4b4e      	ldr	r3, [pc, #312]	; (800a6b8 <SubghzApp_Init+0x194>)
 800a57e:	4a4f      	ldr	r2, [pc, #316]	; (800a6bc <SubghzApp_Init+0x198>)
 800a580:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a582:	4b4d      	ldr	r3, [pc, #308]	; (800a6b8 <SubghzApp_Init+0x194>)
 800a584:	4a4e      	ldr	r2, [pc, #312]	; (800a6c0 <SubghzApp_Init+0x19c>)
 800a586:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a588:	4b4b      	ldr	r3, [pc, #300]	; (800a6b8 <SubghzApp_Init+0x194>)
 800a58a:	4a4e      	ldr	r2, [pc, #312]	; (800a6c4 <SubghzApp_Init+0x1a0>)
 800a58c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a58e:	4b4a      	ldr	r3, [pc, #296]	; (800a6b8 <SubghzApp_Init+0x194>)
 800a590:	4a4d      	ldr	r2, [pc, #308]	; (800a6c8 <SubghzApp_Init+0x1a4>)
 800a592:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a594:	4b48      	ldr	r3, [pc, #288]	; (800a6b8 <SubghzApp_Init+0x194>)
 800a596:	4a4d      	ldr	r2, [pc, #308]	; (800a6cc <SubghzApp_Init+0x1a8>)
 800a598:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a59a:	4b4d      	ldr	r3, [pc, #308]	; (800a6d0 <SubghzApp_Init+0x1ac>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4846      	ldr	r0, [pc, #280]	; (800a6b8 <SubghzApp_Init+0x194>)
 800a5a0:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800a5a2:	4b4b      	ldr	r3, [pc, #300]	; (800a6d0 <SubghzApp_Init+0x1ac>)
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	4798      	blx	r3
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	0d9b      	lsrs	r3, r3, #22
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4b49      	ldr	r3, [pc, #292]	; (800a6d4 <SubghzApp_Init+0x1b0>)
 800a5b0:	601a      	str	r2, [r3, #0]

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800a5b2:	4b47      	ldr	r3, [pc, #284]	; (800a6d0 <SubghzApp_Init+0x1ac>)
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	4848      	ldr	r0, [pc, #288]	; (800a6d8 <SubghzApp_Init+0x1b4>)
 800a5b8:	4798      	blx	r3

  /* Radio configuration */
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800a5ba:	4b48      	ldr	r3, [pc, #288]	; (800a6dc <SubghzApp_Init+0x1b8>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2100      	movs	r1, #0
 800a5c0:	2002      	movs	r0, #2
 800a5c2:	f001 f9b5 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800a5c6:	4b46      	ldr	r3, [pc, #280]	; (800a6e0 <SubghzApp_Init+0x1bc>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	2002      	movs	r0, #2
 800a5ce:	f001 f9af 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800a5d2:	237d      	movs	r3, #125	; 0x7d
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	4b43      	ldr	r3, [pc, #268]	; (800a6e4 <SubghzApp_Init+0x1c0>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2100      	movs	r1, #0
 800a5dc:	2002      	movs	r0, #2
 800a5de:	f001 f9a7 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800a5e2:	2307      	movs	r3, #7
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	4b40      	ldr	r3, [pc, #256]	; (800a6e8 <SubghzApp_Init+0x1c4>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	2002      	movs	r0, #2
 800a5ee:	f001 f99f 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800a5f2:	4b37      	ldr	r3, [pc, #220]	; (800a6d0 <SubghzApp_Init+0x1ac>)
 800a5f4:	69dc      	ldr	r4, [r3, #28]
 800a5f6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a5fa:	9308      	str	r3, [sp, #32]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9307      	str	r3, [sp, #28]
 800a600:	2300      	movs	r3, #0
 800a602:	9306      	str	r3, [sp, #24]
 800a604:	2300      	movs	r3, #0
 800a606:	9305      	str	r3, [sp, #20]
 800a608:	2301      	movs	r3, #1
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	2300      	movs	r3, #0
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	2308      	movs	r3, #8
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	2301      	movs	r3, #1
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	2307      	movs	r3, #7
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	2300      	movs	r3, #0
 800a61e:	2200      	movs	r2, #0
 800a620:	210e      	movs	r1, #14
 800a622:	2001      	movs	r0, #1
 800a624:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800a626:	4b2a      	ldr	r3, [pc, #168]	; (800a6d0 <SubghzApp_Init+0x1ac>)
 800a628:	699c      	ldr	r4, [r3, #24]
 800a62a:	2301      	movs	r3, #1
 800a62c:	9309      	str	r3, [sp, #36]	; 0x24
 800a62e:	2300      	movs	r3, #0
 800a630:	9308      	str	r3, [sp, #32]
 800a632:	2300      	movs	r3, #0
 800a634:	9307      	str	r3, [sp, #28]
 800a636:	2300      	movs	r3, #0
 800a638:	9306      	str	r3, [sp, #24]
 800a63a:	2301      	movs	r3, #1
 800a63c:	9305      	str	r3, [sp, #20]
 800a63e:	2300      	movs	r3, #0
 800a640:	9304      	str	r3, [sp, #16]
 800a642:	2300      	movs	r3, #0
 800a644:	9303      	str	r3, [sp, #12]
 800a646:	2305      	movs	r3, #5
 800a648:	9302      	str	r3, [sp, #8]
 800a64a:	2308      	movs	r3, #8
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	2300      	movs	r3, #0
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	2301      	movs	r3, #1
 800a654:	2207      	movs	r2, #7
 800a656:	2100      	movs	r1, #0
 800a658:	2001      	movs	r0, #1
 800a65a:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800a65c:	4b1c      	ldr	r3, [pc, #112]	; (800a6d0 <SubghzApp_Init+0x1ac>)
 800a65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a660:	21ff      	movs	r1, #255	; 0xff
 800a662:	2001      	movs	r0, #1
 800a664:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800a666:	22ff      	movs	r2, #255	; 0xff
 800a668:	2100      	movs	r1, #0
 800a66a:	4820      	ldr	r0, [pc, #128]	; (800a6ec <SubghzApp_Init+0x1c8>)
 800a66c:	f001 fbd8 	bl	800be20 <memset>

  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800a670:	4b18      	ldr	r3, [pc, #96]	; (800a6d4 <SubghzApp_Init+0x1b0>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	4b1e      	ldr	r3, [pc, #120]	; (800a6f0 <SubghzApp_Init+0x1cc>)
 800a678:	2201      	movs	r2, #1
 800a67a:	2100      	movs	r1, #0
 800a67c:	2001      	movs	r0, #1
 800a67e:	f001 f957 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800a682:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <SubghzApp_Init+0x1ac>)
 800a684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a686:	4a13      	ldr	r2, [pc, #76]	; (800a6d4 <SubghzApp_Init+0x1b0>)
 800a688:	6812      	ldr	r2, [r2, #0]
 800a68a:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800a68e:	4610      	mov	r0, r2
 800a690:	4798      	blx	r3

  /*register task to to be run in while(1) after Radio IT*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800a692:	4a18      	ldr	r2, [pc, #96]	; (800a6f4 <SubghzApp_Init+0x1d0>)
 800a694:	2100      	movs	r1, #0
 800a696:	2001      	movs	r0, #1
 800a698:	f000 fe16 	bl	800b2c8 <UTIL_SEQ_RegTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 800a69c:	bf00      	nop
 800a69e:	3704      	adds	r7, #4
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd90      	pop	{r4, r7, pc}
 800a6a4:	0800bf1c 	.word	0x0800bf1c
 800a6a8:	0800bf2c 	.word	0x0800bf2c
 800a6ac:	0800bf50 	.word	0x0800bf50
 800a6b0:	0800ab21 	.word	0x0800ab21
 800a6b4:	20000540 	.word	0x20000540
 800a6b8:	2000031c 	.word	0x2000031c
 800a6bc:	0800a6f9 	.word	0x0800a6f9
 800a6c0:	0800a725 	.word	0x0800a725
 800a6c4:	0800a839 	.word	0x0800a839
 800a6c8:	0800a865 	.word	0x0800a865
 800a6cc:	0800a891 	.word	0x0800a891
 800a6d0:	0800c248 	.word	0x0800c248
 800a6d4:	20000558 	.word	0x20000558
 800a6d8:	33bca100 	.word	0x33bca100
 800a6dc:	0800bf74 	.word	0x0800bf74
 800a6e0:	0800bf88 	.word	0x0800bf88
 800a6e4:	0800bf9c 	.word	0x0800bf9c
 800a6e8:	0800bfb0 	.word	0x0800bfb0
 800a6ec:	2000043c 	.word	0x2000043c
 800a6f0:	0800bfc0 	.word	0x0800bfc0
 800a6f4:	0800a8bd 	.word	0x0800a8bd

0800a6f8 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800a6fc:	4b07      	ldr	r3, [pc, #28]	; (800a71c <OnTxDone+0x24>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	2100      	movs	r1, #0
 800a702:	2001      	movs	r0, #1
 800a704:	f001 f914 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX;
 800a708:	4b05      	ldr	r3, [pc, #20]	; (800a720 <OnTxDone+0x28>)
 800a70a:	2203      	movs	r2, #3
 800a70c:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a70e:	2100      	movs	r1, #0
 800a710:	2001      	movs	r0, #1
 800a712:	f000 fdfb 	bl	800b30c <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800a716:	bf00      	nop
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	0800bfcc 	.word	0x0800bfcc
 800a720:	20000338 	.word	0x20000338

0800a724 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af02      	add	r7, sp, #8
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	4608      	mov	r0, r1
 800a72e:	4611      	mov	r1, r2
 800a730:	461a      	mov	r2, r3
 800a732:	4603      	mov	r3, r0
 800a734:	817b      	strh	r3, [r7, #10]
 800a736:	460b      	mov	r3, r1
 800a738:	813b      	strh	r3, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800a73e:	4b34      	ldr	r3, [pc, #208]	; (800a810 <OnRxDone+0xec>)
 800a740:	2201      	movs	r2, #1
 800a742:	2100      	movs	r1, #0
 800a744:	2001      	movs	r0, #1
 800a746:	f001 f8f3 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800a74a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a74e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a752:	9201      	str	r2, [sp, #4]
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	4b2f      	ldr	r3, [pc, #188]	; (800a814 <OnRxDone+0xf0>)
 800a758:	2201      	movs	r2, #1
 800a75a:	2100      	movs	r1, #0
 800a75c:	2001      	movs	r0, #1
 800a75e:	f001 f8e7 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800a762:	4a2d      	ldr	r2, [pc, #180]	; (800a818 <OnRxDone+0xf4>)
 800a764:	79fb      	ldrb	r3, [r7, #7]
 800a766:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800a768:	4b2c      	ldr	r3, [pc, #176]	; (800a81c <OnRxDone+0xf8>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800a76e:	22ff      	movs	r2, #255	; 0xff
 800a770:	2100      	movs	r1, #0
 800a772:	482b      	ldr	r0, [pc, #172]	; (800a820 <OnRxDone+0xfc>)
 800a774:	f001 fb54 	bl	800be20 <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800a778:	4a2a      	ldr	r2, [pc, #168]	; (800a824 <OnRxDone+0x100>)
 800a77a:	897b      	ldrh	r3, [r7, #10]
 800a77c:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800a77e:	4b29      	ldr	r3, [pc, #164]	; (800a824 <OnRxDone+0x100>)
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	2bff      	cmp	r3, #255	; 0xff
 800a784:	d806      	bhi.n	800a794 <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800a786:	4b27      	ldr	r3, [pc, #156]	; (800a824 <OnRxDone+0x100>)
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	68f9      	ldr	r1, [r7, #12]
 800a78e:	4824      	ldr	r0, [pc, #144]	; (800a820 <OnRxDone+0xfc>)
 800a790:	f001 fb84 	bl	800be9c <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800a794:	893b      	ldrh	r3, [r7, #8]
 800a796:	b25a      	sxtb	r2, r3
 800a798:	4b23      	ldr	r3, [pc, #140]	; (800a828 <OnRxDone+0x104>)
 800a79a:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800a79c:	897b      	ldrh	r3, [r7, #10]
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	4b22      	ldr	r3, [pc, #136]	; (800a82c <OnRxDone+0x108>)
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	2003      	movs	r0, #3
 800a7a8:	f001 f8c2 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	e01d      	b.n	800a7ee <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800a7b2:	4a1b      	ldr	r2, [pc, #108]	; (800a820 <OnRxDone+0xfc>)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	; (800a830 <OnRxDone+0x10c>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	2003      	movs	r0, #3
 800a7c4:	f001 f8b4 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	425a      	negs	r2, r3
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	f002 020f 	and.w	r2, r2, #15
 800a7d4:	bf58      	it	pl
 800a7d6:	4253      	negpl	r3, r2
 800a7d8:	2b0f      	cmp	r3, #15
 800a7da:	d105      	bne.n	800a7e8 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a7dc:	4b15      	ldr	r3, [pc, #84]	; (800a834 <OnRxDone+0x110>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	2003      	movs	r0, #3
 800a7e4:	f001 f8a4 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	2b3f      	cmp	r3, #63	; 0x3f
 800a7f2:	ddde      	ble.n	800a7b2 <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a7f4:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <OnRxDone+0x110>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	2003      	movs	r0, #3
 800a7fc:	f001 f898 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a800:	2100      	movs	r1, #0
 800a802:	2001      	movs	r0, #1
 800a804:	f000 fd82 	bl	800b30c <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800a808:	bf00      	nop
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	0800bfd8 	.word	0x0800bfd8
 800a814:	0800bfe4 	.word	0x0800bfe4
 800a818:	2000053f 	.word	0x2000053f
 800a81c:	20000338 	.word	0x20000338
 800a820:	2000033c 	.word	0x2000033c
 800a824:	2000053c 	.word	0x2000053c
 800a828:	2000053e 	.word	0x2000053e
 800a82c:	0800c008 	.word	0x0800c008
 800a830:	0800c01c 	.word	0x0800c01c
 800a834:	0800c024 	.word	0x0800c024

0800a838 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800a83c:	4b07      	ldr	r3, [pc, #28]	; (800a85c <OnTxTimeout+0x24>)
 800a83e:	2201      	movs	r2, #1
 800a840:	2100      	movs	r1, #0
 800a842:	2001      	movs	r0, #1
 800a844:	f001 f874 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800a848:	4b05      	ldr	r3, [pc, #20]	; (800a860 <OnTxTimeout+0x28>)
 800a84a:	2204      	movs	r2, #4
 800a84c:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a84e:	2100      	movs	r1, #0
 800a850:	2001      	movs	r0, #1
 800a852:	f000 fd5b 	bl	800b30c <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800a856:	bf00      	nop
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	0800c028 	.word	0x0800c028
 800a860:	20000338 	.word	0x20000338

0800a864 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 800a868:	4b07      	ldr	r3, [pc, #28]	; (800a888 <OnRxTimeout+0x24>)
 800a86a:	2201      	movs	r2, #1
 800a86c:	2100      	movs	r1, #0
 800a86e:	2001      	movs	r0, #1
 800a870:	f001 f85e 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800a874:	4b05      	ldr	r3, [pc, #20]	; (800a88c <OnRxTimeout+0x28>)
 800a876:	2201      	movs	r2, #1
 800a878:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a87a:	2100      	movs	r1, #0
 800a87c:	2001      	movs	r0, #1
 800a87e:	f000 fd45 	bl	800b30c <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800a882:	bf00      	nop
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	0800c038 	.word	0x0800c038
 800a88c:	20000338 	.word	0x20000338

0800a890 <OnRxError>:

static void OnRxError(void)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800a894:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <OnRxError+0x24>)
 800a896:	2201      	movs	r2, #1
 800a898:	2100      	movs	r1, #0
 800a89a:	2001      	movs	r0, #1
 800a89c:	f001 f848 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 800a8a0:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <OnRxError+0x28>)
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	2001      	movs	r0, #1
 800a8aa:	f000 fd2f 	bl	800b30c <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800a8ae:	bf00      	nop
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	0800c048 	.word	0x0800c048
 800a8b8:	20000338 	.word	0x20000338

0800a8bc <PingPong_Process>:

/* USER CODE BEGIN PrFD */
static void PingPong_Process(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  Radio.Sleep();
 800a8c0:	4b85      	ldr	r3, [pc, #532]	; (800aad8 <PingPong_Process+0x21c>)
 800a8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c4:	4798      	blx	r3

  switch (State)
 800a8c6:	4b85      	ldr	r3, [pc, #532]	; (800aadc <PingPong_Process+0x220>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	f200 80ff 	bhi.w	800aace <PingPong_Process+0x212>
 800a8d0:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <PingPong_Process+0x1c>)
 800a8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d6:	bf00      	nop
 800a8d8:	0800a8ed 	.word	0x0800a8ed
 800a8dc:	0800aa5f 	.word	0x0800aa5f
 800a8e0:	0800aa5f 	.word	0x0800aa5f
 800a8e4:	0800aa47 	.word	0x0800aa47
 800a8e8:	0800aab7 	.word	0x0800aab7
  {
    case RX:

      if (isMaster == true)
 800a8ec:	4b7c      	ldr	r3, [pc, #496]	; (800aae0 <PingPong_Process+0x224>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d05f      	beq.n	800a9b4 <PingPong_Process+0xf8>
      {
        if (RxBufferSize > 0)
 800a8f4:	4b7b      	ldr	r3, [pc, #492]	; (800aae4 <PingPong_Process+0x228>)
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 80ea 	beq.w	800aad2 <PingPong_Process+0x216>
        {
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800a8fe:	2204      	movs	r2, #4
 800a900:	4979      	ldr	r1, [pc, #484]	; (800aae8 <PingPong_Process+0x22c>)
 800a902:	487a      	ldr	r0, [pc, #488]	; (800aaec <PingPong_Process+0x230>)
 800a904:	f001 fa94 	bl	800be30 <strncmp>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d12c      	bne.n	800a968 <PingPong_Process+0xac>
          {
            UTIL_TIMER_Stop(&timerLed);
 800a90e:	4878      	ldr	r0, [pc, #480]	; (800aaf0 <PingPong_Process+0x234>)
 800a910:	f000 fe16 	bl	800b540 <UTIL_TIMER_Stop>
            /* switch off green led */
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800a914:	2200      	movs	r2, #0
 800a916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a91a:	4876      	ldr	r0, [pc, #472]	; (800aaf4 <PingPong_Process+0x238>)
 800a91c:	f7f7 fe02 	bl	8002524 <HAL_GPIO_WritePin>
            /* master toggles red led */
            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800a920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a924:	4873      	ldr	r0, [pc, #460]	; (800aaf4 <PingPong_Process+0x238>)
 800a926:	f7f7 fe14 	bl	8002552 <HAL_GPIO_TogglePin>
            /* Add delay between RX and TX */
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800a92a:	4b6b      	ldr	r3, [pc, #428]	; (800aad8 <PingPong_Process+0x21c>)
 800a92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a92e:	4798      	blx	r3
 800a930:	4603      	mov	r3, r0
 800a932:	33c8      	adds	r3, #200	; 0xc8
 800a934:	4618      	mov	r0, r3
 800a936:	f7f6 f8a9 	bl	8000a8c <HAL_Delay>
            /* master sends PING*/
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800a93a:	4b6f      	ldr	r3, [pc, #444]	; (800aaf8 <PingPong_Process+0x23c>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	2100      	movs	r1, #0
 800a940:	2001      	movs	r0, #1
 800a942:	f000 fff5 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
                    "PING"
                    "\n\r");
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800a946:	4b6d      	ldr	r3, [pc, #436]	; (800aafc <PingPong_Process+0x240>)
 800a948:	2201      	movs	r2, #1
 800a94a:	2100      	movs	r1, #0
 800a94c:	2001      	movs	r0, #1
 800a94e:	f000 ffef 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800a952:	2204      	movs	r2, #4
 800a954:	496a      	ldr	r1, [pc, #424]	; (800ab00 <PingPong_Process+0x244>)
 800a956:	486b      	ldr	r0, [pc, #428]	; (800ab04 <PingPong_Process+0x248>)
 800a958:	f001 faa0 	bl	800be9c <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800a95c:	4b5e      	ldr	r3, [pc, #376]	; (800aad8 <PingPong_Process+0x21c>)
 800a95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a960:	2140      	movs	r1, #64	; 0x40
 800a962:	4868      	ldr	r0, [pc, #416]	; (800ab04 <PingPong_Process+0x248>)
 800a964:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
            Radio.Rx(RX_TIMEOUT_VALUE);
          }
        }
      }
      break;
 800a966:	e0b4      	b.n	800aad2 <PingPong_Process+0x216>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800a968:	2204      	movs	r2, #4
 800a96a:	4965      	ldr	r1, [pc, #404]	; (800ab00 <PingPong_Process+0x244>)
 800a96c:	485f      	ldr	r0, [pc, #380]	; (800aaec <PingPong_Process+0x230>)
 800a96e:	f001 fa5f 	bl	800be30 <strncmp>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10e      	bne.n	800a996 <PingPong_Process+0xda>
            isMaster = false;
 800a978:	4b59      	ldr	r3, [pc, #356]	; (800aae0 <PingPong_Process+0x224>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800a97e:	4b62      	ldr	r3, [pc, #392]	; (800ab08 <PingPong_Process+0x24c>)
 800a980:	2201      	movs	r2, #1
 800a982:	2100      	movs	r1, #0
 800a984:	2001      	movs	r0, #1
 800a986:	f000 ffd3 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800a98a:	4b53      	ldr	r3, [pc, #332]	; (800aad8 <PingPong_Process+0x21c>)
 800a98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a992:	4798      	blx	r3
      break;
 800a994:	e09d      	b.n	800aad2 <PingPong_Process+0x216>
            isMaster = true;
 800a996:	4b52      	ldr	r3, [pc, #328]	; (800aae0 <PingPong_Process+0x224>)
 800a998:	2201      	movs	r2, #1
 800a99a:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800a99c:	4b5b      	ldr	r3, [pc, #364]	; (800ab0c <PingPong_Process+0x250>)
 800a99e:	2201      	movs	r2, #1
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	2001      	movs	r0, #1
 800a9a4:	f000 ffc4 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800a9a8:	4b4b      	ldr	r3, [pc, #300]	; (800aad8 <PingPong_Process+0x21c>)
 800a9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a9b0:	4798      	blx	r3
      break;
 800a9b2:	e08e      	b.n	800aad2 <PingPong_Process+0x216>
        if (RxBufferSize > 0)
 800a9b4:	4b4b      	ldr	r3, [pc, #300]	; (800aae4 <PingPong_Process+0x228>)
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 808a 	beq.w	800aad2 <PingPong_Process+0x216>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800a9be:	2204      	movs	r2, #4
 800a9c0:	494f      	ldr	r1, [pc, #316]	; (800ab00 <PingPong_Process+0x244>)
 800a9c2:	484a      	ldr	r0, [pc, #296]	; (800aaec <PingPong_Process+0x230>)
 800a9c4:	f001 fa34 	bl	800be30 <strncmp>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d12c      	bne.n	800aa28 <PingPong_Process+0x16c>
            UTIL_TIMER_Stop(&timerLed);
 800a9ce:	4848      	ldr	r0, [pc, #288]	; (800aaf0 <PingPong_Process+0x234>)
 800a9d0:	f000 fdb6 	bl	800b540 <UTIL_TIMER_Stop>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a9da:	4846      	ldr	r0, [pc, #280]	; (800aaf4 <PingPong_Process+0x238>)
 800a9dc:	f7f7 fda2 	bl	8002524 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800a9e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9e4:	4843      	ldr	r0, [pc, #268]	; (800aaf4 <PingPong_Process+0x238>)
 800a9e6:	f7f7 fdb4 	bl	8002552 <HAL_GPIO_TogglePin>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800a9ea:	4b3b      	ldr	r3, [pc, #236]	; (800aad8 <PingPong_Process+0x21c>)
 800a9ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ee:	4798      	blx	r3
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	33c8      	adds	r3, #200	; 0xc8
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7f6 f849 	bl	8000a8c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800a9fa:	4b45      	ldr	r3, [pc, #276]	; (800ab10 <PingPong_Process+0x254>)
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	2100      	movs	r1, #0
 800aa00:	2001      	movs	r0, #1
 800aa02:	f000 ff95 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 800aa06:	4b43      	ldr	r3, [pc, #268]	; (800ab14 <PingPong_Process+0x258>)
 800aa08:	2201      	movs	r2, #1
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	f000 ff8f 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 800aa12:	2204      	movs	r2, #4
 800aa14:	4934      	ldr	r1, [pc, #208]	; (800aae8 <PingPong_Process+0x22c>)
 800aa16:	483b      	ldr	r0, [pc, #236]	; (800ab04 <PingPong_Process+0x248>)
 800aa18:	f001 fa40 	bl	800be9c <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800aa1c:	4b2e      	ldr	r3, [pc, #184]	; (800aad8 <PingPong_Process+0x21c>)
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	2140      	movs	r1, #64	; 0x40
 800aa22:	4838      	ldr	r0, [pc, #224]	; (800ab04 <PingPong_Process+0x248>)
 800aa24:	4798      	blx	r3
      break;
 800aa26:	e054      	b.n	800aad2 <PingPong_Process+0x216>
            isMaster = true;
 800aa28:	4b2d      	ldr	r3, [pc, #180]	; (800aae0 <PingPong_Process+0x224>)
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800aa2e:	4b37      	ldr	r3, [pc, #220]	; (800ab0c <PingPong_Process+0x250>)
 800aa30:	2201      	movs	r2, #1
 800aa32:	2100      	movs	r1, #0
 800aa34:	2001      	movs	r0, #1
 800aa36:	f000 ff7b 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800aa3a:	4b27      	ldr	r3, [pc, #156]	; (800aad8 <PingPong_Process+0x21c>)
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa42:	4798      	blx	r3
      break;
 800aa44:	e045      	b.n	800aad2 <PingPong_Process+0x216>
    case TX:
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800aa46:	4b34      	ldr	r3, [pc, #208]	; (800ab18 <PingPong_Process+0x25c>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	f000 ff6f 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800aa52:	4b21      	ldr	r3, [pc, #132]	; (800aad8 <PingPong_Process+0x21c>)
 800aa54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa5a:	4798      	blx	r3
      break;
 800aa5c:	e03a      	b.n	800aad4 <PingPong_Process+0x218>
    case RX_TIMEOUT:
    case RX_ERROR:
      if (isMaster == true)
 800aa5e:	4b20      	ldr	r3, [pc, #128]	; (800aae0 <PingPong_Process+0x224>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d01b      	beq.n	800aa9e <PingPong_Process+0x1e2>
      {
        /* Send the next PING frame */
        /* Add delay between RX and TX*/
        /* add random_delay to force sync between boards after some trials*/
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800aa66:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <PingPong_Process+0x21c>)
 800aa68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa6a:	4798      	blx	r3
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	4a2b      	ldr	r2, [pc, #172]	; (800ab1c <PingPong_Process+0x260>)
 800aa70:	6812      	ldr	r2, [r2, #0]
 800aa72:	4413      	add	r3, r2
 800aa74:	33c8      	adds	r3, #200	; 0xc8
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f6 f808 	bl	8000a8c <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800aa7c:	4b1f      	ldr	r3, [pc, #124]	; (800aafc <PingPong_Process+0x240>)
 800aa7e:	2201      	movs	r2, #1
 800aa80:	2100      	movs	r1, #0
 800aa82:	2001      	movs	r0, #1
 800aa84:	f000 ff54 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
        /* master sends PING*/
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800aa88:	2204      	movs	r2, #4
 800aa8a:	491d      	ldr	r1, [pc, #116]	; (800ab00 <PingPong_Process+0x244>)
 800aa8c:	481d      	ldr	r0, [pc, #116]	; (800ab04 <PingPong_Process+0x248>)
 800aa8e:	f001 fa05 	bl	800be9c <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 800aa92:	4b11      	ldr	r3, [pc, #68]	; (800aad8 <PingPong_Process+0x21c>)
 800aa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa96:	2140      	movs	r1, #64	; 0x40
 800aa98:	481a      	ldr	r0, [pc, #104]	; (800ab04 <PingPong_Process+0x248>)
 800aa9a:	4798      	blx	r3
      else
      {
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      break;
 800aa9c:	e01a      	b.n	800aad4 <PingPong_Process+0x218>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800aa9e:	4b1a      	ldr	r3, [pc, #104]	; (800ab08 <PingPong_Process+0x24c>)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	f000 ff43 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800aaaa:	4b0b      	ldr	r3, [pc, #44]	; (800aad8 <PingPong_Process+0x21c>)
 800aaac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aab2:	4798      	blx	r3
      break;
 800aab4:	e00e      	b.n	800aad4 <PingPong_Process+0x218>
    case TX_TIMEOUT:
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800aab6:	4b14      	ldr	r3, [pc, #80]	; (800ab08 <PingPong_Process+0x24c>)
 800aab8:	2201      	movs	r2, #1
 800aaba:	2100      	movs	r1, #0
 800aabc:	2001      	movs	r0, #1
 800aabe:	f000 ff37 	bl	800b930 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <PingPong_Process+0x21c>)
 800aac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aaca:	4798      	blx	r3
      break;
 800aacc:	e002      	b.n	800aad4 <PingPong_Process+0x218>
    default:
      break;
 800aace:	bf00      	nop
 800aad0:	e000      	b.n	800aad4 <PingPong_Process+0x218>
      break;
 800aad2:	bf00      	nop
  }
}
 800aad4:	bf00      	nop
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	0800c248 	.word	0x0800c248
 800aadc:	20000338 	.word	0x20000338
 800aae0:	20000009 	.word	0x20000009
 800aae4:	2000053c 	.word	0x2000053c
 800aae8:	0800c054 	.word	0x0800c054
 800aaec:	2000033c 	.word	0x2000033c
 800aaf0:	20000540 	.word	0x20000540
 800aaf4:	48000400 	.word	0x48000400
 800aaf8:	0800c05c 	.word	0x0800c05c
 800aafc:	0800c068 	.word	0x0800c068
 800ab00:	0800c07c 	.word	0x0800c07c
 800ab04:	2000043c 	.word	0x2000043c
 800ab08:	0800c084 	.word	0x0800c084
 800ab0c:	0800c098 	.word	0x0800c098
 800ab10:	0800c0ac 	.word	0x0800c0ac
 800ab14:	0800c0b8 	.word	0x0800c0b8
 800ab18:	0800c0cc 	.word	0x0800c0cc
 800ab1c:	20000558 	.word	0x20000558

0800ab20 <OnledEvent>:

static void OnledEvent(void *context)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800ab28:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab2c:	4807      	ldr	r0, [pc, #28]	; (800ab4c <OnledEvent+0x2c>)
 800ab2e:	f7f7 fd10 	bl	8002552 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800ab32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab36:	4805      	ldr	r0, [pc, #20]	; (800ab4c <OnledEvent+0x2c>)
 800ab38:	f7f7 fd0b 	bl	8002552 <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLed);
 800ab3c:	4804      	ldr	r0, [pc, #16]	; (800ab50 <OnledEvent+0x30>)
 800ab3e:	f000 fc91 	bl	800b464 <UTIL_TIMER_Start>
}
 800ab42:	bf00      	nop
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	48000400 	.word	0x48000400
 800ab50:	20000540 	.word	0x20000540

0800ab54 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ab58:	f7f6 fc9e 	bl	8001498 <BSP_RADIO_Init>
 800ab5c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b082      	sub	sp, #8
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	4603      	mov	r3, r0
 800ab6a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7f6 fcd0 	bl	8001514 <BSP_RADIO_ConfigRFSwitch>
 800ab74:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ab82:	f7f6 fd23 	bl	80015cc <BSP_RADIO_GetTxConfig>
 800ab86:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ab90:	f7f6 fd23 	bl	80015da <BSP_RADIO_IsTCXO>
 800ab94:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ab9e:	f7f6 fd23 	bl	80015e8 <BSP_RADIO_IsDCDC>
 800aba2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7f6 fd1e 	bl	80015f6 <BSP_RADIO_GetRFOMaxPowerConfig>
 800abba:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800abc8:	4b04      	ldr	r3, [pc, #16]	; (800abdc <UTIL_LPM_Init+0x18>)
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800abce:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <UTIL_LPM_Init+0x1c>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800abd4:	bf00      	nop
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bc80      	pop	{r7}
 800abda:	4770      	bx	lr
 800abdc:	2000055c 	.word	0x2000055c
 800abe0:	20000560 	.word	0x20000560

0800abe4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abf0:	f3ef 8310 	mrs	r3, PRIMASK
 800abf4:	613b      	str	r3, [r7, #16]
  return(result);
 800abf6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800abf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abfa:	b672      	cpsid	i
}
 800abfc:	bf00      	nop
  
  switch( state )
 800abfe:	78fb      	ldrb	r3, [r7, #3]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d008      	beq.n	800ac16 <UTIL_LPM_SetStopMode+0x32>
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d10e      	bne.n	800ac26 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ac08:	4b0d      	ldr	r3, [pc, #52]	; (800ac40 <UTIL_LPM_SetStopMode+0x5c>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	4a0b      	ldr	r2, [pc, #44]	; (800ac40 <UTIL_LPM_SetStopMode+0x5c>)
 800ac12:	6013      	str	r3, [r2, #0]
      break;
 800ac14:	e008      	b.n	800ac28 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	43da      	mvns	r2, r3
 800ac1a:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <UTIL_LPM_SetStopMode+0x5c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4013      	ands	r3, r2
 800ac20:	4a07      	ldr	r2, [pc, #28]	; (800ac40 <UTIL_LPM_SetStopMode+0x5c>)
 800ac22:	6013      	str	r3, [r2, #0]
      break;
 800ac24:	e000      	b.n	800ac28 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800ac26:	bf00      	nop
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f383 8810 	msr	PRIMASK, r3
}
 800ac32:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ac34:	bf00      	nop
 800ac36:	371c      	adds	r7, #28
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bc80      	pop	{r7}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	2000055c 	.word	0x2000055c

0800ac44 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac50:	f3ef 8310 	mrs	r3, PRIMASK
 800ac54:	613b      	str	r3, [r7, #16]
  return(result);
 800ac56:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ac58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac5a:	b672      	cpsid	i
}
 800ac5c:	bf00      	nop
  
  switch(state)
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d008      	beq.n	800ac76 <UTIL_LPM_SetOffMode+0x32>
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d10e      	bne.n	800ac86 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ac68:	4b0d      	ldr	r3, [pc, #52]	; (800aca0 <UTIL_LPM_SetOffMode+0x5c>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	4a0b      	ldr	r2, [pc, #44]	; (800aca0 <UTIL_LPM_SetOffMode+0x5c>)
 800ac72:	6013      	str	r3, [r2, #0]
      break;
 800ac74:	e008      	b.n	800ac88 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	43da      	mvns	r2, r3
 800ac7a:	4b09      	ldr	r3, [pc, #36]	; (800aca0 <UTIL_LPM_SetOffMode+0x5c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4013      	ands	r3, r2
 800ac80:	4a07      	ldr	r2, [pc, #28]	; (800aca0 <UTIL_LPM_SetOffMode+0x5c>)
 800ac82:	6013      	str	r3, [r2, #0]
      break;
 800ac84:	e000      	b.n	800ac88 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ac86:	bf00      	nop
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f383 8810 	msr	PRIMASK, r3
}
 800ac92:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ac94:	bf00      	nop
 800ac96:	371c      	adds	r7, #28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bc80      	pop	{r7}
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	20000560 	.word	0x20000560

0800aca4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800acba:	e007      	b.n	800accc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	1c53      	adds	r3, r2, #1
 800acc0:	613b      	str	r3, [r7, #16]
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	1c59      	adds	r1, r3, #1
 800acc6:	6179      	str	r1, [r7, #20]
 800acc8:	7812      	ldrb	r2, [r2, #0]
 800acca:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800accc:	88fb      	ldrh	r3, [r7, #6]
 800acce:	1e5a      	subs	r2, r3, #1
 800acd0:	80fa      	strh	r2, [r7, #6]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1f2      	bne.n	800acbc <UTIL_MEM_cpy_8+0x18>
    }
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	371c      	adds	r7, #28
 800acdc:	46bd      	mov	sp, r7
 800acde:	bc80      	pop	{r7}
 800ace0:	4770      	bx	lr

0800ace2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800ace2:	b480      	push	{r7}
 800ace4:	b085      	sub	sp, #20
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	460b      	mov	r3, r1
 800acec:	70fb      	strb	r3, [r7, #3]
 800acee:	4613      	mov	r3, r2
 800acf0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800acf6:	e004      	b.n	800ad02 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	60fa      	str	r2, [r7, #12]
 800acfe:	78fa      	ldrb	r2, [r7, #3]
 800ad00:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ad02:	883b      	ldrh	r3, [r7, #0]
 800ad04:	1e5a      	subs	r2, r3, #1
 800ad06:	803a      	strh	r2, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1f5      	bne.n	800acf8 <UTIL_MEM_set_8+0x16>
  }
}
 800ad0c:	bf00      	nop
 800ad0e:	bf00      	nop
 800ad10:	3714      	adds	r7, #20
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bc80      	pop	{r7}
 800ad16:	4770      	bx	lr

0800ad18 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800ad18:	b082      	sub	sp, #8
 800ad1a:	b480      	push	{r7}
 800ad1c:	b087      	sub	sp, #28
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	1d38      	adds	r0, r7, #4
 800ad24:	e880 0006 	stmia.w	r0, {r1, r2}
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	613b      	str	r3, [r7, #16]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	4413      	add	r3, r2
 800ad38:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800ad3a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	4413      	add	r3, r2
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	b21b      	sxth	r3, r3
 800ad4c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800ad4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ad52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad56:	db0a      	blt.n	800ad6e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800ad5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	b21b      	sxth	r3, r3
 800ad6c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	461a      	mov	r2, r3
 800ad72:	f107 0310 	add.w	r3, r7, #16
 800ad76:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad7a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	371c      	adds	r7, #28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bc80      	pop	{r7}
 800ad86:	b002      	add	sp, #8
 800ad88:	4770      	bx	lr
	...

0800ad8c <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08a      	sub	sp, #40	; 0x28
 800ad90:	af02      	add	r7, sp, #8
 800ad92:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800ad94:	2300      	movs	r3, #0
 800ad96:	61bb      	str	r3, [r7, #24]
 800ad98:	2300      	movs	r3, #0
 800ad9a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	613b      	str	r3, [r7, #16]
 800ada0:	2300      	movs	r3, #0
 800ada2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800ada4:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <SysTimeGet+0x6c>)
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	f107 0218 	add.w	r2, r7, #24
 800adac:	3204      	adds	r2, #4
 800adae:	4610      	mov	r0, r2
 800adb0:	4798      	blx	r3
 800adb2:	4603      	mov	r3, r0
 800adb4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800adb6:	4b10      	ldr	r3, [pc, #64]	; (800adf8 <SysTimeGet+0x6c>)
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	4798      	blx	r3
 800adbc:	4603      	mov	r3, r0
 800adbe:	b21b      	sxth	r3, r3
 800adc0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800adc2:	4b0d      	ldr	r3, [pc, #52]	; (800adf8 <SysTimeGet+0x6c>)
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	4798      	blx	r3
 800adc8:	4603      	mov	r3, r0
 800adca:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800adcc:	f107 0010 	add.w	r0, r7, #16
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	f107 0208 	add.w	r2, r7, #8
 800adda:	ca06      	ldmia	r2, {r1, r2}
 800addc:	f7ff ff9c 	bl	800ad18 <SysTimeAdd>

  return sysTime;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f107 0310 	add.w	r3, r7, #16
 800ade8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800adec:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	3720      	adds	r7, #32
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	0800c1fc 	.word	0x0800c1fc

0800adfc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  int i = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800ae08:	e00e      	b.n	800ae28 <ee_skip_atoi+0x2c>
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	005b      	lsls	r3, r3, #1
 800ae14:	4618      	mov	r0, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	1c59      	adds	r1, r3, #1
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6011      	str	r1, [r2, #0]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	4403      	add	r3, r0
 800ae24:	3b30      	subs	r3, #48	; 0x30
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b2f      	cmp	r3, #47	; 0x2f
 800ae30:	d904      	bls.n	800ae3c <ee_skip_atoi+0x40>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b39      	cmp	r3, #57	; 0x39
 800ae3a:	d9e6      	bls.n	800ae0a <ee_skip_atoi+0xe>
  return i;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bc80      	pop	{r7}
 800ae46:	4770      	bx	lr

0800ae48 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b099      	sub	sp, #100	; 0x64
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800ae56:	4b71      	ldr	r3, [pc, #452]	; (800b01c <ee_number+0x1d4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800ae5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <ee_number+0x24>
 800ae66:	4b6e      	ldr	r3, [pc, #440]	; (800b020 <ee_number+0x1d8>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	dd02      	ble.n	800ae78 <ee_number+0x30>
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2b24      	cmp	r3, #36	; 0x24
 800ae76:	dd01      	ble.n	800ae7c <ee_number+0x34>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e0ca      	b.n	800b012 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800ae7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <ee_number+0x42>
 800ae86:	2330      	movs	r3, #48	; 0x30
 800ae88:	e000      	b.n	800ae8c <ee_number+0x44>
 800ae8a:	2320      	movs	r3, #32
 800ae8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800ae96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <ee_number+0x70>
  {
    if (num < 0)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da08      	bge.n	800aeb8 <ee_number+0x70>
    {
      sign = '-';
 800aea6:	232d      	movs	r3, #45	; 0x2d
 800aea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	425b      	negs	r3, r3
 800aeb0:	607b      	str	r3, [r7, #4]
      size--;
 800aeb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d11e      	bne.n	800af00 <ee_number+0xb8>
    tmp[i++] = '0';
 800aec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	657a      	str	r2, [r7, #84]	; 0x54
 800aec8:	3360      	adds	r3, #96	; 0x60
 800aeca:	443b      	add	r3, r7
 800aecc:	2230      	movs	r2, #48	; 0x30
 800aece:	f803 2c50 	strb.w	r2, [r3, #-80]
 800aed2:	e018      	b.n	800af06 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	fbb3 f1f2 	udiv	r1, r3, r2
 800aedc:	fb01 f202 	mul.w	r2, r1, r2
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aee4:	441a      	add	r2, r3
 800aee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aee8:	1c59      	adds	r1, r3, #1
 800aeea:	6579      	str	r1, [r7, #84]	; 0x54
 800aeec:	7812      	ldrb	r2, [r2, #0]
 800aeee:	3360      	adds	r3, #96	; 0x60
 800aef0:	443b      	add	r3, r7
 800aef2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefe:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e6      	bne.n	800aed4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800af06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	dd01      	ble.n	800af12 <ee_number+0xca>
 800af0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af10:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800af12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800af1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d112      	bne.n	800af4a <ee_number+0x102>
 800af24:	e00c      	b.n	800af40 <ee_number+0xf8>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	1c5a      	adds	r2, r3, #1
 800af2a:	60fa      	str	r2, [r7, #12]
 800af2c:	2220      	movs	r2, #32
 800af2e:	701a      	strb	r2, [r3, #0]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	3b01      	subs	r3, #1
 800af34:	60bb      	str	r3, [r7, #8]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d101      	bne.n	800af40 <ee_number+0xf8>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	e068      	b.n	800b012 <ee_number+0x1ca>
 800af40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af42:	1e5a      	subs	r2, r3, #1
 800af44:	66ba      	str	r2, [r7, #104]	; 0x68
 800af46:	2b00      	cmp	r3, #0
 800af48:	dced      	bgt.n	800af26 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800af4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d01b      	beq.n	800af8a <ee_number+0x142>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	1c5a      	adds	r2, r3, #1
 800af56:	60fa      	str	r2, [r7, #12]
 800af58:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	3b01      	subs	r3, #1
 800af62:	60bb      	str	r3, [r7, #8]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10f      	bne.n	800af8a <ee_number+0x142>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	e051      	b.n	800b012 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	60fa      	str	r2, [r7, #12]
 800af74:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800af78:	701a      	strb	r2, [r3, #0]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	60bb      	str	r3, [r7, #8]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <ee_number+0x142>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	e043      	b.n	800b012 <ee_number+0x1ca>
 800af8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af8c:	1e5a      	subs	r2, r3, #1
 800af8e:	66ba      	str	r2, [r7, #104]	; 0x68
 800af90:	2b00      	cmp	r3, #0
 800af92:	dcec      	bgt.n	800af6e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800af94:	e00c      	b.n	800afb0 <ee_number+0x168>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	60fa      	str	r2, [r7, #12]
 800af9c:	2230      	movs	r2, #48	; 0x30
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	60bb      	str	r3, [r7, #8]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <ee_number+0x168>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	e030      	b.n	800b012 <ee_number+0x1ca>
 800afb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb2:	1e5a      	subs	r2, r3, #1
 800afb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afb8:	429a      	cmp	r2, r3
 800afba:	dbec      	blt.n	800af96 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800afbc:	e010      	b.n	800afe0 <ee_number+0x198>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	60fa      	str	r2, [r7, #12]
 800afc4:	f107 0110 	add.w	r1, r7, #16
 800afc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afca:	440a      	add	r2, r1
 800afcc:	7812      	ldrb	r2, [r2, #0]
 800afce:	701a      	strb	r2, [r3, #0]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	60bb      	str	r3, [r7, #8]
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d101      	bne.n	800afe0 <ee_number+0x198>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	e018      	b.n	800b012 <ee_number+0x1ca>
 800afe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afe2:	1e5a      	subs	r2, r3, #1
 800afe4:	657a      	str	r2, [r7, #84]	; 0x54
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	dce9      	bgt.n	800afbe <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800afea:	e00c      	b.n	800b006 <ee_number+0x1be>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	60fa      	str	r2, [r7, #12]
 800aff2:	2220      	movs	r2, #32
 800aff4:	701a      	strb	r2, [r3, #0]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	3b01      	subs	r3, #1
 800affa:	60bb      	str	r3, [r7, #8]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <ee_number+0x1be>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	e005      	b.n	800b012 <ee_number+0x1ca>
 800b006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b008:	1e5a      	subs	r2, r3, #1
 800b00a:	66ba      	str	r2, [r7, #104]	; 0x68
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dced      	bgt.n	800afec <ee_number+0x1a4>

  return str;
 800b010:	68fb      	ldr	r3, [r7, #12]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3764      	adds	r7, #100	; 0x64
 800b016:	46bd      	mov	sp, r7
 800b018:	bc80      	pop	{r7}
 800b01a:	4770      	bx	lr
 800b01c:	2000000c 	.word	0x2000000c
 800b020:	20000010 	.word	0x20000010

0800b024 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b092      	sub	sp, #72	; 0x48
 800b028:	af04      	add	r7, sp, #16
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
 800b030:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	dc01      	bgt.n	800b03c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	e13e      	b.n	800b2ba <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b040:	e128      	b.n	800b294 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800b042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	1ad2      	subs	r2, r2, r3
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	429a      	cmp	r2, r3
 800b04e:	f280 812e 	bge.w	800b2ae <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b25      	cmp	r3, #37	; 0x25
 800b058:	d006      	beq.n	800b068 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	1c59      	adds	r1, r3, #1
 800b060:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b062:	7812      	ldrb	r2, [r2, #0]
 800b064:	701a      	strb	r2, [r3, #0]
      continue;
 800b066:	e112      	b.n	800b28e <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	3301      	adds	r3, #1
 800b070:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	2b30      	cmp	r3, #48	; 0x30
 800b078:	d103      	bne.n	800b082 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	f043 0301 	orr.w	r3, r3, #1
 800b080:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800b082:	f04f 33ff 	mov.w	r3, #4294967295
 800b086:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	2b2f      	cmp	r3, #47	; 0x2f
 800b08e:	d908      	bls.n	800b0a2 <tiny_vsnprintf_like+0x7e>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	2b39      	cmp	r3, #57	; 0x39
 800b096:	d804      	bhi.n	800b0a2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800b098:	1d3b      	adds	r3, r7, #4
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7ff feae 	bl	800adfc <ee_skip_atoi>
 800b0a0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800b0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800b0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ac:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800b0ae:	230a      	movs	r3, #10
 800b0b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	3b58      	subs	r3, #88	; 0x58
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	f200 8094 	bhi.w	800b1e6 <tiny_vsnprintf_like+0x1c2>
 800b0be:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <tiny_vsnprintf_like+0xa0>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b1cf 	.word	0x0800b1cf
 800b0c8:	0800b1e7 	.word	0x0800b1e7
 800b0cc:	0800b1e7 	.word	0x0800b1e7
 800b0d0:	0800b1e7 	.word	0x0800b1e7
 800b0d4:	0800b1e7 	.word	0x0800b1e7
 800b0d8:	0800b1e7 	.word	0x0800b1e7
 800b0dc:	0800b1e7 	.word	0x0800b1e7
 800b0e0:	0800b1e7 	.word	0x0800b1e7
 800b0e4:	0800b1e7 	.word	0x0800b1e7
 800b0e8:	0800b1e7 	.word	0x0800b1e7
 800b0ec:	0800b1e7 	.word	0x0800b1e7
 800b0f0:	0800b153 	.word	0x0800b153
 800b0f4:	0800b1dd 	.word	0x0800b1dd
 800b0f8:	0800b1e7 	.word	0x0800b1e7
 800b0fc:	0800b1e7 	.word	0x0800b1e7
 800b100:	0800b1e7 	.word	0x0800b1e7
 800b104:	0800b1e7 	.word	0x0800b1e7
 800b108:	0800b1dd 	.word	0x0800b1dd
 800b10c:	0800b1e7 	.word	0x0800b1e7
 800b110:	0800b1e7 	.word	0x0800b1e7
 800b114:	0800b1e7 	.word	0x0800b1e7
 800b118:	0800b1e7 	.word	0x0800b1e7
 800b11c:	0800b1e7 	.word	0x0800b1e7
 800b120:	0800b1e7 	.word	0x0800b1e7
 800b124:	0800b1e7 	.word	0x0800b1e7
 800b128:	0800b1e7 	.word	0x0800b1e7
 800b12c:	0800b1e7 	.word	0x0800b1e7
 800b130:	0800b173 	.word	0x0800b173
 800b134:	0800b1e7 	.word	0x0800b1e7
 800b138:	0800b233 	.word	0x0800b233
 800b13c:	0800b1e7 	.word	0x0800b1e7
 800b140:	0800b1e7 	.word	0x0800b1e7
 800b144:	0800b1d7 	.word	0x0800b1d7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b14e:	2220      	movs	r2, #32
 800b150:	701a      	strb	r2, [r3, #0]
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	3b01      	subs	r3, #1
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dcf4      	bgt.n	800b148 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	1d1a      	adds	r2, r3, #4
 800b162:	603a      	str	r2, [r7, #0]
 800b164:	6819      	ldr	r1, [r3, #0]
 800b166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b16c:	b2ca      	uxtb	r2, r1
 800b16e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b170:	e08d      	b.n	800b28e <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	1d1a      	adds	r2, r3, #4
 800b176:	603a      	str	r2, [r7, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <tiny_vsnprintf_like+0x162>
 800b182:	4b50      	ldr	r3, [pc, #320]	; (800b2c4 <tiny_vsnprintf_like+0x2a0>)
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b188:	f7f4 fff6 	bl	8000178 <strlen>
 800b18c:	4603      	mov	r3, r0
 800b18e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b190:	e004      	b.n	800b19c <tiny_vsnprintf_like+0x178>
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b198:	2220      	movs	r2, #32
 800b19a:	701a      	strb	r2, [r3, #0]
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	1e5a      	subs	r2, r3, #1
 800b1a0:	61fa      	str	r2, [r7, #28]
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	dbf4      	blt.n	800b192 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1ac:	e00a      	b.n	800b1c4 <tiny_vsnprintf_like+0x1a0>
 800b1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b0:	1c53      	adds	r3, r2, #1
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	1c59      	adds	r1, r3, #1
 800b1b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b1ba:	7812      	ldrb	r2, [r2, #0]
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	dbf0      	blt.n	800b1ae <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b1cc:	e05f      	b.n	800b28e <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b1d6:	2310      	movs	r3, #16
 800b1d8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800b1da:	e02b      	b.n	800b234 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	f043 0302 	orr.w	r3, r3, #2
 800b1e2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b1e4:	e025      	b.n	800b232 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b25      	cmp	r3, #37	; 0x25
 800b1ec:	d004      	beq.n	800b1f8 <tiny_vsnprintf_like+0x1d4>
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	1c5a      	adds	r2, r3, #1
 800b1f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1f4:	2225      	movs	r2, #37	; 0x25
 800b1f6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b1f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	1ad2      	subs	r2, r2, r3
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	3b01      	subs	r3, #1
 800b202:	429a      	cmp	r2, r3
 800b204:	da16      	bge.n	800b234 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d006      	beq.n	800b21c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	1c59      	adds	r1, r3, #1
 800b214:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b216:	7812      	ldrb	r2, [r2, #0]
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	e002      	b.n	800b222 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	3b01      	subs	r3, #1
 800b220:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	1ad2      	subs	r2, r2, r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	429a      	cmp	r2, r3
 800b22e:	db2d      	blt.n	800b28c <tiny_vsnprintf_like+0x268>
 800b230:	e000      	b.n	800b234 <tiny_vsnprintf_like+0x210>
        break;
 800b232:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2b6c      	cmp	r3, #108	; 0x6c
 800b238:	d105      	bne.n	800b246 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	1d1a      	adds	r2, r3, #4
 800b23e:	603a      	str	r2, [r7, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	637b      	str	r3, [r7, #52]	; 0x34
 800b244:	e00f      	b.n	800b266 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	f003 0302 	and.w	r3, r3, #2
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d005      	beq.n	800b25c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	1d1a      	adds	r2, r3, #4
 800b254:	603a      	str	r2, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	637b      	str	r3, [r7, #52]	; 0x34
 800b25a:	e004      	b.n	800b266 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	1d1a      	adds	r2, r3, #4
 800b260:	603a      	str	r2, [r7, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	1e5a      	subs	r2, r3, #1
 800b26a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	1acb      	subs	r3, r1, r3
 800b270:	1ad1      	subs	r1, r2, r3
 800b272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	9302      	str	r3, [sp, #8]
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	9301      	str	r3, [sp, #4]
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b284:	f7ff fde0 	bl	800ae48 <ee_number>
 800b288:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b28a:	e000      	b.n	800b28e <tiny_vsnprintf_like+0x26a>
        continue;
 800b28c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3301      	adds	r3, #1
 800b292:	607b      	str	r3, [r7, #4]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f47f aed2 	bne.w	800b042 <tiny_vsnprintf_like+0x1e>
 800b29e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	1ad2      	subs	r2, r2, r3
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	f6bf aeca 	bge.w	800b042 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800b2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	1ad3      	subs	r3, r2, r3
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3738      	adds	r7, #56	; 0x38
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	0800c128 	.word	0x0800c128

0800b2c8 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2d4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2d8:	617b      	str	r3, [r7, #20]
  return(result);
 800b2da:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b2dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2de:	b672      	cpsid	i
}
 800b2e0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 f83e 	bl	800b364 <SEQ_BitPosition>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4a06      	ldr	r2, [pc, #24]	; (800b308 <UTIL_SEQ_RegTask+0x40>)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	f383 8810 	msr	PRIMASK, r3
}
 800b2fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b300:	bf00      	nop
}
 800b302:	3720      	adds	r7, #32
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	20000568 	.word	0x20000568

0800b30c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b316:	f3ef 8310 	mrs	r3, PRIMASK
 800b31a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b31c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b31e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b320:	b672      	cpsid	i
}
 800b322:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b324:	4b0d      	ldr	r3, [pc, #52]	; (800b35c <UTIL_SEQ_SetTask+0x50>)
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	4a0b      	ldr	r2, [pc, #44]	; (800b35c <UTIL_SEQ_SetTask+0x50>)
 800b32e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b330:	4a0b      	ldr	r2, [pc, #44]	; (800b360 <UTIL_SEQ_SetTask+0x54>)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	431a      	orrs	r2, r3
 800b33c:	4908      	ldr	r1, [pc, #32]	; (800b360 <UTIL_SEQ_SetTask+0x54>)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	f383 8810 	msr	PRIMASK, r3
}
 800b34e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b350:	bf00      	nop
}
 800b352:	371c      	adds	r7, #28
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	20000564 	.word	0x20000564
 800b360:	2000056c 	.word	0x2000056c

0800b364 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	0c1b      	lsrs	r3, r3, #16
 800b378:	041b      	lsls	r3, r3, #16
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d104      	bne.n	800b388 <SEQ_BitPosition+0x24>
 800b37e:	2310      	movs	r3, #16
 800b380:	73fb      	strb	r3, [r7, #15]
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	041b      	lsls	r3, r3, #16
 800b386:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d105      	bne.n	800b39e <SEQ_BitPosition+0x3a>
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	3308      	adds	r3, #8
 800b396:	73fb      	strb	r3, [r7, #15]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	021b      	lsls	r3, r3, #8
 800b39c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d105      	bne.n	800b3b4 <SEQ_BitPosition+0x50>
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	73fb      	strb	r3, [r7, #15]
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	011b      	lsls	r3, r3, #4
 800b3b2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	0f1b      	lsrs	r3, r3, #28
 800b3b8:	4a06      	ldr	r2, [pc, #24]	; (800b3d4 <SEQ_BitPosition+0x70>)
 800b3ba:	5cd2      	ldrb	r2, [r2, r3]
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
 800b3be:	4413      	add	r3, r2
 800b3c0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	f1c3 031f 	rsb	r3, r3, #31
 800b3c8:	b2db      	uxtb	r3, r3
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bc80      	pop	{r7}
 800b3d2:	4770      	bx	lr
 800b3d4:	0800c388 	.word	0x0800c388

0800b3d8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b3dc:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <UTIL_TIMER_Init+0x18>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b3e2:	4b04      	ldr	r3, [pc, #16]	; (800b3f4 <UTIL_TIMER_Init+0x1c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4798      	blx	r3
 800b3e8:	4603      	mov	r3, r0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000574 	.word	0x20000574
 800b3f4:	0800c1d0 	.word	0x0800c1d0

0800b3f8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	4613      	mov	r3, r2
 800b406:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d023      	beq.n	800b456 <UTIL_TIMER_Create+0x5e>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d020      	beq.n	800b456 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b41a:	4b11      	ldr	r3, [pc, #68]	; (800b460 <UTIL_TIMER_Create+0x68>)
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	68b8      	ldr	r0, [r7, #8]
 800b420:	4798      	blx	r3
 800b422:	4602      	mov	r2, r0
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	69ba      	ldr	r2, [r7, #24]
 800b444:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	79fa      	ldrb	r2, [r7, #7]
 800b44a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	e000      	b.n	800b458 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b456:	2301      	movs	r3, #1
  }
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	0800c1d0 	.word	0x0800c1d0

0800b464 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08a      	sub	sp, #40	; 0x28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d056      	beq.n	800b526 <UTIL_TIMER_Start+0xc2>
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f9a9 	bl	800b7d0 <TimerExists>
 800b47e:	4603      	mov	r3, r0
 800b480:	f083 0301 	eor.w	r3, r3, #1
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d04d      	beq.n	800b526 <UTIL_TIMER_Start+0xc2>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	7a5b      	ldrb	r3, [r3, #9]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d149      	bne.n	800b526 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b492:	f3ef 8310 	mrs	r3, PRIMASK
 800b496:	613b      	str	r3, [r7, #16]
  return(result);
 800b498:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b49a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b49c:	b672      	cpsid	i
}
 800b49e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b4a6:	4b24      	ldr	r3, [pc, #144]	; (800b538 <UTIL_TIMER_Start+0xd4>)
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	4798      	blx	r3
 800b4ac:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b4ae:	6a3a      	ldr	r2, [r7, #32]
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d201      	bcs.n	800b4ba <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a3a      	ldr	r2, [r7, #32]
 800b4be:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b4d2:	4b1a      	ldr	r3, [pc, #104]	; (800b53c <UTIL_TIMER_Start+0xd8>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d106      	bne.n	800b4e8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b4da:	4b17      	ldr	r3, [pc, #92]	; (800b538 <UTIL_TIMER_Start+0xd4>)
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f9eb 	bl	800b8bc <TimerInsertNewHeadTimer>
 800b4e6:	e017      	b.n	800b518 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b4e8:	4b13      	ldr	r3, [pc, #76]	; (800b538 <UTIL_TIMER_Start+0xd4>)
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	4798      	blx	r3
 800b4ee:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	441a      	add	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	4b0e      	ldr	r3, [pc, #56]	; (800b53c <UTIL_TIMER_Start+0xd8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	429a      	cmp	r2, r3
 800b508:	d203      	bcs.n	800b512 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f9d6 	bl	800b8bc <TimerInsertNewHeadTimer>
 800b510:	e002      	b.n	800b518 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f9a2 	bl	800b85c <TimerInsertTimer>
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f383 8810 	msr	PRIMASK, r3
}
 800b522:	bf00      	nop
  {
 800b524:	e002      	b.n	800b52c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b526:	2301      	movs	r3, #1
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b52c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b530:	4618      	mov	r0, r3
 800b532:	3728      	adds	r7, #40	; 0x28
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	0800c1d0 	.word	0x0800c1d0
 800b53c:	20000574 	.word	0x20000574

0800b540 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b088      	sub	sp, #32
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d05b      	beq.n	800b60a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b552:	f3ef 8310 	mrs	r3, PRIMASK
 800b556:	60fb      	str	r3, [r7, #12]
  return(result);
 800b558:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b55a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b55c:	b672      	cpsid	i
}
 800b55e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b560:	4b2d      	ldr	r3, [pc, #180]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b566:	4b2c      	ldr	r3, [pc, #176]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b572:	4b29      	ldr	r3, [pc, #164]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d041      	beq.n	800b5fe <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b580:	4b25      	ldr	r3, [pc, #148]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	429a      	cmp	r2, r3
 800b588:	d134      	bne.n	800b5f4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b58a:	4b23      	ldr	r3, [pc, #140]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2200      	movs	r2, #0
 800b590:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b592:	4b21      	ldr	r3, [pc, #132]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00a      	beq.n	800b5b2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b59c:	4b1e      	ldr	r3, [pc, #120]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	4a1d      	ldr	r2, [pc, #116]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b5a4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b5a6:	4b1c      	ldr	r3, [pc, #112]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 f92c 	bl	800b808 <TimerSetTimeout>
 800b5b0:	e023      	b.n	800b5fa <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b5b2:	4b1a      	ldr	r3, [pc, #104]	; (800b61c <UTIL_TIMER_Stop+0xdc>)
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	4798      	blx	r3
            TimerListHead = NULL;
 800b5b8:	4b17      	ldr	r3, [pc, #92]	; (800b618 <UTIL_TIMER_Stop+0xd8>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	e01c      	b.n	800b5fa <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d110      	bne.n	800b5ea <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b5dc:	e00d      	b.n	800b5fa <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	615a      	str	r2, [r3, #20]
            break;
 800b5e8:	e007      	b.n	800b5fa <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1e2      	bne.n	800b5c0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	77fb      	strb	r3, [r7, #31]
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	f383 8810 	msr	PRIMASK, r3
}
 800b608:	e001      	b.n	800b60e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b60a:	2301      	movs	r3, #1
 800b60c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b60e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3720      	adds	r7, #32
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20000574 	.word	0x20000574
 800b61c:	0800c1d0 	.word	0x0800c1d0

0800b620 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d102      	bne.n	800b63a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b634:	2301      	movs	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
 800b638:	e014      	b.n	800b664 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b63a:	4b0d      	ldr	r3, [pc, #52]	; (800b670 <UTIL_TIMER_SetPeriod+0x50>)
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	6838      	ldr	r0, [r7, #0]
 800b640:	4798      	blx	r3
 800b642:	4602      	mov	r2, r0
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f8c1 	bl	800b7d0 <TimerExists>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d007      	beq.n	800b664 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff ff73 	bl	800b540 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff ff02 	bl	800b464 <UTIL_TIMER_Start>
 800b660:	4603      	mov	r3, r0
 800b662:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b664:	7bfb      	ldrb	r3, [r7, #15]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	0800c1d0 	.word	0x0800c1d0

0800b674 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800b674:	b590      	push	{r4, r7, lr}
 800b676:	b089      	sub	sp, #36	; 0x24
 800b678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b67a:	f3ef 8310 	mrs	r3, PRIMASK
 800b67e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b680:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b682:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b684:	b672      	cpsid	i
}
 800b686:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b688:	4b38      	ldr	r3, [pc, #224]	; (800b76c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b68a:	695b      	ldr	r3, [r3, #20]
 800b68c:	4798      	blx	r3
 800b68e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b690:	4b36      	ldr	r3, [pc, #216]	; (800b76c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	4798      	blx	r3
 800b696:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800b6a0:	4b33      	ldr	r3, [pc, #204]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d037      	beq.n	800b718 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800b6a8:	4b31      	ldr	r3, [pc, #196]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d206      	bcs.n	800b6c6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	1ad2      	subs	r2, r2, r3
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	e002      	b.n	800b6cc <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	695b      	ldr	r3, [r3, #20]
 800b6d0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1ea      	bne.n	800b6ae <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b6d8:	e01e      	b.n	800b718 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800b6da:	4b25      	ldr	r3, [pc, #148]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800b6e0:	4b23      	ldr	r3, [pc, #140]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	4a22      	ldr	r2, [pc, #136]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6e8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	69fa      	ldr	r2, [r7, #28]
 800b6fc:	6912      	ldr	r2, [r2, #16]
 800b6fe:	4610      	mov	r0, r2
 800b700:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	7adb      	ldrb	r3, [r3, #11]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d106      	bne.n	800b718 <UTIL_TIMER_IRQ_Handler+0xa4>
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	7a9b      	ldrb	r3, [r3, #10]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d102      	bne.n	800b718 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800b712:	69f8      	ldr	r0, [r7, #28]
 800b714:	f7ff fea6 	bl	800b464 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b718:	4b15      	ldr	r3, [pc, #84]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00d      	beq.n	800b73c <UTIL_TIMER_IRQ_Handler+0xc8>
 800b720:	4b13      	ldr	r3, [pc, #76]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0d7      	beq.n	800b6da <UTIL_TIMER_IRQ_Handler+0x66>
 800b72a:	4b11      	ldr	r3, [pc, #68]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681c      	ldr	r4, [r3, #0]
 800b730:	4b0e      	ldr	r3, [pc, #56]	; (800b76c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	4798      	blx	r3
 800b736:	4603      	mov	r3, r0
 800b738:	429c      	cmp	r4, r3
 800b73a:	d3ce      	bcc.n	800b6da <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b73c:	4b0c      	ldr	r3, [pc, #48]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d009      	beq.n	800b758 <UTIL_TIMER_IRQ_Handler+0xe4>
 800b744:	4b0a      	ldr	r3, [pc, #40]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	7a1b      	ldrb	r3, [r3, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d104      	bne.n	800b758 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800b74e:	4b08      	ldr	r3, [pc, #32]	; (800b770 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4618      	mov	r0, r3
 800b754:	f000 f858 	bl	800b808 <TimerSetTimeout>
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f383 8810 	msr	PRIMASK, r3
}
 800b762:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800b764:	bf00      	nop
 800b766:	3724      	adds	r7, #36	; 0x24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd90      	pop	{r4, r7, pc}
 800b76c:	0800c1d0 	.word	0x0800c1d0
 800b770:	20000574 	.word	0x20000574

0800b774 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b77a:	4b06      	ldr	r3, [pc, #24]	; (800b794 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	4798      	blx	r3
 800b780:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b782:	4b04      	ldr	r3, [pc, #16]	; (800b794 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	4798      	blx	r3
 800b78a:	4603      	mov	r3, r0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	0800c1d0 	.word	0x0800c1d0

0800b798 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b7a0:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <UTIL_TIMER_GetElapsedTime+0x34>)
 800b7a2:	69db      	ldr	r3, [r3, #28]
 800b7a4:	4798      	blx	r3
 800b7a6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b7a8:	4b08      	ldr	r3, [pc, #32]	; (800b7cc <UTIL_TIMER_GetElapsedTime+0x34>)
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	4798      	blx	r3
 800b7b0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b7b2:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <UTIL_TIMER_GetElapsedTime+0x34>)
 800b7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b6:	68f9      	ldr	r1, [r7, #12]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	1a8a      	subs	r2, r1, r2
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4798      	blx	r3
 800b7c0:	4603      	mov	r3, r0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	0800c1d0 	.word	0x0800c1d0

0800b7d0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <TimerExists+0x34>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b7de:	e008      	b.n	800b7f2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d101      	bne.n	800b7ec <TimerExists+0x1c>
    {
      return true;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e006      	b.n	800b7fa <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1f3      	bne.n	800b7e0 <TimerExists+0x10>
  }
  return false;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr
 800b804:	20000574 	.word	0x20000574

0800b808 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b808:	b590      	push	{r4, r7, lr}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b810:	4b11      	ldr	r3, [pc, #68]	; (800b858 <TimerSetTimeout+0x50>)
 800b812:	6a1b      	ldr	r3, [r3, #32]
 800b814:	4798      	blx	r3
 800b816:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681c      	ldr	r4, [r3, #0]
 800b822:	4b0d      	ldr	r3, [pc, #52]	; (800b858 <TimerSetTimeout+0x50>)
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	4798      	blx	r3
 800b828:	4602      	mov	r2, r0
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	4413      	add	r3, r2
 800b82e:	429c      	cmp	r4, r3
 800b830:	d207      	bcs.n	800b842 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b832:	4b09      	ldr	r3, [pc, #36]	; (800b858 <TimerSetTimeout+0x50>)
 800b834:	699b      	ldr	r3, [r3, #24]
 800b836:	4798      	blx	r3
 800b838:	4602      	mov	r2, r0
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	441a      	add	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b842:	4b05      	ldr	r3, [pc, #20]	; (800b858 <TimerSetTimeout+0x50>)
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	6812      	ldr	r2, [r2, #0]
 800b84a:	4610      	mov	r0, r2
 800b84c:	4798      	blx	r3
}
 800b84e:	bf00      	nop
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	bd90      	pop	{r4, r7, pc}
 800b856:	bf00      	nop
 800b858:	0800c1d0 	.word	0x0800c1d0

0800b85c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b864:	4b14      	ldr	r3, [pc, #80]	; (800b8b8 <TimerInsertTimer+0x5c>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b86a:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <TimerInsertTimer+0x5c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	695b      	ldr	r3, [r3, #20]
 800b870:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b872:	e012      	b.n	800b89a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d905      	bls.n	800b88c <TimerInsertTimer+0x30>
    {
        cur = next;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	60bb      	str	r3, [r7, #8]
 800b88a:	e006      	b.n	800b89a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	615a      	str	r2, [r3, #20]
        return;
 800b898:	e009      	b.n	800b8ae <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e8      	bne.n	800b874 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	615a      	str	r2, [r3, #20]
}
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bc80      	pop	{r7}
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	20000574 	.word	0x20000574

0800b8bc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b8c4:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <TimerInsertNewHeadTimer+0x38>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b8dc:	4a05      	ldr	r2, [pc, #20]	; (800b8f4 <TimerInsertNewHeadTimer+0x38>)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b8e2:	4b04      	ldr	r3, [pc, #16]	; (800b8f4 <TimerInsertNewHeadTimer+0x38>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff ff8e 	bl	800b808 <TimerSetTimeout>
}
 800b8ec:	bf00      	nop
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	20000574 	.word	0x20000574

0800b8f8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800b8fc:	2218      	movs	r2, #24
 800b8fe:	2100      	movs	r1, #0
 800b900:	4807      	ldr	r0, [pc, #28]	; (800b920 <UTIL_ADV_TRACE_Init+0x28>)
 800b902:	f7ff f9ee 	bl	800ace2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800b906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b90a:	2100      	movs	r1, #0
 800b90c:	4805      	ldr	r0, [pc, #20]	; (800b924 <UTIL_ADV_TRACE_Init+0x2c>)
 800b90e:	f7ff f9e8 	bl	800ace2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800b912:	4b05      	ldr	r3, [pc, #20]	; (800b928 <UTIL_ADV_TRACE_Init+0x30>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4805      	ldr	r0, [pc, #20]	; (800b92c <UTIL_ADV_TRACE_Init+0x34>)
 800b918:	4798      	blx	r3
 800b91a:	4603      	mov	r3, r0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20000578 	.word	0x20000578
 800b924:	20000590 	.word	0x20000590
 800b928:	0800c210 	.word	0x0800c210
 800b92c:	0800bb75 	.word	0x0800bb75

0800b930 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800b930:	b408      	push	{r3}
 800b932:	b580      	push	{r7, lr}
 800b934:	b08d      	sub	sp, #52	; 0x34
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	60b9      	str	r1, [r7, #8]
 800b93c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800b93e:	2300      	movs	r3, #0
 800b940:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800b942:	2300      	movs	r3, #0
 800b944:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800b946:	4b37      	ldr	r3, [pc, #220]	; (800ba24 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b948:	7a1b      	ldrb	r3, [r3, #8]
 800b94a:	461a      	mov	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4293      	cmp	r3, r2
 800b950:	d902      	bls.n	800b958 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800b952:	f06f 0304 	mvn.w	r3, #4
 800b956:	e05e      	b.n	800ba16 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800b958:	4b32      	ldr	r3, [pc, #200]	; (800ba24 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b95a:	68da      	ldr	r2, [r3, #12]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	4013      	ands	r3, r2
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	429a      	cmp	r2, r3
 800b964:	d002      	beq.n	800b96c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800b966:	f06f 0305 	mvn.w	r3, #5
 800b96a:	e054      	b.n	800ba16 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800b96c:	4b2d      	ldr	r3, [pc, #180]	; (800ba24 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800b97a:	4b2a      	ldr	r3, [pc, #168]	; (800ba24 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	f107 0116 	add.w	r1, r7, #22
 800b982:	f107 0218 	add.w	r2, r7, #24
 800b986:	4610      	mov	r0, r2
 800b988:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800b98a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b98e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b994:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b998:	4823      	ldr	r0, [pc, #140]	; (800ba28 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b99a:	f7ff fb43 	bl	800b024 <tiny_vsnprintf_like>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800b9a2:	f000 f9f1 	bl	800bd88 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800b9a6:	8afa      	ldrh	r2, [r7, #22]
 800b9a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9aa:	4413      	add	r3, r2
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	f107 0214 	add.w	r2, r7, #20
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 f969 	bl	800bc8c <TRACE_AllocateBufer>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c0:	d025      	beq.n	800ba0e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b9c6:	e00e      	b.n	800b9e6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800b9c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9ca:	8aba      	ldrh	r2, [r7, #20]
 800b9cc:	3330      	adds	r3, #48	; 0x30
 800b9ce:	443b      	add	r3, r7
 800b9d0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800b9d4:	4b15      	ldr	r3, [pc, #84]	; (800ba2c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b9d6:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800b9d8:	8abb      	ldrh	r3, [r7, #20]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800b9e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b9e6:	8afb      	ldrh	r3, [r7, #22]
 800b9e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d3ec      	bcc.n	800b9c8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b9ee:	8abb      	ldrh	r3, [r7, #20]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	4b0e      	ldr	r3, [pc, #56]	; (800ba2c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b9f4:	18d0      	adds	r0, r2, r3
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9fe:	f7ff fb11 	bl	800b024 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800ba02:	f000 f9df 	bl	800bdc4 <TRACE_UnLock>

    return TRACE_Send();
 800ba06:	f000 f831 	bl	800ba6c <TRACE_Send>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	e003      	b.n	800ba16 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800ba0e:	f000 f9d9 	bl	800bdc4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800ba12:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3734      	adds	r7, #52	; 0x34
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba20:	b001      	add	sp, #4
 800ba22:	4770      	bx	lr
 800ba24:	20000578 	.word	0x20000578
 800ba28:	20000790 	.word	0x20000790
 800ba2c:	20000590 	.word	0x20000590

0800ba30 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800ba38:	4a03      	ldr	r2, [pc, #12]	; (800ba48 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6053      	str	r3, [r2, #4]
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bc80      	pop	{r7}
 800ba46:	4770      	bx	lr
 800ba48:	20000578 	.word	0x20000578

0800ba4c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	4603      	mov	r3, r0
 800ba54:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800ba56:	4a04      	ldr	r2, [pc, #16]	; (800ba68 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	7213      	strb	r3, [r2, #8]
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bc80      	pop	{r7}
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	20000578 	.word	0x20000578

0800ba6c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba7a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba7e:	613b      	str	r3, [r7, #16]
  return(result);
 800ba80:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ba82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba84:	b672      	cpsid	i
}
 800ba86:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800ba88:	f000 f9ba 	bl	800be00 <TRACE_IsLocked>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d15d      	bne.n	800bb4e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800ba92:	f000 f979 	bl	800bd88 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800ba96:	4b34      	ldr	r3, [pc, #208]	; (800bb68 <TRACE_Send+0xfc>)
 800ba98:	8a1a      	ldrh	r2, [r3, #16]
 800ba9a:	4b33      	ldr	r3, [pc, #204]	; (800bb68 <TRACE_Send+0xfc>)
 800ba9c:	8a5b      	ldrh	r3, [r3, #18]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d04d      	beq.n	800bb3e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800baa2:	4b31      	ldr	r3, [pc, #196]	; (800bb68 <TRACE_Send+0xfc>)
 800baa4:	789b      	ldrb	r3, [r3, #2]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d117      	bne.n	800bada <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800baaa:	4b2f      	ldr	r3, [pc, #188]	; (800bb68 <TRACE_Send+0xfc>)
 800baac:	881a      	ldrh	r2, [r3, #0]
 800baae:	4b2e      	ldr	r3, [pc, #184]	; (800bb68 <TRACE_Send+0xfc>)
 800bab0:	8a1b      	ldrh	r3, [r3, #16]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	4b2c      	ldr	r3, [pc, #176]	; (800bb68 <TRACE_Send+0xfc>)
 800bab8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800baba:	4b2b      	ldr	r3, [pc, #172]	; (800bb68 <TRACE_Send+0xfc>)
 800babc:	2202      	movs	r2, #2
 800babe:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bac0:	4b29      	ldr	r3, [pc, #164]	; (800bb68 <TRACE_Send+0xfc>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bac6:	4b28      	ldr	r3, [pc, #160]	; (800bb68 <TRACE_Send+0xfc>)
 800bac8:	8a9b      	ldrh	r3, [r3, #20]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d105      	bne.n	800bada <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bace:	4b26      	ldr	r3, [pc, #152]	; (800bb68 <TRACE_Send+0xfc>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bad4:	4b24      	ldr	r3, [pc, #144]	; (800bb68 <TRACE_Send+0xfc>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bada:	4b23      	ldr	r3, [pc, #140]	; (800bb68 <TRACE_Send+0xfc>)
 800badc:	789b      	ldrb	r3, [r3, #2]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d115      	bne.n	800bb0e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bae2:	4b21      	ldr	r3, [pc, #132]	; (800bb68 <TRACE_Send+0xfc>)
 800bae4:	8a5a      	ldrh	r2, [r3, #18]
 800bae6:	4b20      	ldr	r3, [pc, #128]	; (800bb68 <TRACE_Send+0xfc>)
 800bae8:	8a1b      	ldrh	r3, [r3, #16]
 800baea:	429a      	cmp	r2, r3
 800baec:	d908      	bls.n	800bb00 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800baee:	4b1e      	ldr	r3, [pc, #120]	; (800bb68 <TRACE_Send+0xfc>)
 800baf0:	8a5a      	ldrh	r2, [r3, #18]
 800baf2:	4b1d      	ldr	r3, [pc, #116]	; (800bb68 <TRACE_Send+0xfc>)
 800baf4:	8a1b      	ldrh	r3, [r3, #16]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	4b1b      	ldr	r3, [pc, #108]	; (800bb68 <TRACE_Send+0xfc>)
 800bafc:	829a      	strh	r2, [r3, #20]
 800bafe:	e006      	b.n	800bb0e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bb00:	4b19      	ldr	r3, [pc, #100]	; (800bb68 <TRACE_Send+0xfc>)
 800bb02:	8a1b      	ldrh	r3, [r3, #16]
 800bb04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	4b17      	ldr	r3, [pc, #92]	; (800bb68 <TRACE_Send+0xfc>)
 800bb0c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bb0e:	4b16      	ldr	r3, [pc, #88]	; (800bb68 <TRACE_Send+0xfc>)
 800bb10:	8a1b      	ldrh	r3, [r3, #16]
 800bb12:	461a      	mov	r2, r3
 800bb14:	4b15      	ldr	r3, [pc, #84]	; (800bb6c <TRACE_Send+0x100>)
 800bb16:	4413      	add	r3, r2
 800bb18:	61bb      	str	r3, [r7, #24]
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f383 8810 	msr	PRIMASK, r3
}
 800bb24:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800bb26:	f7f4 ff6d 	bl	8000a04 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bb2a:	4b11      	ldr	r3, [pc, #68]	; (800bb70 <TRACE_Send+0x104>)
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	4a0e      	ldr	r2, [pc, #56]	; (800bb68 <TRACE_Send+0xfc>)
 800bb30:	8a92      	ldrh	r2, [r2, #20]
 800bb32:	4611      	mov	r1, r2
 800bb34:	69b8      	ldr	r0, [r7, #24]
 800bb36:	4798      	blx	r3
 800bb38:	4603      	mov	r3, r0
 800bb3a:	77fb      	strb	r3, [r7, #31]
 800bb3c:	e00d      	b.n	800bb5a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800bb3e:	f000 f941 	bl	800bdc4 <TRACE_UnLock>
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f383 8810 	msr	PRIMASK, r3
}
 800bb4c:	e005      	b.n	800bb5a <TRACE_Send+0xee>
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f383 8810 	msr	PRIMASK, r3
}
 800bb58:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800bb5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3720      	adds	r7, #32
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000578 	.word	0x20000578
 800bb6c:	20000590 	.word	0x20000590
 800bb70:	0800c210 	.word	0x0800c210

0800bb74 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb80:	f3ef 8310 	mrs	r3, PRIMASK
 800bb84:	617b      	str	r3, [r7, #20]
  return(result);
 800bb86:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bb88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb8a:	b672      	cpsid	i
}
 800bb8c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800bb8e:	4b3c      	ldr	r3, [pc, #240]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bb90:	789b      	ldrb	r3, [r3, #2]
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	d106      	bne.n	800bba4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bb96:	4b3a      	ldr	r3, [pc, #232]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bb9c:	4b38      	ldr	r3, [pc, #224]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	821a      	strh	r2, [r3, #16]
 800bba2:	e00a      	b.n	800bbba <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bba4:	4b36      	ldr	r3, [pc, #216]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bba6:	8a1a      	ldrh	r2, [r3, #16]
 800bba8:	4b35      	ldr	r3, [pc, #212]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbaa:	8a9b      	ldrh	r3, [r3, #20]
 800bbac:	4413      	add	r3, r2
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	4b32      	ldr	r3, [pc, #200]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbb8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800bbba:	4b31      	ldr	r3, [pc, #196]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbbc:	8a1a      	ldrh	r2, [r3, #16]
 800bbbe:	4b30      	ldr	r3, [pc, #192]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbc0:	8a5b      	ldrh	r3, [r3, #18]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d04d      	beq.n	800bc62 <TRACE_TxCpltCallback+0xee>
 800bbc6:	4b2e      	ldr	r3, [pc, #184]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbc8:	8adb      	ldrh	r3, [r3, #22]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d149      	bne.n	800bc62 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bbce:	4b2c      	ldr	r3, [pc, #176]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbd0:	789b      	ldrb	r3, [r3, #2]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d117      	bne.n	800bc06 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800bbd6:	4b2a      	ldr	r3, [pc, #168]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbd8:	881a      	ldrh	r2, [r3, #0]
 800bbda:	4b29      	ldr	r3, [pc, #164]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbdc:	8a1b      	ldrh	r3, [r3, #16]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	4b27      	ldr	r3, [pc, #156]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbe4:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bbe6:	4b26      	ldr	r3, [pc, #152]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbe8:	2202      	movs	r2, #2
 800bbea:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bbec:	4b24      	ldr	r3, [pc, #144]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bbf2:	4b23      	ldr	r3, [pc, #140]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbf4:	8a9b      	ldrh	r3, [r3, #20]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bbfa:	4b21      	ldr	r3, [pc, #132]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bc00:	4b1f      	ldr	r3, [pc, #124]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bc06:	4b1e      	ldr	r3, [pc, #120]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc08:	789b      	ldrb	r3, [r3, #2]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d115      	bne.n	800bc3a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bc0e:	4b1c      	ldr	r3, [pc, #112]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc10:	8a5a      	ldrh	r2, [r3, #18]
 800bc12:	4b1b      	ldr	r3, [pc, #108]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc14:	8a1b      	ldrh	r3, [r3, #16]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d908      	bls.n	800bc2c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bc1a:	4b19      	ldr	r3, [pc, #100]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc1c:	8a5a      	ldrh	r2, [r3, #18]
 800bc1e:	4b18      	ldr	r3, [pc, #96]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc20:	8a1b      	ldrh	r3, [r3, #16]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	4b16      	ldr	r3, [pc, #88]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc28:	829a      	strh	r2, [r3, #20]
 800bc2a:	e006      	b.n	800bc3a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bc2c:	4b14      	ldr	r3, [pc, #80]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc2e:	8a1b      	ldrh	r3, [r3, #16]
 800bc30:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	4b12      	ldr	r3, [pc, #72]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc38:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bc3a:	4b11      	ldr	r3, [pc, #68]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc3c:	8a1b      	ldrh	r3, [r3, #16]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	4b10      	ldr	r3, [pc, #64]	; (800bc84 <TRACE_TxCpltCallback+0x110>)
 800bc42:	4413      	add	r3, r2
 800bc44:	61fb      	str	r3, [r7, #28]
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	f383 8810 	msr	PRIMASK, r3
}
 800bc50:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bc52:	4b0d      	ldr	r3, [pc, #52]	; (800bc88 <TRACE_TxCpltCallback+0x114>)
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	4a0a      	ldr	r2, [pc, #40]	; (800bc80 <TRACE_TxCpltCallback+0x10c>)
 800bc58:	8a92      	ldrh	r2, [r2, #20]
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	69f8      	ldr	r0, [r7, #28]
 800bc5e:	4798      	blx	r3
 800bc60:	e00a      	b.n	800bc78 <TRACE_TxCpltCallback+0x104>
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f383 8810 	msr	PRIMASK, r3
}
 800bc6c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800bc6e:	f7f4 fed1 	bl	8000a14 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800bc72:	f000 f8a7 	bl	800bdc4 <TRACE_UnLock>
  }
}
 800bc76:	bf00      	nop
 800bc78:	bf00      	nop
 800bc7a:	3720      	adds	r7, #32
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	20000578 	.word	0x20000578
 800bc84:	20000590 	.word	0x20000590
 800bc88:	0800c210 	.word	0x0800c210

0800bc8c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b087      	sub	sp, #28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	6039      	str	r1, [r7, #0]
 800bc96:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800bc98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc9c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bca2:	60fb      	str	r3, [r7, #12]
  return(result);
 800bca4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bca8:	b672      	cpsid	i
}
 800bcaa:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800bcac:	4b35      	ldr	r3, [pc, #212]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcae:	8a5a      	ldrh	r2, [r3, #18]
 800bcb0:	4b34      	ldr	r3, [pc, #208]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcb2:	8a1b      	ldrh	r3, [r3, #16]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d11b      	bne.n	800bcf0 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bcb8:	4b32      	ldr	r3, [pc, #200]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcba:	8a5b      	ldrh	r3, [r3, #18]
 800bcbc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bcc0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800bcc2:	88fa      	ldrh	r2, [r7, #6]
 800bcc4:	8afb      	ldrh	r3, [r7, #22]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d33a      	bcc.n	800bd40 <TRACE_AllocateBufer+0xb4>
 800bcca:	4b2e      	ldr	r3, [pc, #184]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bccc:	8a1b      	ldrh	r3, [r3, #16]
 800bcce:	88fa      	ldrh	r2, [r7, #6]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d235      	bcs.n	800bd40 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bcd4:	4b2b      	ldr	r3, [pc, #172]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bcda:	4b2a      	ldr	r3, [pc, #168]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcdc:	8a5a      	ldrh	r2, [r3, #18]
 800bcde:	4b29      	ldr	r3, [pc, #164]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bce0:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bce2:	4b28      	ldr	r3, [pc, #160]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bce4:	8a1b      	ldrh	r3, [r3, #16]
 800bce6:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bce8:	4b26      	ldr	r3, [pc, #152]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	825a      	strh	r2, [r3, #18]
 800bcee:	e027      	b.n	800bd40 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bcf0:	4b24      	ldr	r3, [pc, #144]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcf2:	8a5a      	ldrh	r2, [r3, #18]
 800bcf4:	4b23      	ldr	r3, [pc, #140]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcf6:	8a1b      	ldrh	r3, [r3, #16]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d91b      	bls.n	800bd34 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bcfc:	4b21      	ldr	r3, [pc, #132]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bcfe:	8a5b      	ldrh	r3, [r3, #18]
 800bd00:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd04:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800bd06:	88fa      	ldrh	r2, [r7, #6]
 800bd08:	8afb      	ldrh	r3, [r7, #22]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d318      	bcc.n	800bd40 <TRACE_AllocateBufer+0xb4>
 800bd0e:	4b1d      	ldr	r3, [pc, #116]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd10:	8a1b      	ldrh	r3, [r3, #16]
 800bd12:	88fa      	ldrh	r2, [r7, #6]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d213      	bcs.n	800bd40 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bd18:	4b1a      	ldr	r3, [pc, #104]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bd1e:	4b19      	ldr	r3, [pc, #100]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd20:	8a5a      	ldrh	r2, [r3, #18]
 800bd22:	4b18      	ldr	r3, [pc, #96]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd24:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bd26:	4b17      	ldr	r3, [pc, #92]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd28:	8a1b      	ldrh	r3, [r3, #16]
 800bd2a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bd2c:	4b15      	ldr	r3, [pc, #84]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	825a      	strh	r2, [r3, #18]
 800bd32:	e005      	b.n	800bd40 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800bd34:	4b13      	ldr	r3, [pc, #76]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd36:	8a1a      	ldrh	r2, [r3, #16]
 800bd38:	4b12      	ldr	r3, [pc, #72]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd3a:	8a5b      	ldrh	r3, [r3, #18]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800bd40:	8afa      	ldrh	r2, [r7, #22]
 800bd42:	88fb      	ldrh	r3, [r7, #6]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d90f      	bls.n	800bd68 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800bd48:	4b0e      	ldr	r3, [pc, #56]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd4a:	8a5a      	ldrh	r2, [r3, #18]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bd50:	4b0c      	ldr	r3, [pc, #48]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd52:	8a5a      	ldrh	r2, [r3, #18]
 800bd54:	88fb      	ldrh	r3, [r7, #6]
 800bd56:	4413      	add	r3, r2
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	4b08      	ldr	r3, [pc, #32]	; (800bd84 <TRACE_AllocateBufer+0xf8>)
 800bd62:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	82bb      	strh	r3, [r7, #20]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	f383 8810 	msr	PRIMASK, r3
}
 800bd72:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800bd74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	371c      	adds	r7, #28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bc80      	pop	{r7}
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	20000578 	.word	0x20000578

0800bd88 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd8e:	f3ef 8310 	mrs	r3, PRIMASK
 800bd92:	607b      	str	r3, [r7, #4]
  return(result);
 800bd94:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bd96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd98:	b672      	cpsid	i
}
 800bd9a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800bd9c:	4b08      	ldr	r3, [pc, #32]	; (800bdc0 <TRACE_Lock+0x38>)
 800bd9e:	8adb      	ldrh	r3, [r3, #22]
 800bda0:	3301      	adds	r3, #1
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <TRACE_Lock+0x38>)
 800bda6:	82da      	strh	r2, [r3, #22]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	f383 8810 	msr	PRIMASK, r3
}
 800bdb2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bdb4:	bf00      	nop
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bc80      	pop	{r7}
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	20000578 	.word	0x20000578

0800bdc4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdca:	f3ef 8310 	mrs	r3, PRIMASK
 800bdce:	607b      	str	r3, [r7, #4]
  return(result);
 800bdd0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bdd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdd4:	b672      	cpsid	i
}
 800bdd6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800bdd8:	4b08      	ldr	r3, [pc, #32]	; (800bdfc <TRACE_UnLock+0x38>)
 800bdda:	8adb      	ldrh	r3, [r3, #22]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	4b06      	ldr	r3, [pc, #24]	; (800bdfc <TRACE_UnLock+0x38>)
 800bde2:	82da      	strh	r2, [r3, #22]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	f383 8810 	msr	PRIMASK, r3
}
 800bdee:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bc80      	pop	{r7}
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	20000578 	.word	0x20000578

0800be00 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800be04:	4b05      	ldr	r3, [pc, #20]	; (800be1c <TRACE_IsLocked+0x1c>)
 800be06:	8adb      	ldrh	r3, [r3, #22]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bf14      	ite	ne
 800be0c:	2301      	movne	r3, #1
 800be0e:	2300      	moveq	r3, #0
 800be10:	b2db      	uxtb	r3, r3
}
 800be12:	4618      	mov	r0, r3
 800be14:	46bd      	mov	sp, r7
 800be16:	bc80      	pop	{r7}
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	20000578 	.word	0x20000578

0800be20 <memset>:
 800be20:	4402      	add	r2, r0
 800be22:	4603      	mov	r3, r0
 800be24:	4293      	cmp	r3, r2
 800be26:	d100      	bne.n	800be2a <memset+0xa>
 800be28:	4770      	bx	lr
 800be2a:	f803 1b01 	strb.w	r1, [r3], #1
 800be2e:	e7f9      	b.n	800be24 <memset+0x4>

0800be30 <strncmp>:
 800be30:	b510      	push	{r4, lr}
 800be32:	b16a      	cbz	r2, 800be50 <strncmp+0x20>
 800be34:	3901      	subs	r1, #1
 800be36:	1884      	adds	r4, r0, r2
 800be38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800be40:	429a      	cmp	r2, r3
 800be42:	d103      	bne.n	800be4c <strncmp+0x1c>
 800be44:	42a0      	cmp	r0, r4
 800be46:	d001      	beq.n	800be4c <strncmp+0x1c>
 800be48:	2a00      	cmp	r2, #0
 800be4a:	d1f5      	bne.n	800be38 <strncmp+0x8>
 800be4c:	1ad0      	subs	r0, r2, r3
 800be4e:	bd10      	pop	{r4, pc}
 800be50:	4610      	mov	r0, r2
 800be52:	e7fc      	b.n	800be4e <strncmp+0x1e>

0800be54 <__libc_init_array>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	4d0d      	ldr	r5, [pc, #52]	; (800be8c <__libc_init_array+0x38>)
 800be58:	4c0d      	ldr	r4, [pc, #52]	; (800be90 <__libc_init_array+0x3c>)
 800be5a:	1b64      	subs	r4, r4, r5
 800be5c:	10a4      	asrs	r4, r4, #2
 800be5e:	2600      	movs	r6, #0
 800be60:	42a6      	cmp	r6, r4
 800be62:	d109      	bne.n	800be78 <__libc_init_array+0x24>
 800be64:	4d0b      	ldr	r5, [pc, #44]	; (800be94 <__libc_init_array+0x40>)
 800be66:	4c0c      	ldr	r4, [pc, #48]	; (800be98 <__libc_init_array+0x44>)
 800be68:	f000 f826 	bl	800beb8 <_init>
 800be6c:	1b64      	subs	r4, r4, r5
 800be6e:	10a4      	asrs	r4, r4, #2
 800be70:	2600      	movs	r6, #0
 800be72:	42a6      	cmp	r6, r4
 800be74:	d105      	bne.n	800be82 <__libc_init_array+0x2e>
 800be76:	bd70      	pop	{r4, r5, r6, pc}
 800be78:	f855 3b04 	ldr.w	r3, [r5], #4
 800be7c:	4798      	blx	r3
 800be7e:	3601      	adds	r6, #1
 800be80:	e7ee      	b.n	800be60 <__libc_init_array+0xc>
 800be82:	f855 3b04 	ldr.w	r3, [r5], #4
 800be86:	4798      	blx	r3
 800be88:	3601      	adds	r6, #1
 800be8a:	e7f2      	b.n	800be72 <__libc_init_array+0x1e>
 800be8c:	0800c3a0 	.word	0x0800c3a0
 800be90:	0800c3a0 	.word	0x0800c3a0
 800be94:	0800c3a0 	.word	0x0800c3a0
 800be98:	0800c3a4 	.word	0x0800c3a4

0800be9c <memcpy>:
 800be9c:	440a      	add	r2, r1
 800be9e:	4291      	cmp	r1, r2
 800bea0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bea4:	d100      	bne.n	800bea8 <memcpy+0xc>
 800bea6:	4770      	bx	lr
 800bea8:	b510      	push	{r4, lr}
 800beaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beb2:	4291      	cmp	r1, r2
 800beb4:	d1f9      	bne.n	800beaa <memcpy+0xe>
 800beb6:	bd10      	pop	{r4, pc}

0800beb8 <_init>:
 800beb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beba:	bf00      	nop
 800bebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bebe:	bc08      	pop	{r3}
 800bec0:	469e      	mov	lr, r3
 800bec2:	4770      	bx	lr

0800bec4 <_fini>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	bf00      	nop
 800bec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beca:	bc08      	pop	{r3}
 800becc:	469e      	mov	lr, r3
 800bece:	4770      	bx	lr
