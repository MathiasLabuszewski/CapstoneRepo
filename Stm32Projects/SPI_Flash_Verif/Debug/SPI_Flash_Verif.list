
SPI_Flash_Verif.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003378  08003378  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003378  08003378  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003378  08003378  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800337c  0800337c  0001337c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800338c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800338c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084d8  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001951  00000000  00000000  00028551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  00029ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bb  00000000  00000000  0002aa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a26  00000000  00000000  0002b313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a190  00000000  00000000  00043d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000999c9  00000000  00000000  0004dec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fac  00000000  00000000  000e7894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000ea840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	080032a0 	.word	0x080032a0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	080032a0 	.word	0x080032a0

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:
void SPI_Flash_DataIntegrityTest(void);



int main(void)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b092      	sub	sp, #72	; 0x48
 80001ac:	af00      	add	r7, sp, #0
    HAL_Init();
 80001ae:	f000 fb75 	bl	800089c <HAL_Init>
    SystemClock_Config();
 80001b2:	f000 fa5f 	bl	8000674 <SystemClock_Config>
    MX_GPIO_Init();
 80001b6:	f000 fa0b 	bl	80005d0 <MX_GPIO_Init>
    MX_SPI1_Init();
 80001ba:	f000 f9d3 	bl	8000564 <MX_SPI1_Init>


  /*Set verbose LEVEL*/

    // Test 1: Basic write and read
    uint8_t writeData[] = "Hello, SPI Flash! PLEAS EWORKKKK";
 80001be:	4b19      	ldr	r3, [pc, #100]	; (8000224 <main+0x7c>)
 80001c0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80001c4:	461d      	mov	r5, r3
 80001c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ce:	682b      	ldr	r3, [r5, #0]
 80001d0:	7023      	strb	r3, [r4, #0]
    uint8_t readData[sizeof(writeData)];

    SPI_Flash_WriteEnable();
 80001d2:	f000 f82b 	bl	800022c <SPI_Flash_WriteEnable>
    SPI_Flash_Write(0x0000, writeData, sizeof(writeData));
 80001d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001da:	2221      	movs	r2, #33	; 0x21
 80001dc:	4619      	mov	r1, r3
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f844 	bl	800026c <SPI_Flash_Write>
    SPI_Flash_Read(0x0000, readData, sizeof(readData));
 80001e4:	463b      	mov	r3, r7
 80001e6:	2221      	movs	r2, #33	; 0x21
 80001e8:	4619      	mov	r1, r3
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f87e 	bl	80002ec <SPI_Flash_Read>

    if (memcmp(writeData, readData, sizeof(writeData)) == 0)
 80001f0:	4639      	mov	r1, r7
 80001f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001f6:	2221      	movs	r2, #33	; 0x21
 80001f8:	4618      	mov	r0, r3
 80001fa:	f003 f815 	bl	8003228 <memcmp>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d105      	bne.n	8000210 <main+0x68>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Turn on LED (success)
 8000204:	2201      	movs	r2, #1
 8000206:	2120      	movs	r1, #32
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <main+0x80>)
 800020a:	f000 fdff 	bl	8000e0c <HAL_GPIO_WritePin>
 800020e:	e004      	b.n	800021a <main+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off LED (failure)
 8000210:	2200      	movs	r2, #0
 8000212:	2120      	movs	r1, #32
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <main+0x80>)
 8000216:	f000 fdf9 	bl	8000e0c <HAL_GPIO_WritePin>
    }

    // Test 2: Speed test
    SPI_Flash_SpeedTest();
 800021a:	f000 f8ff 	bl	800041c <SPI_Flash_SpeedTest>

    // Test 3: Data integrity test
    SPI_Flash_DataIntegrityTest();
 800021e:	f000 f94f 	bl	80004c0 <SPI_Flash_DataIntegrityTest>

    while (1)
 8000222:	e7fe      	b.n	8000222 <main+0x7a>
 8000224:	080032b8 	.word	0x080032b8
 8000228:	48000400 	.word	0x48000400

0800022c <SPI_Flash_WriteEnable>:
        // Main loop
    }
}

void SPI_Flash_WriteEnable(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x06; // Write Enable command
 8000232:	2306      	movs	r3, #6
 8000234:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Select the flash
 8000236:	2200      	movs	r2, #0
 8000238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023c:	4809      	ldr	r0, [pc, #36]	; (8000264 <SPI_Flash_WriteEnable+0x38>)
 800023e:	f000 fde5 	bl	8000e0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000242:	1df9      	adds	r1, r7, #7
 8000244:	f04f 33ff 	mov.w	r3, #4294967295
 8000248:	2201      	movs	r2, #1
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <SPI_Flash_WriteEnable+0x3c>)
 800024c:	f001 ff6a 	bl	8002124 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Deselect the flash
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000256:	4803      	ldr	r0, [pc, #12]	; (8000264 <SPI_Flash_WriteEnable+0x38>)
 8000258:	f000 fdd8 	bl	8000e0c <HAL_GPIO_WritePin>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	48000400 	.word	0x48000400
 8000268:	20000028 	.word	0x20000028

0800026c <SPI_Flash_Write>:

void SPI_Flash_Write(uint32_t address, uint8_t *data, uint16_t len)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	4613      	mov	r3, r2
 8000278:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = 0x02; // Page Program command
 800027a:	2302      	movs	r3, #2
 800027c:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	0c1b      	lsrs	r3, r3, #16
 8000282:	b2db      	uxtb	r3, r3
 8000284:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	0a1b      	lsrs	r3, r3, #8
 800028a:	b2db      	uxtb	r3, r3
 800028c:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	b2db      	uxtb	r3, r3
 8000292:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Select the flash
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029a:	4812      	ldr	r0, [pc, #72]	; (80002e4 <SPI_Flash_Write+0x78>)
 800029c:	f000 fdb6 	bl	8000e0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 80002a0:	f107 0114 	add.w	r1, r7, #20
 80002a4:	f04f 33ff 	mov.w	r3, #4294967295
 80002a8:	2204      	movs	r2, #4
 80002aa:	480f      	ldr	r0, [pc, #60]	; (80002e8 <SPI_Flash_Write+0x7c>)
 80002ac:	f001 ff3a 	bl	8002124 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
 80002b0:	88fa      	ldrh	r2, [r7, #6]
 80002b2:	f04f 33ff 	mov.w	r3, #4294967295
 80002b6:	68b9      	ldr	r1, [r7, #8]
 80002b8:	480b      	ldr	r0, [pc, #44]	; (80002e8 <SPI_Flash_Write+0x7c>)
 80002ba:	f001 ff33 	bl	8002124 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Deselect the flash
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <SPI_Flash_Write+0x78>)
 80002c6:	f000 fda1 	bl	8000e0c <HAL_GPIO_WritePin>

    // Wait for the write to complete
    while (SPI_Flash_ReadStatusRegister() & 0x01);
 80002ca:	bf00      	nop
 80002cc:	f000 f846 	bl	800035c <SPI_Flash_ReadStatusRegister>
 80002d0:	4603      	mov	r3, r0
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f8      	bne.n	80002cc <SPI_Flash_Write+0x60>
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	48000400 	.word	0x48000400
 80002e8:	20000028 	.word	0x20000028

080002ec <SPI_Flash_Read>:

void SPI_Flash_Read(uint32_t address, uint8_t *data, uint16_t len)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	4613      	mov	r3, r2
 80002f8:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = 0x03; // Read Data command
 80002fa:	2303      	movs	r3, #3
 80002fc:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	0c1b      	lsrs	r3, r3, #16
 8000302:	b2db      	uxtb	r3, r3
 8000304:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	b2db      	uxtb	r3, r3
 800030c:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Select the flash
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031a:	480e      	ldr	r0, [pc, #56]	; (8000354 <SPI_Flash_Read+0x68>)
 800031c:	f000 fd76 	bl	8000e0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 8000320:	f107 0114 	add.w	r1, r7, #20
 8000324:	f04f 33ff 	mov.w	r3, #4294967295
 8000328:	2204      	movs	r2, #4
 800032a:	480b      	ldr	r0, [pc, #44]	; (8000358 <SPI_Flash_Read+0x6c>)
 800032c:	f001 fefa 	bl	8002124 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 8000330:	88fa      	ldrh	r2, [r7, #6]
 8000332:	f04f 33ff 	mov.w	r3, #4294967295
 8000336:	68b9      	ldr	r1, [r7, #8]
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <SPI_Flash_Read+0x6c>)
 800033a:	f002 f88a 	bl	8002452 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Deselect the flash
 800033e:	2201      	movs	r2, #1
 8000340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000344:	4803      	ldr	r0, [pc, #12]	; (8000354 <SPI_Flash_Read+0x68>)
 8000346:	f000 fd61 	bl	8000e0c <HAL_GPIO_WritePin>
}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	48000400 	.word	0x48000400
 8000358:	20000028 	.word	0x20000028

0800035c <SPI_Flash_ReadStatusRegister>:

uint8_t SPI_Flash_ReadStatusRegister(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x05; // Read Status Register command
 8000362:	2305      	movs	r3, #5
 8000364:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Select the flash
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <SPI_Flash_ReadStatusRegister+0x48>)
 800036e:	f000 fd4d 	bl	8000e0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000372:	1df9      	adds	r1, r7, #7
 8000374:	f04f 33ff 	mov.w	r3, #4294967295
 8000378:	2201      	movs	r2, #1
 800037a:	480b      	ldr	r0, [pc, #44]	; (80003a8 <SPI_Flash_ReadStatusRegister+0x4c>)
 800037c:	f001 fed2 	bl	8002124 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &status, 1, HAL_MAX_DELAY);
 8000380:	1db9      	adds	r1, r7, #6
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	2201      	movs	r2, #1
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <SPI_Flash_ReadStatusRegister+0x4c>)
 800038a:	f002 f862 	bl	8002452 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Deselect the flash
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000394:	4803      	ldr	r0, [pc, #12]	; (80003a4 <SPI_Flash_ReadStatusRegister+0x48>)
 8000396:	f000 fd39 	bl	8000e0c <HAL_GPIO_WritePin>

    return status;
 800039a:	79bb      	ldrb	r3, [r7, #6]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	48000400 	.word	0x48000400
 80003a8:	20000028 	.word	0x20000028

080003ac <SPI_Flash_EraseSector>:

void SPI_Flash_EraseSector(uint32_t address)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    cmd[0] = 0x20; // Sector Erase command
 80003b4:	2320      	movs	r3, #32
 80003b6:	733b      	strb	r3, [r7, #12]
    cmd[1] = (address >> 16) & 0xFF;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	0c1b      	lsrs	r3, r3, #16
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	737b      	strb	r3, [r7, #13]
    cmd[2] = (address >> 8) & 0xFF;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	0a1b      	lsrs	r3, r3, #8
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	73bb      	strb	r3, [r7, #14]
    cmd[3] = address & 0xFF;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	73fb      	strb	r3, [r7, #15]

    SPI_Flash_WriteEnable();
 80003ce:	f7ff ff2d 	bl	800022c <SPI_Flash_WriteEnable>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Select the flash
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d8:	480e      	ldr	r0, [pc, #56]	; (8000414 <SPI_Flash_EraseSector+0x68>)
 80003da:	f000 fd17 	bl	8000e0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 80003de:	f107 010c 	add.w	r1, r7, #12
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295
 80003e6:	2204      	movs	r2, #4
 80003e8:	480b      	ldr	r0, [pc, #44]	; (8000418 <SPI_Flash_EraseSector+0x6c>)
 80003ea:	f001 fe9b 	bl	8002124 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Deselect the flash
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f4:	4807      	ldr	r0, [pc, #28]	; (8000414 <SPI_Flash_EraseSector+0x68>)
 80003f6:	f000 fd09 	bl	8000e0c <HAL_GPIO_WritePin>

    // Wait for the erase to complete
    while (SPI_Flash_ReadStatusRegister() & 0x01);
 80003fa:	bf00      	nop
 80003fc:	f7ff ffae 	bl	800035c <SPI_Flash_ReadStatusRegister>
 8000400:	4603      	mov	r3, r0
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1f8      	bne.n	80003fc <SPI_Flash_EraseSector+0x50>
}
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	48000400 	.word	0x48000400
 8000418:	20000028 	.word	0x20000028

0800041c <SPI_Flash_SpeedTest>:

void SPI_Flash_SpeedTest(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b0c6      	sub	sp, #280	; 0x118
 8000420:	af00      	add	r7, sp, #0
    uint8_t buffer[256];
    uint32_t startTime, endTime;

    // Fill buffer with test data
    for (int i = 0; i < sizeof(buffer); i++)
 8000422:	2300      	movs	r3, #0
 8000424:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000428:	e010      	b.n	800044c <SPI_Flash_SpeedTest+0x30>
    {
        buffer[i] = i & 0xFF;
 800042a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800042e:	b2d9      	uxtb	r1, r3
 8000430:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000434:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8000438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800043c:	4413      	add	r3, r2
 800043e:	460a      	mov	r2, r1
 8000440:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(buffer); i++)
 8000442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000446:	3301      	adds	r3, #1
 8000448:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800044c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000450:	2bff      	cmp	r3, #255	; 0xff
 8000452:	d9ea      	bls.n	800042a <SPI_Flash_SpeedTest+0xe>
    }

    // Measure write speed
    startTime = HAL_GetTick();
 8000454:	f000 fa8e 	bl	8000974 <HAL_GetTick>
 8000458:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    SPI_Flash_WriteEnable();
 800045c:	f7ff fee6 	bl	800022c <SPI_Flash_WriteEnable>
    SPI_Flash_Write(0x1000, buffer, sizeof(buffer));
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000466:	4619      	mov	r1, r3
 8000468:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800046c:	f7ff fefe 	bl	800026c <SPI_Flash_Write>
    endTime = HAL_GetTick();
 8000470:	f000 fa80 	bl	8000974 <HAL_GetTick>
 8000474:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    uint32_t writeT = endTime - startTime;
 8000478:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800047c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    // Measure read speed
    startTime = HAL_GetTick();
 8000486:	f000 fa75 	bl	8000974 <HAL_GetTick>
 800048a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    SPI_Flash_Read(0x1000, buffer, sizeof(buffer));
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000494:	4619      	mov	r1, r3
 8000496:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800049a:	f7ff ff27 	bl	80002ec <SPI_Flash_Read>
    endTime = HAL_GetTick();
 800049e:	f000 fa69 	bl	8000974 <HAL_GetTick>
 80004a2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    uint32_t readT =  endTime - startTime;
 80004a6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80004aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
}
 80004b4:	bf00      	nop
 80004b6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <SPI_Flash_DataIntegrityTest>:

void SPI_Flash_DataIntegrityTest(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80004c6:	af00      	add	r7, sp, #0
    uint8_t writeBuffer[512];
    uint8_t readBuffer[512];

    // Fill write buffer with test data
    for (int i = 0; i < sizeof(writeBuffer); i++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80004ce:	e010      	b.n	80004f2 <SPI_Flash_DataIntegrityTest+0x32>
    {
        writeBuffer[i] = i & 0xFF;
 80004d0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80004d4:	b2d9      	uxtb	r1, r3
 80004d6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80004da:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80004de:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80004e2:	4413      	add	r3, r2
 80004e4:	460a      	mov	r2, r1
 80004e6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(writeBuffer); i++)
 80004e8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80004ec:	3301      	adds	r3, #1
 80004ee:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80004f2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80004f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004fa:	d3e9      	bcc.n	80004d0 <SPI_Flash_DataIntegrityTest+0x10>
    }

    // Erase sector before writing
    SPI_Flash_EraseSector(0x2000);
 80004fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000500:	f7ff ff54 	bl	80003ac <SPI_Flash_EraseSector>

    // Write data
    SPI_Flash_WriteEnable();
 8000504:	f7ff fe92 	bl	800022c <SPI_Flash_WriteEnable>
    SPI_Flash_Write(0x2000, writeBuffer, sizeof(writeBuffer));
 8000508:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800050c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000510:	4619      	mov	r1, r3
 8000512:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000516:	f7ff fea9 	bl	800026c <SPI_Flash_Write>

    // Read data back
    SPI_Flash_Read(0x2000, readBuffer, sizeof(readBuffer));
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000520:	4619      	mov	r1, r3
 8000522:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000526:	f7ff fee1 	bl	80002ec <SPI_Flash_Read>

    // Verify data integrity
    if (memcmp(writeBuffer, readBuffer, sizeof(writeBuffer)) == 0)
 800052a:	1d39      	adds	r1, r7, #4
 800052c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8000530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000534:	4618      	mov	r0, r3
 8000536:	f002 fe77 	bl	8003228 <memcmp>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d105      	bne.n	800054c <SPI_Flash_DataIntegrityTest+0x8c>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Turn on LED (success)
 8000540:	2201      	movs	r2, #1
 8000542:	2120      	movs	r1, #32
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <SPI_Flash_DataIntegrityTest+0xa0>)
 8000546:	f000 fc61 	bl	8000e0c <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off LED (failure)
    }
}
 800054a:	e004      	b.n	8000556 <SPI_Flash_DataIntegrityTest+0x96>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn off LED (failure)
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <SPI_Flash_DataIntegrityTest+0xa0>)
 8000552:	f000 fc5b 	bl	8000e0c <HAL_GPIO_WritePin>
}
 8000556:	bf00      	nop
 8000558:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	48000400 	.word	0x48000400

08000564 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_SPI1_Init+0x64>)
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <MX_SPI1_Init+0x68>)
 800056c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_SPI1_Init+0x64>)
 8000570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000574:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_SPI1_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_SPI1_Init+0x64>)
 800057e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000582:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_SPI1_Init+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_SPI1_Init+0x64>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_SPI1_Init+0x64>)
 8000592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000596:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_SPI1_Init+0x64>)
 800059a:	2238      	movs	r2, #56	; 0x38
 800059c:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_SPI1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_SPI1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <MX_SPI1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MX_SPI1_Init+0x64>)
 80005b2:	2207      	movs	r2, #7
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_SPI1_Init+0x64>)
 80005b8:	f001 fce0 	bl	8001f7c <HAL_SPI_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d000      	beq.n	80005c4 <MX_SPI1_Init+0x60>
    {
        // Initialization Error
        while(1);
 80005c2:	e7fe      	b.n	80005c2 <MX_SPI1_Init+0x5e>
    }
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000028 	.word	0x20000028
 80005cc:	40013000 	.word	0x40013000

080005d0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	2002      	movs	r0, #2
 80005e6:	f7ff fdc7 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fdc4 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

    // Configure NSS pin (PB9)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	481a      	ldr	r0, [pc, #104]	; (8000670 <MX_GPIO_Init+0xa0>)
 8000608:	f000 faa0 	bl	8000b4c <HAL_GPIO_Init>

    // Configure LED pin (PB5)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800060c:	2320      	movs	r3, #32
 800060e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <MX_GPIO_Init+0xa0>)
 8000622:	f000 fa93 	bl	8000b4c <HAL_GPIO_Init>

    // Configure SPI pins
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8000626:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800062a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000638:	2305      	movs	r3, #5
 800063a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <MX_GPIO_Init+0xa0>)
 8000642:	f000 fa83 	bl	8000b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000658:	2305      	movs	r3, #5
 800065a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f000 fa72 	bl	8000b4c <HAL_GPIO_Init>
}
 8000668:	bf00      	nop
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	48000400 	.word	0x48000400

08000674 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b09a      	sub	sp, #104	; 0x68
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2248      	movs	r2, #72	; 0x48
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fde0 	bl	8003248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <SystemClock_Config+0xa0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <SystemClock_Config+0xa0>)
 80006a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <SystemClock_Config+0xa0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b6:	2320      	movs	r3, #32
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006be:	2300      	movs	r3, #0
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c2:	2360      	movs	r3, #96	; 0x60
 80006c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fe48 	bl	8001364 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006da:	f000 f81d 	bl	8000718 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006de:	234f      	movs	r3, #79	; 0x4f
 80006e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f9b3 	bl	8001a68 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000708:	f000 f806 	bl	8000718 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3768      	adds	r7, #104	; 0x68
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58000400 	.word	0x58000400

08000718 <Error_Handler>:


void Error_Handler(){
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	while(1);
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x4>

0800071e <LL_AHB2_GRP1_EnableClock>:
{
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800072c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4013      	ands	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800075c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4313      	orrs	r3, r2
 8000764:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4013      	ands	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
	...

0800078c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <HAL_SPI_MspInit+0x5c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d118      	bne.n	80007e0 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007b2:	f7ff ffcc 	bl	800074e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff ffb1 	bl	800071e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PA1     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_1;
 80007bc:	f641 0302 	movw	r3, #6146	; 0x1802
 80007c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ce:	2305      	movs	r3, #5
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f000 f9b6 	bl	8000b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40013000 	.word	0x40013000

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000832:	f000 f88d 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}

0800083a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
	...

08000848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff fff5 	bl	800083a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000876:	f002 fcef 	bl	8003258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087a:	f7ff fc95 	bl	80001a8 <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   r0, =_estack
 8000880:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800088c:	08003380 	.word	0x08003380
  ldr r2, =_sbss
 8000890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000894:	20000090 	.word	0x20000090

08000898 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 f91e 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80008ac:	f001 faa0 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_Init+0x3c>)
 80008b4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f810 	bl	80008dc <HAL_InitTick>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	e001      	b.n	80008cc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008c8:	f7ff ff59 	bl	800077e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_InitTick+0x6c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d024      	beq.n	800093a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f0:	f001 fa7e 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 80008f4:	4602      	mov	r2, r0
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_InitTick+0x6c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4619      	mov	r1, r3
 80008fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000900:	fbb3 f3f1 	udiv	r3, r3, r1
 8000904:	fbb2 f3f3 	udiv	r3, r2, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f912 	bl	8000b32 <HAL_SYSTICK_Config>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10f      	bne.n	8000934 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d809      	bhi.n	800092e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091a:	2200      	movs	r2, #0
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	f04f 30ff 	mov.w	r0, #4294967295
 8000922:	f000 f8ec 	bl	8000afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <HAL_InitTick+0x70>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e007      	b.n	800093e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e004      	b.n	800093e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e001      	b.n	800093e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_IncTick+0x1c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x20>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <HAL_IncTick+0x20>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000008 	.word	0x20000008
 8000970:	2000008c 	.word	0x2000008c

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b02      	ldr	r3, [pc, #8]	; (8000984 <HAL_GetTick+0x10>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	2000008c 	.word	0x2000008c

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	; 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff90 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff49 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff60 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff92 	bl	8000a40 <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff61 	bl	80009ec <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffb2 	bl	8000aa4 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e140      	b.n	8000dde <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8132 	beq.w	8000dd8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d005      	beq.n	8000b8c <HAL_GPIO_Init+0x40>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d130      	bne.n	8000bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	f003 0201 	and.w	r2, r3, #1
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d017      	beq.n	8000c2a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d123      	bne.n	8000c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	691a      	ldr	r2, [r3, #16]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	6939      	ldr	r1, [r7, #16]
 8000c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0203 	and.w	r2, r3, #3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 808c 	beq.w	8000dd8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc0:	4a4e      	ldr	r2, [pc, #312]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cea:	d00d      	beq.n	8000d08 <HAL_GPIO_Init+0x1bc>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a44      	ldr	r2, [pc, #272]	; (8000e00 <HAL_GPIO_Init+0x2b4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x1b8>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a43      	ldr	r2, [pc, #268]	; (8000e04 <HAL_GPIO_Init+0x2b8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d101      	bne.n	8000d00 <HAL_GPIO_Init+0x1b4>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e004      	b.n	8000d0a <HAL_GPIO_Init+0x1be>
 8000d00:	2307      	movs	r3, #7
 8000d02:	e002      	b.n	8000d0a <HAL_GPIO_Init+0x1be>
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <HAL_GPIO_Init+0x1be>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	f002 0203 	and.w	r2, r2, #3
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	4093      	lsls	r3, r2
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d1a:	4938      	ldr	r1, [pc, #224]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d4c:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d76:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d82:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000da2:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000db0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_GPIO_Init+0x2bc>)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	fa22 f303 	lsr.w	r3, r2, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f47f aeb7 	bne.w	8000b5c <HAL_GPIO_Init+0x10>
  }
}
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	371c      	adds	r7, #28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	48000400 	.word	0x48000400
 8000e04:	48000800 	.word	0x48000800
 8000e08:	58000800 	.word	0x58000800

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	58000400 	.word	0x58000400

08000e58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_PWREx_GetVoltageRange+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	58000400 	.word	0x58000400

08000e70 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e80:	d101      	bne.n	8000e86 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	58000400 	.word	0x58000400

08000e94 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ede:	d101      	bne.n	8000ee4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f38:	d101      	bne.n	8000f3e <LL_RCC_HSE_IsReady+0x18>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <LL_RCC_HSE_IsReady+0x1a>
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f92:	d101      	bne.n	8000f98 <LL_RCC_HSI_IsReady+0x18>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <LL_RCC_HSI_IsReady+0x1a>
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	061b      	lsls	r3, r3, #24
 8000fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d101      	bne.n	8000fe2 <LL_RCC_LSE_IsReady+0x18>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <LL_RCC_LSE_IsReady+0x1a>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b02      	cmp	r3, #2
 800103e:	d101      	bne.n	8001044 <LL_RCC_LSI_IsReady+0x18>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <LL_RCC_LSI_IsReady+0x1a>
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6013      	str	r3, [r2, #0]
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800106e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6013      	str	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800108a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b02      	cmp	r3, #2
 8001096:	d101      	bne.n	800109c <LL_RCC_MSI_IsReady+0x16>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <LL_RCC_MSI_IsReady+0x18>
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80010aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d101      	bne.n	80010bc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80010ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f023 0203 	bic.w	r2, r3, #3
 800112e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4313      	orrs	r3, r2
 8001136:	608b      	str	r3, [r1, #8]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 030c 	and.w	r3, r3, #12
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	608b      	str	r3, [r1, #8]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800118e:	f023 020f 	bic.w	r2, r3, #15
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119a:	4313      	orrs	r3, r2
 800119c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	608b      	str	r3, [r1, #8]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80011d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001214:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800122a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001238:	6013      	str	r3, [r2, #0]
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001254:	6013      	str	r3, [r2, #0]
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001270:	d101      	bne.n	8001276 <LL_RCC_PLL_IsReady+0x18>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_RCC_PLL_IsReady+0x1a>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	0a1b      	lsrs	r3, r3, #8
 800128c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f003 0303 	and.w	r3, r3, #3
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80012de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d101      	bne.n	80012f2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001304:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001310:	d101      	bne.n	8001316 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001332:	d101      	bne.n	8001338 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001350:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001354:	d101      	bne.n	800135a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e36f      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001376:	f7ff fee4 	bl	8001142 <LL_RCC_GetSysClkSource>
 800137a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800137c:	f7ff ffa2 	bl	80012c4 <LL_RCC_PLL_GetMainSource>
 8001380:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80c4 	beq.w	8001518 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x3e>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b0c      	cmp	r3, #12
 800139a:	d176      	bne.n	800148a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d173      	bne.n	800148a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e353      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_OscConfig+0x68>
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ca:	e006      	b.n	80013da <HAL_RCC_OscConfig+0x76>
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013da:	4293      	cmp	r3, r2
 80013dc:	d222      	bcs.n	8001424 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fd18 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e331      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fe69 	bl	80010f4 <LL_RCC_MSI_SetCalibTrimming>
 8001422:	e021      	b.n	8001468 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fe50 	bl	80010f4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fcdd 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e2f6      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001468:	f000 fcc2 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 800146c:	4603      	mov	r3, r0
 800146e:	4aa7      	ldr	r2, [pc, #668]	; (800170c <HAL_RCC_OscConfig+0x3a8>)
 8001470:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001472:	4ba7      	ldr	r3, [pc, #668]	; (8001710 <HAL_RCC_OscConfig+0x3ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fa30 	bl	80008dc <HAL_InitTick>
 800147c:	4603      	mov	r3, r0
 800147e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d047      	beq.n	8001516 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001486:	7cfb      	ldrb	r3, [r7, #19]
 8001488:	e2e5      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d02c      	beq.n	80014ec <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001492:	f7ff fddc 	bl	800104e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001496:	f7ff fa6d 	bl	8000974 <HAL_GetTick>
 800149a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800149e:	f7ff fa69 	bl	8000974 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e2d2      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80014b0:	f7ff fde9 	bl	8001086 <LL_RCC_MSI_IsReady>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f1      	beq.n	800149e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe05 	bl	80010f4 <LL_RCC_MSI_SetCalibTrimming>
 80014ea:	e015      	b.n	8001518 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ec:	f7ff fdbd 	bl	800106a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fa40 	bl	8000974 <HAL_GetTick>
 80014f4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f8:	f7ff fa3c 	bl	8000974 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e2a5      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800150a:	f7ff fdbc 	bl	8001086 <LL_RCC_MSI_IsReady>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f1      	bne.n	80014f8 <HAL_RCC_OscConfig+0x194>
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001516:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d058      	beq.n	80015d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b08      	cmp	r3, #8
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x1d2>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d108      	bne.n	8001542 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d105      	bne.n	8001542 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d14b      	bne.n	80015d6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e289      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001560:	d102      	bne.n	8001568 <HAL_RCC_OscConfig+0x204>
 8001562:	f7ff fcc4 	bl	8000eee <LL_RCC_HSE_Enable>
 8001566:	e00d      	b.n	8001584 <HAL_RCC_OscConfig+0x220>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001570:	d104      	bne.n	800157c <HAL_RCC_OscConfig+0x218>
 8001572:	f7ff fc8f 	bl	8000e94 <LL_RCC_HSE_EnableTcxo>
 8001576:	f7ff fcba 	bl	8000eee <LL_RCC_HSE_Enable>
 800157a:	e003      	b.n	8001584 <HAL_RCC_OscConfig+0x220>
 800157c:	f7ff fcc5 	bl	8000f0a <LL_RCC_HSE_Disable>
 8001580:	f7ff fc96 	bl	8000eb0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d012      	beq.n	80015b2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff f9f2 	bl	8000974 <HAL_GetTick>
 8001590:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff f9ee 	bl	8000974 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e257      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80015a6:	f7ff fcbe 	bl	8000f26 <LL_RCC_HSE_IsReady>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f1      	beq.n	8001594 <HAL_RCC_OscConfig+0x230>
 80015b0:	e011      	b.n	80015d6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff f9df 	bl	8000974 <HAL_GetTick>
 80015b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ba:	f7ff f9db 	bl	8000974 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	; 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e244      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80015cc:	f7ff fcab 	bl	8000f26 <LL_RCC_HSE_IsReady>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f1      	bne.n	80015ba <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d046      	beq.n	8001670 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x290>
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d10e      	bne.n	800160c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e22a      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fccc 	bl	8000fa2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800160a:	e031      	b.n	8001670 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d019      	beq.n	8001648 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001614:	f7ff fc98 	bl	8000f48 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff f9ac 	bl	8000974 <HAL_GetTick>
 800161c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff f9a8 	bl	8000974 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e211      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001632:	f7ff fca5 	bl	8000f80 <LL_RCC_HSI_IsReady>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f1      	beq.n	8001620 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fcae 	bl	8000fa2 <LL_RCC_HSI_SetCalibTrimming>
 8001646:	e013      	b.n	8001670 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001648:	f7ff fc8c 	bl	8000f64 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff f992 	bl	8000974 <HAL_GetTick>
 8001650:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff f98e 	bl	8000974 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1f7      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001666:	f7ff fc8b 	bl	8000f80 <LL_RCC_HSI_IsReady>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f1      	bne.n	8001654 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d06e      	beq.n	800175a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d056      	beq.n	8001732 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69da      	ldr	r2, [r3, #28]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	429a      	cmp	r2, r3
 800169a:	d031      	beq.n	8001700 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e1d0      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d013      	beq.n	80016e6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80016be:	f7ff fca5 	bl	800100c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016c2:	f7ff f957 	bl	8000974 <HAL_GetTick>
 80016c6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff f953 	bl	8000974 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b11      	cmp	r3, #17
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1bc      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80016dc:	f7ff fca6 	bl	800102c <LL_RCC_LSI_IsReady>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f1      	bne.n	80016ca <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ee:	f023 0210 	bic.w	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fa:	4313      	orrs	r3, r2
 80016fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001700:	f7ff fc74 	bl	8000fec <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff f936 	bl	8000974 <HAL_GetTick>
 8001708:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800170a:	e00c      	b.n	8001726 <HAL_RCC_OscConfig+0x3c2>
 800170c:	20000000 	.word	0x20000000
 8001710:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff f92e 	bl	8000974 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b11      	cmp	r3, #17
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e197      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001726:	f7ff fc81 	bl	800102c <LL_RCC_LSI_IsReady>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f1      	beq.n	8001714 <HAL_RCC_OscConfig+0x3b0>
 8001730:	e013      	b.n	800175a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001732:	f7ff fc6b 	bl	800100c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff f91d 	bl	8000974 <HAL_GetTick>
 800173a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173e:	f7ff f919 	bl	8000974 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b11      	cmp	r3, #17
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e182      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001750:	f7ff fc6c 	bl	800102c <LL_RCC_LSI_IsReady>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f1      	bne.n	800173e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80d8 	beq.w	8001918 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001768:	f7ff fb82 	bl	8000e70 <LL_PWR_IsEnabledBkUpAccess>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d113      	bne.n	800179a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001772:	f7ff fb63 	bl	8000e3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff f8fd 	bl	8000974 <HAL_GetTick>
 800177a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff f8f9 	bl	8000974 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e162      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001790:	f7ff fb6e 	bl	8000e70 <LL_PWR_IsEnabledBkUpAccess>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f1      	beq.n	800177e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d07b      	beq.n	800189a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b85      	cmp	r3, #133	; 0x85
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff f8d5 	bl	8000974 <HAL_GetTick>
 80017ca:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff f8c7 	bl	8000974 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e12e      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80017f8:	f7ff fbe7 	bl	8000fca <LL_RCC_LSE_IsReady>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0ef      	beq.n	80017e2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b81      	cmp	r3, #129	; 0x81
 8001808:	d003      	beq.n	8001812 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b85      	cmp	r3, #133	; 0x85
 8001810:	d121      	bne.n	8001856 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff f8af 	bl	8000974 <HAL_GetTick>
 8001816:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff f8a1 	bl	8000974 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e108      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ec      	beq.n	800182e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001854:	e060      	b.n	8001918 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff f88d 	bl	8000974 <HAL_GetTick>
 800185a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff f87f 	bl	8000974 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0e6      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ec      	bne.n	8001872 <HAL_RCC_OscConfig+0x50e>
 8001898:	e03e      	b.n	8001918 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff f86b 	bl	8000974 <HAL_GetTick>
 800189e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff f85d 	bl	8000974 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0c4      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1ec      	bne.n	80018b6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff f84a 	bl	8000974 <HAL_GetTick>
 80018e0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff f83c 	bl	8000974 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0a3      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800190e:	f7ff fb5c 	bl	8000fca <LL_RCC_LSE_IsReady>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ef      	bne.n	80018f8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8099 	beq.w	8001a54 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d06c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	2b02      	cmp	r3, #2
 800192e:	d14b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	f7ff fc87 	bl	8001242 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff f81e 	bl	8000974 <HAL_GetTick>
 8001938:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f81a 	bl	8000974 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e083      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800194e:	f7ff fc86 	bl	800125e <LL_RCC_PLL_IsReady>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f1      	bne.n	800193c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <HAL_RCC_OscConfig+0x6fc>)
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001970:	0212      	lsls	r2, r2, #8
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001978:	4311      	orrs	r1, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001984:	430a      	orrs	r2, r1
 8001986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198a:	4313      	orrs	r3, r2
 800198c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198e:	f7ff fc4a 	bl	8001226 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7fe ffe7 	bl	8000974 <HAL_GetTick>
 80019a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7fe ffe3 	bl	8000974 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e04c      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80019bc:	f7ff fc4f 	bl	800125e <LL_RCC_PLL_IsReady>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f1      	beq.n	80019aa <HAL_RCC_OscConfig+0x646>
 80019c6:	e045      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	f7ff fc3b 	bl	8001242 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7fe ffd2 	bl	8000974 <HAL_GetTick>
 80019d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7fe ffce 	bl	8000974 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e037      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80019e6:	f7ff fc3a 	bl	800125e <LL_RCC_PLL_IsReady>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f1      	bne.n	80019d4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x700>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e028      	b.n	8001a54 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e023      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d115      	bne.n	8001a50 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10e      	bne.n	8001a50 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d106      	bne.n	8001a50 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	11c1808c 	.word	0x11c1808c
 8001a64:	eefefffc 	.word	0xeefefffc

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e10f      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b89      	ldr	r3, [pc, #548]	; (8001ca4 <HAL_RCC_ClockConfig+0x23c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d91b      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b86      	ldr	r3, [pc, #536]	; (8001ca4 <HAL_RCC_ClockConfig+0x23c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 0207 	bic.w	r2, r3, #7
 8001a92:	4984      	ldr	r1, [pc, #528]	; (8001ca4 <HAL_RCC_ClockConfig+0x23c>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9a:	f7fe ff6b 	bl	8000974 <HAL_GetTick>
 8001a9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001aa2:	f7fe ff67 	bl	8000974 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e0f3      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab4:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <HAL_RCC_ClockConfig+0x23c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d1ef      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d016      	beq.n	8001afc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fb40 	bl	8001158 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ad8:	f7fe ff4c 	bl	8000974 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ae0:	f7fe ff48 	bl	8000974 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0d4      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001af2:	f7ff fbf2 	bl	80012da <LL_RCC_IsActiveFlag_HPRE>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f1      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d016      	beq.n	8001b36 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fb36 	bl	800117e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b12:	f7fe ff2f 	bl	8000974 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b1a:	f7fe ff2b 	bl	8000974 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0b7      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b2c:	f7ff fbe6 	bl	80012fc <LL_RCC_IsActiveFlag_SHDHPRE>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f1      	beq.n	8001b1a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d016      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fb2f 	bl	80011aa <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b4c:	f7fe ff12 	bl	8000974 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b54:	f7fe ff0e 	bl	8000974 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e09a      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b66:	f7ff fbdb 	bl	8001320 <LL_RCC_IsActiveFlag_PPRE1>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f1      	beq.n	8001b54 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d017      	beq.n	8001bac <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fb24 	bl	80011d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b88:	f7fe fef4 	bl	8000974 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b90:	f7fe fef0 	bl	8000974 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e07c      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ba2:	f7ff fbce 	bl	8001342 <LL_RCC_IsActiveFlag_PPRE2>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f1      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d043      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001bc0:	f7ff f9b1 	bl	8000f26 <LL_RCC_HSE_IsReady>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d11e      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e066      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001bd6:	f7ff fb42 	bl	800125e <LL_RCC_PLL_IsReady>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d113      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e05b      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001bec:	f7ff fa4b 	bl	8001086 <LL_RCC_MSI_IsReady>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d108      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e050      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001bfa:	f7ff f9c1 	bl	8000f80 <LL_RCC_HSI_IsReady>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e049      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fa85 	bl	800111c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c12:	f7fe feaf 	bl	8000974 <HAL_GetTick>
 8001c16:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7fe feab 	bl	8000974 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e035      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c30:	f7ff fa87 	bl	8001142 <LL_RCC_GetSysClkSource>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1ec      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCC_ClockConfig+0x23c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d21b      	bcs.n	8001c86 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_ClockConfig+0x23c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4913      	ldr	r1, [pc, #76]	; (8001ca4 <HAL_RCC_ClockConfig+0x23c>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c5e:	f7fe fe89 	bl	8000974 <HAL_GetTick>
 8001c62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c66:	f7fe fe85 	bl	8000974 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e011      	b.n	8001c9c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x23c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d1ef      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c86:	f000 f8b3 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <HAL_RCC_ClockConfig+0x240>)
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_ClockConfig+0x244>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fe21 	bl	80008dc <HAL_InitTick>
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	58004000 	.word	0x58004000
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbe:	f7ff fa40 	bl	8001142 <LL_RCC_GetSysClkSource>
 8001cc2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc4:	f7ff fafe 	bl	80012c4 <LL_RCC_PLL_GetMainSource>
 8001cc8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x2c>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d139      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d136      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001cdc:	f7ff f9e3 	bl	80010a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d115      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x62>
 8001ce6:	f7ff f9de 	bl	80010a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x4e>
 8001cf0:	f7ff f9e9 	bl	80010c6 <LL_RCC_MSI_GetRange>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	e005      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x5a>
 8001cfe:	f7ff f9ed 	bl	80010dc <LL_RCC_MSI_GetRangeAfterStandby>
 8001d02:	4603      	mov	r3, r0
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	4a36      	ldr	r2, [pc, #216]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	e014      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x8c>
 8001d12:	f7ff f9c8 	bl	80010a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_GetSysClockFreq+0x7a>
 8001d1c:	f7ff f9d3 	bl	80010c6 <LL_RCC_MSI_GetRange>
 8001d20:	4603      	mov	r3, r0
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	e005      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x86>
 8001d2a:	f7ff f9d7 	bl	80010dc <LL_RCC_MSI_GetRangeAfterStandby>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d115      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d48:	e012      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e00c      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d109      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d5c:	f7ff f8b6 	bl	8000ecc <LL_RCC_HSE_IsEnabledDiv2>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e001      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d6e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	f7ff f9e7 	bl	8001142 <LL_RCC_GetSysClkSource>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d12f      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001d7a:	f7ff faa3 	bl	80012c4 <LL_RCC_PLL_GetMainSource>
 8001d7e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0xde>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0xe4>
 8001d8c:	e00d      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d90:	60fb      	str	r3, [r7, #12]
        break;
 8001d92:	e00d      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d94:	f7ff f89a 	bl	8000ecc <LL_RCC_HSE_IsEnabledDiv2>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001da0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001da2:	e005      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_GetSysClockFreq+0x13c>)
 8001da6:	60fb      	str	r3, [r7, #12]
        break;
 8001da8:	e002      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60fb      	str	r3, [r7, #12]
        break;
 8001dae:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001db0:	f7ff fa66 	bl	8001280 <LL_RCC_PLL_GetN>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	fb03 f402 	mul.w	r4, r3, r2
 8001dbc:	f7ff fa77 	bl	80012ae <LL_RCC_PLL_GetDivider>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	fbb4 f4f3 	udiv	r4, r4, r3
 8001dca:	f7ff fa65 	bl	8001298 <LL_RCC_PLL_GetR>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	0f5b      	lsrs	r3, r3, #29
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	fbb4 f3f3 	udiv	r3, r4, r3
 8001dd8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001dda:	697b      	ldr	r3, [r7, #20]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	371c      	adds	r7, #28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	08003338 	.word	0x08003338
 8001de8:	00f42400 	.word	0x00f42400
 8001dec:	01e84800 	.word	0x01e84800

08001df0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b598      	push	{r3, r4, r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001df4:	f7ff ff5c 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	f7ff f9fc 	bl	80011f6 <LL_RCC_GetAHBPrescaler>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd98      	pop	{r3, r4, r7, pc}
 8001e14:	080032f8 	.word	0x080032f8

08001e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001e30:	f7ff f9ec 	bl	800120c <LL_RCC_GetAHB3Prescaler>
 8001e34:	4603      	mov	r3, r0
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9c      	lsrs	r4, r3, #18
 8001e54:	f7ff f800 	bl	8000e58 <HAL_PWREx_GetVoltageRange>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f000 f80b 	bl	8001e78 <RCC_SetFlashLatency>
 8001e62:	4603      	mov	r3, r0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}
 8001e6c:	08003338 	.word	0x08003338
 8001e70:	080032f8 	.word	0x080032f8
 8001e74:	431bde83 	.word	0x431bde83

08001e78 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	; 0x38
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001e82:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <RCC_SetFlashLatency+0xf4>)
 8001e84:	f107 0320 	add.w	r3, r7, #32
 8001e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e8c:	6018      	str	r0, [r3, #0]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001e92:	4a37      	ldr	r2, [pc, #220]	; (8001f70 <RCC_SetFlashLatency+0xf8>)
 8001e94:	f107 0318 	add.w	r3, r7, #24
 8001e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e9c:	6018      	str	r0, [r3, #0]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001ea2:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <RCC_SetFlashLatency+0xfc>)
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb8:	d11b      	bne.n	8001ef2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ebe:	e014      	b.n	8001eea <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	3338      	adds	r3, #56	; 0x38
 8001ec6:	443b      	add	r3, r7
 8001ec8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d807      	bhi.n	8001ee4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	3338      	adds	r3, #56	; 0x38
 8001eda:	443b      	add	r3, r7
 8001edc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ee2:	e021      	b.n	8001f28 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d9e7      	bls.n	8001ec0 <RCC_SetFlashLatency+0x48>
 8001ef0:	e01a      	b.n	8001f28 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef6:	e014      	b.n	8001f22 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	3338      	adds	r3, #56	; 0x38
 8001efe:	443b      	add	r3, r7
 8001f00:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001f04:	461a      	mov	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d807      	bhi.n	8001f1c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	3338      	adds	r3, #56	; 0x38
 8001f12:	443b      	add	r3, r7
 8001f14:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f1a:	e005      	b.n	8001f28 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	3301      	adds	r3, #1
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d9e7      	bls.n	8001ef8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <RCC_SetFlashLatency+0x100>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 0207 	bic.w	r2, r3, #7
 8001f30:	4911      	ldr	r1, [pc, #68]	; (8001f78 <RCC_SetFlashLatency+0x100>)
 8001f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f38:	f7fe fd1c 	bl	8000974 <HAL_GetTick>
 8001f3c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001f3e:	e008      	b.n	8001f52 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f40:	f7fe fd18 	bl	8000974 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e007      	b.n	8001f62 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <RCC_SetFlashLatency+0x100>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d1ef      	bne.n	8001f40 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3738      	adds	r7, #56	; 0x38
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	080032dc 	.word	0x080032dc
 8001f70:	080032e4 	.word	0x080032e4
 8001f74:	080032ec 	.word	0x080032ec
 8001f78:	58004000 	.word	0x58004000

08001f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0c6      	b.n	800211c <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f9e:	d009      	beq.n	8001fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe fbdf 	bl	800078c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fee:	d902      	bls.n	8001ff6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e002      	b.n	8001ffc <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002004:	d007      	beq.n	8002016 <HAL_SPI_Init+0x9a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800200e:	d002      	beq.n	8002016 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	ea42 0103 	orr.w	r1, r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002074:	d11b      	bne.n	80020ae <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002086:	d903      	bls.n	8002090 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
 800208e:	e002      	b.n	8002096 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	2b02      	cmp	r3, #2
 800209c:	d107      	bne.n	80020ae <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	f003 0204 	and.w	r2, r3, #4
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020d4:	ea42 0103 	orr.w	r1, r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ee:	d105      	bne.n	80020fc <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b292      	uxth	r2, r2
 80020fa:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_SPI_Transmit+0x22>
 8002142:	2302      	movs	r3, #2
 8002144:	e181      	b.n	800244a <HAL_SPI_Transmit+0x326>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800214e:	f7fe fc11 	bl	8000974 <HAL_GetTick>
 8002152:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d002      	beq.n	800216a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002168:	e16a      	b.n	8002440 <HAL_SPI_Transmit+0x31c>
  }

  if ((pData == NULL) || (Size == 0U))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <HAL_SPI_Transmit+0x52>
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	77fb      	strb	r3, [r7, #31]
    goto error;
 800217a:	e161      	b.n	8002440 <HAL_SPI_Transmit+0x31c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2203      	movs	r2, #3
 8002180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	88fa      	ldrh	r2, [r7, #6]
 8002194:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c6:	d10f      	bne.n	80021e8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e6:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f0:	d10f      	bne.n	8002212 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002210:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d007      	beq.n	8002230 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002238:	d94f      	bls.n	80022da <HAL_SPI_Transmit+0x1b6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_SPI_Transmit+0x124>
 8002242:	8afb      	ldrh	r3, [r7, #22]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d142      	bne.n	80022ce <HAL_SPI_Transmit+0x1aa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	881a      	ldrh	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	1c9a      	adds	r2, r3, #2
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800226c:	e02f      	b.n	80022ce <HAL_SPI_Transmit+0x1aa>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b02      	cmp	r3, #2
 800227a:	d112      	bne.n	80022a2 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	1c9a      	adds	r2, r3, #2
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022a0:	e015      	b.n	80022ce <HAL_SPI_Transmit+0x1aa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022a2:	f7fe fb67 	bl	8000974 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d803      	bhi.n	80022ba <HAL_SPI_Transmit+0x196>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d102      	bne.n	80022c0 <HAL_SPI_Transmit+0x19c>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d106      	bne.n	80022ce <HAL_SPI_Transmit+0x1aa>
        {
          errorcode = HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80022cc:	e0b8      	b.n	8002440 <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ca      	bne.n	800226e <HAL_SPI_Transmit+0x14a>
 80022d8:	e080      	b.n	80023dc <HAL_SPI_Transmit+0x2b8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_SPI_Transmit+0x1c4>
 80022e2:	8afb      	ldrh	r3, [r7, #22]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d174      	bne.n	80023d2 <HAL_SPI_Transmit+0x2ae>
    {
      if (hspi->TxXferCount > 1U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d912      	bls.n	8002318 <HAL_SPI_Transmit+0x1f4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	881a      	ldrh	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	1c9a      	adds	r2, r3, #2
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b02      	subs	r3, #2
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002316:	e05c      	b.n	80023d2 <HAL_SPI_Transmit+0x2ae>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	330c      	adds	r3, #12
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800233e:	e048      	b.n	80023d2 <HAL_SPI_Transmit+0x2ae>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d12b      	bne.n	80023a6 <HAL_SPI_Transmit+0x282>
      {
        if (hspi->TxXferCount > 1U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d912      	bls.n	800237e <HAL_SPI_Transmit+0x25a>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	1c9a      	adds	r2, r3, #2
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b02      	subs	r3, #2
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800237c:	e029      	b.n	80023d2 <HAL_SPI_Transmit+0x2ae>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	330c      	adds	r3, #12
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023a4:	e015      	b.n	80023d2 <HAL_SPI_Transmit+0x2ae>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a6:	f7fe fae5 	bl	8000974 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d803      	bhi.n	80023be <HAL_SPI_Transmit+0x29a>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d102      	bne.n	80023c4 <HAL_SPI_Transmit+0x2a0>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <HAL_SPI_Transmit+0x2ae>
        {
          errorcode = HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80023d0:	e036      	b.n	8002440 <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1b1      	bne.n	8002340 <HAL_SPI_Transmit+0x21c>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e4:	d107      	bne.n	80023f6 <HAL_SPI_Transmit+0x2d2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023f4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fece 	bl	800319c <SPI_EndRxTxTransaction>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_SPI_Transmit+0x2e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_SPI_Transmit+0x306>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_SPI_Transmit+0x314>
  {
    errorcode = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	77fb      	strb	r3, [r7, #31]
 8002436:	e003      	b.n	8002440 <HAL_SPI_Transmit+0x31c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002448:	7ffb      	ldrb	r3, [r7, #31]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b08c      	sub	sp, #48	; 0x30
 8002456:	af02      	add	r7, sp, #8
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d003      	beq.n	8002484 <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 800247c:	2302      	movs	r3, #2
 800247e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8002482:	e1cc      	b.n	800281e <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800248c:	d112      	bne.n	80024b4 <HAL_SPI_Receive+0x62>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10e      	bne.n	80024b4 <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2204      	movs	r2, #4
 800249a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800249e:	88fa      	ldrh	r2, [r7, #6]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4613      	mov	r3, r2
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f9c1 	bl	8002832 <HAL_SPI_TransmitReceive>
 80024b0:	4603      	mov	r3, r0
 80024b2:	e1ba      	b.n	800282a <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_SPI_Receive+0x70>
 80024be:	2302      	movs	r3, #2
 80024c0:	e1b3      	b.n	800282a <HAL_SPI_Receive+0x3d8>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ca:	f7fe fa53 	bl	8000974 <HAL_GetTick>
 80024ce:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_SPI_Receive+0x8a>
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80024e2:	e19c      	b.n	800281e <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2204      	movs	r2, #4
 80024e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252e:	d118      	bne.n	8002562 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800254e:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800256a:	d908      	bls.n	800257e <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	e007      	b.n	800258e <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800258c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002596:	d10f      	bne.n	80025b8 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d007      	beq.n	80025d6 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025de:	d871      	bhi.n	80026c4 <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025e0:	e035      	b.n	800264e <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d117      	bne.n	8002620 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f103 020c 	add.w	r2, r3, #12
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800261e:	e016      	b.n	800264e <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002620:	f7fe f9a8 	bl	8000974 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d803      	bhi.n	8002638 <HAL_SPI_Receive+0x1e6>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002636:	d102      	bne.n	800263e <HAL_SPI_Receive+0x1ec>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800264c:	e0e7      	b.n	800281e <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1c3      	bne.n	80025e2 <HAL_SPI_Receive+0x190>
 800265a:	e039      	b.n	80026d0 <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d115      	bne.n	8002696 <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	b292      	uxth	r2, r2
 8002676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	1c9a      	adds	r2, r3, #2
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002694:	e016      	b.n	80026c4 <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002696:	f7fe f96d 	bl	8000974 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d803      	bhi.n	80026ae <HAL_SPI_Receive+0x25c>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d102      	bne.n	80026b4 <HAL_SPI_Receive+0x262>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80026c2:	e0ac      	b.n	800281e <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1c5      	bne.n	800265c <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d8:	d178      	bne.n	80027cc <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026e8:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	2101      	movs	r1, #1
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fbdb 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8002706:	e08a      	b.n	800281e <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002710:	d907      	bls.n	8002722 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	b292      	uxth	r2, r2
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	e008      	b.n	8002734 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f103 020c 	add.w	r2, r3, #12
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	2101      	movs	r1, #1
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fbb6 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	f043 0202 	orr.w	r2, r3, #2
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800275c:	e05f      	b.n	800281e <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002766:	d105      	bne.n	8002774 <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	e02b      	b.n	80027cc <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002784:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800278e:	d11d      	bne.n	80027cc <HAL_SPI_Receive+0x37a>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	2b02      	cmp	r3, #2
 8002796:	d119      	bne.n	80027cc <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	2101      	movs	r1, #1
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fb84 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80027c0:	e02d      	b.n	800281e <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fc8b 	bl	80030ec <SPI_EndRxTransaction>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d10a      	bne.n	8002806 <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f4:	f043 0202 	orr.w	r2, r3, #2
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002804:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002814:	e003      	b.n	800281e <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800282a:	4618      	mov	r0, r3
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b092      	sub	sp, #72	; 0x48
 8002836:	af02      	add	r7, sp, #8
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002848:	2301      	movs	r3, #1
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x2e>
 800285c:	2302      	movs	r3, #2
 800285e:	e322      	b.n	8002ea6 <HAL_SPI_TransmitReceive+0x674>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002868:	f7fe f884 	bl	8000974 <HAL_GetTick>
 800286c:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800289a:	2b01      	cmp	r3, #1
 800289c:	d00f      	beq.n	80028be <HAL_SPI_TransmitReceive+0x8c>
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028a4:	d107      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x84>
 80028ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d003      	beq.n	80028be <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80028bc:	e2ed      	b.n	8002e9a <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x9e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x9e>
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d103      	bne.n	80028d8 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80028d6:	e2e0      	b.n	8002e9a <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d003      	beq.n	80028ec <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2205      	movs	r2, #5
 80028e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	887a      	ldrh	r2, [r7, #2]
 8002912:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292e:	d10f      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800294e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002958:	d802      	bhi.n	8002960 <HAL_SPI_TransmitReceive+0x12e>
 800295a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800295c:	2b01      	cmp	r3, #1
 800295e:	d908      	bls.n	8002972 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	e007      	b.n	8002982 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002980:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d007      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029a8:	f240 80ce 	bls.w	8002b48 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_SPI_TransmitReceive+0x18a>
 80029b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	f040 80b8 	bne.w	8002b2c <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	1c9a      	adds	r2, r3, #2
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 80a0 	bne.w	8002b2c <HAL_SPI_TransmitReceive+0x2fa>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f4:	f040 809a 	bne.w	8002b2c <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_SPI_TransmitReceive+0x1ea>
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1a:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a2a:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a2c:	e07e      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d13f      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x28a>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03a      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x28a>
 8002a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d137      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	1c9a      	adds	r2, r3, #2
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11e      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x28a>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a86:	d119      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x27a>
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aaa:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aba:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d11c      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x2d2>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	b292      	uxth	r2, r2
 8002ae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	1c9a      	adds	r2, r3, #2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b00:	2301      	movs	r3, #1
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b04:	f7fd ff36 	bl	8000974 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d80b      	bhi.n	8002b2c <HAL_SPI_TransmitReceive+0x2fa>
 8002b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d007      	beq.n	8002b2c <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002b2a:	e1b6      	b.n	8002e9a <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f af7b 	bne.w	8002a2e <HAL_SPI_TransmitReceive+0x1fc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f af74 	bne.w	8002a2e <HAL_SPI_TransmitReceive+0x1fc>
 8002b46:	e12d      	b.n	8002da4 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_SPI_TransmitReceive+0x326>
 8002b50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 8119 	bne.w	8002d8a <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d912      	bls.n	8002b88 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	881a      	ldrh	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	1c9a      	adds	r2, r3, #2
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b02      	subs	r3, #2
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b86:	e100      	b.n	8002d8a <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 80e8 	bne.w	8002d8a <HAL_SPI_TransmitReceive+0x558>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc2:	f040 80e2 	bne.w	8002d8a <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10c      	bne.n	8002bea <HAL_SPI_TransmitReceive+0x3b8>
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be8:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bf8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfa:	e0c6      	b.n	8002d8a <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d158      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x48a>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d053      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x48a>
 8002c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d150      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d912      	bls.n	8002c4a <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	1c9a      	adds	r2, r3, #2
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b02      	subs	r3, #2
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c48:	e012      	b.n	8002c70 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	7812      	ldrb	r2, [r2, #0]
 8002c56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11e      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x48a>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c86:	d119      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x47a>
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002caa:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cba:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d148      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x52a>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d042      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d923      	bls.n	8002d2a <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	b292      	uxth	r2, r2
 8002cee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	1c9a      	adds	r2, r3, #2
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b02      	subs	r3, #2
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d81f      	bhi.n	8002d58 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	e016      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f103 020c 	add.w	r2, r3, #12
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	7812      	ldrb	r2, [r2, #0]
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d5c:	f7fd fe0a 	bl	8000974 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d803      	bhi.n	8002d74 <HAL_SPI_TransmitReceive+0x542>
 8002d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d102      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x548>
 8002d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d107      	bne.n	8002d8a <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002d88:	e087      	b.n	8002e9a <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f47f af33 	bne.w	8002bfc <HAL_SPI_TransmitReceive+0x3ca>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f47f af2c 	bne.w	8002bfc <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d146      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	2201      	movs	r2, #1
 8002db6:	2101      	movs	r1, #1
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f879 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	f043 0202 	orr.w	r2, r3, #2
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8002dd6:	e060      	b.n	8002e9a <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002de0:	d105      	bne.n	8002dee <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	e026      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d119      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2101      	movs	r1, #1
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f84c 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e22:	f043 0202 	orr.w	r2, r3, #2
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8002e30:	e033      	b.n	8002e9a <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d10d      	bne.n	8002e66 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f043 0202 	orr.w	r2, r3, #2
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002e5e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f996 	bl	800319c <SPI_EndRxTxTransaction>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002e90:	e003      	b.n	8002e9a <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ea2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3740      	adds	r7, #64	; 0x40
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ec0:	f7fd fd58 	bl	8000974 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ed0:	f7fd fd50 	bl	8000974 <HAL_GetTick>
 8002ed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ed6:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	0d1b      	lsrs	r3, r3, #20
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ee6:	e054      	b.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d050      	beq.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ef0:	f7fd fd40 	bl	8000974 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d902      	bls.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d13d      	bne.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1e:	d111      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f28:	d004      	beq.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d107      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d10f      	bne.n	8002f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e017      	b.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d19b      	bne.n	8002ee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000000 	.word	0x20000000

08002fc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fd2:	f7fd fccf 	bl	8000974 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002fe2:	f7fd fcc7 	bl	8000974 <HAL_GetTick>
 8002fe6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	330c      	adds	r3, #12
 8002fee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ff0:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00da      	lsls	r2, r3, #3
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	0d1b      	lsrs	r3, r3, #20
 8003000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003008:	e060      	b.n	80030cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003010:	d107      	bne.n	8003022 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003020:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d050      	beq.n	80030cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800302a:	f7fd fca3 	bl	8000974 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	429a      	cmp	r2, r3
 8003038:	d902      	bls.n	8003040 <SPI_WaitFifoStateUntilTimeout+0x80>
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	d13d      	bne.n	80030bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800304e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003058:	d111      	bne.n	800307e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003062:	d004      	beq.n	800306e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306c:	d107      	bne.n	800307e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	d10f      	bne.n	80030a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e010      	b.n	80030de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d196      	bne.n	800300a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000000 	.word	0x20000000

080030ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003100:	d111      	bne.n	8003126 <SPI_EndRxTransaction+0x3a>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310a:	d004      	beq.n	8003116 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	d107      	bne.n	8003126 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2200      	movs	r2, #0
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff febd 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e023      	b.n	8003194 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003154:	d11d      	bne.n	8003192 <SPI_EndRxTransaction+0xa6>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315e:	d004      	beq.n	800316a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d113      	bne.n	8003192 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff ff22 	bl	8002fc0 <SPI_WaitFifoStateUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e000      	b.n	8003194 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff ff03 	bl	8002fc0 <SPI_WaitFifoStateUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e027      	b.n	8003220 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2200      	movs	r2, #0
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff fe68 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e014      	b.n	8003220 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff fedc 	bl	8002fc0 <SPI_WaitFifoStateUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e000      	b.n	8003220 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <memcmp>:
 8003228:	b510      	push	{r4, lr}
 800322a:	3901      	subs	r1, #1
 800322c:	4402      	add	r2, r0
 800322e:	4290      	cmp	r0, r2
 8003230:	d101      	bne.n	8003236 <memcmp+0xe>
 8003232:	2000      	movs	r0, #0
 8003234:	e005      	b.n	8003242 <memcmp+0x1a>
 8003236:	7803      	ldrb	r3, [r0, #0]
 8003238:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800323c:	42a3      	cmp	r3, r4
 800323e:	d001      	beq.n	8003244 <memcmp+0x1c>
 8003240:	1b18      	subs	r0, r3, r4
 8003242:	bd10      	pop	{r4, pc}
 8003244:	3001      	adds	r0, #1
 8003246:	e7f2      	b.n	800322e <memcmp+0x6>

08003248 <memset>:
 8003248:	4402      	add	r2, r0
 800324a:	4603      	mov	r3, r0
 800324c:	4293      	cmp	r3, r2
 800324e:	d100      	bne.n	8003252 <memset+0xa>
 8003250:	4770      	bx	lr
 8003252:	f803 1b01 	strb.w	r1, [r3], #1
 8003256:	e7f9      	b.n	800324c <memset+0x4>

08003258 <__libc_init_array>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	4d0d      	ldr	r5, [pc, #52]	; (8003290 <__libc_init_array+0x38>)
 800325c:	4c0d      	ldr	r4, [pc, #52]	; (8003294 <__libc_init_array+0x3c>)
 800325e:	1b64      	subs	r4, r4, r5
 8003260:	10a4      	asrs	r4, r4, #2
 8003262:	2600      	movs	r6, #0
 8003264:	42a6      	cmp	r6, r4
 8003266:	d109      	bne.n	800327c <__libc_init_array+0x24>
 8003268:	4d0b      	ldr	r5, [pc, #44]	; (8003298 <__libc_init_array+0x40>)
 800326a:	4c0c      	ldr	r4, [pc, #48]	; (800329c <__libc_init_array+0x44>)
 800326c:	f000 f818 	bl	80032a0 <_init>
 8003270:	1b64      	subs	r4, r4, r5
 8003272:	10a4      	asrs	r4, r4, #2
 8003274:	2600      	movs	r6, #0
 8003276:	42a6      	cmp	r6, r4
 8003278:	d105      	bne.n	8003286 <__libc_init_array+0x2e>
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003280:	4798      	blx	r3
 8003282:	3601      	adds	r6, #1
 8003284:	e7ee      	b.n	8003264 <__libc_init_array+0xc>
 8003286:	f855 3b04 	ldr.w	r3, [r5], #4
 800328a:	4798      	blx	r3
 800328c:	3601      	adds	r6, #1
 800328e:	e7f2      	b.n	8003276 <__libc_init_array+0x1e>
 8003290:	08003378 	.word	0x08003378
 8003294:	08003378 	.word	0x08003378
 8003298:	08003378 	.word	0x08003378
 800329c:	0800337c 	.word	0x0800337c

080032a0 <_init>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr

080032ac <_fini>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	bf00      	nop
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr
