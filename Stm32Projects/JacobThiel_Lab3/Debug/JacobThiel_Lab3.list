
JacobThiel_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000950  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000afc  08000afc  00001afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b04  08000b04  00002018  2**0
                  CONTENTS
  4 .ARM          00000000  08000b04  08000b04  00002018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b04  08000b04  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b04  08000b04  00001b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b08  08000b08  00001b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000b0c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002018  2**0
                  CONTENTS
 10 .bss          00000020  20000018  20000018  00002018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00002018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000119d  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000066f  00000000  00000000  000031e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00003858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000155  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001690  00000000  00000000  00003ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021ff  00000000  00000000  00005235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004f80  00000000  00000000  00007434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c3b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000580  00000000  00000000  0000c3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0000c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000ae4 	.word	0x08000ae4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08000ae4 	.word	0x08000ae4

080001ec <BTN_Init>:

#include "Button_Driver.h"

GPIO_PinConfig_t BTN = {GPIO_PIN_0,GPIO_MODE_INPUT,GPIO_OPTYPE_PUSHPULL,GPIO_SPEED_MEDIUM,GPIO_PUPD_NONE,NO_INTERUPT};

void BTN_Init() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	GPIO_Init(GPIOA,BTN); //btn is on GPIOA clock
 80001f0:	4b03      	ldr	r3, [pc, #12]	@ (8000200 <BTN_Init+0x14>)
 80001f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80001f6:	4803      	ldr	r0, [pc, #12]	@ (8000204 <BTN_Init+0x18>)
 80001f8:	f000 f81a 	bl	8000230 <GPIO_Init>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	20000000 	.word	0x20000000
 8000204:	40020000 	.word	0x40020000

08000208 <BTN_Pressed>:

bool BTN_Pressed() {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	if(GPIO_ReadOutputPin(GPIOA,BTN.PinNumber) == BTN_PRESSED) {
 800020c:	4b06      	ldr	r3, [pc, #24]	@ (8000228 <BTN_Pressed+0x20>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	4806      	ldr	r0, [pc, #24]	@ (800022c <BTN_Pressed+0x24>)
 8000214:	f000 f9f6 	bl	8000604 <GPIO_ReadOutputPin>
 8000218:	4603      	mov	r3, r0
 800021a:	2b01      	cmp	r3, #1
 800021c:	d101      	bne.n	8000222 <BTN_Pressed+0x1a>
		return true;
 800021e:	2301      	movs	r3, #1
 8000220:	e000      	b.n	8000224 <BTN_Pressed+0x1c>
	}
	else {
		return false;
 8000222:	2300      	movs	r3, #0
	}

}
 8000224:	4618      	mov	r0, r3
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000000 	.word	0x20000000
 800022c:	40020000 	.word	0x40020000

08000230 <GPIO_Init>:
 *
 *  Created on: Jan 28, 2025
 *      Author: Jacob
 */
#include "GPIODriver.h"
void GPIO_Init(GPIO_RegDef_t * initRegDefPointer, GPIO_PinConfig_t initPinConfig) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	e883 0006 	stmia.w	r3, {r1, r2}
	GPIO_ClockControl(initRegDefPointer,ACTIVE);
 800023e:	2101      	movs	r1, #1
 8000240:	68f8      	ldr	r0, [r7, #12]
 8000242:	f000 f917 	bl	8000474 <GPIO_ClockControl>
	SYSCFG_CLOCK_ENABLE;
 8000246:	4b88      	ldr	r3, [pc, #544]	@ (8000468 <GPIO_Init+0x238>)
 8000248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800024a:	4a87      	ldr	r2, [pc, #540]	@ (8000468 <GPIO_Init+0x238>)
 800024c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000250:	6653      	str	r3, [r2, #100]	@ 0x64

	uint8_t regSelect = (initPinConfig.PinNumber/fourDivisor);
 8000252:	793b      	ldrb	r3, [r7, #4]
 8000254:	089b      	lsrs	r3, r3, #2
 8000256:	75fb      	strb	r3, [r7, #23]
	uint8_t bitFieldSelect = (initPinConfig.PinNumber%fourDivisor);
 8000258:	793b      	ldrb	r3, [r7, #4]
 800025a:	f003 0303 	and.w	r3, r3, #3
 800025e:	75bb      	strb	r3, [r7, #22]
	uint16_t port = GPIO_ReadPort(initRegDefPointer, initPinConfig.PinNumber);
 8000260:	793b      	ldrb	r3, [r7, #4]
 8000262:	4619      	mov	r1, r3
 8000264:	68f8      	ldr	r0, [r7, #12]
 8000266:	f000 f9e3 	bl	8000630 <GPIO_ReadPort>
 800026a:	4603      	mov	r3, r0
 800026c:	82bb      	strh	r3, [r7, #20]

	SYSCFG->SYSCFG_EXTICR[regSelect] &= ~(fullByte << bitFieldSelect); //clearing
 800026e:	4a7f      	ldr	r2, [pc, #508]	@ (800046c <GPIO_Init+0x23c>)
 8000270:	7dfb      	ldrb	r3, [r7, #23]
 8000272:	3302      	adds	r3, #2
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	7dbb      	ldrb	r3, [r7, #22]
 800027a:	210f      	movs	r1, #15
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	43db      	mvns	r3, r3
 8000282:	4618      	mov	r0, r3
 8000284:	4979      	ldr	r1, [pc, #484]	@ (800046c <GPIO_Init+0x23c>)
 8000286:	7dfb      	ldrb	r3, [r7, #23]
 8000288:	4002      	ands	r2, r0
 800028a:	3302      	adds	r3, #2
 800028c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->SYSCFG_EXTICR[regSelect] |= (port << bitFieldSelect); //setting !!!!!!!! CHECK IF THIS WILL AUTOMATICALLY CONVERT TO BINARY!
 8000290:	4a76      	ldr	r2, [pc, #472]	@ (800046c <GPIO_Init+0x23c>)
 8000292:	7dfb      	ldrb	r3, [r7, #23]
 8000294:	3302      	adds	r3, #2
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	8ab9      	ldrh	r1, [r7, #20]
 800029c:	7dbb      	ldrb	r3, [r7, #22]
 800029e:	fa01 f303 	lsl.w	r3, r1, r3
 80002a2:	4618      	mov	r0, r3
 80002a4:	4971      	ldr	r1, [pc, #452]	@ (800046c <GPIO_Init+0x23c>)
 80002a6:	7dfb      	ldrb	r3, [r7, #23]
 80002a8:	4302      	orrs	r2, r0
 80002aa:	3302      	adds	r3, #2
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->EXTI_IMR &= ~(ACTIVE << initPinConfig.PinNumber);
 80002b0:	4b6f      	ldr	r3, [pc, #444]	@ (8000470 <GPIO_Init+0x240>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	793a      	ldrb	r2, [r7, #4]
 80002b6:	4611      	mov	r1, r2
 80002b8:	2201      	movs	r2, #1
 80002ba:	408a      	lsls	r2, r1
 80002bc:	43d2      	mvns	r2, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a6b      	ldr	r2, [pc, #428]	@ (8000470 <GPIO_Init+0x240>)
 80002c2:	400b      	ands	r3, r1
 80002c4:	6013      	str	r3, [r2, #0]
	EXTI->EXTI_IMR |= (ACTIVE << initPinConfig.PinNumber);
 80002c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000470 <GPIO_Init+0x240>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	793a      	ldrb	r2, [r7, #4]
 80002cc:	4611      	mov	r1, r2
 80002ce:	2201      	movs	r2, #1
 80002d0:	408a      	lsls	r2, r1
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a66      	ldr	r2, [pc, #408]	@ (8000470 <GPIO_Init+0x240>)
 80002d6:	430b      	orrs	r3, r1
 80002d8:	6013      	str	r3, [r2, #0]

	uint32_t temp = (initPinConfig.PinMode << (ledshift * initPinConfig.PinNumber));
 80002da:	797b      	ldrb	r3, [r7, #5]
 80002dc:	461a      	mov	r2, r3
 80002de:	793b      	ldrb	r3, [r7, #4]
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	fa02 f303 	lsl.w	r3, r2, r3
 80002e6:	613b      	str	r3, [r7, #16]

	initRegDefPointer->GPIOG_MODER &= ~(0x3) << (ledshift * initPinConfig.PinNumber);
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	793a      	ldrb	r2, [r7, #4]
 80002ee:	0052      	lsls	r2, r2, #1
 80002f0:	f06f 0103 	mvn.w	r1, #3
 80002f4:	fa01 f202 	lsl.w	r2, r1, r2
 80002f8:	401a      	ands	r2, r3
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	601a      	str	r2, [r3, #0]
	initRegDefPointer->GPIOG_MODER |= temp;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	431a      	orrs	r2, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	601a      	str	r2, [r3, #0]

	if(initPinConfig.PinIntMode == NO_INTERUPT) { //none
 800030a:	7a7b      	ldrb	r3, [r7, #9]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d116      	bne.n	800033e <GPIO_Init+0x10e>
		EXTI->EXTI_RTSR &= ~(ACTIVE << initPinConfig.PinNumber);
 8000310:	4b57      	ldr	r3, [pc, #348]	@ (8000470 <GPIO_Init+0x240>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	793a      	ldrb	r2, [r7, #4]
 8000316:	4611      	mov	r1, r2
 8000318:	2201      	movs	r2, #1
 800031a:	408a      	lsls	r2, r1
 800031c:	43d2      	mvns	r2, r2
 800031e:	4611      	mov	r1, r2
 8000320:	4a53      	ldr	r2, [pc, #332]	@ (8000470 <GPIO_Init+0x240>)
 8000322:	400b      	ands	r3, r1
 8000324:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_FTSR &= ~(ACTIVE << initPinConfig.PinNumber);
 8000326:	4b52      	ldr	r3, [pc, #328]	@ (8000470 <GPIO_Init+0x240>)
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	793a      	ldrb	r2, [r7, #4]
 800032c:	4611      	mov	r1, r2
 800032e:	2201      	movs	r2, #1
 8000330:	408a      	lsls	r2, r1
 8000332:	43d2      	mvns	r2, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a4e      	ldr	r2, [pc, #312]	@ (8000470 <GPIO_Init+0x240>)
 8000338:	400b      	ands	r3, r1
 800033a:	60d3      	str	r3, [r2, #12]
 800033c:	e048      	b.n	80003d0 <GPIO_Init+0x1a0>
	}
	else if(initPinConfig.PinIntMode == FALLING_INTERUPT) { //falling
 800033e:	7a7b      	ldrb	r3, [r7, #9]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d115      	bne.n	8000370 <GPIO_Init+0x140>
		EXTI->EXTI_FTSR |= (ACTIVE << initPinConfig.PinNumber);
 8000344:	4b4a      	ldr	r3, [pc, #296]	@ (8000470 <GPIO_Init+0x240>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	793a      	ldrb	r2, [r7, #4]
 800034a:	4611      	mov	r1, r2
 800034c:	2201      	movs	r2, #1
 800034e:	408a      	lsls	r2, r1
 8000350:	4611      	mov	r1, r2
 8000352:	4a47      	ldr	r2, [pc, #284]	@ (8000470 <GPIO_Init+0x240>)
 8000354:	430b      	orrs	r3, r1
 8000356:	60d3      	str	r3, [r2, #12]
		EXTI->EXTI_RTSR &= ~(ACTIVE << initPinConfig.PinNumber);
 8000358:	4b45      	ldr	r3, [pc, #276]	@ (8000470 <GPIO_Init+0x240>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	793a      	ldrb	r2, [r7, #4]
 800035e:	4611      	mov	r1, r2
 8000360:	2201      	movs	r2, #1
 8000362:	408a      	lsls	r2, r1
 8000364:	43d2      	mvns	r2, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a41      	ldr	r2, [pc, #260]	@ (8000470 <GPIO_Init+0x240>)
 800036a:	400b      	ands	r3, r1
 800036c:	6093      	str	r3, [r2, #8]
 800036e:	e02f      	b.n	80003d0 <GPIO_Init+0x1a0>
	}
	else if(initPinConfig.PinIntMode == RISING_INTERUPT) {
 8000370:	7a7b      	ldrb	r3, [r7, #9]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d115      	bne.n	80003a2 <GPIO_Init+0x172>
		EXTI->EXTI_RTSR |= (ACTIVE << initPinConfig.PinNumber);
 8000376:	4b3e      	ldr	r3, [pc, #248]	@ (8000470 <GPIO_Init+0x240>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	793a      	ldrb	r2, [r7, #4]
 800037c:	4611      	mov	r1, r2
 800037e:	2201      	movs	r2, #1
 8000380:	408a      	lsls	r2, r1
 8000382:	4611      	mov	r1, r2
 8000384:	4a3a      	ldr	r2, [pc, #232]	@ (8000470 <GPIO_Init+0x240>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_FTSR &= ~(ACTIVE << initPinConfig.PinNumber);
 800038a:	4b39      	ldr	r3, [pc, #228]	@ (8000470 <GPIO_Init+0x240>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	793a      	ldrb	r2, [r7, #4]
 8000390:	4611      	mov	r1, r2
 8000392:	2201      	movs	r2, #1
 8000394:	408a      	lsls	r2, r1
 8000396:	43d2      	mvns	r2, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a35      	ldr	r2, [pc, #212]	@ (8000470 <GPIO_Init+0x240>)
 800039c:	400b      	ands	r3, r1
 800039e:	60d3      	str	r3, [r2, #12]
 80003a0:	e016      	b.n	80003d0 <GPIO_Init+0x1a0>
	}
	else if(initPinConfig.PinIntMode == FALLING_RISING_INTERUPT) {
 80003a2:	7a7b      	ldrb	r3, [r7, #9]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d113      	bne.n	80003d0 <GPIO_Init+0x1a0>
		EXTI->EXTI_RTSR |= (ACTIVE << initPinConfig.PinNumber);
 80003a8:	4b31      	ldr	r3, [pc, #196]	@ (8000470 <GPIO_Init+0x240>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	793a      	ldrb	r2, [r7, #4]
 80003ae:	4611      	mov	r1, r2
 80003b0:	2201      	movs	r2, #1
 80003b2:	408a      	lsls	r2, r1
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000470 <GPIO_Init+0x240>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_FTSR |= (ACTIVE << initPinConfig.PinNumber);
 80003bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000470 <GPIO_Init+0x240>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	793a      	ldrb	r2, [r7, #4]
 80003c2:	4611      	mov	r1, r2
 80003c4:	2201      	movs	r2, #1
 80003c6:	408a      	lsls	r2, r1
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a29      	ldr	r2, [pc, #164]	@ (8000470 <GPIO_Init+0x240>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	60d3      	str	r3, [r2, #12]
	}



	temp = (initPinConfig.PinSpeed << (ledshift * initPinConfig.PinNumber));
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	461a      	mov	r2, r3
 80003d4:	793b      	ldrb	r3, [r7, #4]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	613b      	str	r3, [r7, #16]
	initRegDefPointer->GPIOG_OSPEEDR &= ~(0x3) << (ledshift * initPinConfig.PinNumber);
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	793a      	ldrb	r2, [r7, #4]
 80003e4:	0052      	lsls	r2, r2, #1
 80003e6:	f06f 0103 	mvn.w	r1, #3
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	401a      	ands	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	609a      	str	r2, [r3, #8]
	initRegDefPointer->GPIOG_OSPEEDR |= temp;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	689a      	ldr	r2, [r3, #8]
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	431a      	orrs	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	609a      	str	r2, [r3, #8]

	temp = (initPinConfig.PinPuPdControl << (ledshift * initPinConfig.PinNumber));
 8000400:	7a3b      	ldrb	r3, [r7, #8]
 8000402:	461a      	mov	r2, r3
 8000404:	793b      	ldrb	r3, [r7, #4]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	613b      	str	r3, [r7, #16]
	initRegDefPointer->GPIOG_PUPDR &= ~((0x3) << (ledshift * initPinConfig.PinNumber));
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	793a      	ldrb	r2, [r7, #4]
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	2103      	movs	r1, #3
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	60da      	str	r2, [r3, #12]
	initRegDefPointer->GPIOG_PUPDR |= temp;
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	68da      	ldr	r2, [r3, #12]
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	431a      	orrs	r2, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	60da      	str	r2, [r3, #12]

	temp = (initPinConfig.OPType << (ledshift * initPinConfig.PinNumber));
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	461a      	mov	r2, r3
 8000434:	793b      	ldrb	r3, [r7, #4]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	613b      	str	r3, [r7, #16]
	initRegDefPointer->GPIOG_OTYPER &= ~((0x1) << (initPinConfig.PinNumber));
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	793a      	ldrb	r2, [r7, #4]
 8000444:	4611      	mov	r1, r2
 8000446:	2201      	movs	r2, #1
 8000448:	408a      	lsls	r2, r1
 800044a:	43d2      	mvns	r2, r2
 800044c:	401a      	ands	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	605a      	str	r2, [r3, #4]
	initRegDefPointer->GPIOG_OTYPER |= temp;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	431a      	orrs	r2, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	605a      	str	r2, [r3, #4]
}
 800045e:	bf00      	nop
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40023800 	.word	0x40023800
 800046c:	40013800 	.word	0x40013800
 8000470:	40013c00 	.word	0x40013c00

08000474 <GPIO_ClockControl>:
void GPIO_ClockControl(GPIO_RegDef_t * controlRegDefPointer, uint8_t toggle) {
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	70fb      	strb	r3, [r7, #3]
	uint8_t offset = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	73fb      	strb	r3, [r7, #15]

	if(controlRegDefPointer == GPIOA) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a2e      	ldr	r2, [pc, #184]	@ (8000540 <GPIO_ClockControl+0xcc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d102      	bne.n	8000492 <GPIO_ClockControl+0x1e>
		offset = RCC_AHB1_GPIOA_OFFSET;
 800048c:	2300      	movs	r3, #0
 800048e:	73fb      	strb	r3, [r7, #15]
 8000490:	e036      	b.n	8000500 <GPIO_ClockControl+0x8c>
	}
	else if(controlRegDefPointer == GPIOB) {
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a2b      	ldr	r2, [pc, #172]	@ (8000544 <GPIO_ClockControl+0xd0>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d102      	bne.n	80004a0 <GPIO_ClockControl+0x2c>
		offset = RCC_AHB1_GPIOB_OFFSET;
 800049a:	2301      	movs	r3, #1
 800049c:	73fb      	strb	r3, [r7, #15]
 800049e:	e02f      	b.n	8000500 <GPIO_ClockControl+0x8c>
	}
	else if(controlRegDefPointer == GPIOC) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a29      	ldr	r2, [pc, #164]	@ (8000548 <GPIO_ClockControl+0xd4>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d102      	bne.n	80004ae <GPIO_ClockControl+0x3a>
			offset = RCC_AHB1_GPIOC_OFFSET;
 80004a8:	2302      	movs	r3, #2
 80004aa:	73fb      	strb	r3, [r7, #15]
 80004ac:	e028      	b.n	8000500 <GPIO_ClockControl+0x8c>
		}
	else if(controlRegDefPointer == GPIOD) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a26      	ldr	r2, [pc, #152]	@ (800054c <GPIO_ClockControl+0xd8>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d102      	bne.n	80004bc <GPIO_ClockControl+0x48>
			offset = RCC_AHB1_GPIOD_OFFSET;
 80004b6:	2303      	movs	r3, #3
 80004b8:	73fb      	strb	r3, [r7, #15]
 80004ba:	e021      	b.n	8000500 <GPIO_ClockControl+0x8c>
		}
	else if(controlRegDefPointer == GPIOE) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a24      	ldr	r2, [pc, #144]	@ (8000550 <GPIO_ClockControl+0xdc>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d102      	bne.n	80004ca <GPIO_ClockControl+0x56>
			offset = RCC_AHB1_GPIOE_OFFSET;
 80004c4:	2304      	movs	r3, #4
 80004c6:	73fb      	strb	r3, [r7, #15]
 80004c8:	e01a      	b.n	8000500 <GPIO_ClockControl+0x8c>
		}
	else if(controlRegDefPointer == GPIOF) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a21      	ldr	r2, [pc, #132]	@ (8000554 <GPIO_ClockControl+0xe0>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d102      	bne.n	80004d8 <GPIO_ClockControl+0x64>
			offset = RCC_AHB1_GPIOF_OFFSET;
 80004d2:	2305      	movs	r3, #5
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	e013      	b.n	8000500 <GPIO_ClockControl+0x8c>
		}
	else if(controlRegDefPointer == GPIOG) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a1f      	ldr	r2, [pc, #124]	@ (8000558 <GPIO_ClockControl+0xe4>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d102      	bne.n	80004e6 <GPIO_ClockControl+0x72>
			offset = RCC_AHB1_GPIOG_OFFSET;
 80004e0:	2306      	movs	r3, #6
 80004e2:	73fb      	strb	r3, [r7, #15]
 80004e4:	e00c      	b.n	8000500 <GPIO_ClockControl+0x8c>
		}
	else if(controlRegDefPointer == GPIOH) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a1c      	ldr	r2, [pc, #112]	@ (800055c <GPIO_ClockControl+0xe8>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d102      	bne.n	80004f4 <GPIO_ClockControl+0x80>
			offset = RCC_AHB1_GPIOH_OFFSET;
 80004ee:	2307      	movs	r3, #7
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e005      	b.n	8000500 <GPIO_ClockControl+0x8c>
		}
	else if(controlRegDefPointer == GPIOI) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000560 <GPIO_ClockControl+0xec>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d101      	bne.n	8000500 <GPIO_ClockControl+0x8c>
			offset = RCC_AHB1_GPIOI_OFFSET;
 80004fc:	2308      	movs	r3, #8
 80004fe:	73fb      	strb	r3, [r7, #15]
		}



	if(toggle == ACTIVE) {
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d10a      	bne.n	800051c <GPIO_ClockControl+0xa8>
		GPIO_CLOCK_ENABLE(offset);
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <GPIO_ClockControl+0xf0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	7bfa      	ldrb	r2, [r7, #15]
 800050c:	2101      	movs	r1, #1
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	4611      	mov	r1, r2
 8000514:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <GPIO_ClockControl+0xf0>)
 8000516:	430b      	orrs	r3, r1
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
		GPIO_CLOCK_DISABLE(offset);


	}

}
 800051a:	e00a      	b.n	8000532 <GPIO_ClockControl+0xbe>
		GPIO_CLOCK_DISABLE(offset);
 800051c:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <GPIO_ClockControl+0xf0>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	7bfa      	ldrb	r2, [r7, #15]
 8000522:	2101      	movs	r1, #1
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	43d2      	mvns	r2, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <GPIO_ClockControl+0xf0>)
 800052e:	400b      	ands	r3, r1
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40020000 	.word	0x40020000
 8000544:	40020400 	.word	0x40020400
 8000548:	40020800 	.word	0x40020800
 800054c:	40020c00 	.word	0x40020c00
 8000550:	40021000 	.word	0x40021000
 8000554:	40021400 	.word	0x40021400
 8000558:	40021800 	.word	0x40021800
 800055c:	40021c00 	.word	0x40021c00
 8000560:	40022000 	.word	0x40022000
 8000564:	40023800 	.word	0x40023800

08000568 <GPIO_WriteToOutputPin>:
void GPIO_WriteToOutputPin(GPIO_RegDef_t * writeRegDefPointer, uint8_t pinNumber, uint8_t value) {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
 8000574:	4613      	mov	r3, r2
 8000576:	70bb      	strb	r3, [r7, #2]
	if(value == ACTIVE) {
 8000578:	78bb      	ldrb	r3, [r7, #2]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d109      	bne.n	8000592 <GPIO_WriteToOutputPin+0x2a>
		writeRegDefPointer->GPIOG_ODR |= (ACTIVE << pinNumber);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	78fa      	ldrb	r2, [r7, #3]
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	431a      	orrs	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	615a      	str	r2, [r3, #20]
	else {
		writeRegDefPointer->GPIOG_ODR &= ~(ACTIVE << pinNumber);

	}

}
 8000590:	e009      	b.n	80005a6 <GPIO_WriteToOutputPin+0x3e>
		writeRegDefPointer->GPIOG_ODR &= ~(ACTIVE << pinNumber);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	78fa      	ldrb	r2, [r7, #3]
 8000598:	2101      	movs	r1, #1
 800059a:	fa01 f202 	lsl.w	r2, r1, r2
 800059e:	43d2      	mvns	r2, r2
 80005a0:	401a      	ands	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	615a      	str	r2, [r3, #20]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <GPIO_ToggleOutputPin>:
void GPIO_ToggleOutputPin(GPIO_RegDef_t * toggleRegDefPointer, uint8_t pinNumber) {
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	70fb      	strb	r3, [r7, #3]
	if(((toggleRegDefPointer->GPIOG_ODR >> pinNumber) & 0x1) == 0x1) {
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	fa22 f303 	lsr.w	r3, r2, r3
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d10a      	bne.n	80005e6 <GPIO_ToggleOutputPin+0x34>
		toggleRegDefPointer->GPIOG_ODR &= ~(ACTIVE << pinNumber);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	43d2      	mvns	r2, r2
 80005de:	401a      	ands	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	615a      	str	r2, [r3, #20]
	}
	else {
		toggleRegDefPointer->GPIOG_ODR |= (ACTIVE << pinNumber);
	}

}
 80005e4:	e008      	b.n	80005f8 <GPIO_ToggleOutputPin+0x46>
		toggleRegDefPointer->GPIOG_ODR |= (ACTIVE << pinNumber);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	78fa      	ldrb	r2, [r7, #3]
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	431a      	orrs	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	615a      	str	r2, [r3, #20]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <GPIO_ReadOutputPin>:
uint8_t GPIO_ReadOutputPin(GPIO_RegDef_t * readOutputPointer, uint8_t pinNumber) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
	uint8_t val = ((readOutputPointer->GPIOG_IDR >> pinNumber) & 0x01);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	691a      	ldr	r2, [r3, #16]
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
	return val;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <GPIO_ReadPort>:
uint16_t GPIO_ReadPort(GPIO_RegDef_t * readPort, uint16_t pinNumber) {
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
	if(readPort == GPIOA) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a1e      	ldr	r2, [pc, #120]	@ (80006b8 <GPIO_ReadPort+0x88>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d101      	bne.n	8000648 <GPIO_ReadPort+0x18>
			return GPIOA_PORT;
 8000644:	2300      	movs	r3, #0
 8000646:	e030      	b.n	80006aa <GPIO_ReadPort+0x7a>
		}
		else if(readPort == GPIOB) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a1c      	ldr	r2, [pc, #112]	@ (80006bc <GPIO_ReadPort+0x8c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d101      	bne.n	8000654 <GPIO_ReadPort+0x24>
			return GPIOB_PORT;
 8000650:	2301      	movs	r3, #1
 8000652:	e02a      	b.n	80006aa <GPIO_ReadPort+0x7a>
		}
		else if(readPort == GPIOC) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a1a      	ldr	r2, [pc, #104]	@ (80006c0 <GPIO_ReadPort+0x90>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d101      	bne.n	8000660 <GPIO_ReadPort+0x30>
			return GPIOC_PORT;
 800065c:	2302      	movs	r3, #2
 800065e:	e024      	b.n	80006aa <GPIO_ReadPort+0x7a>
			}
		else if(readPort == GPIOD) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a18      	ldr	r2, [pc, #96]	@ (80006c4 <GPIO_ReadPort+0x94>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d101      	bne.n	800066c <GPIO_ReadPort+0x3c>
			return GPIOD_PORT;
 8000668:	2303      	movs	r3, #3
 800066a:	e01e      	b.n	80006aa <GPIO_ReadPort+0x7a>
			}
		else if(readPort == GPIOE) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <GPIO_ReadPort+0x98>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d101      	bne.n	8000678 <GPIO_ReadPort+0x48>
			return GPIOE_PORT;
 8000674:	2304      	movs	r3, #4
 8000676:	e018      	b.n	80006aa <GPIO_ReadPort+0x7a>
			}
		else if(readPort == GPIOF) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a14      	ldr	r2, [pc, #80]	@ (80006cc <GPIO_ReadPort+0x9c>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d101      	bne.n	8000684 <GPIO_ReadPort+0x54>
			return GPIOF_PORT;
 8000680:	2305      	movs	r3, #5
 8000682:	e012      	b.n	80006aa <GPIO_ReadPort+0x7a>
			}
		else if(readPort == GPIOG) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <GPIO_ReadPort+0xa0>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d101      	bne.n	8000690 <GPIO_ReadPort+0x60>
			return GPIOG_PORT;
 800068c:	2306      	movs	r3, #6
 800068e:	e00c      	b.n	80006aa <GPIO_ReadPort+0x7a>
			}
		else if(readPort == GPIOH) {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a10      	ldr	r2, [pc, #64]	@ (80006d4 <GPIO_ReadPort+0xa4>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d101      	bne.n	800069c <GPIO_ReadPort+0x6c>
			return GPIOH_PORT;
 8000698:	2307      	movs	r3, #7
 800069a:	e006      	b.n	80006aa <GPIO_ReadPort+0x7a>
			}
		else if(readPort == GPIOI) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <GPIO_ReadPort+0xa8>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d101      	bne.n	80006a8 <GPIO_ReadPort+0x78>
			return GPIOI_PORT;
 80006a4:	2308      	movs	r3, #8
 80006a6:	e000      	b.n	80006aa <GPIO_ReadPort+0x7a>
			}
		else {
			return 0;
 80006a8:	2300      	movs	r3, #0
		}
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40021400 	.word	0x40021400
 80006d0:	40021800 	.word	0x40021800
 80006d4:	40021c00 	.word	0x40021c00
 80006d8:	40022000 	.word	0x40022000

080006dc <IRQ_Enable>:

}
 */
#include "InteruptControl.h"

void IRQ_Enable(uint8_t interuptNumber) { //NVIC_ISER0
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	if(interuptNumber < 32) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b1f      	cmp	r3, #31
 80006ea:	d809      	bhi.n	8000700 <IRQ_Enable+0x24>
		*NVIC_ISER0 |= (1 << interuptNumber);
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <IRQ_Enable+0x30>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	2101      	movs	r1, #1
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a04      	ldr	r2, [pc, #16]	@ (800070c <IRQ_Enable+0x30>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]
	}
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <IRQ_Disable>:
void IRQ_Disable(uint8_t interuptNumber) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	if(interuptNumber < 32) {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b1f      	cmp	r3, #31
 800071e:	d809      	bhi.n	8000734 <IRQ_Disable+0x24>
		*NVIC_ICER0 |= (ACTIVE << interuptNumber);
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <IRQ_Disable+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <IRQ_Disable+0x30>)
 8000730:	430b      	orrs	r3, r1
 8000732:	6013      	str	r3, [r2, #0]
	}
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000e180 	.word	0xe000e180

08000744 <EXTI_Clear>:
	if(interuptNumber < 32) {
		*NVIC_ISPR0 |= (ACTIVE << interuptNumber);
	}
}

void EXTI_Clear(uint8_t interuptNumber) { //represeting pin number
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	EXTI->EXTI_PR |= (ACTIVE << interuptNumber);
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <EXTI_Clear+0x2c>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	2101      	movs	r1, #1
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <EXTI_Clear+0x2c>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6153      	str	r3, [r2, #20]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40013c00 	.word	0x40013c00

08000774 <LED_Init>:
}GPIO_PinConfig_t;

 */
GPIO_PinConfig_t RED_LED = {GPIO_PIN_14,GPIO_MODE_OUTPUT,GPIO_OPTYPE_PUSHPULL,GPIO_SPEED_MEDIUM,GPIO_PUPD_NONE};
GPIO_PinConfig_t GREEN_LED = {GPIO_PIN_13,GPIO_MODE_OUTPUT,GPIO_OPTYPE_PUSHPULL,GPIO_SPEED_MEDIUM,GPIO_PUPD_NONE};
void LED_Init(uint8_t led) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]

	switch(led) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <LED_Init+0x16>
 8000784:	2b01      	cmp	r3, #1
 8000786:	d007      	beq.n	8000798 <LED_Init+0x24>

						GPIO_Init(GPIOG,GREEN_LED);
						break;
	}

}
 8000788:	e00d      	b.n	80007a6 <LED_Init+0x32>
						GPIO_Init(GPIOG,RED_LED);
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <LED_Init+0x3c>)
 800078c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000790:	4808      	ldr	r0, [pc, #32]	@ (80007b4 <LED_Init+0x40>)
 8000792:	f7ff fd4d 	bl	8000230 <GPIO_Init>
						break;
 8000796:	e006      	b.n	80007a6 <LED_Init+0x32>
						GPIO_Init(GPIOG,GREEN_LED);
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <LED_Init+0x44>)
 800079a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <LED_Init+0x40>)
 80007a0:	f7ff fd46 	bl	8000230 <GPIO_Init>
						break;
 80007a4:	bf00      	nop
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000008 	.word	0x20000008
 80007b4:	40021800 	.word	0x40021800
 80007b8:	20000010 	.word	0x20000010

080007bc <toggleLED>:
void toggleLED(uint8_t led) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]

	switch(led) {
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <toggleLED+0x16>
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d007      	beq.n	80007e0 <toggleLED+0x24>
		break;

		case 1: GPIO_ToggleOutputPin(GPIOG,GREEN_LED.PinNumber);
		break;
	}
}
 80007d0:	e00d      	b.n	80007ee <toggleLED+0x32>
		case 0: GPIO_ToggleOutputPin(GPIOG,RED_LED.PinNumber);
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <toggleLED+0x3c>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <toggleLED+0x40>)
 80007da:	f7ff feea 	bl	80005b2 <GPIO_ToggleOutputPin>
		break;
 80007de:	e006      	b.n	80007ee <toggleLED+0x32>
		case 1: GPIO_ToggleOutputPin(GPIOG,GREEN_LED.PinNumber);
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <toggleLED+0x44>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <toggleLED+0x40>)
 80007e8:	f7ff fee3 	bl	80005b2 <GPIO_ToggleOutputPin>
		break;
 80007ec:	bf00      	nop
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008
 80007fc:	40021800 	.word	0x40021800
 8000800:	20000010 	.word	0x20000010

08000804 <turnOffLED>:
void turnOffLED(uint8_t led) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	switch(led) {
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <turnOffLED+0x16>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d007      	beq.n	8000828 <turnOffLED+0x24>
		case 0: GPIO_WriteToOutputPin(GPIOG,RED_LED.PinNumber,0);

		case 1: GPIO_WriteToOutputPin(GPIOG,GREEN_LED.PinNumber,0);

	}
}
 8000818:	e00d      	b.n	8000836 <turnOffLED+0x32>
		case 0: GPIO_WriteToOutputPin(GPIOG,RED_LED.PinNumber,0);
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <turnOffLED+0x3c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	4808      	ldr	r0, [pc, #32]	@ (8000844 <turnOffLED+0x40>)
 8000824:	f7ff fea0 	bl	8000568 <GPIO_WriteToOutputPin>
		case 1: GPIO_WriteToOutputPin(GPIOG,GREEN_LED.PinNumber,0);
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <turnOffLED+0x44>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <turnOffLED+0x40>)
 8000832:	f7ff fe99 	bl	8000568 <GPIO_WriteToOutputPin>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008
 8000844:	40021800 	.word	0x40021800
 8000848:	20000010 	.word	0x20000010

0800084c <turnOnLED>:
void turnOnLED(uint8_t led) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	switch(led) {
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <turnOnLED+0x16>
 800085c:	2b01      	cmp	r3, #1
 800085e:	d007      	beq.n	8000870 <turnOnLED+0x24>

		case 1: GPIO_WriteToOutputPin(GPIOG,GREEN_LED.PinNumber,1);

	}

}
 8000860:	e00d      	b.n	800087e <turnOnLED+0x32>
		case 0: GPIO_WriteToOutputPin(GPIOG,RED_LED.PinNumber,1);
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <turnOnLED+0x3c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2201      	movs	r2, #1
 8000868:	4619      	mov	r1, r3
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <turnOnLED+0x40>)
 800086c:	f7ff fe7c 	bl	8000568 <GPIO_WriteToOutputPin>
		case 1: GPIO_WriteToOutputPin(GPIOG,GREEN_LED.PinNumber,1);
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <turnOnLED+0x44>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2201      	movs	r2, #1
 8000876:	4619      	mov	r1, r3
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <turnOnLED+0x40>)
 800087a:	f7ff fe75 	bl	8000568 <GPIO_WriteToOutputPin>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008
 800088c:	40021800 	.word	0x40021800
 8000890:	20000010 	.word	0x20000010

08000894 <greenLEDInit>:
 */


#include "applicationCode.h"

void greenLEDInit() {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	LED_Init(GREEN);
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff ff6b 	bl	8000774 <LED_Init>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <toggleGreenLED>:
void redLEDInit() {
	LED_Init(RED);
}
void toggleGreenLED() {
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
	toggleLED(GREEN);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff ff88 	bl	80007bc <toggleLED>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <toggleRedLED>:
void toggleRedLED() {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	toggleLED(RED);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff ff81 	bl	80007bc <toggleLED>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}

080008be <activateGreenLED>:
void activateGreenLED() {
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
	turnOnLED(GREEN);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff ffc2 	bl	800084c <turnOnLED>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <deactivateGreenLED>:
void activateRedLED() {
	turnOnLED(RED);
}
void deactivateGreenLED() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	turnOffLED(GREEN);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff ff97 	bl	8000804 <turnOffLED>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}

080008da <btnInit>:
void deactivateRedLED() {
	turnOffLED(RED);
}
void btnInit() {
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
	BTN_Init();
 80008de:	f7ff fc85 	bl	80001ec <BTN_Init>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <executeBtnRoutine>:
void btnInteruptInit() {
	BTN_Interupt_Init();
}
void executeBtnRoutine() {
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
	if(BTN_Pressed()) {
 80008ea:	f7ff fc8d 	bl	8000208 <BTN_Pressed>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <executeBtnRoutine+0x14>
		activateGreenLED();
 80008f4:	f7ff ffe3 	bl	80008be <activateGreenLED>
	}
	else {
		deactivateGreenLED();
	}
}
 80008f8:	e001      	b.n	80008fe <executeBtnRoutine+0x18>
		deactivateGreenLED();
 80008fa:	f7ff ffe7 	bl	80008cc <deactivateGreenLED>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <appDelay>:
void appDelay(uint32_t delay) {
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	@ 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	char name[NAMELENGTH] = "Jacob";
 800090c:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <appDelay+0x64>)
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000916:	6018      	str	r0, [r3, #0]
 8000918:	3304      	adds	r3, #4
 800091a:	7019      	strb	r1, [r3, #0]
		[[maybe_unused]] char destinationArray[NAMELENGTH];
		for(uint32_t i = 0; i<delay;i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
 8000920:	e016      	b.n	8000950 <appDelay+0x4c>
			for(uint32_t j = 0; j<NAMELENGTH;j++) {
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	e00d      	b.n	8000944 <appDelay+0x40>
				destinationArray[j] = name[j];
 8000928:	f107 0210 	add.w	r2, r7, #16
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	4413      	add	r3, r2
 8000930:	7819      	ldrb	r1, [r3, #0]
 8000932:	f107 0208 	add.w	r2, r7, #8
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	4413      	add	r3, r2
 800093a:	460a      	mov	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
			for(uint32_t j = 0; j<NAMELENGTH;j++) {
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	3301      	adds	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b04      	cmp	r3, #4
 8000948:	d9ee      	bls.n	8000928 <appDelay+0x24>
		for(uint32_t i = 0; i<delay;i++) {
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3301      	adds	r3, #1
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	69fa      	ldr	r2, [r7, #28]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	d3e4      	bcc.n	8000922 <appDelay+0x1e>
			}
		}
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3724      	adds	r7, #36	@ 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	08000afc 	.word	0x08000afc

0800096c <applicationInit>:
void applicationInit() {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	//redLEDInit();
	greenLEDInit();
 8000970:	f7ff ff90 	bl	8000894 <greenLEDInit>
	deactivateGreenLED();
 8000974:	f7ff ffaa 	bl	80008cc <deactivateGreenLED>

#if !USE_INTERRUPT_FOR_BUTTON
	btnInit();
 8000978:	f7ff ffaf 	bl	80008da <btnInit>
	addSchedulerEvent(BTN_POLLING_EVENT);
 800097c:	2004      	movs	r0, #4
 800097e:	f000 f851 	bl	8000a24 <addSchedulerEvent>
#else
#error "USE_INTERUPT_FOR_BUTTON must be 0 or 1"
#endif

	//addSchedulerEvent(LED_TOGGLE_EVENT);
	addSchedulerEvent(LED_DELAY_EVENT);
 8000982:	2002      	movs	r0, #2
 8000984:	f000 f84e 	bl	8000a24 <addSchedulerEvent>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <EXTI0_IRQHandler>:
	void EXTI0_IRQHandler(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
		IRQ_Disable(EXTI0_IRQ_NUMBER);
 8000990:	2006      	movs	r0, #6
 8000992:	f7ff febd 	bl	8000710 <IRQ_Disable>
		toggleGreenLED();
 8000996:	f7ff ff84 	bl	80008a2 <toggleGreenLED>
		EXTI_Clear(GPIO_PIN_0);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fed2 	bl	8000744 <EXTI_Clear>
		IRQ_Enable(EXTI0_IRQ_NUMBER);
 80009a0:	2006      	movs	r0, #6
 80009a2:	f7ff fe9b 	bl	80006dc <IRQ_Enable>
	}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <main>:
#include "applicationCode.h"
#include "scheduler.h"



int main(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
	applicationInit();
 80009b2:	f7ff ffdb 	bl	800096c <applicationInit>
	uint32_t eventsToRun = getScheduledEvents();
 80009b6:	f000 f829 	bl	8000a0c <getScheduledEvents>
 80009ba:	60f8      	str	r0, [r7, #12]
	uint32_t eventsToRunComparisonDelay;
#if !USE_INTERRUPT_FOR_BUTTON
	uint32_t eventsToRunComparisonBTN;
#endif
	for(;;) {
		eventsToRunComparisonToggle = (eventsToRun &=LED_TOGGLE_EVENT);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	60bb      	str	r3, [r7, #8]
		eventsToRunComparisonDelay = (eventsToRun &=LED_DELAY_EVENT);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	607b      	str	r3, [r7, #4]
#if !USE_INTERRUPT_FOR_BUTTON
		eventsToRunComparisonBTN = (eventsToRun &=BTN_POLLING_EVENT);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	603b      	str	r3, [r7, #0]
#endif
		if(eventsToRun == (eventsToRunComparisonToggle)) {
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d101      	bne.n	80009ec <main+0x40>
			toggleRedLED();
 80009e8:	f7ff ff62 	bl	80008b0 <toggleRedLED>
		}
		if(eventsToRun == (eventsToRunComparisonDelay)) {
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d102      	bne.n	80009fa <main+0x4e>
			appDelay(DELAY);
 80009f4:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <main+0x5c>)
 80009f6:	f7ff ff85 	bl	8000904 <appDelay>
		}
#if !USE_INTERRUPT_FOR_BUTTON
		if(eventsToRun == (eventsToRunComparisonBTN)) {
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d1dc      	bne.n	80009bc <main+0x10>
			executeBtnRoutine();
 8000a02:	f7ff ff70 	bl	80008e6 <executeBtnRoutine>
		eventsToRunComparisonToggle = (eventsToRun &=LED_TOGGLE_EVENT);
 8000a06:	e7d9      	b.n	80009bc <main+0x10>
 8000a08:	0003d090 	.word	0x0003d090

08000a0c <getScheduledEvents>:
 */

#include "scheduler.h"

uint32_t scheduledEvent;
uint32_t getScheduledEvents() {
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	return scheduledEvent;
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <getScheduledEvents+0x14>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000034 	.word	0x20000034

08000a24 <addSchedulerEvent>:
void addSchedulerEvent(uint32_t event) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	scheduledEvent |= event;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <addSchedulerEvent+0x20>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	4a03      	ldr	r2, [pc, #12]	@ (8000a44 <addSchedulerEvent+0x20>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20000034 	.word	0x20000034

08000a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a52:	490d      	ldr	r1, [pc, #52]	@ (8000a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a54:	4a0d      	ldr	r2, [pc, #52]	@ (8000a8c <LoopForever+0xe>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a68:	4c0a      	ldr	r4, [pc, #40]	@ (8000a94 <LoopForever+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a76:	f000 f811 	bl	8000a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff ff97 	bl	80009ac <main>

08000a7e <LoopForever>:

LoopForever:
  b LoopForever
 8000a7e:	e7fe      	b.n	8000a7e <LoopForever>
  ldr   r0, =_estack
 8000a80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a8c:	08000b0c 	.word	0x08000b0c
  ldr r2, =_sbss
 8000a90:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a94:	20000038 	.word	0x20000038

08000a98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <__libc_init_array>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ad4 <__libc_init_array+0x38>)
 8000aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8000ad8 <__libc_init_array+0x3c>)
 8000aa2:	1b64      	subs	r4, r4, r5
 8000aa4:	10a4      	asrs	r4, r4, #2
 8000aa6:	2600      	movs	r6, #0
 8000aa8:	42a6      	cmp	r6, r4
 8000aaa:	d109      	bne.n	8000ac0 <__libc_init_array+0x24>
 8000aac:	4d0b      	ldr	r5, [pc, #44]	@ (8000adc <__libc_init_array+0x40>)
 8000aae:	4c0c      	ldr	r4, [pc, #48]	@ (8000ae0 <__libc_init_array+0x44>)
 8000ab0:	f000 f818 	bl	8000ae4 <_init>
 8000ab4:	1b64      	subs	r4, r4, r5
 8000ab6:	10a4      	asrs	r4, r4, #2
 8000ab8:	2600      	movs	r6, #0
 8000aba:	42a6      	cmp	r6, r4
 8000abc:	d105      	bne.n	8000aca <__libc_init_array+0x2e>
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac4:	4798      	blx	r3
 8000ac6:	3601      	adds	r6, #1
 8000ac8:	e7ee      	b.n	8000aa8 <__libc_init_array+0xc>
 8000aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ace:	4798      	blx	r3
 8000ad0:	3601      	adds	r6, #1
 8000ad2:	e7f2      	b.n	8000aba <__libc_init_array+0x1e>
 8000ad4:	08000b04 	.word	0x08000b04
 8000ad8:	08000b04 	.word	0x08000b04
 8000adc:	08000b04 	.word	0x08000b04
 8000ae0:	08000b08 	.word	0x08000b08

08000ae4 <_init>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	bf00      	nop
 8000ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aea:	bc08      	pop	{r3}
 8000aec:	469e      	mov	lr, r3
 8000aee:	4770      	bx	lr

08000af0 <_fini>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	bf00      	nop
 8000af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000af6:	bc08      	pop	{r3}
 8000af8:	469e      	mov	lr, r3
 8000afa:	4770      	bx	lr
