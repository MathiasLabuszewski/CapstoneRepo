
MeshProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c368  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800c4a0  0800c4a0  0000d4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca64  0800ca64  0000e01c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca64  0800ca64  0000da64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca6c  0800ca6c  0000e01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca6c  0800ca6c  0000da6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca70  0800ca70  0000da70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800ca74  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  20000020  0800ca90  0000e020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  0800ca90  0000e9e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000e01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c94  00000000  00000000  0000e046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dda  00000000  00000000  0002ecda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f50  00000000  00000000  00034ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001779  00000000  00000000  00036a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a48  00000000  00000000  00038181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024106  00000000  00000000  00058bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2aa8  00000000  00000000  0007cccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f777  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e20  00000000  00000000  0012f7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001375dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000020 	.word	0x20000020
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c488 	.word	0x0800c488

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000024 	.word	0x20000024
 8000174:	0800c488 	.word	0x0800c488

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96a 	b.w	8000474 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460c      	mov	r4, r1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14e      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c4:	4694      	mov	ip, r2
 80001c6:	458c      	cmp	ip, r1
 80001c8:	4686      	mov	lr, r0
 80001ca:	fab2 f282 	clz	r2, r2
 80001ce:	d962      	bls.n	8000296 <__udivmoddi4+0xde>
 80001d0:	b14a      	cbz	r2, 80001e6 <__udivmoddi4+0x2e>
 80001d2:	f1c2 0320 	rsb	r3, r2, #32
 80001d6:	4091      	lsls	r1, r2
 80001d8:	fa20 f303 	lsr.w	r3, r0, r3
 80001dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e0:	4319      	orrs	r1, r3
 80001e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f6:	fb07 1114 	mls	r1, r7, r4, r1
 80001fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fe:	fb04 f106 	mul.w	r1, r4, r6
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f104 30ff 	add.w	r0, r4, #4294967295
 800020e:	f080 8112 	bcs.w	8000436 <__udivmoddi4+0x27e>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 810f 	bls.w	8000436 <__udivmoddi4+0x27e>
 8000218:	3c02      	subs	r4, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a59      	subs	r1, r3, r1
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022e:	fb00 f606 	mul.w	r6, r0, r6
 8000232:	429e      	cmp	r6, r3
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x94>
 8000236:	eb1c 0303 	adds.w	r3, ip, r3
 800023a:	f100 31ff 	add.w	r1, r0, #4294967295
 800023e:	f080 80fc 	bcs.w	800043a <__udivmoddi4+0x282>
 8000242:	429e      	cmp	r6, r3
 8000244:	f240 80f9 	bls.w	800043a <__udivmoddi4+0x282>
 8000248:	4463      	add	r3, ip
 800024a:	3802      	subs	r0, #2
 800024c:	1b9b      	subs	r3, r3, r6
 800024e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa6>
 8000256:	40d3      	lsrs	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xba>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb4>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa6>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x150>
 800027a:	42a3      	cmp	r3, r4
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xcc>
 800027e:	4290      	cmp	r0, r2
 8000280:	f0c0 80f0 	bcc.w	8000464 <__udivmoddi4+0x2ac>
 8000284:	1a86      	subs	r6, r0, r2
 8000286:	eb64 0303 	sbc.w	r3, r4, r3
 800028a:	2001      	movs	r0, #1
 800028c:	2d00      	cmp	r5, #0
 800028e:	d0e6      	beq.n	800025e <__udivmoddi4+0xa6>
 8000290:	e9c5 6300 	strd	r6, r3, [r5]
 8000294:	e7e3      	b.n	800025e <__udivmoddi4+0xa6>
 8000296:	2a00      	cmp	r2, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x204>
 800029c:	eba1 040c 	sub.w	r4, r1, ip
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	fa1f f78c 	uxth.w	r7, ip
 80002a8:	2101      	movs	r1, #1
 80002aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ba:	fb07 f006 	mul.w	r0, r7, r6
 80002be:	4298      	cmp	r0, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x11c>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x11a>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2b4>
 80002d2:	4626      	mov	r6, r4
 80002d4:	1a1c      	subs	r4, r3, r0
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e6:	fb00 f707 	mul.w	r7, r0, r7
 80002ea:	429f      	cmp	r7, r3
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x148>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x146>
 80002f8:	429f      	cmp	r7, r3
 80002fa:	f200 80b0 	bhi.w	800045e <__udivmoddi4+0x2a6>
 80002fe:	4620      	mov	r0, r4
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x9c>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa20 fc06 	lsr.w	ip, r0, r6
 8000318:	fa04 f301 	lsl.w	r3, r4, r1
 800031c:	ea43 030c 	orr.w	r3, r3, ip
 8000320:	40f4      	lsrs	r4, r6
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	0c38      	lsrs	r0, r7, #16
 8000328:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800032c:	fbb4 fef0 	udiv	lr, r4, r0
 8000330:	fa1f fc87 	uxth.w	ip, r7
 8000334:	fb00 441e 	mls	r4, r0, lr, r4
 8000338:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800033c:	fb0e f90c 	mul.w	r9, lr, ip
 8000340:	45a1      	cmp	r9, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x1a6>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800034e:	f080 8084 	bcs.w	800045a <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8081 	bls.w	800045a <__udivmoddi4+0x2a2>
 8000358:	f1ae 0e02 	sub.w	lr, lr, #2
 800035c:	443c      	add	r4, r7
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	fa1f f983 	uxth.w	r9, r3
 8000366:	fbb4 f3f0 	udiv	r3, r4, r0
 800036a:	fb00 4413 	mls	r4, r0, r3, r4
 800036e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000372:	fb03 fc0c 	mul.w	ip, r3, ip
 8000376:	45a4      	cmp	ip, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x1d2>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000380:	d267      	bcs.n	8000452 <__udivmoddi4+0x29a>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0x29a>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800038e:	fba0 9302 	umull	r9, r3, r0, r2
 8000392:	eba4 040c 	sub.w	r4, r4, ip
 8000396:	429c      	cmp	r4, r3
 8000398:	46ce      	mov	lr, r9
 800039a:	469c      	mov	ip, r3
 800039c:	d351      	bcc.n	8000442 <__udivmoddi4+0x28a>
 800039e:	d04e      	beq.n	800043e <__udivmoddi4+0x286>
 80003a0:	b155      	cbz	r5, 80003b8 <__udivmoddi4+0x200>
 80003a2:	ebb8 030e 	subs.w	r3, r8, lr
 80003a6:	eb64 040c 	sbc.w	r4, r4, ip
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	431e      	orrs	r6, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c5 6400 	strd	r6, r4, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e750      	b.n	800025e <__udivmoddi4+0xa6>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f103 	lsr.w	r1, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	fa24 f303 	lsr.w	r3, r4, r3
 80003cc:	4094      	lsls	r4, r2
 80003ce:	430c      	orrs	r4, r1
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d8:	fa1f f78c 	uxth.w	r7, ip
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3110 	mls	r1, r8, r0, r3
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x24c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29e>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29e>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb3 f1f8 	udiv	r1, r3, r8
 800040c:	fb08 3311 	mls	r3, r8, r1, r3
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x276>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x296>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x296>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e739      	b.n	80002aa <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f0      	b.n	800021c <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e706      	b.n	800024c <__udivmoddi4+0x94>
 800043e:	45c8      	cmp	r8, r9
 8000440:	d2ae      	bcs.n	80003a0 <__udivmoddi4+0x1e8>
 8000442:	ebb9 0e02 	subs.w	lr, r9, r2
 8000446:	eb63 0c07 	sbc.w	ip, r3, r7
 800044a:	3801      	subs	r0, #1
 800044c:	e7a8      	b.n	80003a0 <__udivmoddi4+0x1e8>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x276>
 8000452:	4603      	mov	r3, r0
 8000454:	e799      	b.n	800038a <__udivmoddi4+0x1d2>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x24c>
 800045a:	46d6      	mov	lr, sl
 800045c:	e77f      	b.n	800035e <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74d      	b.n	8000300 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e70f      	b.n	800028c <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e730      	b.n	80002d4 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000494:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004ac:	2004      	movs	r0, #4
 80004ae:	f7ff ffe3 	bl	8000478 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b2:	2001      	movs	r0, #1
 80004b4:	f7ff ffe0 	bl	8000478 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2102      	movs	r1, #2
 80004bc:	200f      	movs	r0, #15
 80004be:	f001 faf8 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004c2:	200f      	movs	r0, #15
 80004c4:	f001 fb0f 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f0:	68fb      	ldr	r3, [r7, #12]
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000510:	2002      	movs	r0, #2
 8000512:	f7ff ffdb 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2004      	movs	r0, #4
 8000518:	f7ff ffd8 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff ffd5 	bl	80004cc <LL_AHB2_GRP1_EnableClock>

  /*Configure LED GPIO pins */
  GPIO_InitStruct.Pin = LED_Pin;
 8000522:	2320      	movs	r3, #32
 8000524:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052e:	2302      	movs	r3, #2
 8000530:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_Port, &GPIO_InitStruct);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4619      	mov	r1, r3
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <MX_GPIO_Init+0x70>)
 8000538:	f001 fedc 	bl	80022f4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_Port, LED_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2120      	movs	r1, #32
 8000540:	480a      	ldr	r0, [pc, #40]	@ (800056c <MX_GPIO_Init+0x70>)
 8000542:	f002 f905 	bl	8002750 <HAL_GPIO_WritePin>


  /*Configure Button GPIO pins */
  GPIO_InitStruct.Pin = BUT_Pin;
 8000546:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800054a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000550:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000552:	2301      	movs	r3, #1
 8000554:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT_Port, &GPIO_InitStruct);
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4619      	mov	r1, r3
 800055a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055e:	f001 fec9 	bl	80022f4 <HAL_GPIO_Init>
}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	48000400 	.word	0x48000400

08000570 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800057c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000580:	f023 0218 	bic.w	r2, r3, #24
 8000584:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4313      	orrs	r3, r2
 800058c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f001 f961 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f80f 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f7ff ffa9 	bl	80004fc <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80005aa:	f00a f962 	bl	800a872 <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2102      	movs	r1, #2
 80005b2:	2016      	movs	r0, #22
 80005b4:	f001 fa7d 	bl	8001ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005b8:	2016      	movs	r0, #22
 80005ba:	f001 fa94 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80005be:	f00a f960 	bl	800a882 <MX_SubGHz_Phy_Process>
 80005c2:	e7fc      	b.n	80005be <main+0x24>

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b09a      	sub	sp, #104	@ 0x68
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2248      	movs	r2, #72	@ 0x48
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00b ff2c 	bl	800c430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ea:	f002 f8e1 	bl	80027b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff ffbe 	bl	8000570 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xb0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000674 <SystemClock_Config+0xb0>)
 80005fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <SystemClock_Config+0xb0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000610:	2324      	movs	r3, #36	@ 0x24
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000614:	2381      	movs	r3, #129	@ 0x81
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800061c:	2300      	movs	r3, #0
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000620:	23b0      	movs	r3, #176	@ 0xb0
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fc0b 	bl	8002e48 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000638:	f000 f81e 	bl	8000678 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800063c:	234f      	movs	r3, #79	@ 0x4f
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f002 ff76 	bl	800354c <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000666:	f000 f807 	bl	8000678 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3768      	adds	r7, #104	@ 0x68
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	58000400 	.word	0x58000400

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <Error_Handler+0x8>

08000684 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800068c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c8:	68fb      	ldr	r3, [r7, #12]
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	@ 0x30
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	222c      	movs	r2, #44	@ 0x2c
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f00b fea5 	bl	800c430 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e6:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <MX_RTC_Init+0x9c>)
 80006e8:	4a22      	ldr	r2, [pc, #136]	@ (8000774 <MX_RTC_Init+0xa0>)
 80006ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <MX_RTC_Init+0x9c>)
 80006ee:	221f      	movs	r2, #31
 80006f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_RTC_Init+0x9c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_RTC_Init+0x9c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_RTC_Init+0x9c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_RTC_Init+0x9c>)
 8000706:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800070a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_RTC_Init+0x9c>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_RTC_Init+0x9c>)
 8000714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800071a:	4815      	ldr	r0, [pc, #84]	@ (8000770 <MX_RTC_Init+0x9c>)
 800071c:	f003 fbd2 	bl	8003ec4 <HAL_RTC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000726:	f7ff ffa7 	bl	8000678 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800072a:	4811      	ldr	r0, [pc, #68]	@ (8000770 <MX_RTC_Init+0x9c>)
 800072c:	f003 fec8 	bl	80044c0 <HAL_RTCEx_SetSSRU_IT>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000736:	f7ff ff9f 	bl	8000678 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000746:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800074a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800074c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_RTC_Init+0x9c>)
 800075a:	f003 fc35 	bl	8003fc8 <HAL_RTC_SetAlarm_IT>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000764:	f7ff ff88 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3730      	adds	r7, #48	@ 0x30
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000003c 	.word	0x2000003c
 8000774:	40002800 	.word	0x40002800

08000778 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b090      	sub	sp, #64	@ 0x40
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2238      	movs	r2, #56	@ 0x38
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f00b fe51 	bl	800c430 <memset>
  if(rtcHandle->Instance==RTC)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a16      	ldr	r2, [pc, #88]	@ (80007ec <HAL_RTC_MspInit+0x74>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d125      	bne.n	80007e4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000798:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800079e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fa71 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80007b4:	f7ff ff60 	bl	8000678 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007b8:	f7ff ff64 	bl	8000684 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80007c0:	f7ff ff70 	bl	80006a4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2002      	movs	r0, #2
 80007ca:	f001 f972 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f001 f989 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	202a      	movs	r0, #42	@ 0x2a
 80007da:	f001 f96a 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80007de:	202a      	movs	r0, #42	@ 0x2a
 80007e0:	f001 f981 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3740      	adds	r7, #64	@ 0x40
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40002800 	.word	0x40002800

080007f0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80007f4:	4b03      	ldr	r3, [pc, #12]	@ (8000804 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	58000400 	.word	0x58000400

08000808 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000824:	f001 f83e 	bl	80018a4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000828:	f7ff ffe2 	bl	80007f0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800082c:	2001      	movs	r0, #1
 800082e:	f002 f851 	bl	80028d4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}

08000836 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800083a:	f001 f841 	bl	80018c0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800083e:	f000 fe83 	bl	8001548 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800084a:	f001 f82b 	bl	80018a4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f001 ffbb 	bl	80027cc <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}

0800085a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800085e:	f001 f82f 	bl	80018c0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <HardFault_Handler+0x4>

08000882 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	bf00      	nop
 8000890:	e7fd      	b.n	800088e <BusFault_Handler+0x4>

08000892 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000896:	bf00      	nop
 8000898:	e7fd      	b.n	8000896 <UsageFault_Handler+0x4>

0800089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
	...

080008cc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80008d0:	4802      	ldr	r0, [pc, #8]	@ (80008dc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80008d2:	f003 fe31 	bl	8004538 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000003c 	.word	0x2000003c

080008e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <DMA1_Channel5_IRQHandler+0x10>)
 80008e6:	f001 fb95 	bl	8002014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000011c 	.word	0x2000011c

080008f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <USART1_IRQHandler+0x10>)
 80008fa:	f004 fc6b 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000088 	.word	0x20000088

08000908 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <RTC_Alarm_IRQHandler+0x10>)
 800090e:	f003 fcc3 	bl	8004298 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000003c 	.word	0x2000003c

0800091c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <SUBGHZ_Radio_IRQHandler+0x10>)
 8000922:	f004 f977 	bl	8004c14 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000074 	.word	0x20000074

08000930 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9); // Handle interrupt for GPIO_PIN_0
 8000934:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000938:	f001 ff22 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800094c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800094e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800095c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000964:	68fb      	ldr	r3, [r7, #12]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_SUBGHZ_Init+0x20>)
 8000976:	2208      	movs	r2, #8
 8000978:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_SUBGHZ_Init+0x20>)
 800097c:	f003 fec8 	bl	8004710 <HAL_SUBGHZ_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000986:	f7ff fe77 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000074 	.word	0x20000074

08000994 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff ffcf 	bl	8000940 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2032      	movs	r0, #50	@ 0x32
 80009a8:	f001 f883 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009ac:	2032      	movs	r0, #50	@ 0x32
 80009ae:	f001 f89a 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <LL_RCC_SetClkAfterWakeFromStop>:
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80009c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80009cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	608b      	str	r3, [r1, #8]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff ffe8 	bl	80009ba <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80009ea:	f00a fffd 	bl	800b9e8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <SystemApp_Init+0x40>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80009f4:	f000 f8ba 	bl	8000b6c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80009f8:	f00b fa86 	bl	800bf08 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <SystemApp_Init+0x44>)
 80009fe:	f00b fb1f 	bl	800c040 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f00b fb2a 	bl	800c05c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a08:	f00a faa8 	bl	800af5c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f00a fae4 	bl	800afdc <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a14:	2101      	movs	r1, #1
 8000a16:	2001      	movs	r0, #1
 8000a18:	f00a fab0 	bl	800af7c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000080 	.word	0x20000080
 8000a24:	08000a35 	.word	0x08000a35

08000a28 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a2c:	f00a fb06 	bl	800b03c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00a fba4 	bl	800b190 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a4e:	9200      	str	r2, [sp, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <TimestampNow+0x3c>)
 8000a52:	2110      	movs	r1, #16
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 f81d 	bl	8000a94 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fb8c 	bl	8000178 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	0800c4a0 	.word	0x0800c4a0

08000a74 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f00a fa7e 	bl	800af7c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f00a fa76 	bl	800af7c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000a94:	b40c      	push	{r2, r3}
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000aa6:	6839      	ldr	r1, [r7, #0]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f00a fcbb 	bl	800b428 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000abc:	b002      	add	sp, #8
 8000abe:	4770      	bx	lr

08000ac0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_GetTick+0x24>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000ae6:	f000 f9cb 	bl	8000e80 <TIMER_IF_GetTimerValue>
 8000aea:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000080 	.word	0x20000080

08000afc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fa41 	bl	8000f8e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LL_AHB2_GRP1_EnableClock>:
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000b52:	4905      	ldr	r1, [pc, #20]	@ (8000b68 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	58000800 	.word	0x58000800

08000b6c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000b72:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b76:	f7ff ffe5 	bl	8000b44 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b7a:	f000 feaf 	bl	80018dc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b7e:	f000 feb3 	bl	80018e8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000b82:	f000 feb7 	bl	80018f4 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff ffb7 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f7ff ffb4 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4850      	ldr	r0, [pc, #320]	@ (8000cf8 <DBG_Init+0x18c>)
 8000bb8:	f001 fb9c 	bl	80022f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	484c      	ldr	r0, [pc, #304]	@ (8000cf8 <DBG_Init+0x18c>)
 8000bc8:	f001 fb94 	bl	80022f4 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bd2:	4849      	ldr	r0, [pc, #292]	@ (8000cf8 <DBG_Init+0x18c>)
 8000bd4:	f001 fdbc 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bde:	4846      	ldr	r0, [pc, #280]	@ (8000cf8 <DBG_Init+0x18c>)
 8000be0:	f001 fdb6 	bl	8002750 <HAL_GPIO_WritePin>

  /* HW alternate functions for monitoring RF */

#if (DEBUG_SUBGHZSPI_MONITORING_ENABLED == 1)
  /*spi dbg*/
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8000be4:	23f0      	movs	r3, #240	@ 0xf0
 8000be6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8000bf4:	230d      	movs	r3, #13
 8000bf6:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff ff8b 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c06:	f001 fb75 	bl	80022f4 <HAL_GPIO_Init>
#endif /* DEBUG_SUBGHZSPI_MONITORING_ENABLED */

#if (DEBUG_RF_NRESET_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000c1c:	230d      	movs	r3, #13
 8000c1e:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff ff77 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f001 fb61 	bl	80022f4 <HAL_GPIO_Init>
#endif /* DEBUG_RF_NRESET_ENABLED */

#if (DEBUG_RF_HSE32RDY_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000c44:	230d      	movs	r3, #13
 8000c46:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff63 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c56:	f001 fb4d 	bl	80022f4 <HAL_GPIO_Init>
#endif /* DEBUG_RF_HSE32RDY_ENABLED */

#if (DEBUG_RF_SMPSRDY_ENABLED == 1)
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8000c6a:	230d      	movs	r3, #13
 8000c6c:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f7ff ff50 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	481f      	ldr	r0, [pc, #124]	@ (8000cf8 <DBG_Init+0x18c>)
 8000c7a:	f001 fb3b 	bl	80022f4 <HAL_GPIO_Init>
#endif /* DEBUG_RF_SMPSRDY_ENABLED */

#if (DEBUG_RF_LDORDY_ENABLED == 1)
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 8000c7e:	2310      	movs	r3, #16
 8000c80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8000c8e:	230d      	movs	r3, #13
 8000c90:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2002      	movs	r0, #2
 8000c94:	f7ff ff3e 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4816      	ldr	r0, [pc, #88]	@ (8000cf8 <DBG_Init+0x18c>)
 8000c9e:	f001 fb29 	bl	80022f4 <HAL_GPIO_Init>
#endif /* DEBUG_RF_LDORDY_ENABLED */

#if (DEBUG_RF_DTB1_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8000cb2:	230d      	movs	r3, #13
 8000cb4:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff ff2c 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480d      	ldr	r0, [pc, #52]	@ (8000cf8 <DBG_Init+0x18c>)
 8000cc2:	f001 fb17 	bl	80022f4 <HAL_GPIO_Init>
#endif /* DEBUG_RF_DTB1_ENABLED */

#if (DEBUG_RF_BUSY_ENABLED == 1)
  /* Busy */
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8000cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ff19 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cea:	f001 fb03 	bl	80022f4 <HAL_GPIO_Init>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	48000400 	.word	0x48000400

08000cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
	...

08000d20 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <TIMER_IF_Init+0x5c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01b      	beq.n	8000d70 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <TIMER_IF_Init+0x60>)
 8000d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3e:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000d40:	f7ff fcc8 	bl	80006d4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000d44:	f000 f856 	bl	8000df4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000d48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <TIMER_IF_Init+0x60>)
 8000d4e:	f003 fa47 	bl	80041e0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <TIMER_IF_Init+0x60>)
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000d5a:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <TIMER_IF_Init+0x60>)
 8000d5c:	f003 fb7e 	bl	800445c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 f9d3 	bl	800110c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000d66:	f000 f85f 	bl	8000e28 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000d6a:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <TIMER_IF_Init+0x5c>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000081 	.word	0x20000081
 8000d80:	2000003c 	.word	0x2000003c

08000d84 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	@ 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	222c      	movs	r2, #44	@ 0x2c
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00b fb48 	bl	800c430 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000da0:	f000 f828 	bl	8000df4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <TIMER_IF_StartTimer+0x68>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000dbc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000dc0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000dc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <TIMER_IF_StartTimer+0x6c>)
 8000dd2:	f003 f8f9 	bl	8003fc8 <HAL_RTC_SetAlarm_IT>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000ddc:	f7ff fc4c 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000de0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3738      	adds	r7, #56	@ 0x38
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000084 	.word	0x20000084
 8000df0:	2000003c 	.word	0x2000003c

08000df4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <TIMER_IF_StopTimer+0x2c>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000e04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e08:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <TIMER_IF_StopTimer+0x30>)
 8000e0a:	f003 f9e9 	bl	80041e0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <TIMER_IF_StopTimer+0x30>)
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40002800 	.word	0x40002800
 8000e24:	2000003c 	.word	0x2000003c

08000e28 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000e2c:	f000 f98e 	bl	800114c <GetTimerTicks>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <TIMER_IF_SetTimerContext+0x18>)
 8000e34:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000e36:	4b02      	ldr	r3, [pc, #8]	@ (8000e40 <TIMER_IF_SetTimerContext+0x18>)
 8000e38:	681b      	ldr	r3, [r3, #0]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000084 	.word	0x20000084

08000e44 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000e48:	4b02      	ldr	r3, [pc, #8]	@ (8000e54 <TIMER_IF_GetTimerContext+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	20000084 	.word	0x20000084

08000e58 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000e62:	f000 f973 	bl	800114c <GetTimerTicks>
 8000e66:	4602      	mov	r2, r0
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000084 	.word	0x20000084

08000e80 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <TIMER_IF_GetTimerValue+0x24>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000e92:	f000 f95b 	bl	800114c <GetTimerTicks>
 8000e96:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000081 	.word	0x20000081

08000ea8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000eb6:	687b      	ldr	r3, [r7, #4]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000ec2:	b5b0      	push	{r4, r5, r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000eca:	2100      	movs	r1, #0
 8000ecc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	460a      	mov	r2, r1
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	0d95      	lsrs	r5, r2, #22
 8000ed8:	0294      	lsls	r4, r2, #10
 8000eda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	f7ff f94f 	bl	8000188 <__aeabi_uldivmod>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4613      	mov	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}

08000efc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000efc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000f06:	2100      	movs	r1, #0
 8000f08:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	460c      	mov	r4, r1
 8000f10:	4605      	mov	r5, r0
 8000f12:	4620      	mov	r0, r4
 8000f14:	4629      	mov	r1, r5
 8000f16:	f04f 0a00 	mov.w	sl, #0
 8000f1a:	f04f 0b00 	mov.w	fp, #0
 8000f1e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000f22:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000f26:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000f2a:	4650      	mov	r0, sl
 8000f2c:	4659      	mov	r1, fp
 8000f2e:	1b02      	subs	r2, r0, r4
 8000f30:	eb61 0305 	sbc.w	r3, r1, r5
 8000f34:	f04f 0000 	mov.w	r0, #0
 8000f38:	f04f 0100 	mov.w	r1, #0
 8000f3c:	0099      	lsls	r1, r3, #2
 8000f3e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000f42:	0090      	lsls	r0, r2, #2
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	eb12 0804 	adds.w	r8, r2, r4
 8000f4c:	eb43 0905 	adc.w	r9, r3, r5
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f64:	4690      	mov	r8, r2
 8000f66:	4699      	mov	r9, r3
 8000f68:	4640      	mov	r0, r8
 8000f6a:	4649      	mov	r1, r9
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	0a82      	lsrs	r2, r0, #10
 8000f76:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000f7a:	0a8b      	lsrs	r3, r1, #10
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000f80:	68fb      	ldr	r3, [r7, #12]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f8c:	4770      	bx	lr

08000f8e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff93 	bl	8000ec2 <TIMER_IF_Convert_ms2Tick>
 8000f9c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000f9e:	f000 f8d5 	bl	800114c <GetTimerTicks>
 8000fa2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000fa4:	e000      	b.n	8000fa8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000fa6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000fa8:	f000 f8d0 	bl	800114c <GetTimerTicks>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f6      	bhi.n	8000fa6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000fca:	f00a fe5b 	bl	800bc84 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000fde:	f000 f8a5 	bl	800112c <TIMER_IF_BkUp_Read_MSBticks>
 8000fe2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f88f 	bl	800110c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000ff6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ffa:	b08c      	sub	sp, #48	@ 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001004:	f000 f8a2 	bl	800114c <GetTimerTicks>
 8001008:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800100a:	f000 f88f 	bl	800112c <TIMER_IF_BkUp_Read_MSBticks>
 800100e:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	60fa      	str	r2, [r7, #12]
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	000b      	movs	r3, r1
 8001024:	2200      	movs	r2, #0
 8001026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001028:	2000      	movs	r0, #0
 800102a:	460c      	mov	r4, r1
 800102c:	4605      	mov	r5, r0
 800102e:	eb12 0804 	adds.w	r8, r2, r4
 8001032:	eb43 0905 	adc.w	r9, r3, r5
 8001036:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800103a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	0a82      	lsrs	r2, r0, #10
 8001048:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800104c:	0a8b      	lsrs	r3, r1, #10
 800104e:	4613      	mov	r3, r2
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2200      	movs	r2, #0
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001060:	f04f 0b00 	mov.w	fp, #0
 8001064:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff46 	bl	8000efc <TIMER_IF_Convert_Tick2ms>
 8001070:	4603      	mov	r3, r0
 8001072:	b29a      	uxth	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800107a:	4618      	mov	r0, r3
 800107c:	3730      	adds	r7, #48	@ 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001084 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	2100      	movs	r1, #0
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001092:	f003 fa75 	bl	8004580 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000003c 	.word	0x2000003c

080010a4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	2101      	movs	r1, #1
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80010b2:	f003 fa65 	bl	8004580 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000003c 	.word	0x2000003c

080010c4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80010ce:	2100      	movs	r1, #0
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80010d2:	f003 fa6d 	bl	80045b0 <HAL_RTCEx_BKUPRead>
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000003c 	.word	0x2000003c

080010e8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80010f2:	2101      	movs	r1, #1
 80010f4:	4804      	ldr	r0, [pc, #16]	@ (8001108 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80010f6:	f003 fa5b 	bl	80045b0 <HAL_RTCEx_BKUPRead>
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000003c 	.word	0x2000003c

0800110c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	2102      	movs	r1, #2
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800111a:	f003 fa31 	bl	8004580 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000003c 	.word	0x2000003c

0800112c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001132:	2102      	movs	r1, #2
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001136:	f003 fa3b 	bl	80045b0 <HAL_RTCEx_BKUPRead>
 800113a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800113c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000003c 	.word	0x2000003c

0800114c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001152:	480b      	ldr	r0, [pc, #44]	@ (8001180 <GetTimerTicks+0x34>)
 8001154:	f7ff fdd8 	bl	8000d08 <LL_RTC_TIME_GetSubSecond>
 8001158:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800115a:	e003      	b.n	8001164 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <GetTimerTicks+0x34>)
 800115e:	f7ff fdd3 	bl	8000d08 <LL_RTC_TIME_GetSubSecond>
 8001162:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <GetTimerTicks+0x34>)
 8001166:	f7ff fdcf 	bl	8000d08 <LL_RTC_TIME_GetSubSecond>
 800116a:	4602      	mov	r2, r0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4293      	cmp	r3, r2
 8001170:	d1f4      	bne.n	800115c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40002800 	.word	0x40002800

08001184 <LL_AHB2_GRP1_EnableClock>:
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800118c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001190:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <LL_APB2_GRP1_EnableClock>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <LL_APB2_GRP1_DisableClock>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011fa:	4013      	ands	r3, r2
 80011fc:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART2 init function */

void MX_USART1_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart1.Instance = USART1;
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 800120e:	4a23      	ldr	r2, [pc, #140]	@ (800129c <MX_USART1_UART_Init+0x94>)
 8001210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123e:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001250:	4811      	ldr	r0, [pc, #68]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001252:	f003 fea2 	bl	8004f9a <HAL_UART_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800125c:	f7ff fa0c 	bl	8000678 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001264:	f005 ffcb 	bl	80071fe <HAL_UARTEx_SetTxFifoThreshold>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800126e:	f7ff fa03 	bl	8000678 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	4808      	ldr	r0, [pc, #32]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001276:	f006 f800 	bl	800727a <HAL_UARTEx_SetRxFifoThreshold>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001280:	f7ff f9fa 	bl	8000678 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_USART1_UART_Init+0x90>)
 8001286:	f005 ff7f 	bl	8007188 <HAL_UARTEx_EnableFifoMode>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001290:	f7ff f9f2 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000088 	.word	0x20000088
 800129c:	40013800 	.word	0x40013800

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b096      	sub	sp, #88	@ 0x58
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2238      	movs	r2, #56	@ 0x38
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00b f8b5 	bl	800c430 <memset>
  if(uartHandle->Instance==USART1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001384 <HAL_UART_MspInit+0xe4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d155      	bne.n	800137c <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80012d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <HAL_UART_MspInit+0xe8>)
 80012d6:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fcd7 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012e8:	f7ff f9c6 	bl	8000678 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80012f0:	f7ff ff60 	bl	80011b4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff ff45 	bl	8001184 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART1_RX_Pin|USART1_TX_Pin;
 80012fa:	23c0      	movs	r3, #192	@ 0xc0
 80012fc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800130a:	2307      	movs	r3, #7
 800130c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USART1_Port, &GPIO_InitStruct);
 800130e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001312:	4619      	mov	r1, r3
 8001314:	481d      	ldr	r0, [pc, #116]	@ (800138c <HAL_UART_MspInit+0xec>)
 8001316:	f000 ffed 	bl	80022f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <HAL_UART_MspInit+0xf4>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 8001322:	2212      	movs	r2, #18
 8001324:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 8001328:	2210      	movs	r2, #16
 800132a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001350:	480f      	ldr	r0, [pc, #60]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 8001352:	f000 fbe5 	bl	8001b20 <HAL_DMA_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800135c:	f7ff f98c 	bl	8000678 <Error_Handler>
//    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
//    {
//      Error_Handler();
//    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 8001364:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <HAL_UART_MspInit+0xf0>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2102      	movs	r1, #2
 8001370:	2024      	movs	r0, #36	@ 0x24
 8001372:	f000 fb9e 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001376:	2024      	movs	r0, #36	@ 0x24
 8001378:	f000 fbb5 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800137c:	bf00      	nop
 800137e:	3758      	adds	r7, #88	@ 0x58
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40013800 	.word	0x40013800
 8001388:	00030001 	.word	0x00030001
 800138c:	48000400 	.word	0x48000400
 8001390:	2000011c 	.word	0x2000011c
 8001394:	40020058 	.word	0x40020058

08001398 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_UART_MspDeInit+0x3c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10f      	bne.n	80013ca <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80013aa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013ae:	f7ff ff19 	bl	80011e4 <LL_APB2_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(USART1_Port, USART1_RX_Pin|USART1_TX_Pin);
 80013b2:	21c0      	movs	r1, #192	@ 0xc0
 80013b4:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <HAL_UART_MspDeInit+0x40>)
 80013b6:	f001 f8fd 	bl	80025b4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fc56 	bl	8001c70 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80013c4:	2024      	movs	r0, #36	@ 0x24
 80013c6:	f000 fb9c 	bl	8001b02 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40013800 	.word	0x40013800
 80013d8:	48000400 	.word	0x48000400

080013dc <LL_APB2_GRP1_ForceReset>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80013e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <LL_APB2_GRP1_ReleaseReset>:
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	43db      	mvns	r3, r3
 8001410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001414:	4013      	ands	r3, r2
 8001416:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
	...

08001424 <LL_EXTI_EnableIT_0_31>:
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <LL_EXTI_EnableIT_0_31+0x24>)
 800142e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001432:	4905      	ldr	r1, [pc, #20]	@ (8001448 <LL_EXTI_EnableIT_0_31+0x24>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	58000800 	.word	0x58000800

0800144c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001454:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <vcom_Init+0x28>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800145a:	f7ff f825 	bl	80004a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800145e:	f7ff fed3 	bl	8001208 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001462:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001466:	f7ff ffdd 	bl	8001424 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800146a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000180 	.word	0x20000180

08001478 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800147c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001480:	f7ff ffac 	bl	80013dc <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8001484:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001488:	f7ff ffb9 	bl	80013fe <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <vcom_DeInit+0x28>)
 800148e:	f7ff ff83 	bl	8001398 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001492:	200f      	movs	r0, #15
 8001494:	f000 fb35 	bl	8001b02 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001498:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000088 	.word	0x20000088

080014a4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	461a      	mov	r2, r3
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <vcom_Trace_DMA+0x24>)
 80014b8:	f003 fe0c 	bl	80050d4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80014bc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000088 	.word	0x20000088

080014cc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80014d4:	4a19      	ldr	r2, [pc, #100]	@ (800153c <vcom_ReceiveInit+0x70>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80014da:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80014de:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014e8:	4815      	ldr	r0, [pc, #84]	@ (8001540 <vcom_ReceiveInit+0x74>)
 80014ea:	f005 fdc0 	bl	800706e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80014ee:	bf00      	nop
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <vcom_ReceiveInit+0x74>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014fe:	d0f7      	beq.n	80014f0 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001500:	bf00      	nop
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <vcom_ReceiveInit+0x74>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800150c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001510:	d1f7      	bne.n	8001502 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <vcom_ReceiveInit+0x74>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <vcom_ReceiveInit+0x74>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001520:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <vcom_ReceiveInit+0x74>)
 8001524:	f005 fdfe 	bl	8007124 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	4906      	ldr	r1, [pc, #24]	@ (8001544 <vcom_ReceiveInit+0x78>)
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <vcom_ReceiveInit+0x74>)
 800152e:	f003 fd85 	bl	800503c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001532:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000184 	.word	0x20000184
 8001540:	20000088 	.word	0x20000088
 8001544:	2000017c 	.word	0x2000017c

08001548 <vcom_Resume>:

void vcom_Resume(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154c:	4808      	ldr	r0, [pc, #32]	@ (8001570 <vcom_Resume+0x28>)
 800154e:	f003 fd24 	bl	8004f9a <HAL_UART_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <vcom_Resume+0x14>
  {
    Error_Handler();
 8001558:	f7ff f88e 	bl	8000678 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <vcom_Resume+0x2c>)
 800155e:	f000 fadf 	bl	8001b20 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <vcom_Resume+0x24>
  {
    Error_Handler();
 8001568:	f7ff f886 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000088 	.word	0x20000088
 8001574:	2000011c 	.word	0x2000011c

08001578 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a05      	ldr	r2, [pc, #20]	@ (800159c <HAL_UART_TxCpltCallback+0x24>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d103      	bne.n	8001592 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_UART_TxCpltCallback+0x28>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2000      	movs	r0, #0
 8001590:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40013800 	.word	0x40013800
 80015a0:	20000180 	.word	0x20000180

080015a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <HAL_UART_RxCpltCallback+0x44>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d113      	bne.n	80015de <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <HAL_UART_RxCpltCallback+0x48>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <HAL_UART_RxCpltCallback+0x30>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_UART_RxCpltCallback+0x48>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <HAL_UART_RxCpltCallback+0x4c>)
 80015d2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	4906      	ldr	r1, [pc, #24]	@ (80015f0 <HAL_UART_RxCpltCallback+0x4c>)
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f003 fd2f 	bl	800503c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40013800 	.word	0x40013800
 80015ec:	20000184 	.word	0x20000184
 80015f0:	2000017c 	.word	0x2000017c

080015f4 <UID_GetDeviceNumber>:
    uint32_t uidh = *((uint32_t *)(UID64_BASE_ADDRESS + UID_OFFSET_STID));
    return (((uint64_t)uidh) << 32) | uidl;
}


uint32_t UID_GetDeviceNumber(void) {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
    return *((uint32_t *)(UID64_BASE_ADDRESS + UID_OFFSET_DEVNUM));
 80015f8:	4b02      	ldr	r3, [pc, #8]	@ (8001604 <UID_GetDeviceNumber+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	1fff7580 	.word	0x1fff7580

08001608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001608:	480d      	ldr	r0, [pc, #52]	@ (8001640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800160a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800160c:	f7ff fb76 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <LoopForever+0x6>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	@ (8001648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <LoopForever+0xe>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	@ (8001654 <LoopForever+0x16>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001636:	f00a ff03 	bl	800c440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163a:	f7fe ffae 	bl	800059a <main>

0800163e <LoopForever>:

LoopForever:
    b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   r0, =_estack
 8001640:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800164c:	0800ca74 	.word	0x0800ca74
  ldr r2, =_sbss
 8001650:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001654:	200009e8 	.word	0x200009e8

08001658 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>

0800165a <LL_AHB2_GRP1_EnableClock>:
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001666:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001668:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001676:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4013      	ands	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
	...

0800168c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80016a0:	2004      	movs	r0, #4
 80016a2:	f7ff ffda 	bl	800165a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80016a6:	2310      	movs	r3, #16
 80016a8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4812      	ldr	r0, [pc, #72]	@ (8001704 <BSP_RADIO_Init+0x78>)
 80016bc:	f000 fe1a 	bl	80022f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80016c0:	2320      	movs	r3, #32
 80016c2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	@ (8001704 <BSP_RADIO_Init+0x78>)
 80016ca:	f000 fe13 	bl	80022f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80016ce:	2308      	movs	r3, #8
 80016d0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	480b      	ldr	r0, [pc, #44]	@ (8001704 <BSP_RADIO_Init+0x78>)
 80016d8:	f000 fe0c 	bl	80022f4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80016dc:	2200      	movs	r2, #0
 80016de:	2120      	movs	r1, #32
 80016e0:	4808      	ldr	r0, [pc, #32]	@ (8001704 <BSP_RADIO_Init+0x78>)
 80016e2:	f001 f835 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80016e6:	2200      	movs	r2, #0
 80016e8:	2110      	movs	r1, #16
 80016ea:	4806      	ldr	r0, [pc, #24]	@ (8001704 <BSP_RADIO_Init+0x78>)
 80016ec:	f001 f830 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80016f0:	2200      	movs	r2, #0
 80016f2:	2108      	movs	r1, #8
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <BSP_RADIO_Init+0x78>)
 80016f6:	f001 f82b 	bl	8002750 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	48000800 	.word	0x48000800

08001708 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d84b      	bhi.n	80017b0 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001718:	a201      	add	r2, pc, #4	@ (adr r2, 8001720 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	08001731 	.word	0x08001731
 8001724:	08001751 	.word	0x08001751
 8001728:	08001771 	.word	0x08001771
 800172c:	08001791 	.word	0x08001791
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2108      	movs	r1, #8
 8001734:	4821      	ldr	r0, [pc, #132]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001736:	f001 f80b 	bl	8002750 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2110      	movs	r1, #16
 800173e:	481f      	ldr	r0, [pc, #124]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001740:	f001 f806 	bl	8002750 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2120      	movs	r1, #32
 8001748:	481c      	ldr	r0, [pc, #112]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800174a:	f001 f801 	bl	8002750 <HAL_GPIO_WritePin>
      break;      
 800174e:	e030      	b.n	80017b2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001750:	2201      	movs	r2, #1
 8001752:	2108      	movs	r1, #8
 8001754:	4819      	ldr	r0, [pc, #100]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001756:	f000 fffb 	bl	8002750 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800175a:	2201      	movs	r2, #1
 800175c:	2110      	movs	r1, #16
 800175e:	4817      	ldr	r0, [pc, #92]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001760:	f000 fff6 	bl	8002750 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001764:	2200      	movs	r2, #0
 8001766:	2120      	movs	r1, #32
 8001768:	4814      	ldr	r0, [pc, #80]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800176a:	f000 fff1 	bl	8002750 <HAL_GPIO_WritePin>
      break;
 800176e:	e020      	b.n	80017b2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2108      	movs	r1, #8
 8001774:	4811      	ldr	r0, [pc, #68]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001776:	f000 ffeb 	bl	8002750 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800177a:	2201      	movs	r2, #1
 800177c:	2110      	movs	r1, #16
 800177e:	480f      	ldr	r0, [pc, #60]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001780:	f000 ffe6 	bl	8002750 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001784:	2201      	movs	r2, #1
 8001786:	2120      	movs	r1, #32
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800178a:	f000 ffe1 	bl	8002750 <HAL_GPIO_WritePin>
      break;
 800178e:	e010      	b.n	80017b2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2108      	movs	r1, #8
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001796:	f000 ffdb 	bl	8002750 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800179a:	2200      	movs	r2, #0
 800179c:	2110      	movs	r1, #16
 800179e:	4807      	ldr	r0, [pc, #28]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80017a0:	f000 ffd6 	bl	8002750 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80017a4:	2201      	movs	r2, #1
 80017a6:	2120      	movs	r1, #32
 80017a8:	4804      	ldr	r0, [pc, #16]	@ (80017bc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80017aa:	f000 ffd1 	bl	8002750 <HAL_GPIO_WritePin>
      break;
 80017ae:	e000      	b.n	80017b2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80017b0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	48000800 	.word	0x48000800

080017c0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80017fa:	230f      	movs	r3, #15
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	e001      	b.n	8001804 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001800:	2316      	movs	r3, #22
 8001802:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001804:	68fb      	ldr	r3, [r7, #12]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a03      	ldr	r2, [pc, #12]	@ (8001828 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6053      	str	r3, [r2, #4]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	e0042000 	.word	0xe0042000

0800182c <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a03      	ldr	r2, [pc, #12]	@ (8001844 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6053      	str	r3, [r2, #4]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	e0042000 	.word	0xe0042000

08001848 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a03      	ldr	r2, [pc, #12]	@ (8001860 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	6053      	str	r3, [r2, #4]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	e0042000 	.word	0xe0042000

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186e:	2003      	movs	r0, #3
 8001870:	f000 f914 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001874:	f002 f82e 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8001878:	4603      	mov	r3, r0
 800187a:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <HAL_Init+0x3c>)
 800187c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187e:	200f      	movs	r0, #15
 8001880:	f7ff f91e 	bl	8000ac0 <HAL_InitTick>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	e001      	b.n	8001894 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001890:	f7fe ffe9 	bl	8000866 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001894:	79fb      	ldrb	r3, [r7, #7]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <HAL_SuspendTick+0x18>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a03      	ldr	r2, [pc, #12]	@ (80018bc <HAL_SuspendTick+0x18>)
 80018ae:	f023 0302 	bic.w	r3, r3, #2
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <HAL_ResumeTick+0x18>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a03      	ldr	r2, [pc, #12]	@ (80018d8 <HAL_ResumeTick+0x18>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80018e0:	f7ff ff96 	bl	8001810 <LL_DBGMCU_EnableDBGSleepMode>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80018ec:	f7ff ff9e 	bl	800182c <LL_DBGMCU_EnableDBGStopMode>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80018f8:	f7ff ffa6 	bl	8001848 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4906      	ldr	r1, [pc, #24]	@ (8001998 <__NVIC_EnableIRQ+0x34>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db12      	blt.n	80019d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	490a      	ldr	r1, [pc, #40]	@ (80019e0 <__NVIC_DisableIRQ+0x44>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	3320      	adds	r3, #32
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019c8:	f3bf 8f4f 	dsb	sy
}
 80019cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019ce:	f3bf 8f6f 	isb	sy
}
 80019d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	@ (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	@ (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	@ 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	@ 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff2b 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff42 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ffb4 	bl	8001a38 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff83 	bl	80019e4 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff35 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff43 	bl	800199c <__NVIC_DisableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e08e      	b.n	8001c50 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b47      	ldr	r3, [pc, #284]	@ (8001c58 <HAL_DMA_Init+0x138>)
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d80f      	bhi.n	8001b5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b45      	ldr	r3, [pc, #276]	@ (8001c5c <HAL_DMA_Init+0x13c>)
 8001b46:	4413      	add	r3, r2
 8001b48:	4a45      	ldr	r2, [pc, #276]	@ (8001c60 <HAL_DMA_Init+0x140>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	009a      	lsls	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a42      	ldr	r2, [pc, #264]	@ (8001c64 <HAL_DMA_Init+0x144>)
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b5c:	e00e      	b.n	8001b7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b40      	ldr	r3, [pc, #256]	@ (8001c68 <HAL_DMA_Init+0x148>)
 8001b66:	4413      	add	r3, r2
 8001b68:	4a3d      	ldr	r2, [pc, #244]	@ (8001c60 <HAL_DMA_Init+0x140>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	009a      	lsls	r2, r3, #2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a3c      	ldr	r2, [pc, #240]	@ (8001c6c <HAL_DMA_Init+0x14c>)
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b96:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fb24 	bl	800221c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bdc:	d102      	bne.n	8001be4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bf0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bfa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d010      	beq.n	8001c26 <HAL_DMA_Init+0x106>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d80c      	bhi.n	8001c26 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fb4d 	bl	80022ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	e008      	b.n	8001c38 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40020407 	.word	0x40020407
 8001c5c:	bffdfff8 	.word	0xbffdfff8
 8001c60:	cccccccd 	.word	0xcccccccd
 8001c64:	40020000 	.word	0x40020000
 8001c68:	bffdfbf8 	.word	0xbffdfbf8
 8001c6c:	40020400 	.word	0x40020400

08001c70 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e07b      	b.n	8001d7a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <HAL_DMA_DeInit+0x114>)
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d80f      	bhi.n	8001cbe <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <HAL_DMA_DeInit+0x118>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a38      	ldr	r2, [pc, #224]	@ (8001d8c <HAL_DMA_DeInit+0x11c>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	009a      	lsls	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a35      	ldr	r2, [pc, #212]	@ (8001d90 <HAL_DMA_DeInit+0x120>)
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cbc:	e00e      	b.n	8001cdc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b33      	ldr	r3, [pc, #204]	@ (8001d94 <HAL_DMA_DeInit+0x124>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a30      	ldr	r2, [pc, #192]	@ (8001d8c <HAL_DMA_DeInit+0x11c>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	009a      	lsls	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <HAL_DMA_DeInit+0x128>)
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	f003 021c 	and.w	r2, r3, #28
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fa8f 	bl	800221c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00f      	beq.n	8001d38 <HAL_DMA_DeInit+0xc8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d80b      	bhi.n	8001d38 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fac3 	bl	80022ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d36:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020407 	.word	0x40020407
 8001d88:	bffdfff8 	.word	0xbffdfff8
 8001d8c:	cccccccd 	.word	0xcccccccd
 8001d90:	40020000 	.word	0x40020000
 8001d94:	bffdfbf8 	.word	0xbffdfbf8
 8001d98:	40020400 	.word	0x40020400

08001d9c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_DMA_Start_IT+0x20>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e069      	b.n	8001e90 <HAL_DMA_Start_IT+0xf4>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d155      	bne.n	8001e7c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f9d3 	bl	80021a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 020e 	orr.w	r2, r2, #14
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e00f      	b.n	8001e34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0204 	bic.w	r2, r2, #4
 8001e22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 020a 	orr.w	r2, r2, #10
 8001e32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e50:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e008      	b.n	8001e8e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2280      	movs	r2, #128	@ 0x80
 8001e80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e04f      	b.n	8001f4a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e040      	b.n	8001f4a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 020e 	bic.w	r2, r2, #14
 8001ed6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efc:	f003 021c 	and.w	r2, r3, #28
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d005      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e047      	b.n	8002008 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 020e 	bic.w	r2, r2, #14
 8001f86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fac:	f003 021c 	and.w	r2, r3, #28
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fe6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
    }
  }
  return status;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002030:	f003 031c 	and.w	r3, r3, #28
 8002034:	2204      	movs	r2, #4
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d027      	beq.n	8002090 <HAL_DMA_IRQHandler+0x7c>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d022      	beq.n	8002090 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0204 	bic.w	r2, r2, #4
 8002066:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206c:	f003 021c 	and.w	r2, r3, #28
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	2104      	movs	r1, #4
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8081 	beq.w	8002188 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800208e:	e07b      	b.n	8002188 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	f003 031c 	and.w	r3, r3, #28
 8002098:	2202      	movs	r2, #2
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d03d      	beq.n	8002120 <HAL_DMA_IRQHandler+0x10c>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d038      	beq.n	8002120 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10b      	bne.n	80020d4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020a 	bic.w	r2, r2, #10
 80020ca:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b2e      	ldr	r3, [pc, #184]	@ (8002194 <HAL_DMA_IRQHandler+0x180>)
 80020dc:	429a      	cmp	r2, r3
 80020de:	d909      	bls.n	80020f4 <HAL_DMA_IRQHandler+0xe0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	f003 031c 	and.w	r3, r3, #28
 80020e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002198 <HAL_DMA_IRQHandler+0x184>)
 80020ea:	2102      	movs	r1, #2
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	6053      	str	r3, [r2, #4]
 80020f2:	e008      	b.n	8002106 <HAL_DMA_IRQHandler+0xf2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	f003 031c 	and.w	r3, r3, #28
 80020fc:	4a27      	ldr	r2, [pc, #156]	@ (800219c <HAL_DMA_IRQHandler+0x188>)
 80020fe:	2102      	movs	r1, #2
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d038      	beq.n	8002188 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800211e:	e033      	b.n	8002188 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	f003 031c 	and.w	r3, r3, #28
 8002128:	2208      	movs	r2, #8
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d02a      	beq.n	800218a <HAL_DMA_IRQHandler+0x176>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d025      	beq.n	800218a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020e 	bic.w	r2, r2, #14
 800214c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	f003 021c 	and.w	r2, r3, #28
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002188:	bf00      	nop
 800218a:	bf00      	nop
}
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020080 	.word	0x40020080
 8002198:	40020400 	.word	0x40020400
 800219c:	40020000 	.word	0x40020000

080021a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f003 021c 	and.w	r2, r3, #28
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d108      	bne.n	8002200 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021fe:	e007      	b.n	8002210 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	60da      	str	r2, [r3, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
	...

0800221c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800222c:	429a      	cmp	r2, r3
 800222e:	d813      	bhi.n	8002258 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800223c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3b08      	subs	r3, #8
 800224c:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	e011      	b.n	800227c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	009a      	lsls	r2, r3, #2
 8002260:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002262:	4413      	add	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	3b08      	subs	r3, #8
 8002270:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	3307      	adds	r3, #7
 800227a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002280:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2201      	movs	r2, #1
 800228a:	409a      	lsls	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40020407 	.word	0x40020407
 80022a0:	cccccccd 	.word	0xcccccccd
 80022a4:	4002081c 	.word	0x4002081c
 80022a8:	40020880 	.word	0x40020880

080022ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	461a      	mov	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2201      	movs	r2, #1
 80022dc:	409a      	lsls	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	1000823f 	.word	0x1000823f
 80022f0:	40020940 	.word	0x40020940

080022f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e140      	b.n	8002586 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8132 	beq.w	8002580 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d005      	beq.n	8002334 <HAL_GPIO_Init+0x40>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d130      	bne.n	8002396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800236a:	2201      	movs	r2, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 0201 	and.w	r2, r3, #1
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d017      	beq.n	80023d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d123      	bne.n	8002426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	08da      	lsrs	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3208      	adds	r2, #8
 80023e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	08da      	lsrs	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3208      	adds	r2, #8
 8002420:	6939      	ldr	r1, [r7, #16]
 8002422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0203 	and.w	r2, r3, #3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 808c 	beq.w	8002580 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002468:	4a4e      	ldr	r2, [pc, #312]	@ (80025a4 <HAL_GPIO_Init+0x2b0>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	2207      	movs	r2, #7
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002492:	d00d      	beq.n	80024b0 <HAL_GPIO_Init+0x1bc>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a44      	ldr	r2, [pc, #272]	@ (80025a8 <HAL_GPIO_Init+0x2b4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <HAL_GPIO_Init+0x1b8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a43      	ldr	r2, [pc, #268]	@ (80025ac <HAL_GPIO_Init+0x2b8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_GPIO_Init+0x1b4>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1be>
 80024a8:	2307      	movs	r3, #7
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1be>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1be>
 80024b0:	2300      	movs	r3, #0
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c2:	4938      	ldr	r1, [pc, #224]	@ (80025a4 <HAL_GPIO_Init+0x2b0>)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d0:	4b37      	ldr	r3, [pc, #220]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f4:	4a2e      	ldr	r2, [pc, #184]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024fa:	4b2d      	ldr	r3, [pc, #180]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800251e:	4a24      	ldr	r2, [pc, #144]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002524:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 8002526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800252a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800254a:	4a19      	ldr	r2, [pc, #100]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 8002554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002558:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002578:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f aeb7 	bne.w	8002304 <HAL_GPIO_Init+0x10>
  }
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	58000800 	.word	0x58000800

080025b4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80025c2:	e0af      	b.n	8002724 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025c4:	2201      	movs	r2, #1
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a2 	beq.w	800271e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80025da:	4a59      	ldr	r2, [pc, #356]	@ (8002740 <HAL_GPIO_DeInit+0x18c>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	2207      	movs	r2, #7
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002602:	d00d      	beq.n	8002620 <HAL_GPIO_DeInit+0x6c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a4f      	ldr	r2, [pc, #316]	@ (8002744 <HAL_GPIO_DeInit+0x190>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_DeInit+0x68>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a4e      	ldr	r2, [pc, #312]	@ (8002748 <HAL_GPIO_DeInit+0x194>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_GPIO_DeInit+0x64>
 8002614:	2302      	movs	r3, #2
 8002616:	e004      	b.n	8002622 <HAL_GPIO_DeInit+0x6e>
 8002618:	2307      	movs	r3, #7
 800261a:	e002      	b.n	8002622 <HAL_GPIO_DeInit+0x6e>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_GPIO_DeInit+0x6e>
 8002620:	2300      	movs	r3, #0
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	f002 0203 	and.w	r2, r2, #3
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	4093      	lsls	r3, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	429a      	cmp	r2, r3
 8002630:	d136      	bne.n	80026a0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002632:	4b46      	ldr	r3, [pc, #280]	@ (800274c <HAL_GPIO_DeInit+0x198>)
 8002634:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	4943      	ldr	r1, [pc, #268]	@ (800274c <HAL_GPIO_DeInit+0x198>)
 800263e:	4013      	ands	r3, r2
 8002640:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002644:	4b41      	ldr	r3, [pc, #260]	@ (800274c <HAL_GPIO_DeInit+0x198>)
 8002646:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	493f      	ldr	r1, [pc, #252]	@ (800274c <HAL_GPIO_DeInit+0x198>)
 8002650:	4013      	ands	r3, r2
 8002652:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002656:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_GPIO_DeInit+0x198>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	493b      	ldr	r1, [pc, #236]	@ (800274c <HAL_GPIO_DeInit+0x198>)
 8002660:	4013      	ands	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002664:	4b39      	ldr	r3, [pc, #228]	@ (800274c <HAL_GPIO_DeInit+0x198>)
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	4937      	ldr	r1, [pc, #220]	@ (800274c <HAL_GPIO_DeInit+0x198>)
 800266e:	4013      	ands	r3, r2
 8002670:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	2207      	movs	r2, #7
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002682:	4a2f      	ldr	r2, [pc, #188]	@ (8002740 <HAL_GPIO_DeInit+0x18c>)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43da      	mvns	r2, r3
 8002692:	482b      	ldr	r0, [pc, #172]	@ (8002740 <HAL_GPIO_DeInit+0x18c>)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	400a      	ands	r2, r1
 800269a:	3302      	adds	r3, #2
 800269c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2103      	movs	r1, #3
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	08d2      	lsrs	r2, r2, #3
 80026d4:	4019      	ands	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2103      	movs	r1, #3
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	2101      	movs	r1, #1
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2103      	movs	r1, #3
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	401a      	ands	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	f47f af49 	bne.w	80025c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40010000 	.word	0x40010000
 8002744:	48000400 	.word	0x48000400
 8002748:	48000800 	.word	0x48000800
 800274c:	58000800 	.word	0x58000800

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800276c:	e002      	b.n	8002774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
	...

08002780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800278a:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002796:	4a05      	ldr	r2, [pc, #20]	@ (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4618      	mov	r0, r3
 80027a0:	f008 fb88 	bl	800aeb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	58000800 	.word	0x58000800

080027b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b4:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a03      	ldr	r2, [pc, #12]	@ (80027c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	58000400 	.word	0x58000400

080027cc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80027de:	4b13      	ldr	r3, [pc, #76]	@ (800282c <HAL_PWR_EnterSLEEPMode+0x60>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027ea:	d10d      	bne.n	8002808 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80027ec:	f000 f83c 	bl	8002868 <HAL_PWREx_DisableLowPowerRunMode>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80027f6:	e015      	b.n	8002824 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <HAL_PWR_EnterSLEEPMode+0x60>)
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002804:	f000 f822 	bl	800284c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HAL_PWR_EnterSLEEPMode+0x64>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	4a08      	ldr	r2, [pc, #32]	@ (8002830 <HAL_PWR_EnterSLEEPMode+0x64>)
 800280e:	f023 0304 	bic.w	r3, r3, #4
 8002812:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800281a:	bf30      	wfi
 800281c:	e002      	b.n	8002824 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800281e:	bf40      	sev
    __WFE();
 8002820:	bf20      	wfe
    __WFE();
 8002822:	bf20      	wfe
  }
}
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	58000400 	.word	0x58000400
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002838:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <HAL_PWREx_GetVoltageRange+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	58000400 	.word	0x58000400

0800284c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a03      	ldr	r2, [pc, #12]	@ (8002864 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	58000400 	.word	0x58000400

08002868 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800286e:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a15      	ldr	r2, [pc, #84]	@ (80028c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002878:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2232      	movs	r2, #50	@ 0x32
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800288e:	e002      	b.n	8002896 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800289e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a2:	d102      	bne.n	80028aa <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f2      	bne.n	8002890 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b6:	d101      	bne.n	80028bc <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e000      	b.n	80028be <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	58000400 	.word	0x58000400
 80028cc:	20000000 	.word	0x20000000
 80028d0:	431bde83 	.word	0x431bde83

080028d4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80028de:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0307 	bic.w	r3, r3, #7
 80028e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002924 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002900:	bf30      	wfi
 8002902:	e002      	b.n	800290a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002904:	bf40      	sev
    __WFE();
 8002906:	bf20      	wfe
    __WFE();
 8002908:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	4a05      	ldr	r2, [pc, #20]	@ (8002924 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6113      	str	r3, [r2, #16]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	58000400 	.word	0x58000400
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002938:	d101      	bne.n	800293e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	58000400 	.word	0x58000400

0800294c <LL_RCC_HSE_EnableTcxo>:
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800295a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_RCC_HSE_DisableTcxo>:
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800296c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002996:	d101      	bne.n	800299c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_HSE_Enable>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_HSE_Disable>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <LL_RCC_HSE_IsReady>:
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029f0:	d101      	bne.n	80029f6 <LL_RCC_HSE_IsReady+0x18>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <LL_RCC_HSE_IsReady+0x1a>
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <LL_RCC_HSI_Enable>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_HSI_Disable>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_HSI_IsReady>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4a:	d101      	bne.n	8002a50 <LL_RCC_HSI_IsReady+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_RCC_HSI_IsReady+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_HSI_SetCalibTrimming>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	061b      	lsls	r3, r3, #24
 8002a70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_LSE_IsReady>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d101      	bne.n	8002a9a <LL_RCC_LSE_IsReady+0x18>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_RCC_LSE_IsReady+0x1a>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <LL_RCC_LSI_Enable>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <LL_RCC_LSI_Disable>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <LL_RCC_LSI_IsReady>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d101      	bne.n	8002afc <LL_RCC_LSI_IsReady+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_RCC_LSI_IsReady+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_MSI_Enable>:
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6013      	str	r3, [r2, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_MSI_Disable>:
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6013      	str	r3, [r2, #0]
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_MSI_IsReady>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d101      	bne.n	8002b54 <LL_RCC_MSI_IsReady+0x16>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_RCC_MSI_IsReady+0x18>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d101      	bne.n	8002b74 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_MSI_GetRange>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <LL_RCC_MSI_SetCalibTrimming>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <LL_RCC_SetSysClkSource>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <LL_RCC_GetSysClkSource>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <LL_RCC_SetAHBPrescaler>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_SetAHB3Prescaler>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c46:	f023 020f 	bic.w	r2, r3, #15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_SetAPB1Prescaler>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_SetAPB2Prescaler>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <LL_RCC_GetAHBPrescaler>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <LL_RCC_GetAHB3Prescaler>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ccc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_GetAPB1Prescaler>:
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <LL_RCC_GetAPB2Prescaler>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d54:	d101      	bne.n	8002d5a <LL_RCC_PLL_IsReady+0x18>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <LL_RCC_PLL_IsReady+0x1a>
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd0:	d101      	bne.n	8002dd6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df4:	d101      	bne.n	8002dfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e16:	d101      	bne.n	8002e1c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e38:	d101      	bne.n	8002e3e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e36f      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5a:	f7ff fece 	bl	8002bfa <LL_RCC_GetSysClkSource>
 8002e5e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e60:	f7ff ffa2 	bl	8002da8 <LL_RCC_PLL_GetMainSource>
 8002e64:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80c4 	beq.w	8002ffc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x3e>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d176      	bne.n	8002f6e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d173      	bne.n	8002f6e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e353      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x68>
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eae:	e006      	b.n	8002ebe <HAL_RCC_OscConfig+0x76>
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d222      	bcs.n	8002f08 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fd3c 	bl	8003944 <RCC_SetFlashLatencyFromMSIRange>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e331      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fe53 	bl	8002bac <LL_RCC_MSI_SetCalibTrimming>
 8002f06:	e021      	b.n	8002f4c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f12:	f043 0308 	orr.w	r3, r3, #8
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fe3a 	bl	8002bac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fd01 	bl	8003944 <RCC_SetFlashLatencyFromMSIRange>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e2f6      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f4c:	f000 fcc2 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4aa7      	ldr	r2, [pc, #668]	@ (80031f0 <HAL_RCC_OscConfig+0x3a8>)
 8002f54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002f56:	4ba7      	ldr	r3, [pc, #668]	@ (80031f4 <HAL_RCC_OscConfig+0x3ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fdb0 	bl	8000ac0 <HAL_InitTick>
 8002f60:	4603      	mov	r3, r0
 8002f62:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d047      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	e2e5      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d02c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f76:	f7ff fdc6 	bl	8002b06 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fdab 	bl	8000ad4 <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f82:	f7fd fda7 	bl	8000ad4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e2d2      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f94:	f7ff fdd3 	bl	8002b3e <LL_RCC_MSI_IsReady>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f1      	beq.n	8002f82 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fdef 	bl	8002bac <LL_RCC_MSI_SetCalibTrimming>
 8002fce:	e015      	b.n	8002ffc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fd0:	f7ff fda7 	bl	8002b22 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd fd7e 	bl	8000ad4 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fdc:	f7fd fd7a 	bl	8000ad4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e2a5      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fee:	f7ff fda6 	bl	8002b3e <LL_RCC_MSI_IsReady>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f1      	bne.n	8002fdc <HAL_RCC_OscConfig+0x194>
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ffa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d058      	beq.n	80030ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b08      	cmp	r3, #8
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x1d2>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	2b0c      	cmp	r3, #12
 8003012:	d108      	bne.n	8003026 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d14b      	bne.n	80030ba <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e289      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d102      	bne.n	800304c <HAL_RCC_OscConfig+0x204>
 8003046:	f7ff fcae 	bl	80029a6 <LL_RCC_HSE_Enable>
 800304a:	e00d      	b.n	8003068 <HAL_RCC_OscConfig+0x220>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003054:	d104      	bne.n	8003060 <HAL_RCC_OscConfig+0x218>
 8003056:	f7ff fc79 	bl	800294c <LL_RCC_HSE_EnableTcxo>
 800305a:	f7ff fca4 	bl	80029a6 <LL_RCC_HSE_Enable>
 800305e:	e003      	b.n	8003068 <HAL_RCC_OscConfig+0x220>
 8003060:	f7ff fcaf 	bl	80029c2 <LL_RCC_HSE_Disable>
 8003064:	f7ff fc80 	bl	8002968 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fd fd30 	bl	8000ad4 <HAL_GetTick>
 8003074:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fd fd2c 	bl	8000ad4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e257      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800308a:	f7ff fca8 	bl	80029de <LL_RCC_HSE_IsReady>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f1      	beq.n	8003078 <HAL_RCC_OscConfig+0x230>
 8003094:	e011      	b.n	80030ba <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fd fd1d 	bl	8000ad4 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309e:	f7fd fd19 	bl	8000ad4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b64      	cmp	r3, #100	@ 0x64
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e244      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80030b0:	f7ff fc95 	bl	80029de <LL_RCC_HSE_IsReady>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f1      	bne.n	800309e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d046      	beq.n	8003154 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_OscConfig+0x290>
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d10e      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d10b      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e22a      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fcb6 	bl	8002a5a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030ee:	e031      	b.n	8003154 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d019      	beq.n	800312c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	f7ff fc82 	bl	8002a00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fd fcea 	bl	8000ad4 <HAL_GetTick>
 8003100:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003104:	f7fd fce6 	bl	8000ad4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e211      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003116:	f7ff fc8f 	bl	8002a38 <LL_RCC_HSI_IsReady>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f1      	beq.n	8003104 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fc98 	bl	8002a5a <LL_RCC_HSI_SetCalibTrimming>
 800312a:	e013      	b.n	8003154 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312c:	f7ff fc76 	bl	8002a1c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fd fcd0 	bl	8000ad4 <HAL_GetTick>
 8003134:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003138:	f7fd fccc 	bl	8000ad4 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1f7      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800314a:	f7ff fc75 	bl	8002a38 <LL_RCC_HSI_IsReady>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f1      	bne.n	8003138 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d06e      	beq.n	800323e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d056      	beq.n	8003216 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003170:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	429a      	cmp	r2, r3
 800317e:	d031      	beq.n	80031e4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e1d0      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d013      	beq.n	80031ca <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80031a2:	f7ff fc8f 	bl	8002ac4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a6:	f7fd fc95 	bl	8000ad4 <HAL_GetTick>
 80031aa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ae:	f7fd fc91 	bl	8000ad4 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b11      	cmp	r3, #17
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e1bc      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80031c0:	f7ff fc90 	bl	8002ae4 <LL_RCC_LSI_IsReady>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f1      	bne.n	80031ae <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d2:	f023 0210 	bic.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e4:	f7ff fc5e 	bl	8002aa4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7fd fc74 	bl	8000ad4 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80031ee:	e00c      	b.n	800320a <HAL_RCC_OscConfig+0x3c2>
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fd fc6c 	bl	8000ad4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b11      	cmp	r3, #17
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e197      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800320a:	f7ff fc6b 	bl	8002ae4 <LL_RCC_LSI_IsReady>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f1      	beq.n	80031f8 <HAL_RCC_OscConfig+0x3b0>
 8003214:	e013      	b.n	800323e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003216:	f7ff fc55 	bl	8002ac4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fd fc5b 	bl	8000ad4 <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fd fc57 	bl	8000ad4 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b11      	cmp	r3, #17
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e182      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003234:	f7ff fc56 	bl	8002ae4 <LL_RCC_LSI_IsReady>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f1      	bne.n	8003222 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80d8 	beq.w	80033fc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800324c:	f7ff fb6c 	bl	8002928 <LL_PWR_IsEnabledBkUpAccess>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d113      	bne.n	800327e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003256:	f7ff faab 	bl	80027b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7fd fc3b 	bl	8000ad4 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fd fc37 	bl	8000ad4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e162      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003274:	f7ff fb58 	bl	8002928 <LL_PWR_IsEnabledBkUpAccess>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f1      	beq.n	8003262 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d07b      	beq.n	800337e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b85      	cmp	r3, #133	@ 0x85
 800328c:	d003      	beq.n	8003296 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d109      	bne.n	80032aa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7fd fc13 	bl	8000ad4 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fd fc05 	bl	8000ad4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e12e      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80032dc:	f7ff fbd1 	bl	8002a82 <LL_RCC_LSE_IsReady>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ef      	beq.n	80032c6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b81      	cmp	r3, #129	@ 0x81
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b85      	cmp	r3, #133	@ 0x85
 80032f4:	d121      	bne.n	800333a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fd fbed 	bl	8000ad4 <HAL_GetTick>
 80032fa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fd fbdf 	bl	8000ad4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e108      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ec      	beq.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003338:	e060      	b.n	80033fc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fd fbcb 	bl	8000ad4 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003348:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800334c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fd fbbd 	bl	8000ad4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0e6      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ec      	bne.n	8003356 <HAL_RCC_OscConfig+0x50e>
 800337c:	e03e      	b.n	80033fc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7fd fba9 	bl	8000ad4 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fd fb9b 	bl	8000ad4 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0c4      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ec      	bne.n	800339a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fd fb88 	bl	8000ad4 <HAL_GetTick>
 80033c4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033dc:	f7fd fb7a 	bl	8000ad4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0a3      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033f2:	f7ff fb46 	bl	8002a82 <LL_RCC_LSE_IsReady>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ef      	bne.n	80033dc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8099 	beq.w	8003538 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	d06c      	beq.n	80034e6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	2b02      	cmp	r3, #2
 8003412:	d14b      	bne.n	80034ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003414:	f7ff fc87 	bl	8002d26 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fd fb5c 	bl	8000ad4 <HAL_GetTick>
 800341c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7fd fb58 	bl	8000ad4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b0a      	cmp	r3, #10
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e083      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003432:	f7ff fc86 	bl	8002d42 <LL_RCC_PLL_IsReady>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f1      	bne.n	8003420 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	4b40      	ldr	r3, [pc, #256]	@ (8003544 <HAL_RCC_OscConfig+0x6fc>)
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800344e:	4311      	orrs	r1, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003454:	0212      	lsls	r2, r2, #8
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003468:	430a      	orrs	r2, r1
 800346a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800346e:	4313      	orrs	r3, r2
 8003470:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003472:	f7ff fc4a 	bl	8002d0a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003484:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fd fb25 	bl	8000ad4 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fd fb21 	bl	8000ad4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b0a      	cmp	r3, #10
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e04c      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80034a0:	f7ff fc4f 	bl	8002d42 <LL_RCC_PLL_IsReady>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f1      	beq.n	800348e <HAL_RCC_OscConfig+0x646>
 80034aa:	e045      	b.n	8003538 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ac:	f7ff fc3b 	bl	8002d26 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd fb10 	bl	8000ad4 <HAL_GetTick>
 80034b4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fd fb0c 	bl	8000ad4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b0a      	cmp	r3, #10
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e037      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80034ca:	f7ff fc3a 	bl	8002d42 <LL_RCC_PLL_IsReady>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f1      	bne.n	80034b8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034de:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <HAL_RCC_OscConfig+0x700>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	60cb      	str	r3, [r1, #12]
 80034e4:	e028      	b.n	8003538 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e023      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	429a      	cmp	r2, r3
 8003506:	d115      	bne.n	8003534 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003512:	429a      	cmp	r2, r3
 8003514:	d10e      	bne.n	8003534 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	429a      	cmp	r2, r3
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	11c1808c 	.word	0x11c1808c
 8003548:	eefefffc 	.word	0xeefefffc

0800354c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e10f      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b89      	ldr	r3, [pc, #548]	@ (8003788 <HAL_RCC_ClockConfig+0x23c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d91b      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b86      	ldr	r3, [pc, #536]	@ (8003788 <HAL_RCC_ClockConfig+0x23c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	4984      	ldr	r1, [pc, #528]	@ (8003788 <HAL_RCC_ClockConfig+0x23c>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800357e:	f7fd faa9 	bl	8000ad4 <HAL_GetTick>
 8003582:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003584:	e008      	b.n	8003598 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003586:	f7fd faa5 	bl	8000ad4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0f3      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003598:	4b7b      	ldr	r3, [pc, #492]	@ (8003788 <HAL_RCC_ClockConfig+0x23c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d1ef      	bne.n	8003586 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fb2a 	bl	8002c10 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035bc:	f7fd fa8a 	bl	8000ad4 <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035c4:	f7fd fa86 	bl	8000ad4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0d4      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035d6:	f7ff fbf2 	bl	8002dbe <LL_RCC_IsActiveFlag_HPRE>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f1      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d016      	beq.n	800361a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fb20 	bl	8002c36 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035f6:	f7fd fa6d 	bl	8000ad4 <HAL_GetTick>
 80035fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035fe:	f7fd fa69 	bl	8000ad4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0b7      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003610:	f7ff fbe6 	bl	8002de0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f1      	beq.n	80035fe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fb19 	bl	8002c62 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003630:	f7fd fa50 	bl	8000ad4 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003638:	f7fd fa4c 	bl	8000ad4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e09a      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800364a:	f7ff fbdb 	bl	8002e04 <LL_RCC_IsActiveFlag_PPRE1>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f1      	beq.n	8003638 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d017      	beq.n	8003690 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fb0e 	bl	8002c88 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800366c:	f7fd fa32 	bl	8000ad4 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003674:	f7fd fa2e 	bl	8000ad4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e07c      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003686:	f7ff fbce 	bl	8002e26 <LL_RCC_IsActiveFlag_PPRE2>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f1      	beq.n	8003674 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d043      	beq.n	8003724 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80036a4:	f7ff f99b 	bl	80029de <LL_RCC_HSE_IsReady>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11e      	bne.n	80036ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e066      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80036ba:	f7ff fb42 	bl	8002d42 <LL_RCC_PLL_IsReady>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d113      	bne.n	80036ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e05b      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80036d0:	f7ff fa35 	bl	8002b3e <LL_RCC_MSI_IsReady>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e050      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80036de:	f7ff f9ab 	bl	8002a38 <LL_RCC_HSI_IsReady>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e049      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fa6f 	bl	8002bd4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f6:	f7fd f9ed 	bl	8000ad4 <HAL_GetTick>
 80036fa:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fe:	f7fd f9e9 	bl	8000ad4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e035      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003714:	f7ff fa71 	bl	8002bfa <LL_RCC_GetSysClkSource>
 8003718:	4602      	mov	r2, r0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1ec      	bne.n	80036fe <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b18      	ldr	r3, [pc, #96]	@ (8003788 <HAL_RCC_ClockConfig+0x23c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d21b      	bcs.n	800376a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_RCC_ClockConfig+0x23c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4913      	ldr	r1, [pc, #76]	@ (8003788 <HAL_RCC_ClockConfig+0x23c>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003742:	f7fd f9c7 	bl	8000ad4 <HAL_GetTick>
 8003746:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003748:	e008      	b.n	800375c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800374a:	f7fd f9c3 	bl	8000ad4 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e011      	b.n	8003780 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375c:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <HAL_RCC_ClockConfig+0x23c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d1ef      	bne.n	800374a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800376a:	f000 f8b3 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 800376e:	4603      	mov	r3, r0
 8003770:	4a06      	ldr	r2, [pc, #24]	@ (800378c <HAL_RCC_ClockConfig+0x240>)
 8003772:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <HAL_RCC_ClockConfig+0x244>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd f9a1 	bl	8000ac0 <HAL_InitTick>
 800377e:	4603      	mov	r3, r0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	58004000 	.word	0x58004000
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a2:	f7ff fa2a 	bl	8002bfa <LL_RCC_GetSysClkSource>
 80037a6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a8:	f7ff fafe 	bl	8002da8 <LL_RCC_PLL_GetMainSource>
 80037ac:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x2c>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d139      	bne.n	800382e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d136      	bne.n	800382e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80037c0:	f7ff f9cd 	bl	8002b5e <LL_RCC_MSI_IsEnabledRangeSelect>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d115      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x62>
 80037ca:	f7ff f9c8 	bl	8002b5e <LL_RCC_MSI_IsEnabledRangeSelect>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x4e>
 80037d4:	f7ff f9d3 	bl	8002b7e <LL_RCC_MSI_GetRange>
 80037d8:	4603      	mov	r3, r0
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	e005      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x5a>
 80037e2:	f7ff f9d7 	bl	8002b94 <LL_RCC_MSI_GetRangeAfterStandby>
 80037e6:	4603      	mov	r3, r0
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	4a36      	ldr	r2, [pc, #216]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x134>)
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	e014      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x8c>
 80037f6:	f7ff f9b2 	bl	8002b5e <LL_RCC_MSI_IsEnabledRangeSelect>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d106      	bne.n	800380e <HAL_RCC_GetSysClockFreq+0x7a>
 8003800:	f7ff f9bd 	bl	8002b7e <LL_RCC_MSI_GetRange>
 8003804:	4603      	mov	r3, r0
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	e005      	b.n	800381a <HAL_RCC_GetSysClockFreq+0x86>
 800380e:	f7ff f9c1 	bl	8002b94 <LL_RCC_MSI_GetRangeAfterStandby>
 8003812:	4603      	mov	r3, r0
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a2b      	ldr	r2, [pc, #172]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x134>)
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d115      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800382c:	e012      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d102      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003834:	4b25      	ldr	r3, [pc, #148]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e00c      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d109      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003840:	f7ff f8a0 	bl	8002984 <LL_RCC_HSE_IsEnabledDiv2>
 8003844:	4603      	mov	r3, r0
 8003846:	2b01      	cmp	r3, #1
 8003848:	d102      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800384a:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e001      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003850:	4b1f      	ldr	r3, [pc, #124]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003852:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003854:	f7ff f9d1 	bl	8002bfa <LL_RCC_GetSysClkSource>
 8003858:	4603      	mov	r3, r0
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d12f      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800385e:	f7ff faa3 	bl	8002da8 <LL_RCC_PLL_GetMainSource>
 8003862:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0xde>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d003      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0xe4>
 8003870:	e00d      	b.n	800388e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003872:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 8003874:	60fb      	str	r3, [r7, #12]
        break;
 8003876:	e00d      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003878:	f7ff f884 	bl	8002984 <LL_RCC_HSE_IsEnabledDiv2>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003882:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x138>)
 8003884:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003886:	e005      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003888:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800388a:	60fb      	str	r3, [r7, #12]
        break;
 800388c:	e002      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	60fb      	str	r3, [r7, #12]
        break;
 8003892:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003894:	f7ff fa66 	bl	8002d64 <LL_RCC_PLL_GetN>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	fb03 f402 	mul.w	r4, r3, r2
 80038a0:	f7ff fa77 	bl	8002d92 <LL_RCC_PLL_GetDivider>
 80038a4:	4603      	mov	r3, r0
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	3301      	adds	r3, #1
 80038aa:	fbb4 f4f3 	udiv	r4, r4, r3
 80038ae:	f7ff fa65 	bl	8002d7c <LL_RCC_PLL_GetR>
 80038b2:	4603      	mov	r3, r0
 80038b4:	0f5b      	lsrs	r3, r3, #29
 80038b6:	3301      	adds	r3, #1
 80038b8:	fbb4 f3f3 	udiv	r3, r4, r3
 80038bc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80038be:	697b      	ldr	r3, [r7, #20]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd90      	pop	{r4, r7, pc}
 80038c8:	0800c85c 	.word	0x0800c85c
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	01e84800 	.word	0x01e84800

080038d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d4:	b598      	push	{r3, r4, r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80038d8:	f7ff ff5c 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 80038dc:	4604      	mov	r4, r0
 80038de:	f7ff f9e6 	bl	8002cae <LL_RCC_GetAHBPrescaler>
 80038e2:	4603      	mov	r3, r0
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	4a03      	ldr	r2, [pc, #12]	@ (80038f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80038ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd98      	pop	{r3, r4, r7, pc}
 80038f8:	0800c7fc 	.word	0x0800c7fc

080038fc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b598      	push	{r3, r4, r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003900:	f7ff ffe8 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8003904:	4604      	mov	r4, r0
 8003906:	f7ff f9ea 	bl	8002cde <LL_RCC_GetAPB1Prescaler>
 800390a:	4603      	mov	r3, r0
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	4a03      	ldr	r2, [pc, #12]	@ (800391c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003914:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd98      	pop	{r3, r4, r7, pc}
 800391c:	0800c83c 	.word	0x0800c83c

08003920 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b598      	push	{r3, r4, r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003924:	f7ff ffd6 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8003928:	4604      	mov	r4, r0
 800392a:	f7ff f9e3 	bl	8002cf4 <LL_RCC_GetAPB2Prescaler>
 800392e:	4603      	mov	r3, r0
 8003930:	0adb      	lsrs	r3, r3, #11
 8003932:	4a03      	ldr	r2, [pc, #12]	@ (8003940 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003938:	fa24 f303 	lsr.w	r3, r4, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd98      	pop	{r3, r4, r7, pc}
 8003940:	0800c83c 	.word	0x0800c83c

08003944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800395c:	f7ff f9b2 	bl	8002cc4 <LL_RCC_GetAHB3Prescaler>
 8003960:	4603      	mov	r3, r0
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	4a0c      	ldr	r2, [pc, #48]	@ (800399c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0c9c      	lsrs	r4, r3, #18
 8003980:	f7fe ff58 	bl	8002834 <HAL_PWREx_GetVoltageRange>
 8003984:	4603      	mov	r3, r0
 8003986:	4619      	mov	r1, r3
 8003988:	4620      	mov	r0, r4
 800398a:	f000 f80b 	bl	80039a4 <RCC_SetFlashLatency>
 800398e:	4603      	mov	r3, r0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	0800c85c 	.word	0x0800c85c
 800399c:	0800c7fc 	.word	0x0800c7fc
 80039a0:	431bde83 	.word	0x431bde83

080039a4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08e      	sub	sp, #56	@ 0x38
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80039ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003a98 <RCC_SetFlashLatency+0xf4>)
 80039b0:	f107 0320 	add.w	r3, r7, #32
 80039b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039b8:	6018      	str	r0, [r3, #0]
 80039ba:	3304      	adds	r3, #4
 80039bc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80039be:	4a37      	ldr	r2, [pc, #220]	@ (8003a9c <RCC_SetFlashLatency+0xf8>)
 80039c0:	f107 0318 	add.w	r3, r7, #24
 80039c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039c8:	6018      	str	r0, [r3, #0]
 80039ca:	3304      	adds	r3, #4
 80039cc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80039ce:	4a34      	ldr	r2, [pc, #208]	@ (8003aa0 <RCC_SetFlashLatency+0xfc>)
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80039d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80039da:	2300      	movs	r3, #0
 80039dc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039e4:	d11b      	bne.n	8003a1e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ea:	e014      	b.n	8003a16 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	3338      	adds	r3, #56	@ 0x38
 80039f2:	443b      	add	r3, r7
 80039f4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80039f8:	461a      	mov	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d807      	bhi.n	8003a10 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	3338      	adds	r3, #56	@ 0x38
 8003a06:	443b      	add	r3, r7
 8003a08:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a0e:	e021      	b.n	8003a54 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	3301      	adds	r3, #1
 8003a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d9e7      	bls.n	80039ec <RCC_SetFlashLatency+0x48>
 8003a1c:	e01a      	b.n	8003a54 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a22:	e014      	b.n	8003a4e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	3338      	adds	r3, #56	@ 0x38
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003a30:	461a      	mov	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d807      	bhi.n	8003a48 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	3338      	adds	r3, #56	@ 0x38
 8003a3e:	443b      	add	r3, r7
 8003a40:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a46:	e005      	b.n	8003a54 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d9e7      	bls.n	8003a24 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a54:	4b13      	ldr	r3, [pc, #76]	@ (8003aa4 <RCC_SetFlashLatency+0x100>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 0207 	bic.w	r2, r3, #7
 8003a5c:	4911      	ldr	r1, [pc, #68]	@ (8003aa4 <RCC_SetFlashLatency+0x100>)
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a64:	f7fd f836 	bl	8000ad4 <HAL_GetTick>
 8003a68:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a6a:	e008      	b.n	8003a7e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a6c:	f7fd f832 	bl	8000ad4 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e007      	b.n	8003a8e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a7e:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <RCC_SetFlashLatency+0x100>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1ef      	bne.n	8003a6c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3738      	adds	r7, #56	@ 0x38
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	0800c4ac 	.word	0x0800c4ac
 8003a9c:	0800c4b4 	.word	0x0800c4b4
 8003aa0:	0800c4bc 	.word	0x0800c4bc
 8003aa4:	58004000 	.word	0x58004000

08003aa8 <LL_RCC_LSE_IsReady>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d101      	bne.n	8003ac0 <LL_RCC_LSE_IsReady+0x18>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <LL_RCC_LSE_IsReady+0x1a>
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_SetUSARTClockSource>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	401a      	ands	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <LL_RCC_SetI2SClockSource>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <LL_RCC_SetLPUARTClockSource>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b34:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <LL_RCC_SetI2CClockSource>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b66:	43db      	mvns	r3, r3
 8003b68:	401a      	ands	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <LL_RCC_SetLPTIMClockSource>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <LL_RCC_SetRNGClockSource>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003bcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_SetADCClockSource>:
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <LL_RCC_SetRTCClockSource>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <LL_RCC_GetRTCClockSource>:
{
 8003c36:	b480      	push	{r7}
 8003c38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_ForceBackupDomainReset>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c86:	bf00      	nop
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d058      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003cb0:	f7fe fd7e 	bl	80027b0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb4:	f7fc ff0e 	bl	8000ad4 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003cba:	e009      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fc ff0a 	bl	8000ad4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d902      	bls.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	74fb      	strb	r3, [r7, #19]
        break;
 8003cce:	e006      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003cd0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cdc:	d1ee      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d13c      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ce4:	f7ff ffa7 	bl	8003c36 <LL_RCC_GetRTCClockSource>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d00f      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d00:	f7ff ffa5 	bl	8003c4e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d04:	f7ff ffb3 	bl	8003c6e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d014      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fc feda 	bl	8000ad4 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d22:	e00b      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fc fed6 	bl	8000ad4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d902      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	74fb      	strb	r3, [r7, #19]
            break;
 8003d3a:	e004      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d3c:	f7ff feb4 	bl	8003aa8 <LL_RCC_LSE_IsReady>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d1ee      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003d46:	7cfb      	ldrb	r3, [r7, #19]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff5b 	bl	8003c0c <LL_RCC_SetRTCClockSource>
 8003d56:	e004      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	74bb      	strb	r3, [r7, #18]
 8003d5c:	e001      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d004      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fea9 	bl	8003aca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fe9e 	bl	8003aca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fec0 	bl	8003b24 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fee6 	bl	8003b86 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fedb 	bl	8003b86 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fed0 	bl	8003b86 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fea9 	bl	8003b4e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fe9e 	bl	8003b4e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fe93 	bl	8003b4e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d011      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fe5e 	bl	8003afa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e46:	d107      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fea5 	bl	8003bb8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e84:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d011      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fea3 	bl	8003be2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003eb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	58000400 	.word	0x58000400

08003ec4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d071      	beq.n	8003fba <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fc fc44 	bl	8000778 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003ef8:	4b32      	ldr	r3, [pc, #200]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d051      	beq.n	8003fa8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f04:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f06:	22ca      	movs	r2, #202	@ 0xca
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f0c:	2253      	movs	r2, #83	@ 0x53
 8003f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fa11 	bl	8004338 <RTC_EnterInitMode>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13f      	bne.n	8003fa0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003f20:	4b28      	ldr	r3, [pc, #160]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4a27      	ldr	r2, [pc, #156]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f26:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8003f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f2e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003f30:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	4319      	orrs	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	430b      	orrs	r3, r1
 8003f44:	491f      	ldr	r1, [pc, #124]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	491b      	ldr	r1, [pc, #108]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	4915      	ldr	r1, [pc, #84]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa14 	bl	80043a0 <RTC_ExitInitMode>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10e      	bne.n	8003fa0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003f82:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a19      	ldr	r1, [r3, #32]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4319      	orrs	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	490a      	ldr	r1, [pc, #40]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa0:	4b08      	ldr	r3, [pc, #32]	@ (8003fc4 <HAL_RTC_Init+0x100>)
 8003fa2:	22ff      	movs	r2, #255	@ 0xff
 8003fa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fa6:	e001      	b.n	8003fac <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40002800 	.word	0x40002800

08003fc8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RTC_SetAlarm_IT+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0f3      	b.n	80041ce <HAL_RTC_SetAlarm_IT+0x206>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003ff6:	4b78      	ldr	r3, [pc, #480]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffe:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004006:	d06a      	beq.n	80040de <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d13a      	bne.n	8004084 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800400e:	4b72      	ldr	r3, [pc, #456]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2200      	movs	r2, #0
 800401e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f9f5 	bl	800441c <RTC_ByteToBcd2>
 8004032:	4603      	mov	r3, r0
 8004034:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f9ee 	bl	800441c <RTC_ByteToBcd2>
 8004040:	4603      	mov	r3, r0
 8004042:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004044:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	789b      	ldrb	r3, [r3, #2]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f9e6 	bl	800441c <RTC_ByteToBcd2>
 8004050:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004052:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	78db      	ldrb	r3, [r3, #3]
 800405a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800405c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f9d8 	bl	800441c <RTC_ByteToBcd2>
 800406c:	4603      	mov	r3, r0
 800406e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004070:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004078:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e02c      	b.n	80040de <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 800408c:	d00d      	beq.n	80040aa <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004096:	d008      	beq.n	80040aa <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004098:	4b4f      	ldr	r3, [pc, #316]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2200      	movs	r2, #0
 80040a8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	785b      	ldrb	r3, [r3, #1]
 80040b4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040b6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80040bc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	78db      	ldrb	r3, [r3, #3]
 80040c2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040c4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040cc:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040ce:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040d4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040de:	4b3e      	ldr	r3, [pc, #248]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040e0:	22ca      	movs	r2, #202	@ 0xca
 80040e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80040e4:	4b3c      	ldr	r3, [pc, #240]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040e6:	2253      	movs	r2, #83	@ 0x53
 80040e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f2:	d12c      	bne.n	800414e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040f4:	4b38      	ldr	r3, [pc, #224]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	4a37      	ldr	r2, [pc, #220]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040fe:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004100:	4b35      	ldr	r3, [pc, #212]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004102:	2201      	movs	r2, #1
 8004104:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800410c:	d107      	bne.n	800411e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4930      	ldr	r1, [pc, #192]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004118:	4313      	orrs	r3, r2
 800411a:	644b      	str	r3, [r1, #68]	@ 0x44
 800411c:	e006      	b.n	800412c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800411e:	4a2e      	ldr	r2, [pc, #184]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004124:	4a2c      	ldr	r2, [pc, #176]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800412c:	4a2a      	ldr	r2, [pc, #168]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004140:	4b25      	ldr	r3, [pc, #148]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	4a24      	ldr	r2, [pc, #144]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004146:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800414a:	6193      	str	r3, [r2, #24]
 800414c:	e02b      	b.n	80041a6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800414e:	4b22      	ldr	r3, [pc, #136]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	4a21      	ldr	r2, [pc, #132]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004154:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8004158:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800415c:	2202      	movs	r2, #2
 800415e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004166:	d107      	bne.n	8004178 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	699a      	ldr	r2, [r3, #24]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4919      	ldr	r1, [pc, #100]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004172:	4313      	orrs	r3, r2
 8004174:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8004176:	e006      	b.n	8004186 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004178:	4a17      	ldr	r2, [pc, #92]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800417e:	4a16      	ldr	r2, [pc, #88]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004186:	4a14      	ldr	r2, [pc, #80]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800419a:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	4a0e      	ldr	r2, [pc, #56]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 80041a0:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80041a4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <HAL_RTC_SetAlarm_IT+0x214>)
 80041a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ac:	4a0b      	ldr	r2, [pc, #44]	@ (80041dc <HAL_RTC_SetAlarm_IT+0x214>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041b6:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <HAL_RTC_SetAlarm_IT+0x210>)
 80041b8:	22ff      	movs	r2, #255	@ 0xff
 80041ba:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40002800 	.word	0x40002800
 80041dc:	58000800 	.word	0x58000800

080041e0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_RTC_DeactivateAlarm+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e048      	b.n	800428a <HAL_RTC_DeactivateAlarm+0xaa>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004208:	4b22      	ldr	r3, [pc, #136]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 800420a:	22ca      	movs	r2, #202	@ 0xca
 800420c:	625a      	str	r2, [r3, #36]	@ 0x24
 800420e:	4b21      	ldr	r3, [pc, #132]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004210:	2253      	movs	r2, #83	@ 0x53
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421a:	d115      	bne.n	8004248 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800421c:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	4a1c      	ldr	r2, [pc, #112]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004222:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004226:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004228:	4b1a      	ldr	r3, [pc, #104]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	4a19      	ldr	r2, [pc, #100]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 800422e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004232:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	f023 0201 	bic.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004240:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004242:	2201      	movs	r2, #1
 8004244:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004246:	e014      	b.n	8004272 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004248:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	4a11      	ldr	r2, [pc, #68]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 800424e:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8004252:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004254:	4b0f      	ldr	r3, [pc, #60]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004258:	4a0e      	ldr	r2, [pc, #56]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 800425a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800425e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	f023 0202 	bic.w	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 800426e:	2202      	movs	r2, #2
 8004270:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004272:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004274:	22ff      	movs	r2, #255	@ 0xff
 8004276:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	40002800 	.word	0x40002800

08004298 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80042a0:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80042a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80042b6:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7fc fe80 	bl	8000fc2 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80042cc:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80042ce:	2202      	movs	r2, #2
 80042d0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f94a 	bl	800456c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40002800 	.word	0x40002800

080042ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80042f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <HAL_RTC_WaitForSynchro+0x48>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <HAL_RTC_WaitForSynchro+0x48>)
 80042fa:	f023 0320 	bic.w	r3, r3, #32
 80042fe:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004300:	f7fc fbe8 	bl	8000ad4 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004306:	e009      	b.n	800431c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004308:	f7fc fbe4 	bl	8000ad4 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004316:	d901      	bls.n	800431c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e006      	b.n	800432a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800431c:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <HAL_RTC_WaitForSynchro+0x48>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ef      	beq.n	8004308 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40002800 	.word	0x40002800

08004338 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004344:	4b15      	ldr	r3, [pc, #84]	@ (800439c <RTC_EnterInitMode+0x64>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d120      	bne.n	8004392 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004350:	4b12      	ldr	r3, [pc, #72]	@ (800439c <RTC_EnterInitMode+0x64>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a11      	ldr	r2, [pc, #68]	@ (800439c <RTC_EnterInitMode+0x64>)
 8004356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800435a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800435c:	f7fc fbba 	bl	8000ad4 <HAL_GetTick>
 8004360:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004362:	e00d      	b.n	8004380 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004364:	f7fc fbb6 	bl	8000ad4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004372:	d905      	bls.n	8004380 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2203      	movs	r2, #3
 800437c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <RTC_EnterInitMode+0x64>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <RTC_EnterInitMode+0x5a>
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d1e8      	bne.n	8004364 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40002800 	.word	0x40002800

080043a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80043ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004418 <RTC_ExitInitMode+0x78>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a19      	ldr	r2, [pc, #100]	@ (8004418 <RTC_ExitInitMode+0x78>)
 80043b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043b6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80043b8:	4b17      	ldr	r3, [pc, #92]	@ (8004418 <RTC_ExitInitMode+0x78>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10c      	bne.n	80043de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff91 	bl	80042ec <HAL_RTC_WaitForSynchro>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01e      	beq.n	800440e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2203      	movs	r2, #3
 80043d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e017      	b.n	800440e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043de:	4b0e      	ldr	r3, [pc, #56]	@ (8004418 <RTC_ExitInitMode+0x78>)
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004418 <RTC_ExitInitMode+0x78>)
 80043e4:	f023 0320 	bic.w	r3, r3, #32
 80043e8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff ff7e 	bl	80042ec <HAL_RTC_WaitForSynchro>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004402:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <RTC_ExitInitMode+0x78>)
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <RTC_ExitInitMode+0x78>)
 8004408:	f043 0320 	orr.w	r3, r3, #32
 800440c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40002800 	.word	0x40002800

0800441c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800442e:	e005      	b.n	800443c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004436:	7afb      	ldrb	r3, [r7, #11]
 8004438:	3b0a      	subs	r3, #10
 800443a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	2b09      	cmp	r3, #9
 8004440:	d8f6      	bhi.n	8004430 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	b2da      	uxtb	r2, r3
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	4313      	orrs	r3, r2
 800444e:	b2db      	uxtb	r3, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
	...

0800445c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_RTCEx_EnableBypassShadow+0x16>
 800446e:	2302      	movs	r3, #2
 8004470:	e01f      	b.n	80044b2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004482:	4b0e      	ldr	r3, [pc, #56]	@ (80044bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004484:	22ca      	movs	r2, #202	@ 0xca
 8004486:	625a      	str	r2, [r3, #36]	@ 0x24
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 800448a:	2253      	movs	r2, #83	@ 0x53
 800448c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	4a0a      	ldr	r2, [pc, #40]	@ (80044bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800449a:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <HAL_RTCEx_EnableBypassShadow+0x60>)
 800449c:	22ff      	movs	r2, #255	@ 0xff
 800449e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	40002800 	.word	0x40002800

080044c0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e027      	b.n	8004526 <HAL_RTCEx_SetSSRU_IT+0x66>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044e6:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044e8:	22ca      	movs	r2, #202	@ 0xca
 80044ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80044ec:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044ee:	2253      	movs	r2, #83	@ 0x53
 80044f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80044f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004530 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004530 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044fc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004504:	4a0b      	ldr	r2, [pc, #44]	@ (8004534 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004506:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800450a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800450e:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004510:	22ff      	movs	r2, #255	@ 0xff
 8004512:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	40002800 	.word	0x40002800
 8004534:	58000800 	.word	0x58000800

08004538 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004540:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800454e:	2240      	movs	r2, #64	@ 0x40
 8004550:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fd3f 	bl	8000fd6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40002800 	.word	0x40002800

0800456c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
	...

08004580 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800458c:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <HAL_RTCEx_BKUPWrite+0x2c>)
 800458e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4413      	add	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	601a      	str	r2, [r3, #0]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	4000b100 	.word	0x4000b100

080045b0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80045ba:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <HAL_RTCEx_BKUPRead+0x28>)
 80045bc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	4000b100 	.word	0x4000b100

080045dc <LL_PWR_SetRadioBusyTrigger>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80045e4:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045ec:	4904      	ldr	r1, [pc, #16]	@ (8004600 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	58000400 	.word	0x58000400

08004604 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004608:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460e:	4a04      	ldr	r2, [pc, #16]	@ (8004620 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	58000400 	.word	0x58000400

08004624 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004628:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	4a04      	ldr	r2, [pc, #16]	@ (8004640 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004630:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	58000400 	.word	0x58000400

08004644 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004648:	4b03      	ldr	r3, [pc, #12]	@ (8004658 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800464a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800464e:	619a      	str	r2, [r3, #24]
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	58000400 	.word	0x58000400

0800465c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d101      	bne.n	8004670 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	58000400 	.word	0x58000400

08004680 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004684:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b04      	cmp	r3, #4
 800468e:	d101      	bne.n	8004694 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	58000400 	.word	0x58000400

080046a4 <LL_RCC_RF_DisableReset>:
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <LL_RCC_IsRFUnderReset>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046d8:	d101      	bne.n	80046de <LL_RCC_IsRFUnderReset+0x1a>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <LL_RCC_IsRFUnderReset+0x1c>
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <LL_EXTI_EnableIT_32_63>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <LL_EXTI_EnableIT_32_63+0x24>)
 80046f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80046f6:	4905      	ldr	r1, [pc, #20]	@ (800470c <LL_EXTI_EnableIT_32_63+0x24>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	58000800 	.word	0x58000800

08004710 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
    return status;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	e052      	b.n	80047cc <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	799b      	ldrb	r3, [r3, #6]
 800472e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004730:	7bbb      	ldrb	r3, [r7, #14]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SUBGHZ_Init+0x2c>
 8004736:	7bbb      	ldrb	r3, [r7, #14]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d109      	bne.n	8004750 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fc f926 	bl	8000994 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004748:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800474c:	f7ff ffcc 	bl	80046e8 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004750:	7bbb      	ldrb	r3, [r7, #14]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d126      	bne.n	80047a4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800475c:	f7ff ffa2 	bl	80046a4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004760:	4b1c      	ldr	r3, [pc, #112]	@ (80047d4 <HAL_SUBGHZ_Init+0xc4>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	0cdb      	lsrs	r3, r3, #19
 800476e:	2264      	movs	r2, #100	@ 0x64
 8004770:	fb02 f303 	mul.w	r3, r2, r3
 8004774:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	609a      	str	r2, [r3, #8]
        break;
 8004786:	e007      	b.n	8004798 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	3b01      	subs	r3, #1
 800478c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800478e:	f7ff ff99 	bl	80046c4 <LL_RCC_IsRFUnderReset>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1ee      	bne.n	8004776 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004798:	f7ff ff34 	bl	8004604 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800479c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80047a0:	f7ff ff1c 	bl	80045dc <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80047a4:	f7ff ff4e 	bl	8004644 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fab0 	bl	8004d18 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	719a      	strb	r2, [r3, #6]

  return status;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000000 	.word	0x20000000

080047d8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	461a      	mov	r2, r3
 80047e4:	460b      	mov	r3, r1
 80047e6:	817b      	strh	r3, [r7, #10]
 80047e8:	4613      	mov	r3, r2
 80047ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	799b      	ldrb	r3, [r3, #6]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d14a      	bne.n	800488c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	795b      	ldrb	r3, [r3, #5]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80047fe:	2302      	movs	r3, #2
 8004800:	e045      	b.n	800488e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2202      	movs	r2, #2
 800480c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fb50 	bl	8004eb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004814:	f7ff ff06 	bl	8004624 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004818:	210d      	movs	r1, #13
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fa9c 	bl	8004d58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004820:	897b      	ldrh	r3, [r7, #10]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	b29b      	uxth	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4619      	mov	r1, r3
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fa94 	bl	8004d58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004830:	897b      	ldrh	r3, [r7, #10]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	4619      	mov	r1, r3
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa8e 	bl	8004d58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800483c:	2300      	movs	r3, #0
 800483e:	82bb      	strh	r3, [r7, #20]
 8004840:	e00a      	b.n	8004858 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004842:	8abb      	ldrh	r3, [r7, #20]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	4619      	mov	r1, r3
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fa83 	bl	8004d58 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004852:	8abb      	ldrh	r3, [r7, #20]
 8004854:	3301      	adds	r3, #1
 8004856:	82bb      	strh	r3, [r7, #20]
 8004858:	8aba      	ldrh	r2, [r7, #20]
 800485a:	893b      	ldrh	r3, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d3f0      	bcc.n	8004842 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004860:	f7ff fed0 	bl	8004604 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fb49 	bl	8004efc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
 8004876:	e001      	b.n	800487c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	715a      	strb	r2, [r3, #5]

    return status;
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	e000      	b.n	800488e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b088      	sub	sp, #32
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	461a      	mov	r2, r3
 80048a2:	460b      	mov	r3, r1
 80048a4:	817b      	strh	r3, [r7, #10]
 80048a6:	4613      	mov	r3, r2
 80048a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	799b      	ldrb	r3, [r3, #6]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d14a      	bne.n	800494e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	795b      	ldrb	r3, [r3, #5]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e045      	b.n	8004950 <HAL_SUBGHZ_ReadRegisters+0xba>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 faf2 	bl	8004eb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048d0:	f7ff fea8 	bl	8004624 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80048d4:	211d      	movs	r1, #29
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fa3e 	bl	8004d58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80048dc:	897b      	ldrh	r3, [r7, #10]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	4619      	mov	r1, r3
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fa36 	bl	8004d58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80048ec:	897b      	ldrh	r3, [r7, #10]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fa30 	bl	8004d58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80048f8:	2100      	movs	r1, #0
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa2c 	bl	8004d58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004900:	2300      	movs	r3, #0
 8004902:	82fb      	strh	r3, [r7, #22]
 8004904:	e009      	b.n	800491a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fa7b 	bl	8004e04 <SUBGHZSPI_Receive>
      pData++;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	3301      	adds	r3, #1
 8004912:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004914:	8afb      	ldrh	r3, [r7, #22]
 8004916:	3301      	adds	r3, #1
 8004918:	82fb      	strh	r3, [r7, #22]
 800491a:	8afa      	ldrh	r2, [r7, #22]
 800491c:	893b      	ldrh	r3, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d3f1      	bcc.n	8004906 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004922:	f7ff fe6f 	bl	8004604 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fae8 	bl	8004efc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e001      	b.n	800493e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	715a      	strb	r2, [r3, #5]

    return status;
 800494a:	7ffb      	ldrb	r3, [r7, #31]
 800494c:	e000      	b.n	8004950 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
  }
}
 8004950:	4618      	mov	r0, r3
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	461a      	mov	r2, r3
 8004964:	460b      	mov	r3, r1
 8004966:	72fb      	strb	r3, [r7, #11]
 8004968:	4613      	mov	r3, r2
 800496a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	799b      	ldrb	r3, [r3, #6]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d14a      	bne.n	8004a0c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	795b      	ldrb	r3, [r3, #5]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800497e:	2302      	movs	r3, #2
 8004980:	e045      	b.n	8004a0e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fa93 	bl	8004eb4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	2b84      	cmp	r3, #132	@ 0x84
 8004992:	d002      	beq.n	800499a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004994:	7afb      	ldrb	r3, [r7, #11]
 8004996:	2b94      	cmp	r3, #148	@ 0x94
 8004998:	d103      	bne.n	80049a2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	711a      	strb	r2, [r3, #4]
 80049a0:	e002      	b.n	80049a8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049a8:	f7ff fe3c 	bl	8004624 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80049ac:	7afb      	ldrb	r3, [r7, #11]
 80049ae:	4619      	mov	r1, r3
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f9d1 	bl	8004d58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	82bb      	strh	r3, [r7, #20]
 80049ba:	e00a      	b.n	80049d2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80049bc:	8abb      	ldrh	r3, [r7, #20]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f9c6 	bl	8004d58 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80049cc:	8abb      	ldrh	r3, [r7, #20]
 80049ce:	3301      	adds	r3, #1
 80049d0:	82bb      	strh	r3, [r7, #20]
 80049d2:	8aba      	ldrh	r2, [r7, #20]
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d3f0      	bcc.n	80049bc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049da:	f7ff fe13 	bl	8004604 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80049de:	7afb      	ldrb	r3, [r7, #11]
 80049e0:	2b84      	cmp	r3, #132	@ 0x84
 80049e2:	d002      	beq.n	80049ea <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fa89 	bl	8004efc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75fb      	strb	r3, [r7, #23]
 80049f6:	e001      	b.n	80049fc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	715a      	strb	r2, [r3, #5]

    return status;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	e000      	b.n	8004a0e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b088      	sub	sp, #32
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	461a      	mov	r2, r3
 8004a22:	460b      	mov	r3, r1
 8004a24:	72fb      	strb	r3, [r7, #11]
 8004a26:	4613      	mov	r3, r2
 8004a28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	799b      	ldrb	r3, [r3, #6]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d13d      	bne.n	8004ab4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	795b      	ldrb	r3, [r3, #5]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e038      	b.n	8004ab6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fa32 	bl	8004eb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a50:	f7ff fde8 	bl	8004624 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004a54:	7afb      	ldrb	r3, [r7, #11]
 8004a56:	4619      	mov	r1, r3
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f97d 	bl	8004d58 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a5e:	2100      	movs	r1, #0
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f979 	bl	8004d58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	82fb      	strh	r3, [r7, #22]
 8004a6a:	e009      	b.n	8004a80 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a6c:	69b9      	ldr	r1, [r7, #24]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f9c8 	bl	8004e04 <SUBGHZSPI_Receive>
      pData++;
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	3301      	adds	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a7a:	8afb      	ldrh	r3, [r7, #22]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	82fb      	strh	r3, [r7, #22]
 8004a80:	8afa      	ldrh	r2, [r7, #22]
 8004a82:	893b      	ldrh	r3, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d3f1      	bcc.n	8004a6c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a88:	f7ff fdbc 	bl	8004604 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa35 	bl	8004efc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e001      	b.n	8004aa4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	715a      	strb	r2, [r3, #5]

    return status;
 8004ab0:	7ffb      	ldrb	r3, [r7, #31]
 8004ab2:	e000      	b.n	8004ab6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
  }
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	460b      	mov	r3, r1
 8004acc:	72fb      	strb	r3, [r7, #11]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	799b      	ldrb	r3, [r3, #6]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d13e      	bne.n	8004b5a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	795b      	ldrb	r3, [r3, #5]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e039      	b.n	8004b5c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f9e0 	bl	8004eb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004af4:	f7ff fd96 	bl	8004624 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004af8:	210e      	movs	r1, #14
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f92c 	bl	8004d58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004b00:	7afb      	ldrb	r3, [r7, #11]
 8004b02:	4619      	mov	r1, r3
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f927 	bl	8004d58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	82bb      	strh	r3, [r7, #20]
 8004b0e:	e00a      	b.n	8004b26 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b10:	8abb      	ldrh	r3, [r7, #20]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f91c 	bl	8004d58 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b20:	8abb      	ldrh	r3, [r7, #20]
 8004b22:	3301      	adds	r3, #1
 8004b24:	82bb      	strh	r3, [r7, #20]
 8004b26:	8aba      	ldrh	r2, [r7, #20]
 8004b28:	893b      	ldrh	r3, [r7, #8]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d3f0      	bcc.n	8004b10 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b2e:	f7ff fd69 	bl	8004604 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f9e2 	bl	8004efc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
 8004b44:	e001      	b.n	8004b4a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	715a      	strb	r2, [r3, #5]

    return status;
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	e000      	b.n	8004b5c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	460b      	mov	r3, r1
 8004b72:	72fb      	strb	r3, [r7, #11]
 8004b74:	4613      	mov	r3, r2
 8004b76:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	799b      	ldrb	r3, [r3, #6]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d141      	bne.n	8004c0a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	795b      	ldrb	r3, [r3, #5]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e03c      	b.n	8004c0c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f98b 	bl	8004eb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b9e:	f7ff fd41 	bl	8004624 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004ba2:	211e      	movs	r1, #30
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f8d7 	bl	8004d58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004baa:	7afb      	ldrb	r3, [r7, #11]
 8004bac:	4619      	mov	r1, r3
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f8d2 	bl	8004d58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f8ce 	bl	8004d58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	82fb      	strh	r3, [r7, #22]
 8004bc0:	e009      	b.n	8004bd6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bc2:	69b9      	ldr	r1, [r7, #24]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f91d 	bl	8004e04 <SUBGHZSPI_Receive>
      pData++;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004bd0:	8afb      	ldrh	r3, [r7, #22]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	82fb      	strh	r3, [r7, #22]
 8004bd6:	8afa      	ldrh	r2, [r7, #22]
 8004bd8:	893b      	ldrh	r3, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d3f1      	bcc.n	8004bc2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004bde:	f7ff fd11 	bl	8004604 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f98a 	bl	8004efc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e001      	b.n	8004bfa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	715a      	strb	r2, [r3, #5]

    return status;
 8004c06:	7ffb      	ldrb	r3, [r7, #31]
 8004c08:	e000      	b.n	8004c0c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
  }
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3720      	adds	r7, #32
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004c20:	f107 020c 	add.w	r2, r7, #12
 8004c24:	2302      	movs	r3, #2
 8004c26:	2112      	movs	r1, #18
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fef4 	bl	8004a16 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004c2e:	7b3b      	ldrb	r3, [r7, #12]
 8004c30:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004c32:	89fb      	ldrh	r3, [r7, #14]
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	b21a      	sxth	r2, r3
 8004c38:	7b7b      	ldrb	r3, [r7, #13]
 8004c3a:	b21b      	sxth	r3, r3
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	b21b      	sxth	r3, r3
 8004c40:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004c42:	f107 020c 	add.w	r2, r7, #12
 8004c46:	2302      	movs	r3, #2
 8004c48:	2102      	movs	r1, #2
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fe84 	bl	8004958 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c50:	89fb      	ldrh	r3, [r7, #14]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f005 fc2e 	bl	800a4bc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004c60:	89fb      	ldrh	r3, [r7, #14]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004c6a:	89fb      	ldrh	r3, [r7, #14]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f005 fc2f 	bl	800a4d8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004c7a:	89fb      	ldrh	r3, [r7, #14]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f005 fc7f 	bl	800a588 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f005 fc85 	bl	800a5a4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004c9a:	89fb      	ldrh	r3, [r7, #14]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f005 fc8b 	bl	800a5c0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f005 fc59 	bl	800a56c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f005 fc15 	bl	800a4f4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004cca:	89fb      	ldrh	r3, [r7, #14]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004cd4:	89fb      	ldrh	r3, [r7, #14]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004cde:	2101      	movs	r1, #1
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f005 fc15 	bl	800a510 <HAL_SUBGHZ_CADStatusCallback>
 8004ce6:	e003      	b.n	8004cf0 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004ce8:	2100      	movs	r1, #0
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f005 fc10 	bl	800a510 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004cf0:	89fb      	ldrh	r3, [r7, #14]
 8004cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f005 fc26 	bl	800a54c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004d00:	89fb      	ldrh	r3, [r7, #14]
 8004d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f005 fc66 	bl	800a5dc <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d20:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <SUBGHZSPI_Init+0x3c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0b      	ldr	r2, [pc, #44]	@ (8004d54 <SUBGHZSPI_Init+0x3c>)
 8004d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004d2c:	4a09      	ldr	r2, [pc, #36]	@ (8004d54 <SUBGHZSPI_Init+0x3c>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004d34:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004d36:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <SUBGHZSPI_Init+0x3c>)
 8004d38:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004d3c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d3e:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <SUBGHZSPI_Init+0x3c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a04      	ldr	r2, [pc, #16]	@ (8004d54 <SUBGHZSPI_Init+0x3c>)
 8004d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d48:	6013      	str	r3, [r2, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	58010000 	.word	0x58010000

08004d58 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d68:	4b23      	ldr	r3, [pc, #140]	@ (8004df8 <SUBGHZSPI_Transmit+0xa0>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	0cdb      	lsrs	r3, r3, #19
 8004d76:	2264      	movs	r2, #100	@ 0x64
 8004d78:	fb02 f303 	mul.w	r3, r2, r3
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	609a      	str	r2, [r3, #8]
      break;
 8004d8e:	e008      	b.n	8004da2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d96:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <SUBGHZSPI_Transmit+0xa4>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d1ed      	bne.n	8004d7e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004da2:	4b17      	ldr	r3, [pc, #92]	@ (8004e00 <SUBGHZSPI_Transmit+0xa8>)
 8004da4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004dac:	4b12      	ldr	r3, [pc, #72]	@ (8004df8 <SUBGHZSPI_Transmit+0xa0>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	0cdb      	lsrs	r3, r3, #19
 8004dba:	2264      	movs	r2, #100	@ 0x64
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	609a      	str	r2, [r3, #8]
      break;
 8004dd2:	e008      	b.n	8004de6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004dda:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <SUBGHZSPI_Transmit+0xa4>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d1ed      	bne.n	8004dc2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004de6:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <SUBGHZSPI_Transmit+0xa4>)
 8004de8:	68db      	ldr	r3, [r3, #12]

  return status;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000000 	.word	0x20000000
 8004dfc:	58010000 	.word	0x58010000
 8004e00:	5801000c 	.word	0x5801000c

08004e04 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e12:	4b25      	ldr	r3, [pc, #148]	@ (8004ea8 <SUBGHZSPI_Receive+0xa4>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	0cdb      	lsrs	r3, r3, #19
 8004e20:	2264      	movs	r2, #100	@ 0x64
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	609a      	str	r2, [r3, #8]
      break;
 8004e38:	e008      	b.n	8004e4c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004e40:	4b1a      	ldr	r3, [pc, #104]	@ (8004eac <SUBGHZSPI_Receive+0xa8>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d1ed      	bne.n	8004e28 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004e4c:	4b18      	ldr	r3, [pc, #96]	@ (8004eb0 <SUBGHZSPI_Receive+0xac>)
 8004e4e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	22ff      	movs	r2, #255	@ 0xff
 8004e54:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e56:	4b14      	ldr	r3, [pc, #80]	@ (8004ea8 <SUBGHZSPI_Receive+0xa4>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	0cdb      	lsrs	r3, r3, #19
 8004e64:	2264      	movs	r2, #100	@ 0x64
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d105      	bne.n	8004e7e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	609a      	str	r2, [r3, #8]
      break;
 8004e7c:	e008      	b.n	8004e90 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004e84:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <SUBGHZSPI_Receive+0xa8>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d1ed      	bne.n	8004e6c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004e90:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <SUBGHZSPI_Receive+0xa8>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	701a      	strb	r2, [r3, #0]

  return status;
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000000 	.word	0x20000000
 8004eac:	58010000 	.word	0x58010000
 8004eb0:	5801000c 	.word	0x5801000c

08004eb4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	791b      	ldrb	r3, [r3, #4]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d111      	bne.n	8004ee8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <SUBGHZ_CheckDeviceReady+0x44>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ed4:	f7ff fba6 	bl	8004624 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f9      	bne.n	8004ed8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ee4:	f7ff fb8e 	bl	8004604 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f807 	bl	8004efc <SUBGHZ_WaitOnBusy>
 8004eee:	4603      	mov	r3, r0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000000 	.word	0x20000000

08004efc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004f08:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <SUBGHZ_WaitOnBusy+0x58>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	0d1b      	lsrs	r3, r3, #20
 8004f16:	2264      	movs	r2, #100	@ 0x64
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004f1e:	f7ff fbaf 	bl	8004680 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004f22:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d105      	bne.n	8004f36 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	609a      	str	r2, [r3, #8]
      break;
 8004f34:	e009      	b.n	8004f4a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004f3c:	f7ff fb8e 	bl	800465c <LL_PWR_IsActiveFlag_RFBUSYS>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d0e9      	beq.n	8004f1e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000000 	.word	0x20000000

08004f58 <LL_RCC_GetUSARTClockSource>:
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	4313      	orrs	r3, r2
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <LL_RCC_GetLPUARTClockSource>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4013      	ands	r3, r2
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e042      	b.n	8005032 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc f96e 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2224      	movs	r2, #36	@ 0x24
 8004fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 feab 	bl	8005d40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fc34 	bl	8005858 <UART_SetConfig>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e01b      	b.n	8005032 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005008:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005018:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 ff29 	bl	8005e82 <UART_CheckIdleState>
 8005030:	4603      	mov	r3, r0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	@ 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005050:	2b20      	cmp	r3, #32
 8005052:	d137      	bne.n	80050c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Receive_IT+0x24>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e030      	b.n	80050c6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a18      	ldr	r2, [pc, #96]	@ (80050d0 <HAL_UART_Receive_IT+0x94>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d01f      	beq.n	80050b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d018      	beq.n	80050b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	613b      	str	r3, [r7, #16]
   return(result);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	69f9      	ldr	r1, [r7, #28]
 80050a6:	6a3a      	ldr	r2, [r7, #32]
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e6      	bne.n	8005082 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fffe 	bl	80060bc <UART_Start_Receive_IT>
 80050c0:	4603      	mov	r3, r0
 80050c2:	e000      	b.n	80050c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050c4:	2302      	movs	r3, #2
  }
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3728      	adds	r7, #40	@ 0x28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40008000 	.word	0x40008000

080050d4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	@ 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d167      	bne.n	80051bc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Transmit_DMA+0x24>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e060      	b.n	80051be <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	88fa      	ldrh	r2, [r7, #6]
 8005106:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2221      	movs	r2, #33	@ 0x21
 800511e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d028      	beq.n	800517c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800512e:	4a26      	ldr	r2, [pc, #152]	@ (80051c8 <HAL_UART_Transmit_DMA+0xf4>)
 8005130:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005136:	4a25      	ldr	r2, [pc, #148]	@ (80051cc <HAL_UART_Transmit_DMA+0xf8>)
 8005138:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800513e:	4a24      	ldr	r2, [pc, #144]	@ (80051d0 <HAL_UART_Transmit_DMA+0xfc>)
 8005140:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005146:	2200      	movs	r2, #0
 8005148:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005152:	4619      	mov	r1, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3328      	adds	r3, #40	@ 0x28
 800515a:	461a      	mov	r2, r3
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	f7fc fe1d 	bl	8001d9c <HAL_DMA_Start_IT>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2210      	movs	r2, #16
 800516c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e020      	b.n	80051be <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2240      	movs	r2, #64	@ 0x40
 8005182:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3308      	adds	r3, #8
 800518a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	613b      	str	r3, [r7, #16]
   return(result);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a4:	623a      	str	r2, [r7, #32]
 80051a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	69f9      	ldr	r1, [r7, #28]
 80051aa:	6a3a      	ldr	r2, [r7, #32]
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e5      	bne.n	8005184 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e000      	b.n	80051be <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3728      	adds	r7, #40	@ 0x28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	08006447 	.word	0x08006447
 80051cc:	080064e1 	.word	0x080064e1
 80051d0:	080064fd 	.word	0x080064fd

080051d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b0ba      	sub	sp, #232	@ 0xe8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80051fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005202:	4013      	ands	r3, r2
 8005204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d11b      	bne.n	8005248 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d015      	beq.n	8005248 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800522c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 82e3 	beq.w	8005804 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
      }
      return;
 8005246:	e2dd      	b.n	8005804 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8123 	beq.w	8005498 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005252:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005256:	4b8d      	ldr	r3, [pc, #564]	@ (800548c <HAL_UART_IRQHandler+0x2b8>)
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800525e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005262:	4b8b      	ldr	r3, [pc, #556]	@ (8005490 <HAL_UART_IRQHandler+0x2bc>)
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8116 	beq.w	8005498 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800526c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d011      	beq.n	800529c <HAL_UART_IRQHandler+0xc8>
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d011      	beq.n	80052cc <HAL_UART_IRQHandler+0xf8>
 80052a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2202      	movs	r2, #2
 80052ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	f043 0204 	orr.w	r2, r3, #4
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d011      	beq.n	80052fc <HAL_UART_IRQHandler+0x128>
 80052d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2204      	movs	r2, #4
 80052ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f2:	f043 0202 	orr.w	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005314:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005318:	4b5c      	ldr	r3, [pc, #368]	@ (800548c <HAL_UART_IRQHandler+0x2b8>)
 800531a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2208      	movs	r2, #8
 8005326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532e:	f043 0208 	orr.w	r2, r3, #8
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005340:	2b00      	cmp	r3, #0
 8005342:	d012      	beq.n	800536a <HAL_UART_IRQHandler+0x196>
 8005344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005348:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8249 	beq.w	8005808 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d013      	beq.n	80053aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800538e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053be:	2b40      	cmp	r3, #64	@ 0x40
 80053c0:	d005      	beq.n	80053ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d054      	beq.n	8005478 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 ffd4 	bl	800637c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053de:	2b40      	cmp	r3, #64	@ 0x40
 80053e0:	d146      	bne.n	8005470 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800540e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800541a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1d9      	bne.n	80053e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005434:	2b00      	cmp	r3, #0
 8005436:	d017      	beq.n	8005468 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800543e:	4a15      	ldr	r2, [pc, #84]	@ (8005494 <HAL_UART_IRQHandler+0x2c0>)
 8005440:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005448:	4618      	mov	r0, r3
 800544a:	f7fc fd83 	bl	8001f54 <HAL_DMA_Abort_IT>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d019      	beq.n	8005488 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005462:	4610      	mov	r0, r2
 8005464:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005466:	e00f      	b.n	8005488 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f9e0 	bl	800582e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546e:	e00b      	b.n	8005488 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f9dc 	bl	800582e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005476:	e007      	b.n	8005488 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f9d8 	bl	800582e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005486:	e1bf      	b.n	8005808 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	bf00      	nop
    return;
 800548a:	e1bd      	b.n	8005808 <HAL_UART_IRQHandler+0x634>
 800548c:	10000001 	.word	0x10000001
 8005490:	04000120 	.word	0x04000120
 8005494:	0800657d 	.word	0x0800657d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800549c:	2b01      	cmp	r3, #1
 800549e:	f040 8153 	bne.w	8005748 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 814c 	beq.w	8005748 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8145 	beq.w	8005748 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2210      	movs	r2, #16
 80054c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d0:	2b40      	cmp	r3, #64	@ 0x40
 80054d2:	f040 80bb 	bne.w	800564c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 818f 	beq.w	800580c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054f8:	429a      	cmp	r2, r3
 80054fa:	f080 8187 	bcs.w	800580c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005504:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	f040 8087 	bne.w	800562a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005530:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800554a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005552:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800555e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1da      	bne.n	800551c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3308      	adds	r3, #8
 800556c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3308      	adds	r3, #8
 8005586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800558a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800558e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005592:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800559c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e1      	bne.n	8005566 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e3      	bne.n	80055a2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055f8:	f023 0310 	bic.w	r3, r3, #16
 80055fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800560a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800560c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005610:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e4      	bne.n	80055e8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005624:	4618      	mov	r0, r3
 8005626:	f7fc fc37 	bl	8001e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800563c:	b29b      	uxth	r3, r3
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	b29b      	uxth	r3, r3
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f8fb 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800564a:	e0df      	b.n	800580c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005658:	b29b      	uxth	r3, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80d1 	beq.w	8005810 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800566e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80cc 	beq.w	8005810 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800568c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800569a:	647b      	str	r3, [r7, #68]	@ 0x44
 800569c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e4      	bne.n	8005678 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	623b      	str	r3, [r7, #32]
   return(result);
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e1      	bne.n	80056ae <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	60fb      	str	r3, [r7, #12]
   return(result);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0310 	bic.w	r3, r3, #16
 8005712:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	69b9      	ldr	r1, [r7, #24]
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	617b      	str	r3, [r7, #20]
   return(result);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e4      	bne.n	80056fe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800573a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f87d 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005746:	e063      	b.n	8005810 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <HAL_UART_IRQHandler+0x59e>
 8005754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f001 fc64 	bl	8007038 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005770:	e051      	b.n	8005816 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577a:	2b00      	cmp	r3, #0
 800577c:	d014      	beq.n	80057a8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800577e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005786:	2b00      	cmp	r3, #0
 8005788:	d105      	bne.n	8005796 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800578a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800578e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800579a:	2b00      	cmp	r3, #0
 800579c:	d03a      	beq.n	8005814 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
    }
    return;
 80057a6:	e035      	b.n	8005814 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <HAL_UART_IRQHandler+0x5f4>
 80057b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fef1 	bl	80065a8 <UART_EndTransmit_IT>
    return;
 80057c6:	e026      	b.n	8005816 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d009      	beq.n	80057e8 <HAL_UART_IRQHandler+0x614>
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 fc3b 	bl	800705c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057e6:	e016      	b.n	8005816 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d010      	beq.n	8005816 <HAL_UART_IRQHandler+0x642>
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	da0c      	bge.n	8005816 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 fc24 	bl	800704a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005802:	e008      	b.n	8005816 <HAL_UART_IRQHandler+0x642>
      return;
 8005804:	bf00      	nop
 8005806:	e006      	b.n	8005816 <HAL_UART_IRQHandler+0x642>
    return;
 8005808:	bf00      	nop
 800580a:	e004      	b.n	8005816 <HAL_UART_IRQHandler+0x642>
      return;
 800580c:	bf00      	nop
 800580e:	e002      	b.n	8005816 <HAL_UART_IRQHandler+0x642>
      return;
 8005810:	bf00      	nop
 8005812:	e000      	b.n	8005816 <HAL_UART_IRQHandler+0x642>
    return;
 8005814:	bf00      	nop
  }
}
 8005816:	37e8      	adds	r7, #232	@ 0xe8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
	...

08005858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800585c:	b08c      	sub	sp, #48	@ 0x30
 800585e:	af00      	add	r7, sp, #0
 8005860:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	431a      	orrs	r2, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	431a      	orrs	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	4313      	orrs	r3, r2
 800587e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4b94      	ldr	r3, [pc, #592]	@ (8005ad8 <UART_SetConfig+0x280>)
 8005888:	4013      	ands	r3, r2
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005890:	430b      	orrs	r3, r1
 8005892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a89      	ldr	r2, [pc, #548]	@ (8005adc <UART_SetConfig+0x284>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d004      	beq.n	80058c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c0:	4313      	orrs	r3, r2
 80058c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80058ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058d8:	430b      	orrs	r3, r1
 80058da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e2:	f023 010f 	bic.w	r1, r3, #15
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a7a      	ldr	r2, [pc, #488]	@ (8005ae0 <UART_SetConfig+0x288>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d127      	bne.n	800594c <UART_SetConfig+0xf4>
 80058fc:	2003      	movs	r0, #3
 80058fe:	f7ff fb2b 	bl	8004f58 <LL_RCC_GetUSARTClockSource>
 8005902:	4603      	mov	r3, r0
 8005904:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005908:	2b03      	cmp	r3, #3
 800590a:	d81b      	bhi.n	8005944 <UART_SetConfig+0xec>
 800590c:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <UART_SetConfig+0xbc>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005925 	.word	0x08005925
 8005918:	08005935 	.word	0x08005935
 800591c:	0800592d 	.word	0x0800592d
 8005920:	0800593d 	.word	0x0800593d
 8005924:	2301      	movs	r3, #1
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592a:	e080      	b.n	8005a2e <UART_SetConfig+0x1d6>
 800592c:	2302      	movs	r3, #2
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005932:	e07c      	b.n	8005a2e <UART_SetConfig+0x1d6>
 8005934:	2304      	movs	r3, #4
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800593a:	e078      	b.n	8005a2e <UART_SetConfig+0x1d6>
 800593c:	2308      	movs	r3, #8
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005942:	e074      	b.n	8005a2e <UART_SetConfig+0x1d6>
 8005944:	2310      	movs	r3, #16
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594a:	e070      	b.n	8005a2e <UART_SetConfig+0x1d6>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a64      	ldr	r2, [pc, #400]	@ (8005ae4 <UART_SetConfig+0x28c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d138      	bne.n	80059c8 <UART_SetConfig+0x170>
 8005956:	200c      	movs	r0, #12
 8005958:	f7ff fafe 	bl	8004f58 <LL_RCC_GetUSARTClockSource>
 800595c:	4603      	mov	r3, r0
 800595e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005962:	2b0c      	cmp	r3, #12
 8005964:	d82c      	bhi.n	80059c0 <UART_SetConfig+0x168>
 8005966:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <UART_SetConfig+0x114>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059c1 	.word	0x080059c1
 8005974:	080059c1 	.word	0x080059c1
 8005978:	080059c1 	.word	0x080059c1
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059c1 	.word	0x080059c1
 8005984:	080059c1 	.word	0x080059c1
 8005988:	080059c1 	.word	0x080059c1
 800598c:	080059a9 	.word	0x080059a9
 8005990:	080059c1 	.word	0x080059c1
 8005994:	080059c1 	.word	0x080059c1
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059b9 	.word	0x080059b9
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a6:	e042      	b.n	8005a2e <UART_SetConfig+0x1d6>
 80059a8:	2302      	movs	r3, #2
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ae:	e03e      	b.n	8005a2e <UART_SetConfig+0x1d6>
 80059b0:	2304      	movs	r3, #4
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b6:	e03a      	b.n	8005a2e <UART_SetConfig+0x1d6>
 80059b8:	2308      	movs	r3, #8
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059be:	e036      	b.n	8005a2e <UART_SetConfig+0x1d6>
 80059c0:	2310      	movs	r3, #16
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c6:	e032      	b.n	8005a2e <UART_SetConfig+0x1d6>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a43      	ldr	r2, [pc, #268]	@ (8005adc <UART_SetConfig+0x284>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d12a      	bne.n	8005a28 <UART_SetConfig+0x1d0>
 80059d2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80059d6:	f7ff fad1 	bl	8004f7c <LL_RCC_GetLPUARTClockSource>
 80059da:	4603      	mov	r3, r0
 80059dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059e0:	d01a      	beq.n	8005a18 <UART_SetConfig+0x1c0>
 80059e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059e6:	d81b      	bhi.n	8005a20 <UART_SetConfig+0x1c8>
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ec:	d00c      	beq.n	8005a08 <UART_SetConfig+0x1b0>
 80059ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f2:	d815      	bhi.n	8005a20 <UART_SetConfig+0x1c8>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <UART_SetConfig+0x1a8>
 80059f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fc:	d008      	beq.n	8005a10 <UART_SetConfig+0x1b8>
 80059fe:	e00f      	b.n	8005a20 <UART_SetConfig+0x1c8>
 8005a00:	2300      	movs	r3, #0
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a06:	e012      	b.n	8005a2e <UART_SetConfig+0x1d6>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a0e:	e00e      	b.n	8005a2e <UART_SetConfig+0x1d6>
 8005a10:	2304      	movs	r3, #4
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a16:	e00a      	b.n	8005a2e <UART_SetConfig+0x1d6>
 8005a18:	2308      	movs	r3, #8
 8005a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a1e:	e006      	b.n	8005a2e <UART_SetConfig+0x1d6>
 8005a20:	2310      	movs	r3, #16
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a26:	e002      	b.n	8005a2e <UART_SetConfig+0x1d6>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2a      	ldr	r2, [pc, #168]	@ (8005adc <UART_SetConfig+0x284>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	f040 80a4 	bne.w	8005b82 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d823      	bhi.n	8005a8a <UART_SetConfig+0x232>
 8005a42:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <UART_SetConfig+0x1f0>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a6d 	.word	0x08005a6d
 8005a4c:	08005a8b 	.word	0x08005a8b
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a8b 	.word	0x08005a8b
 8005a58:	08005a7b 	.word	0x08005a7b
 8005a5c:	08005a8b 	.word	0x08005a8b
 8005a60:	08005a8b 	.word	0x08005a8b
 8005a64:	08005a8b 	.word	0x08005a8b
 8005a68:	08005a83 	.word	0x08005a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a6c:	f7fd ff46 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8005a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a72:	e010      	b.n	8005a96 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a74:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae8 <UART_SetConfig+0x290>)
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a78:	e00d      	b.n	8005a96 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a7a:	f7fd fe8b 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8005a7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a80:	e009      	b.n	8005a96 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a88:	e005      	b.n	8005a96 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8137 	beq.w	8005d0c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	4a12      	ldr	r2, [pc, #72]	@ (8005aec <UART_SetConfig+0x294>)
 8005aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d305      	bcc.n	8005ace <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d910      	bls.n	8005af0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ad4:	e11a      	b.n	8005d0c <UART_SetConfig+0x4b4>
 8005ad6:	bf00      	nop
 8005ad8:	cfff69f3 	.word	0xcfff69f3
 8005adc:	40008000 	.word	0x40008000
 8005ae0:	40013800 	.word	0x40013800
 8005ae4:	40004400 	.word	0x40004400
 8005ae8:	00f42400 	.word	0x00f42400
 8005aec:	0800c8ec 	.word	0x0800c8ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	2200      	movs	r2, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	60fa      	str	r2, [r7, #12]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	4a8e      	ldr	r2, [pc, #568]	@ (8005d38 <UART_SetConfig+0x4e0>)
 8005afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2200      	movs	r2, #0
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b12:	f7fa fb39 	bl	8000188 <__aeabi_uldivmod>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	020b      	lsls	r3, r1, #8
 8005b28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b2c:	0202      	lsls	r2, r0, #8
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	6849      	ldr	r1, [r1, #4]
 8005b32:	0849      	lsrs	r1, r1, #1
 8005b34:	2000      	movs	r0, #0
 8005b36:	460c      	mov	r4, r1
 8005b38:	4605      	mov	r5, r0
 8005b3a:	eb12 0804 	adds.w	r8, r2, r4
 8005b3e:	eb43 0905 	adc.w	r9, r3, r5
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	469a      	mov	sl, r3
 8005b4a:	4693      	mov	fp, r2
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	465b      	mov	r3, fp
 8005b50:	4640      	mov	r0, r8
 8005b52:	4649      	mov	r1, r9
 8005b54:	f7fa fb18 	bl	8000188 <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b66:	d308      	bcc.n	8005b7a <UART_SetConfig+0x322>
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b6e:	d204      	bcs.n	8005b7a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	60da      	str	r2, [r3, #12]
 8005b78:	e0c8      	b.n	8005d0c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b80:	e0c4      	b.n	8005d0c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b8a:	d167      	bne.n	8005c5c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d828      	bhi.n	8005be6 <UART_SetConfig+0x38e>
 8005b94:	a201      	add	r2, pc, #4	@ (adr r2, 8005b9c <UART_SetConfig+0x344>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bd1 	.word	0x08005bd1
 8005ba8:	08005be7 	.word	0x08005be7
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	08005be7 	.word	0x08005be7
 8005bb4:	08005be7 	.word	0x08005be7
 8005bb8:	08005be7 	.word	0x08005be7
 8005bbc:	08005bdf 	.word	0x08005bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fd fe9c 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bc6:	e014      	b.n	8005bf2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc8:	f7fd feaa 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bce:	e010      	b.n	8005bf2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8005d3c <UART_SetConfig+0x4e4>)
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bd4:	e00d      	b.n	8005bf2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd6:	f7fd fddd 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8005bda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bdc:	e009      	b.n	8005bf2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005be4:	e005      	b.n	8005bf2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8089 	beq.w	8005d0c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8005d38 <UART_SetConfig+0x4e0>)
 8005c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c04:	461a      	mov	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c0c:	005a      	lsls	r2, r3, #1
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	085b      	lsrs	r3, r3, #1
 8005c14:	441a      	add	r2, r3
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2b0f      	cmp	r3, #15
 8005c24:	d916      	bls.n	8005c54 <UART_SetConfig+0x3fc>
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2c:	d212      	bcs.n	8005c54 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f023 030f 	bic.w	r3, r3, #15
 8005c36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	8bfb      	ldrh	r3, [r7, #30]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	8bfa      	ldrh	r2, [r7, #30]
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	e05b      	b.n	8005d0c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c5a:	e057      	b.n	8005d0c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d828      	bhi.n	8005cb6 <UART_SetConfig+0x45e>
 8005c64:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <UART_SetConfig+0x414>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005c99 	.word	0x08005c99
 8005c74:	08005ca1 	.word	0x08005ca1
 8005c78:	08005cb7 	.word	0x08005cb7
 8005c7c:	08005ca7 	.word	0x08005ca7
 8005c80:	08005cb7 	.word	0x08005cb7
 8005c84:	08005cb7 	.word	0x08005cb7
 8005c88:	08005cb7 	.word	0x08005cb7
 8005c8c:	08005caf 	.word	0x08005caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c90:	f7fd fe34 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8005c94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c96:	e014      	b.n	8005cc2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c98:	f7fd fe42 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8005c9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c9e:	e010      	b.n	8005cc2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca0:	4b26      	ldr	r3, [pc, #152]	@ (8005d3c <UART_SetConfig+0x4e4>)
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ca4:	e00d      	b.n	8005cc2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca6:	f7fd fd75 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8005caa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cac:	e009      	b.n	8005cc2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cb4:	e005      	b.n	8005cc2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cc0:	bf00      	nop
    }

    if (pclk != 0U)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d021      	beq.n	8005d0c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d38 <UART_SetConfig+0x4e0>)
 8005cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	441a      	add	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	2b0f      	cmp	r3, #15
 8005cf0:	d909      	bls.n	8005d06 <UART_SetConfig+0x4ae>
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d205      	bcs.n	8005d06 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60da      	str	r2, [r3, #12]
 8005d04:	e002      	b.n	8005d0c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005d28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3730      	adds	r7, #48	@ 0x30
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	0800c8ec 	.word	0x0800c8ec
 8005d3c:	00f42400 	.word	0x00f42400

08005d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e3e:	d10a      	bne.n	8005e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b086      	sub	sp, #24
 8005e86:	af02      	add	r7, sp, #8
 8005e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e92:	f7fa fe1f 	bl	8000ad4 <HAL_GetTick>
 8005e96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d10e      	bne.n	8005ec4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f832 	bl	8005f1e <UART_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e028      	b.n	8005f16 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d10e      	bne.n	8005ef0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f81c 	bl	8005f1e <UART_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e012      	b.n	8005f16 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b09c      	sub	sp, #112	@ 0x70
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2e:	e0af      	b.n	8006090 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	f000 80ab 	beq.w	8006090 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3a:	f7fa fdcb 	bl	8000ad4 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d302      	bcc.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d140      	bne.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f60:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005f64:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f70:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e6      	bne.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fa2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005fa4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e5      	bne.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e06f      	b.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d057      	beq.n	8006090 <UART_WaitOnFlagUntilTimeout+0x172>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b80      	cmp	r3, #128	@ 0x80
 8005fe4:	d054      	beq.n	8006090 <UART_WaitOnFlagUntilTimeout+0x172>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b40      	cmp	r3, #64	@ 0x40
 8005fea:	d051      	beq.n	8006090 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ffa:	d149      	bne.n	8006090 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006004:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800601a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006024:	637b      	str	r3, [r7, #52]	@ 0x34
 8006026:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800602a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e6      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	613b      	str	r3, [r7, #16]
   return(result);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3308      	adds	r3, #8
 8006056:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006058:	623a      	str	r2, [r7, #32]
 800605a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	69f9      	ldr	r1, [r7, #28]
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	61bb      	str	r3, [r7, #24]
   return(result);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e5      	bne.n	8006038 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e010      	b.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	f43f af40 	beq.w	8005f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3770      	adds	r7, #112	@ 0x70
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b0a3      	sub	sp, #140	@ 0x8c
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4613      	mov	r3, r2
 80060c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ee:	d10e      	bne.n	800610e <UART_Start_Receive_IT+0x52>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d105      	bne.n	8006104 <UART_Start_Receive_IT+0x48>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80060fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006102:	e02d      	b.n	8006160 <UART_Start_Receive_IT+0xa4>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	22ff      	movs	r2, #255	@ 0xff
 8006108:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800610c:	e028      	b.n	8006160 <UART_Start_Receive_IT+0xa4>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10d      	bne.n	8006132 <UART_Start_Receive_IT+0x76>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d104      	bne.n	8006128 <UART_Start_Receive_IT+0x6c>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	22ff      	movs	r2, #255	@ 0xff
 8006122:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006126:	e01b      	b.n	8006160 <UART_Start_Receive_IT+0xa4>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	227f      	movs	r2, #127	@ 0x7f
 800612c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006130:	e016      	b.n	8006160 <UART_Start_Receive_IT+0xa4>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800613a:	d10d      	bne.n	8006158 <UART_Start_Receive_IT+0x9c>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d104      	bne.n	800614e <UART_Start_Receive_IT+0x92>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	227f      	movs	r2, #127	@ 0x7f
 8006148:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800614c:	e008      	b.n	8006160 <UART_Start_Receive_IT+0xa4>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	223f      	movs	r2, #63	@ 0x3f
 8006152:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006156:	e003      	b.n	8006160 <UART_Start_Receive_IT+0xa4>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2222      	movs	r2, #34	@ 0x22
 800616c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3308      	adds	r3, #8
 8006176:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006180:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006194:	673a      	str	r2, [r7, #112]	@ 0x70
 8006196:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800619a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80061a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e3      	bne.n	8006170 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b0:	d14f      	bne.n	8006252 <UART_Start_Receive_IT+0x196>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d349      	bcc.n	8006252 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c6:	d107      	bne.n	80061d8 <UART_Start_Receive_IT+0x11c>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a46      	ldr	r2, [pc, #280]	@ (80062ec <UART_Start_Receive_IT+0x230>)
 80061d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80061d6:	e002      	b.n	80061de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4a45      	ldr	r2, [pc, #276]	@ (80062f0 <UART_Start_Receive_IT+0x234>)
 80061dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01a      	beq.n	800621c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80061f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800620a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800620e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e4      	bne.n	80061e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800622c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006232:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800623c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800623e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800624a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_Start_Receive_IT+0x160>
 8006250:	e046      	b.n	80062e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625a:	d107      	bne.n	800626c <UART_Start_Receive_IT+0x1b0>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d103      	bne.n	800626c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a23      	ldr	r2, [pc, #140]	@ (80062f4 <UART_Start_Receive_IT+0x238>)
 8006268:	675a      	str	r2, [r3, #116]	@ 0x74
 800626a:	e002      	b.n	8006272 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a22      	ldr	r2, [pc, #136]	@ (80062f8 <UART_Start_Receive_IT+0x23c>)
 8006270:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d019      	beq.n	80062ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800628e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006298:	637b      	str	r3, [r7, #52]	@ 0x34
 800629a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800629e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80062a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e6      	bne.n	800627a <UART_Start_Receive_IT+0x1be>
 80062ac:	e018      	b.n	80062e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	613b      	str	r3, [r7, #16]
   return(result);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f043 0320 	orr.w	r3, r3, #32
 80062c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e6      	bne.n	80062ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	378c      	adds	r7, #140	@ 0x8c
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr
 80062ec:	08006cd1 	.word	0x08006cd1
 80062f0:	08006971 	.word	0x08006971
 80062f4:	080067b9 	.word	0x080067b9
 80062f8:	08006601 	.word	0x08006601

080062fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b08f      	sub	sp, #60	@ 0x3c
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	61fb      	str	r3, [r7, #28]
   return(result);
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006318:	637b      	str	r3, [r7, #52]	@ 0x34
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006324:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e6      	bne.n	8006304 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3308      	adds	r3, #8
 800633c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	60bb      	str	r3, [r7, #8]
   return(result);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800634c:	633b      	str	r3, [r7, #48]	@ 0x30
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006356:	61ba      	str	r2, [r7, #24]
 8006358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6979      	ldr	r1, [r7, #20]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	613b      	str	r3, [r7, #16]
   return(result);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e5      	bne.n	8006336 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006372:	bf00      	nop
 8006374:	373c      	adds	r7, #60	@ 0x3c
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b095      	sub	sp, #84	@ 0x54
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80063a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e6      	bne.n	8006384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e3      	bne.n	80063b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d118      	bne.n	8006428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	60bb      	str	r3, [r7, #8]
   return(result);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f023 0310 	bic.w	r3, r3, #16
 800640a:	647b      	str	r3, [r7, #68]	@ 0x44
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6979      	ldr	r1, [r7, #20]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	613b      	str	r3, [r7, #16]
   return(result);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e6      	bne.n	80063f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800643c:	bf00      	nop
 800643e:	3754      	adds	r7, #84	@ 0x54
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr

08006446 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b090      	sub	sp, #64	@ 0x40
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d137      	bne.n	80064d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006464:	2200      	movs	r2, #0
 8006466:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800646a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3308      	adds	r3, #8
 8006470:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	623b      	str	r3, [r7, #32]
   return(result);
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800648a:	633a      	str	r2, [r7, #48]	@ 0x30
 800648c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800649e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	69b9      	ldr	r1, [r7, #24]
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	617b      	str	r3, [r7, #20]
   return(result);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e6      	bne.n	800649e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064d0:	e002      	b.n	80064d8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80064d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80064d4:	f7fb f850 	bl	8001578 <HAL_UART_TxCpltCallback>
}
 80064d8:	bf00      	nop
 80064da:	3740      	adds	r7, #64	@ 0x40
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff f994 	bl	800581c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f4:	bf00      	nop
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006510:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006518:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006524:	2b80      	cmp	r3, #128	@ 0x80
 8006526:	d109      	bne.n	800653c <UART_DMAError+0x40>
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b21      	cmp	r3, #33	@ 0x21
 800652c:	d106      	bne.n	800653c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006536:	6978      	ldr	r0, [r7, #20]
 8006538:	f7ff fee0 	bl	80062fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006546:	2b40      	cmp	r3, #64	@ 0x40
 8006548:	d109      	bne.n	800655e <UART_DMAError+0x62>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b22      	cmp	r3, #34	@ 0x22
 800654e:	d106      	bne.n	800655e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2200      	movs	r2, #0
 8006554:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006558:	6978      	ldr	r0, [r7, #20]
 800655a:	f7ff ff0f 	bl	800637c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006564:	f043 0210 	orr.w	r2, r3, #16
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800656e:	6978      	ldr	r0, [r7, #20]
 8006570:	f7ff f95d 	bl	800582e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006574:	bf00      	nop
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff f947 	bl	800582e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6979      	ldr	r1, [r7, #20]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	613b      	str	r3, [r7, #16]
   return(result);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e6      	bne.n	80065b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fa ffc1 	bl	8001578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f6:	bf00      	nop
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b09c      	sub	sp, #112	@ 0x70
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800660e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006618:	2b22      	cmp	r3, #34	@ 0x22
 800661a:	f040 80be 	bne.w	800679a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006628:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800662c:	b2d9      	uxtb	r1, r3
 800662e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006632:	b2da      	uxtb	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006638:	400a      	ands	r2, r1
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	f040 80a1 	bne.w	80067aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800667c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006686:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006688:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800668c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e6      	bne.n	8006668 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80066ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80066bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a33      	ldr	r2, [pc, #204]	@ (80067b4 <UART_RxISR_8BIT+0x1b4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01f      	beq.n	800672c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d018      	beq.n	800672c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	623b      	str	r3, [r7, #32]
   return(result);
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800670e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006718:	633b      	str	r3, [r7, #48]	@ 0x30
 800671a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800671e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e6      	bne.n	80066fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006730:	2b01      	cmp	r3, #1
 8006732:	d12e      	bne.n	8006792 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	60fb      	str	r3, [r7, #12]
   return(result);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0310 	bic.w	r3, r3, #16
 800674e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	617b      	str	r3, [r7, #20]
   return(result);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e6      	bne.n	800673a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	2b10      	cmp	r3, #16
 8006778:	d103      	bne.n	8006782 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2210      	movs	r2, #16
 8006780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff f858 	bl	8005840 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006790:	e00b      	b.n	80067aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fa ff06 	bl	80015a4 <HAL_UART_RxCpltCallback>
}
 8006798:	e007      	b.n	80067aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0208 	orr.w	r2, r2, #8
 80067a8:	619a      	str	r2, [r3, #24]
}
 80067aa:	bf00      	nop
 80067ac:	3770      	adds	r7, #112	@ 0x70
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40008000 	.word	0x40008000

080067b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b09c      	sub	sp, #112	@ 0x70
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80067c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067d0:	2b22      	cmp	r3, #34	@ 0x22
 80067d2:	f040 80be 	bne.w	8006952 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067ee:	4013      	ands	r3, r2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fa:	1c9a      	adds	r2, r3, #2
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	f040 80a1 	bne.w	8006962 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800682e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006834:	667b      	str	r3, [r7, #100]	@ 0x64
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800683e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006840:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006844:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800684c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e6      	bne.n	8006820 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	663b      	str	r3, [r7, #96]	@ 0x60
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006872:	643a      	str	r2, [r7, #64]	@ 0x40
 8006874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e5      	bne.n	8006852 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a33      	ldr	r2, [pc, #204]	@ (800696c <UART_RxISR_16BIT+0x1b4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d01f      	beq.n	80068e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d018      	beq.n	80068e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	61fb      	str	r3, [r7, #28]
   return(result);
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e6      	bne.n	80068b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d12e      	bne.n	800694a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f023 0310 	bic.w	r3, r3, #16
 8006906:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6979      	ldr	r1, [r7, #20]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	613b      	str	r3, [r7, #16]
   return(result);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e6      	bne.n	80068f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b10      	cmp	r3, #16
 8006930:	d103      	bne.n	800693a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2210      	movs	r2, #16
 8006938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fe ff7c 	bl	8005840 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006948:	e00b      	b.n	8006962 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fa fe2a 	bl	80015a4 <HAL_UART_RxCpltCallback>
}
 8006950:	e007      	b.n	8006962 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0208 	orr.w	r2, r2, #8
 8006960:	619a      	str	r2, [r3, #24]
}
 8006962:	bf00      	nop
 8006964:	3770      	adds	r7, #112	@ 0x70
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40008000 	.word	0x40008000

08006970 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b0ac      	sub	sp, #176	@ 0xb0
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800697e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069a6:	2b22      	cmp	r3, #34	@ 0x22
 80069a8:	f040 8182 	bne.w	8006cb0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80069b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069b6:	e125      	b.n	8006c04 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80069c6:	b2d9      	uxtb	r1, r3
 80069c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d2:	400a      	ands	r2, r1
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d053      	beq.n	8006ab2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d011      	beq.n	8006a3a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2201      	movs	r2, #1
 8006a28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a30:	f043 0201 	orr.w	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d011      	beq.n	8006a6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2202      	movs	r2, #2
 8006a58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a60:	f043 0204 	orr.w	r2, r3, #4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d011      	beq.n	8006a9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2204      	movs	r2, #4
 8006a88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a90:	f043 0202 	orr.w	r2, r3, #2
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d006      	beq.n	8006ab2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7fe fec2 	bl	800582e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 80a2 	bne.w	8006c04 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ae4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006ae8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006af0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e4      	bne.n	8006ac0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3308      	adds	r3, #8
 8006afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006b06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b1e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006b20:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006b24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e1      	bne.n	8006af6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a5f      	ldr	r2, [pc, #380]	@ (8006cc8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d021      	beq.n	8006b94 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d01a      	beq.n	8006b94 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b80:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b82:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e4      	bne.n	8006b5e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d130      	bne.n	8006bfe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	f023 0310 	bic.w	r3, r3, #16
 8006bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e4      	bne.n	8006ba2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d103      	bne.n	8006bee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2210      	movs	r2, #16
 8006bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fe fe22 	bl	8005840 <HAL_UARTEx_RxEventCallback>
 8006bfc:	e002      	b.n	8006c04 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fa fcd0 	bl	80015a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c04:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f47f aecf 	bne.w	80069b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d049      	beq.n	8006cc0 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c32:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d242      	bcs.n	8006cc0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e3      	bne.n	8006c3a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a15      	ldr	r2, [pc, #84]	@ (8006ccc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006c76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f043 0320 	orr.w	r3, r3, #32
 8006c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6979      	ldr	r1, [r7, #20]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e4      	bne.n	8006c78 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cae:	e007      	b.n	8006cc0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0208 	orr.w	r2, r2, #8
 8006cbe:	619a      	str	r2, [r3, #24]
}
 8006cc0:	bf00      	nop
 8006cc2:	37b0      	adds	r7, #176	@ 0xb0
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	40008000 	.word	0x40008000
 8006ccc:	08006601 	.word	0x08006601

08006cd0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b0ae      	sub	sp, #184	@ 0xb8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cde:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d06:	2b22      	cmp	r3, #34	@ 0x22
 8006d08:	f040 8186 	bne.w	8007018 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d12:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d16:	e129      	b.n	8006f6c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006d2a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006d2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006d32:	4013      	ands	r3, r2
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d40:	1c9a      	adds	r2, r3, #2
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d053      	beq.n	8006e16 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d011      	beq.n	8006d9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d94:	f043 0201 	orr.w	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d011      	beq.n	8006dce <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00b      	beq.n	8006dce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc4:	f043 0204 	orr.w	r2, r3, #4
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dd2:	f003 0304 	and.w	r3, r3, #4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d011      	beq.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2204      	movs	r2, #4
 8006dec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df4:	f043 0202 	orr.w	r2, r3, #2
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d006      	beq.n	8006e16 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7fe fd10 	bl	800582e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 80a4 	bne.w	8006f6c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e2      	bne.n	8006e24 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006e86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e1      	bne.n	8006e5e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a5f      	ldr	r2, [pc, #380]	@ (8007030 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d021      	beq.n	8006efc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01a      	beq.n	8006efc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006eda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006eee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e4      	bne.n	8006ec6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d130      	bne.n	8006f66 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1a:	f023 0310 	bic.w	r3, r3, #16
 8006f1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e4      	bne.n	8006f0a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d103      	bne.n	8006f56 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2210      	movs	r2, #16
 8006f54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fe fc6e 	bl	8005840 <HAL_UARTEx_RxEventCallback>
 8006f64:	e002      	b.n	8006f6c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fa fb1c 	bl	80015a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f6c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006f74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f47f aecb 	bne.w	8006d18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f88:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d049      	beq.n	8007028 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f9a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d242      	bcs.n	8007028 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006fc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e3      	bne.n	8006fa2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a15      	ldr	r2, [pc, #84]	@ (8007034 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006fde:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f043 0320 	orr.w	r3, r3, #32
 8006ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	69b9      	ldr	r1, [r7, #24]
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	617b      	str	r3, [r7, #20]
   return(result);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e4      	bne.n	8006fe0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007016:	e007      	b.n	8007028 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0208 	orr.w	r2, r2, #8
 8007026:	619a      	str	r2, [r3, #24]
}
 8007028:	bf00      	nop
 800702a:	37b8      	adds	r7, #184	@ 0xb8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40008000 	.word	0x40008000
 8007034:	080067b9 	.word	0x080067b9

08007038 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr

0800704a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr

0800705c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b088      	sub	sp, #32
 8007072:	af02      	add	r7, sp, #8
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	1d3b      	adds	r3, r7, #4
 8007078:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800708a:	2302      	movs	r3, #2
 800708c:	e046      	b.n	800711c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2224      	movs	r2, #36	@ 0x24
 800709a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d105      	bne.n	80070d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80070c8:	1d3b      	adds	r3, r7, #4
 80070ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 f911 	bl	80072f6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070e4:	f7f9 fcf6 	bl	8000ad4 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7fe ff10 	bl	8005f1e <UART_WaitOnFlagUntilTimeout>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	75fb      	strb	r3, [r7, #23]
 8007108:	e003      	b.n	8007112 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2220      	movs	r2, #32
 800710e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	@ 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_UARTEx_EnableStopMode+0x16>
 8007136:	2302      	movs	r3, #2
 8007138:	e021      	b.n	800717e <HAL_UARTEx_EnableStopMode+0x5a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f043 0302 	orr.w	r3, r3, #2
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6979      	ldr	r1, [r7, #20]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	613b      	str	r3, [r7, #16]
   return(result);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3724      	adds	r7, #36	@ 0x24
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr

08007188 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_UARTEx_EnableFifoMode+0x16>
 800719a:	2302      	movs	r3, #2
 800719c:	e02b      	b.n	80071f6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2224      	movs	r2, #36	@ 0x24
 80071aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0201 	bic.w	r2, r2, #1
 80071c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80071d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f8ac 	bl	800733c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007212:	2302      	movs	r3, #2
 8007214:	e02d      	b.n	8007272 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2224      	movs	r2, #36	@ 0x24
 8007222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0201 	bic.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f872 	bl	800733c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800728e:	2302      	movs	r3, #2
 8007290:	e02d      	b.n	80072ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2224      	movs	r2, #36	@ 0x24
 800729e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0201 	bic.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f834 	bl	800733c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b085      	sub	sp, #20
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	1d3b      	adds	r3, r7, #4
 8007300:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f023 0210 	bic.w	r2, r3, #16
 800730e:	893b      	ldrh	r3, [r7, #8]
 8007310:	4619      	mov	r1, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8007324:	7abb      	ldrb	r3, [r7, #10]
 8007326:	061a      	lsls	r2, r3, #24
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
}
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	bc80      	pop	{r7}
 8007338:	4770      	bx	lr
	...

0800733c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007348:	2b00      	cmp	r3, #0
 800734a:	d108      	bne.n	800735e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800735c:	e031      	b.n	80073c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800735e:	2308      	movs	r3, #8
 8007360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007362:	2308      	movs	r3, #8
 8007364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	0e5b      	lsrs	r3, r3, #25
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	0f5b      	lsrs	r3, r3, #29
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	7b3a      	ldrb	r2, [r7, #12]
 800738a:	4910      	ldr	r1, [pc, #64]	@ (80073cc <UARTEx_SetNbDataToProcess+0x90>)
 800738c:	5c8a      	ldrb	r2, [r1, r2]
 800738e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007392:	7b3a      	ldrb	r2, [r7, #12]
 8007394:	490e      	ldr	r1, [pc, #56]	@ (80073d0 <UARTEx_SetNbDataToProcess+0x94>)
 8007396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007398:	fb93 f3f2 	sdiv	r3, r3, r2
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	7b7a      	ldrb	r2, [r7, #13]
 80073a8:	4908      	ldr	r1, [pc, #32]	@ (80073cc <UARTEx_SetNbDataToProcess+0x90>)
 80073aa:	5c8a      	ldrb	r2, [r1, r2]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073b0:	7b7a      	ldrb	r2, [r7, #13]
 80073b2:	4907      	ldr	r1, [pc, #28]	@ (80073d0 <UARTEx_SetNbDataToProcess+0x94>)
 80073b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr
 80073cc:	0800c904 	.word	0x0800c904
 80073d0:	0800c90c 	.word	0x0800c90c

080073d4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	619a      	str	r2, [r3, #24]
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr

080073ee <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	bc80      	pop	{r7}
 8007406:	4770      	bx	lr

08007408 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af02      	add	r7, sp, #8
 800740e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007410:	4a24      	ldr	r2, [pc, #144]	@ (80074a4 <RadioInit+0x9c>)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007416:	4b24      	ldr	r3, [pc, #144]	@ (80074a8 <RadioInit+0xa0>)
 8007418:	2200      	movs	r2, #0
 800741a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800741c:	4b22      	ldr	r3, [pc, #136]	@ (80074a8 <RadioInit+0xa0>)
 800741e:	2200      	movs	r2, #0
 8007420:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007422:	4b21      	ldr	r3, [pc, #132]	@ (80074a8 <RadioInit+0xa0>)
 8007424:	2200      	movs	r2, #0
 8007426:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007428:	4b1f      	ldr	r3, [pc, #124]	@ (80074a8 <RadioInit+0xa0>)
 800742a:	2200      	movs	r2, #0
 800742c:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800742e:	481f      	ldr	r0, [pc, #124]	@ (80074ac <RadioInit+0xa4>)
 8007430:	f001 ffbc 	bl	80093ac <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007434:	4b1c      	ldr	r3, [pc, #112]	@ (80074a8 <RadioInit+0xa0>)
 8007436:	2200      	movs	r2, #0
 8007438:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800743a:	4b1b      	ldr	r3, [pc, #108]	@ (80074a8 <RadioInit+0xa0>)
 800743c:	2200      	movs	r2, #0
 800743e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007440:	f002 fa50 	bl	80098e4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007444:	2100      	movs	r1, #0
 8007446:	2000      	movs	r0, #0
 8007448:	f002 fe1c 	bl	800a084 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800744c:	2204      	movs	r2, #4
 800744e:	2100      	movs	r1, #0
 8007450:	2001      	movs	r0, #1
 8007452:	f002 fbd9 	bl	8009c08 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007456:	2300      	movs	r3, #0
 8007458:	2200      	movs	r2, #0
 800745a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800745e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007462:	f002 fb09 	bl	8009a78 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007466:	f000 fe97 	bl	8008198 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800746a:	2300      	movs	r3, #0
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	4b10      	ldr	r3, [pc, #64]	@ (80074b0 <RadioInit+0xa8>)
 8007470:	2200      	movs	r2, #0
 8007472:	f04f 31ff 	mov.w	r1, #4294967295
 8007476:	480f      	ldr	r0, [pc, #60]	@ (80074b4 <RadioInit+0xac>)
 8007478:	f004 fac6 	bl	800ba08 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800747c:	2300      	movs	r3, #0
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	4b0d      	ldr	r3, [pc, #52]	@ (80074b8 <RadioInit+0xb0>)
 8007482:	2200      	movs	r2, #0
 8007484:	f04f 31ff 	mov.w	r1, #4294967295
 8007488:	480c      	ldr	r0, [pc, #48]	@ (80074bc <RadioInit+0xb4>)
 800748a:	f004 fabd 	bl	800ba08 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800748e:	4809      	ldr	r0, [pc, #36]	@ (80074b4 <RadioInit+0xac>)
 8007490:	f004 fb5e 	bl	800bb50 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007494:	4809      	ldr	r0, [pc, #36]	@ (80074bc <RadioInit+0xb4>)
 8007496:	f004 fb5b 	bl	800bb50 <UTIL_TIMER_Stop>
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000288 	.word	0x20000288
 80074a8:	2000028c 	.word	0x2000028c
 80074ac:	080085bd 	.word	0x080085bd
 80074b0:	0800852d 	.word	0x0800852d
 80074b4:	200002e8 	.word	0x200002e8
 80074b8:	08008541 	.word	0x08008541
 80074bc:	20000300 	.word	0x20000300

080074c0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80074c4:	f001 ffba 	bl	800943c <SUBGRF_GetOperatingMode>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b07      	cmp	r3, #7
 80074cc:	d00a      	beq.n	80074e4 <RadioGetStatus+0x24>
 80074ce:	2b07      	cmp	r3, #7
 80074d0:	dc0a      	bgt.n	80074e8 <RadioGetStatus+0x28>
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d002      	beq.n	80074dc <RadioGetStatus+0x1c>
 80074d6:	2b05      	cmp	r3, #5
 80074d8:	d002      	beq.n	80074e0 <RadioGetStatus+0x20>
 80074da:	e005      	b.n	80074e8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80074dc:	2302      	movs	r3, #2
 80074de:	e004      	b.n	80074ea <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e002      	b.n	80074ea <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e000      	b.n	80074ea <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80074e8:	2300      	movs	r3, #0
    }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80074fa:	4a2a      	ldr	r2, [pc, #168]	@ (80075a4 <RadioSetModem+0xb4>)
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	4618      	mov	r0, r3
 8007504:	f003 f9ab 	bl	800a85e <RFW_SetRadioModem>
    switch( modem )
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b05      	cmp	r3, #5
 800750c:	d80e      	bhi.n	800752c <RadioSetModem+0x3c>
 800750e:	a201      	add	r2, pc, #4	@ (adr r2, 8007514 <RadioSetModem+0x24>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	0800753b 	.word	0x0800753b
 8007518:	08007549 	.word	0x08007549
 800751c:	0800752d 	.word	0x0800752d
 8007520:	0800756f 	.word	0x0800756f
 8007524:	0800757d 	.word	0x0800757d
 8007528:	0800758b 	.word	0x0800758b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800752c:	2003      	movs	r0, #3
 800752e:	f002 fb45 	bl	8009bbc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007532:	4b1c      	ldr	r3, [pc, #112]	@ (80075a4 <RadioSetModem+0xb4>)
 8007534:	2200      	movs	r2, #0
 8007536:	735a      	strb	r2, [r3, #13]
        break;
 8007538:	e02f      	b.n	800759a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800753a:	2000      	movs	r0, #0
 800753c:	f002 fb3e 	bl	8009bbc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007540:	4b18      	ldr	r3, [pc, #96]	@ (80075a4 <RadioSetModem+0xb4>)
 8007542:	2200      	movs	r2, #0
 8007544:	735a      	strb	r2, [r3, #13]
        break;
 8007546:	e028      	b.n	800759a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007548:	2001      	movs	r0, #1
 800754a:	f002 fb37 	bl	8009bbc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800754e:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <RadioSetModem+0xb4>)
 8007550:	7b5a      	ldrb	r2, [r3, #13]
 8007552:	4b14      	ldr	r3, [pc, #80]	@ (80075a4 <RadioSetModem+0xb4>)
 8007554:	7b1b      	ldrb	r3, [r3, #12]
 8007556:	429a      	cmp	r2, r3
 8007558:	d01e      	beq.n	8007598 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800755a:	4b12      	ldr	r3, [pc, #72]	@ (80075a4 <RadioSetModem+0xb4>)
 800755c:	7b1a      	ldrb	r2, [r3, #12]
 800755e:	4b11      	ldr	r3, [pc, #68]	@ (80075a4 <RadioSetModem+0xb4>)
 8007560:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007562:	4b10      	ldr	r3, [pc, #64]	@ (80075a4 <RadioSetModem+0xb4>)
 8007564:	7b5b      	ldrb	r3, [r3, #13]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 ffaa 	bl	80084c0 <RadioSetPublicNetwork>
        }
        break;
 800756c:	e014      	b.n	8007598 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800756e:	2002      	movs	r0, #2
 8007570:	f002 fb24 	bl	8009bbc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007574:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <RadioSetModem+0xb4>)
 8007576:	2200      	movs	r2, #0
 8007578:	735a      	strb	r2, [r3, #13]
        break;
 800757a:	e00e      	b.n	800759a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800757c:	2002      	movs	r0, #2
 800757e:	f002 fb1d 	bl	8009bbc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007582:	4b08      	ldr	r3, [pc, #32]	@ (80075a4 <RadioSetModem+0xb4>)
 8007584:	2200      	movs	r2, #0
 8007586:	735a      	strb	r2, [r3, #13]
        break;
 8007588:	e007      	b.n	800759a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800758a:	2000      	movs	r0, #0
 800758c:	f002 fb16 	bl	8009bbc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007590:	4b04      	ldr	r3, [pc, #16]	@ (80075a4 <RadioSetModem+0xb4>)
 8007592:	2200      	movs	r2, #0
 8007594:	735a      	strb	r2, [r3, #13]
        break;
 8007596:	e000      	b.n	800759a <RadioSetModem+0xaa>
        break;
 8007598:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	2000028c 	.word	0x2000028c

080075a8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f002 fabd 	bl	8009b30 <SUBGRF_SetRfFrequency>
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b090      	sub	sp, #64	@ 0x40
 80075c2:	af0a      	add	r7, sp, #40	@ 0x28
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	4613      	mov	r3, r2
 80075cc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80075ce:	2301      	movs	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80075da:	f000 fdf0 	bl	80081be <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80075de:	2000      	movs	r0, #0
 80075e0:	f7ff ff86 	bl	80074f0 <RadioSetModem>

    RadioSetChannel( freq );
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff ffdf 	bl	80075a8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80075ea:	2301      	movs	r3, #1
 80075ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ee:	2300      	movs	r3, #0
 80075f0:	9308      	str	r3, [sp, #32]
 80075f2:	2300      	movs	r3, #0
 80075f4:	9307      	str	r3, [sp, #28]
 80075f6:	2300      	movs	r3, #0
 80075f8:	9306      	str	r3, [sp, #24]
 80075fa:	2300      	movs	r3, #0
 80075fc:	9305      	str	r3, [sp, #20]
 80075fe:	2300      	movs	r3, #0
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	2300      	movs	r3, #0
 8007604:	9303      	str	r3, [sp, #12]
 8007606:	2300      	movs	r3, #0
 8007608:	9302      	str	r3, [sp, #8]
 800760a:	2303      	movs	r3, #3
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	2300      	movs	r3, #0
 8007614:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	2000      	movs	r0, #0
 800761c:	f000 f83c 	bl	8007698 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007620:	2000      	movs	r0, #0
 8007622:	f000 fdd3 	bl	80081cc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007626:	f000 ff79 	bl	800851c <RadioGetWakeupTime>
 800762a:	4603      	mov	r3, r0
 800762c:	4618      	mov	r0, r3
 800762e:	f7f9 fa65 	bl	8000afc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007632:	f004 fba7 	bl	800bd84 <UTIL_TIMER_GetCurrentTime>
 8007636:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007638:	e00d      	b.n	8007656 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800763a:	2000      	movs	r0, #0
 800763c:	f000 fec0 	bl	80083c0 <RadioRssi>
 8007640:	4603      	mov	r3, r0
 8007642:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007644:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800764c:	429a      	cmp	r2, r3
 800764e:	dd02      	ble.n	8007656 <RadioIsChannelFree+0x98>
        {
            status = false;
 8007650:	2300      	movs	r3, #0
 8007652:	75fb      	strb	r3, [r7, #23]
            break;
 8007654:	e006      	b.n	8007664 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007656:	6938      	ldr	r0, [r7, #16]
 8007658:	f004 fba6 	bl	800bda8 <UTIL_TIMER_GetElapsedTime>
 800765c:	4602      	mov	r2, r0
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	4293      	cmp	r3, r2
 8007662:	d8ea      	bhi.n	800763a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007664:	f000 fdab 	bl	80081be <RadioStandby>

    return status;
 8007668:	7dfb      	ldrb	r3, [r7, #23]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800767c:	2300      	movs	r3, #0
 800767e:	2200      	movs	r2, #0
 8007680:	2100      	movs	r1, #0
 8007682:	2000      	movs	r0, #0
 8007684:	f002 f9f8 	bl	8009a78 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007688:	f001 ffa9 	bl	80095de <SUBGRF_GetRandom>
 800768c:	6078      	str	r0, [r7, #4]

    return rnd;
 800768e:	687b      	ldr	r3, [r7, #4]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	@ 0x28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	461a      	mov	r2, r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	4613      	mov	r3, r2
 80076aa:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80076ac:	4ab9      	ldr	r2, [pc, #740]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80076ae:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80076b2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80076b4:	f003 f891 	bl	800a7da <RFW_DeInit>
    if( rxContinuous == true )
 80076b8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80076c4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80076cc:	4ab2      	ldr	r2, [pc, #712]	@ (8007998 <RadioSetRxConfig+0x300>)
 80076ce:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80076d2:	7013      	strb	r3, [r2, #0]
 80076d4:	e002      	b.n	80076dc <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80076d6:	4bb0      	ldr	r3, [pc, #704]	@ (8007998 <RadioSetRxConfig+0x300>)
 80076d8:	22ff      	movs	r2, #255	@ 0xff
 80076da:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b05      	cmp	r3, #5
 80076e0:	d009      	beq.n	80076f6 <RadioSetRxConfig+0x5e>
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	f300 81d7 	bgt.w	8007a96 <RadioSetRxConfig+0x3fe>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80bf 	beq.w	800786c <RadioSetRxConfig+0x1d4>
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	f000 8124 	beq.w	800793c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80076f4:	e1cf      	b.n	8007a96 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80076f6:	2001      	movs	r0, #1
 80076f8:	f002 f8b6 	bl	8009868 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80076fc:	4ba5      	ldr	r3, [pc, #660]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007704:	4aa3      	ldr	r2, [pc, #652]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800770a:	4ba2      	ldr	r3, [pc, #648]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800770c:	2209      	movs	r2, #9
 800770e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007712:	4ba0      	ldr	r3, [pc, #640]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007714:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8007718:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800771a:	68b8      	ldr	r0, [r7, #8]
 800771c:	f002 ff90 	bl	800a640 <SUBGRF_GetFskBandwidthRegValue>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	4b9b      	ldr	r3, [pc, #620]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800772a:	4b9a      	ldr	r3, [pc, #616]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800772c:	2200      	movs	r2, #0
 800772e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007730:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	b29a      	uxth	r2, r3
 8007736:	4b97      	ldr	r3, [pc, #604]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007738:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800773a:	4b96      	ldr	r3, [pc, #600]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800773c:	2200      	movs	r2, #0
 800773e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007740:	4b94      	ldr	r3, [pc, #592]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007742:	2210      	movs	r2, #16
 8007744:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007746:	4b93      	ldr	r3, [pc, #588]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007748:	2200      	movs	r2, #0
 800774a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800774c:	4b91      	ldr	r3, [pc, #580]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800774e:	2200      	movs	r2, #0
 8007750:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007752:	4b91      	ldr	r3, [pc, #580]	@ (8007998 <RadioSetRxConfig+0x300>)
 8007754:	781a      	ldrb	r2, [r3, #0]
 8007756:	4b8f      	ldr	r3, [pc, #572]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007758:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800775a:	4b8e      	ldr	r3, [pc, #568]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800775c:	2201      	movs	r2, #1
 800775e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007760:	4b8c      	ldr	r3, [pc, #560]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007762:	2200      	movs	r2, #0
 8007764:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007766:	2005      	movs	r0, #5
 8007768:	f7ff fec2 	bl	80074f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800776c:	488b      	ldr	r0, [pc, #556]	@ (800799c <RadioSetRxConfig+0x304>)
 800776e:	f002 fb19 	bl	8009da4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007772:	488b      	ldr	r0, [pc, #556]	@ (80079a0 <RadioSetRxConfig+0x308>)
 8007774:	f002 fbe8 	bl	8009f48 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007778:	4a8a      	ldr	r2, [pc, #552]	@ (80079a4 <RadioSetRxConfig+0x30c>)
 800777a:	f107 031c 	add.w	r3, r7, #28
 800777e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007782:	e883 0003 	stmia.w	r3, {r0, r1}
 8007786:	f107 031c 	add.w	r3, r7, #28
 800778a:	4618      	mov	r0, r3
 800778c:	f001 fea5 	bl	80094da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007790:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007794:	f001 fef0 	bl	8009578 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007798:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800779c:	f000 fe2e 	bl	80083fc <RadioRead>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80077a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077aa:	f023 0310 	bic.w	r3, r3, #16
 80077ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80077b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077b6:	4619      	mov	r1, r3
 80077b8:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80077bc:	f000 fe0c 	bl	80083d8 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80077c0:	2104      	movs	r1, #4
 80077c2:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80077c6:	f000 fe07 	bl	80083d8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80077ca:	f640 009b 	movw	r0, #2203	@ 0x89b
 80077ce:	f000 fe15 	bl	80083fc <RadioRead>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80077d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077dc:	f023 031c 	bic.w	r3, r3, #28
 80077e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80077e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e8:	f043 0308 	orr.w	r3, r3, #8
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	4619      	mov	r1, r3
 80077f0:	f640 009b 	movw	r0, #2203	@ 0x89b
 80077f4:	f000 fdf0 	bl	80083d8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80077f8:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80077fc:	f000 fdfe 	bl	80083fc <RadioRead>
 8007800:	4603      	mov	r3, r0
 8007802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800780a:	f023 0318 	bic.w	r3, r3, #24
 800780e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007816:	f043 0318 	orr.w	r3, r3, #24
 800781a:	b2db      	uxtb	r3, r3
 800781c:	4619      	mov	r1, r3
 800781e:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8007822:	f000 fdd9 	bl	80083d8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007826:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800782a:	f000 fde7 	bl	80083fc <RadioRead>
 800782e:	4603      	mov	r3, r0
 8007830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007844:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8007848:	b2db      	uxtb	r3, r3
 800784a:	4619      	mov	r1, r3
 800784c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8007850:	f000 fdc2 	bl	80083d8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007854:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007856:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	461a      	mov	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	fbb2 f3f3 	udiv	r3, r2, r3
 8007866:	4a4b      	ldr	r2, [pc, #300]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007868:	6093      	str	r3, [r2, #8]
            break;
 800786a:	e115      	b.n	8007a98 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800786c:	2000      	movs	r0, #0
 800786e:	f001 fffb 	bl	8009868 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007872:	4b48      	ldr	r3, [pc, #288]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800787a:	4a46      	ldr	r2, [pc, #280]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007880:	4b44      	ldr	r3, [pc, #272]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007882:	220b      	movs	r2, #11
 8007884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007888:	68b8      	ldr	r0, [r7, #8]
 800788a:	f002 fed9 	bl	800a640 <SUBGRF_GetFskBandwidthRegValue>
 800788e:	4603      	mov	r3, r0
 8007890:	461a      	mov	r2, r3
 8007892:	4b40      	ldr	r3, [pc, #256]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007898:	4b3e      	ldr	r3, [pc, #248]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800789a:	2200      	movs	r2, #0
 800789c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800789e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078a6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80078a8:	4b3a      	ldr	r3, [pc, #232]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078aa:	2204      	movs	r2, #4
 80078ac:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80078ae:	4b39      	ldr	r3, [pc, #228]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078b0:	2218      	movs	r2, #24
 80078b2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80078b4:	4b37      	ldr	r3, [pc, #220]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80078ba:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80078be:	f083 0301 	eor.w	r3, r3, #1
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	4b33      	ldr	r3, [pc, #204]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078c8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80078ca:	4b33      	ldr	r3, [pc, #204]	@ (8007998 <RadioSetRxConfig+0x300>)
 80078cc:	781a      	ldrb	r2, [r3, #0]
 80078ce:	4b31      	ldr	r3, [pc, #196]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078d0:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80078d2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80078da:	4b2e      	ldr	r3, [pc, #184]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078dc:	22f2      	movs	r2, #242	@ 0xf2
 80078de:	75da      	strb	r2, [r3, #23]
 80078e0:	e002      	b.n	80078e8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80078e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80078e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 80078ea:	2201      	movs	r2, #1
 80078ec:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80078ee:	f000 fc66 	bl	80081be <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80078f2:	2000      	movs	r0, #0
 80078f4:	f7ff fdfc 	bl	80074f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078f8:	4828      	ldr	r0, [pc, #160]	@ (800799c <RadioSetRxConfig+0x304>)
 80078fa:	f002 fa53 	bl	8009da4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078fe:	4828      	ldr	r0, [pc, #160]	@ (80079a0 <RadioSetRxConfig+0x308>)
 8007900:	f002 fb22 	bl	8009f48 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007904:	4a28      	ldr	r2, [pc, #160]	@ (80079a8 <RadioSetRxConfig+0x310>)
 8007906:	f107 0314 	add.w	r3, r7, #20
 800790a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800790e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007912:	f107 0314 	add.w	r3, r7, #20
 8007916:	4618      	mov	r0, r3
 8007918:	f001 fddf 	bl	80094da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800791c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007920:	f001 fe2a 	bl	8009578 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007924:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007926:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800792a:	fb02 f303 	mul.w	r3, r2, r3
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	fbb2 f3f3 	udiv	r3, r2, r3
 8007936:	4a17      	ldr	r2, [pc, #92]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007938:	6093      	str	r3, [r2, #8]
            break;
 800793a:	e0ad      	b.n	8007a98 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800793c:	2000      	movs	r0, #0
 800793e:	f001 ff93 	bl	8009868 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007942:	4b14      	ldr	r3, [pc, #80]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	b2da      	uxtb	r2, r3
 800794e:	4b11      	ldr	r3, [pc, #68]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007954:	4a15      	ldr	r2, [pc, #84]	@ (80079ac <RadioSetRxConfig+0x314>)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4413      	add	r3, r2
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800795e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007962:	4a0c      	ldr	r2, [pc, #48]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d105      	bne.n	800797c <RadioSetRxConfig+0x2e4>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b0b      	cmp	r3, #11
 8007974:	d008      	beq.n	8007988 <RadioSetRxConfig+0x2f0>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b0c      	cmp	r3, #12
 800797a:	d005      	beq.n	8007988 <RadioSetRxConfig+0x2f0>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d116      	bne.n	80079b0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b0c      	cmp	r3, #12
 8007986:	d113      	bne.n	80079b0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007988:	4b02      	ldr	r3, [pc, #8]	@ (8007994 <RadioSetRxConfig+0x2fc>)
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007990:	e012      	b.n	80079b8 <RadioSetRxConfig+0x320>
 8007992:	bf00      	nop
 8007994:	2000028c 	.word	0x2000028c
 8007998:	20000008 	.word	0x20000008
 800799c:	200002c4 	.word	0x200002c4
 80079a0:	2000029a 	.word	0x2000029a
 80079a4:	0800c4c8 	.word	0x0800c4c8
 80079a8:	0800c4d0 	.word	0x0800c4d0
 80079ac:	0800c9a0 	.word	0x0800c9a0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80079b0:	4b3b      	ldr	r3, [pc, #236]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80079b8:	4b39      	ldr	r3, [pc, #228]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80079be:	4b38      	ldr	r3, [pc, #224]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079c4:	2b05      	cmp	r3, #5
 80079c6:	d004      	beq.n	80079d2 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80079c8:	4b35      	ldr	r3, [pc, #212]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80079ce:	2b06      	cmp	r3, #6
 80079d0:	d10a      	bne.n	80079e8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80079d2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80079d4:	2b0b      	cmp	r3, #11
 80079d6:	d803      	bhi.n	80079e0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80079d8:	4b31      	ldr	r3, [pc, #196]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079da:	220c      	movs	r2, #12
 80079dc:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80079de:	e006      	b.n	80079ee <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80079e0:	4a2f      	ldr	r2, [pc, #188]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80079e4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80079e6:	e002      	b.n	80079ee <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80079e8:	4a2d      	ldr	r2, [pc, #180]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80079ec:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80079ee:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80079f2:	4b2b      	ldr	r3, [pc, #172]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079f4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80079f6:	4b2b      	ldr	r3, [pc, #172]	@ (8007aa4 <RadioSetRxConfig+0x40c>)
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	4b29      	ldr	r3, [pc, #164]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 80079fc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80079fe:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8007a02:	4b27      	ldr	r3, [pc, #156]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 8007a04:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007a08:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8007a0c:	4b24      	ldr	r3, [pc, #144]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 8007a0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8007a12:	f000 fbd4 	bl	80081be <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007a16:	2001      	movs	r0, #1
 8007a18:	f7ff fd6a 	bl	80074f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007a1c:	4822      	ldr	r0, [pc, #136]	@ (8007aa8 <RadioSetRxConfig+0x410>)
 8007a1e:	f002 f9c1 	bl	8009da4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007a22:	4822      	ldr	r0, [pc, #136]	@ (8007aac <RadioSetRxConfig+0x414>)
 8007a24:	f002 fa90 	bl	8009f48 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007a28:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 ff2a 	bl	8009886 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8007a32:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8007a36:	f002 fbf1 	bl	800a21c <SUBGRF_ReadRegister>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	4619      	mov	r1, r3
 8007a44:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8007a48:	f002 fbc6 	bl	800a1d8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007a4c:	4b14      	ldr	r3, [pc, #80]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 8007a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d10d      	bne.n	8007a72 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007a56:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a5a:	f002 fbdf 	bl	800a21c <SUBGRF_ReadRegister>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f023 0304 	bic.w	r3, r3, #4
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	4619      	mov	r1, r3
 8007a68:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a6c:	f002 fbb4 	bl	800a1d8 <SUBGRF_WriteRegister>
 8007a70:	e00c      	b.n	8007a8c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007a72:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a76:	f002 fbd1 	bl	800a21c <SUBGRF_ReadRegister>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f043 0304 	orr.w	r3, r3, #4
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	f240 7036 	movw	r0, #1846	@ 0x736
 8007a88:	f002 fba6 	bl	800a1d8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007a8c:	4b04      	ldr	r3, [pc, #16]	@ (8007aa0 <RadioSetRxConfig+0x408>)
 8007a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a92:	609a      	str	r2, [r3, #8]
            break;
 8007a94:	e000      	b.n	8007a98 <RadioSetRxConfig+0x400>
            break;
 8007a96:	bf00      	nop
    }
}
 8007a98:	bf00      	nop
 8007a9a:	3728      	adds	r7, #40	@ 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	2000028c 	.word	0x2000028c
 8007aa4:	20000008 	.word	0x20000008
 8007aa8:	200002c4 	.word	0x200002c4
 8007aac:	2000029a 	.word	0x2000029a

08007ab0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60ba      	str	r2, [r7, #8]
 8007ab8:	607b      	str	r3, [r7, #4]
 8007aba:	4603      	mov	r3, r0
 8007abc:	73fb      	strb	r3, [r7, #15]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8007ac2:	f002 fe8a 	bl	800a7da <RFW_DeInit>
    switch( modem )
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	f000 80c7 	beq.w	8007c5c <RadioSetTxConfig+0x1ac>
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	f300 80d6 	bgt.w	8007c80 <RadioSetTxConfig+0x1d0>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <RadioSetTxConfig+0x2e>
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d059      	beq.n	8007b90 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007adc:	e0d0      	b.n	8007c80 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007ade:	4b77      	ldr	r3, [pc, #476]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007ae6:	4a75      	ldr	r2, [pc, #468]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007aec:	4b73      	ldr	r3, [pc, #460]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007aee:	220b      	movs	r2, #11
 8007af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f002 fda3 	bl	800a640 <SUBGRF_GetFskBandwidthRegValue>
 8007afa:	4603      	mov	r3, r0
 8007afc:	461a      	mov	r2, r3
 8007afe:	4b6f      	ldr	r3, [pc, #444]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007b04:	4a6d      	ldr	r2, [pc, #436]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007b10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	4b69      	ldr	r3, [pc, #420]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b18:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007b1a:	4b68      	ldr	r3, [pc, #416]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007b20:	4b66      	ldr	r3, [pc, #408]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b22:	2218      	movs	r2, #24
 8007b24:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007b26:	4b65      	ldr	r3, [pc, #404]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007b2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b30:	f083 0301 	eor.w	r3, r3, #1
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	4b60      	ldr	r3, [pc, #384]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b3a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007b3c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007b44:	4b5d      	ldr	r3, [pc, #372]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b46:	22f2      	movs	r2, #242	@ 0xf2
 8007b48:	75da      	strb	r2, [r3, #23]
 8007b4a:	e002      	b.n	8007b52 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007b52:	4b5a      	ldr	r3, [pc, #360]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007b58:	f000 fb31 	bl	80081be <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f7ff fcc7 	bl	80074f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b62:	4857      	ldr	r0, [pc, #348]	@ (8007cc0 <RadioSetTxConfig+0x210>)
 8007b64:	f002 f91e 	bl	8009da4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b68:	4856      	ldr	r0, [pc, #344]	@ (8007cc4 <RadioSetTxConfig+0x214>)
 8007b6a:	f002 f9ed 	bl	8009f48 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007b6e:	4a56      	ldr	r2, [pc, #344]	@ (8007cc8 <RadioSetTxConfig+0x218>)
 8007b70:	f107 0310 	add.w	r3, r7, #16
 8007b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b78:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b7c:	f107 0310 	add.w	r3, r7, #16
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 fcaa 	bl	80094da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007b86:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8007b8a:	f001 fcf5 	bl	8009578 <SUBGRF_SetWhiteningSeed>
            break;
 8007b8e:	e078      	b.n	8007c82 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007b90:	4b4a      	ldr	r3, [pc, #296]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	4b47      	ldr	r3, [pc, #284]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8007ccc <RadioSetTxConfig+0x21c>)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	4b44      	ldr	r3, [pc, #272]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007bb0:	4a42      	ldr	r2, [pc, #264]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007bb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007bb6:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <RadioSetTxConfig+0x11c>
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	2b0b      	cmp	r3, #11
 8007bc4:	d008      	beq.n	8007bd8 <RadioSetTxConfig+0x128>
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	2b0c      	cmp	r3, #12
 8007bca:	d005      	beq.n	8007bd8 <RadioSetTxConfig+0x128>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d107      	bne.n	8007be2 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	2b0c      	cmp	r3, #12
 8007bd6:	d104      	bne.n	8007be2 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007bd8:	4b38      	ldr	r3, [pc, #224]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007be0:	e003      	b.n	8007bea <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007be2:	4b36      	ldr	r3, [pc, #216]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007bea:	4b34      	ldr	r3, [pc, #208]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007bf0:	4b32      	ldr	r3, [pc, #200]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bf6:	2b05      	cmp	r3, #5
 8007bf8:	d004      	beq.n	8007c04 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007bfa:	4b30      	ldr	r3, [pc, #192]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007c00:	2b06      	cmp	r3, #6
 8007c02:	d10a      	bne.n	8007c1a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007c04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c06:	2b0b      	cmp	r3, #11
 8007c08:	d803      	bhi.n	8007c12 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c0c:	220c      	movs	r2, #12
 8007c0e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007c10:	e006      	b.n	8007c20 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007c12:	4a2a      	ldr	r2, [pc, #168]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c16:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007c18:	e002      	b.n	8007c20 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007c1a:	4a28      	ldr	r2, [pc, #160]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c1e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007c20:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007c24:	4b25      	ldr	r3, [pc, #148]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c26:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007c28:	4b29      	ldr	r3, [pc, #164]	@ (8007cd0 <RadioSetTxConfig+0x220>)
 8007c2a:	781a      	ldrb	r2, [r3, #0]
 8007c2c:	4b23      	ldr	r3, [pc, #140]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c2e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007c30:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007c34:	4b21      	ldr	r3, [pc, #132]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c36:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007c3a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8007c44:	f000 fabb 	bl	80081be <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f7ff fc51 	bl	80074f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c4e:	481c      	ldr	r0, [pc, #112]	@ (8007cc0 <RadioSetTxConfig+0x210>)
 8007c50:	f002 f8a8 	bl	8009da4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007c54:	481b      	ldr	r0, [pc, #108]	@ (8007cc4 <RadioSetTxConfig+0x214>)
 8007c56:	f002 f977 	bl	8009f48 <SUBGRF_SetPacketParams>
            break;
 8007c5a:	e012      	b.n	8007c82 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007c5c:	2004      	movs	r0, #4
 8007c5e:	f7ff fc47 	bl	80074f0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007c62:	4b16      	ldr	r3, [pc, #88]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c64:	2202      	movs	r2, #2
 8007c66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007c6a:	4a14      	ldr	r2, [pc, #80]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007c70:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c72:	2216      	movs	r2, #22
 8007c74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c78:	4811      	ldr	r0, [pc, #68]	@ (8007cc0 <RadioSetTxConfig+0x210>)
 8007c7a:	f002 f893 	bl	8009da4 <SUBGRF_SetModulationParams>
            break;
 8007c7e:	e000      	b.n	8007c82 <RadioSetTxConfig+0x1d2>
            break;
 8007c80:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f002 fbdc 	bl	800a444 <SUBGRF_SetRfTxPower>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4b0a      	ldr	r3, [pc, #40]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007c92:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007c96:	210e      	movs	r1, #14
 8007c98:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007c9c:	f002 fa9c 	bl	800a1d8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007ca0:	4b06      	ldr	r3, [pc, #24]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007ca2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f002 fdab 	bl	800a802 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007cac:	4a03      	ldr	r2, [pc, #12]	@ (8007cbc <RadioSetTxConfig+0x20c>)
 8007cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb0:	6053      	str	r3, [r2, #4]
}
 8007cb2:	bf00      	nop
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	2000028c 	.word	0x2000028c
 8007cc0:	200002c4 	.word	0x200002c4
 8007cc4:	2000029a 	.word	0x2000029a
 8007cc8:	0800c4d0 	.word	0x0800c4d0
 8007ccc:	0800c9a0 	.word	0x0800c9a0
 8007cd0:	20000008 	.word	0x20000008

08007cd4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
    return true;
 8007cdc:	2301      	movs	r3, #1
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bc80      	pop	{r7}
 8007ce6:	4770      	bx	lr

08007ce8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	2b0a      	cmp	r3, #10
 8007cfa:	d83e      	bhi.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
 8007cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	08007d41 	.word	0x08007d41
 8007d0c:	08007d51 	.word	0x08007d51
 8007d10:	08007d61 	.word	0x08007d61
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007d6f 	.word	0x08007d6f
 8007d1c:	08007d75 	.word	0x08007d75
 8007d20:	08007d7b 	.word	0x08007d7b
 8007d24:	08007d39 	.word	0x08007d39
 8007d28:	08007d49 	.word	0x08007d49
 8007d2c:	08007d59 	.word	0x08007d59
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007d30:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8007d34:	60fb      	str	r3, [r7, #12]
        break;
 8007d36:	e020      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007d38:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8007d3c:	60fb      	str	r3, [r7, #12]
        break;
 8007d3e:	e01c      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007d40:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8007d44:	60fb      	str	r3, [r7, #12]
        break;
 8007d46:	e018      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007d48:	f245 1361 	movw	r3, #20833	@ 0x5161
 8007d4c:	60fb      	str	r3, [r7, #12]
        break;
 8007d4e:	e014      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007d50:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8007d54:	60fb      	str	r3, [r7, #12]
        break;
 8007d56:	e010      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007d58:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8007d5c:	60fb      	str	r3, [r7, #12]
        break;
 8007d5e:	e00c      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007d60:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007d64:	60fb      	str	r3, [r7, #12]
        break;
 8007d66:	e008      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007d68:	4b07      	ldr	r3, [pc, #28]	@ (8007d88 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007d6a:	60fb      	str	r3, [r7, #12]
        break;
 8007d6c:	e005      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007d6e:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <RadioGetLoRaBandwidthInHz+0xa4>)
 8007d70:	60fb      	str	r3, [r7, #12]
        break;
 8007d72:	e002      	b.n	8007d7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007d74:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007d76:	60fb      	str	r3, [r7, #12]
        break;
 8007d78:	bf00      	nop
    }

    return bandwidthInHz;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	0001e848 	.word	0x0001e848
 8007d8c:	0003d090 	.word	0x0003d090
 8007d90:	0007a120 	.word	0x0007a120

08007d94 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	461a      	mov	r2, r3
 8007da2:	4603      	mov	r3, r0
 8007da4:	70fb      	strb	r3, [r7, #3]
 8007da6:	460b      	mov	r3, r1
 8007da8:	803b      	strh	r3, [r7, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007dae:	883b      	ldrh	r3, [r7, #0]
 8007db0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007db2:	78ba      	ldrb	r2, [r7, #2]
 8007db4:	f082 0201 	eor.w	r2, r2, #1
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	d001      	beq.n	8007dc2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	e000      	b.n	8007dc4 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007dc2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007dc4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007dc6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007dca:	7c3b      	ldrb	r3, [r7, #16]
 8007dcc:	7d39      	ldrb	r1, [r7, #20]
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	d001      	beq.n	8007dd6 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007dd2:	2102      	movs	r1, #2
 8007dd4:	e000      	b.n	8007dd8 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	440b      	add	r3, r1
 8007dda:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007ddc:	4413      	add	r3, r2
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b08b      	sub	sp, #44	@ 0x2c
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4611      	mov	r1, r2
 8007df4:	461a      	mov	r2, r3
 8007df6:	460b      	mov	r3, r1
 8007df8:	71fb      	strb	r3, [r7, #7]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	3304      	adds	r3, #4
 8007e02:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007e04:	2300      	movs	r3, #0
 8007e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d002      	beq.n	8007e16 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d104      	bne.n	8007e20 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007e16:	88bb      	ldrh	r3, [r7, #4]
 8007e18:	2b0b      	cmp	r3, #11
 8007e1a:	d801      	bhi.n	8007e20 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007e1c:	230c      	movs	r3, #12
 8007e1e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d105      	bne.n	8007e32 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b0b      	cmp	r3, #11
 8007e2a:	d008      	beq.n	8007e3e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b0c      	cmp	r3, #12
 8007e30:	d005      	beq.n	8007e3e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d105      	bne.n	8007e44 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2b0c      	cmp	r3, #12
 8007e3c:	d102      	bne.n	8007e44 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007e44:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007e48:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007e4a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	d001      	beq.n	8007e56 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007e52:	2210      	movs	r2, #16
 8007e54:	e000      	b.n	8007e58 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007e56:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007e58:	4413      	add	r3, r2
 8007e5a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007e60:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007e62:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	d001      	beq.n	8007e6e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	e000      	b.n	8007e70 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007e6e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007e70:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007e72:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b06      	cmp	r3, #6
 8007e78:	d803      	bhi.n	8007e82 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	623b      	str	r3, [r7, #32]
 8007e80:	e00e      	b.n	8007ea0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	3308      	adds	r3, #8
 8007e86:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	3b02      	subs	r3, #2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	623b      	str	r3, [r7, #32]
 8007e98:	e002      	b.n	8007ea0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da01      	bge.n	8007eaa <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	4413      	add	r3, r2
 8007eb0:	1e5a      	subs	r2, r3, #1
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	fb03 f202 	mul.w	r2, r3, r2
 8007ebe:	88bb      	ldrh	r3, [r7, #4]
 8007ec0:	4413      	add	r3, r2
    int32_t intermediate =
 8007ec2:	330c      	adds	r3, #12
 8007ec4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b06      	cmp	r3, #6
 8007eca:	d802      	bhi.n	8007ed2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	3302      	adds	r3, #2
 8007ed0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	3b02      	subs	r3, #2
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	372c      	adds	r7, #44	@ 0x2c
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bc80      	pop	{r7}
 8007ee8:	4770      	bx	lr
	...

08007eec <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af04      	add	r7, sp, #16
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]
 8007efc:	4613      	mov	r3, r2
 8007efe:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007f04:	2301      	movs	r3, #1
 8007f06:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <RadioTimeOnAir+0x28>
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d017      	beq.n	8007f42 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007f12:	e035      	b.n	8007f80 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007f14:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8007f18:	8c3a      	ldrh	r2, [r7, #32]
 8007f1a:	7bb9      	ldrb	r1, [r7, #14]
 8007f1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	4603      	mov	r3, r0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff ff32 	bl	8007d94 <RadioGetGfskTimeOnAirNumerator>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	613b      	str	r3, [r7, #16]
        break;
 8007f40:	e01e      	b.n	8007f80 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007f42:	8c39      	ldrh	r1, [r7, #32]
 8007f44:	7bba      	ldrb	r2, [r7, #14]
 8007f46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	68b8      	ldr	r0, [r7, #8]
 8007f5e:	f7ff ff43 	bl	8007de8 <RadioGetLoRaTimeOnAirNumerator>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f68:	fb02 f303 	mul.w	r3, r2, r3
 8007f6c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007f98 <RadioTimeOnAir+0xac>)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4413      	add	r3, r2
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff feb6 	bl	8007ce8 <RadioGetLoRaBandwidthInHz>
 8007f7c:	6138      	str	r0, [r7, #16]
        break;
 8007f7e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	4413      	add	r3, r2
 8007f86:	1e5a      	subs	r2, r3, #1
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	0800c9a0 	.word	0x0800c9a0

08007f9c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2200      	movs	r2, #0
 8007fac:	f240 2101 	movw	r1, #513	@ 0x201
 8007fb0:	f240 2001 	movw	r0, #513	@ 0x201
 8007fb4:	f001 fd60 	bl	8009a78 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8007fb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007fbc:	4871      	ldr	r0, [pc, #452]	@ (8008184 <RadioSend+0x1e8>)
 8007fbe:	f7ff fa09 	bl	80073d4 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007fc2:	4b71      	ldr	r3, [pc, #452]	@ (8008188 <RadioSend+0x1ec>)
 8007fc4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f002 fa12 	bl	800a3f4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007fd0:	4b6d      	ldr	r3, [pc, #436]	@ (8008188 <RadioSend+0x1ec>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d112      	bne.n	8007ffe <RadioSend+0x62>
 8007fd8:	4b6b      	ldr	r3, [pc, #428]	@ (8008188 <RadioSend+0x1ec>)
 8007fda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d10d      	bne.n	8007ffe <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007fe2:	f640 0089 	movw	r0, #2185	@ 0x889
 8007fe6:	f002 f919 	bl	800a21c <SUBGRF_ReadRegister>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f023 0304 	bic.w	r3, r3, #4
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f640 0089 	movw	r0, #2185	@ 0x889
 8007ff8:	f002 f8ee 	bl	800a1d8 <SUBGRF_WriteRegister>
 8007ffc:	e00c      	b.n	8008018 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007ffe:	f640 0089 	movw	r0, #2185	@ 0x889
 8008002:	f002 f90b 	bl	800a21c <SUBGRF_ReadRegister>
 8008006:	4603      	mov	r3, r0
 8008008:	f043 0304 	orr.w	r3, r3, #4
 800800c:	b2db      	uxtb	r3, r3
 800800e:	4619      	mov	r1, r3
 8008010:	f640 0089 	movw	r0, #2185	@ 0x889
 8008014:	f002 f8e0 	bl	800a1d8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008018:	4b5b      	ldr	r3, [pc, #364]	@ (8008188 <RadioSend+0x1ec>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b04      	cmp	r3, #4
 800801e:	f200 80a1 	bhi.w	8008164 <RadioSend+0x1c8>
 8008022:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <RadioSend+0x8c>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	08008057 	.word	0x08008057
 800802c:	0800803d 	.word	0x0800803d
 8008030:	08008057 	.word	0x08008057
 8008034:	080080ad 	.word	0x080080ad
 8008038:	080080cd 	.word	0x080080cd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800803c:	4a52      	ldr	r2, [pc, #328]	@ (8008188 <RadioSend+0x1ec>)
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008042:	4852      	ldr	r0, [pc, #328]	@ (800818c <RadioSend+0x1f0>)
 8008044:	f001 ff80 	bl	8009f48 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	2200      	movs	r2, #0
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fa30 	bl	80094b4 <SUBGRF_SendPayload>
            break;
 8008054:	e087      	b.n	8008166 <RadioSend+0x1ca>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008056:	f002 fbc6 	bl	800a7e6 <RFW_Is_Init>
 800805a:	4603      	mov	r3, r0
 800805c:	2b01      	cmp	r3, #1
 800805e:	d118      	bne.n	8008092 <RadioSend+0xf6>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008060:	f107 020d 	add.w	r2, r7, #13
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f002 fbd4 	bl	800a816 <RFW_TransmitInit>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10c      	bne.n	800808e <RadioSend+0xf2>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008074:	7b7a      	ldrb	r2, [r7, #13]
 8008076:	4b44      	ldr	r3, [pc, #272]	@ (8008188 <RadioSend+0x1ec>)
 8008078:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800807a:	4844      	ldr	r0, [pc, #272]	@ (800818c <RadioSend+0x1f0>)
 800807c:	f001 ff64 	bl	8009f48 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008080:	7b7b      	ldrb	r3, [r7, #13]
 8008082:	2200      	movs	r2, #0
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fa14 	bl	80094b4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800808c:	e06b      	b.n	8008166 <RadioSend+0x1ca>
                    return RADIO_STATUS_ERROR;
 800808e:	2303      	movs	r3, #3
 8008090:	e073      	b.n	800817a <RadioSend+0x1de>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008092:	4a3d      	ldr	r2, [pc, #244]	@ (8008188 <RadioSend+0x1ec>)
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008098:	483c      	ldr	r0, [pc, #240]	@ (800818c <RadioSend+0x1f0>)
 800809a:	f001 ff55 	bl	8009f48 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	2200      	movs	r2, #0
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fa05 	bl	80094b4 <SUBGRF_SendPayload>
            break;
 80080aa:	e05c      	b.n	8008166 <RadioSend+0x1ca>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80080ac:	4b36      	ldr	r3, [pc, #216]	@ (8008188 <RadioSend+0x1ec>)
 80080ae:	2202      	movs	r2, #2
 80080b0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80080b2:	4a35      	ldr	r2, [pc, #212]	@ (8008188 <RadioSend+0x1ec>)
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080b8:	4834      	ldr	r0, [pc, #208]	@ (800818c <RadioSend+0x1f0>)
 80080ba:	f001 ff45 	bl	8009f48 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	2200      	movs	r2, #0
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f9f5 	bl	80094b4 <SUBGRF_SendPayload>
            break;
 80080ca:	e04c      	b.n	8008166 <RadioSend+0x1ca>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	482f      	ldr	r0, [pc, #188]	@ (8008190 <RadioSend+0x1f4>)
 80080d4:	f000 fcc6 	bl	8008a64 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80080d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008188 <RadioSend+0x1ec>)
 80080da:	2202      	movs	r2, #2
 80080dc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	3301      	adds	r3, #1
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <RadioSend+0x1ec>)
 80080e6:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080e8:	4828      	ldr	r0, [pc, #160]	@ (800818c <RadioSend+0x1f0>)
 80080ea:	f001 ff2d 	bl	8009f48 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80080ee:	2100      	movs	r1, #0
 80080f0:	20f1      	movs	r0, #241	@ 0xf1
 80080f2:	f000 f971 	bl	80083d8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80080f6:	2100      	movs	r1, #0
 80080f8:	20f0      	movs	r0, #240	@ 0xf0
 80080fa:	f000 f96d 	bl	80083d8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80080fe:	4b22      	ldr	r3, [pc, #136]	@ (8008188 <RadioSend+0x1ec>)
 8008100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008102:	2b64      	cmp	r3, #100	@ 0x64
 8008104:	d108      	bne.n	8008118 <RadioSend+0x17c>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008106:	2170      	movs	r1, #112	@ 0x70
 8008108:	20f3      	movs	r0, #243	@ 0xf3
 800810a:	f000 f965 	bl	80083d8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800810e:	211d      	movs	r1, #29
 8008110:	20f2      	movs	r0, #242	@ 0xf2
 8008112:	f000 f961 	bl	80083d8 <RadioWrite>
 8008116:	e007      	b.n	8008128 <RadioSend+0x18c>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008118:	21e1      	movs	r1, #225	@ 0xe1
 800811a:	20f3      	movs	r0, #243	@ 0xf3
 800811c:	f000 f95c 	bl	80083d8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008120:	2104      	movs	r1, #4
 8008122:	20f2      	movs	r0, #242	@ 0xf2
 8008124:	f000 f958 	bl	80083d8 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	b29b      	uxth	r3, r3
 800812c:	00db      	lsls	r3, r3, #3
 800812e:	b29b      	uxth	r3, r3
 8008130:	3302      	adds	r3, #2
 8008132:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	b29b      	uxth	r3, r3
 800813a:	b2db      	uxtb	r3, r3
 800813c:	4619      	mov	r1, r3
 800813e:	20f4      	movs	r0, #244	@ 0xf4
 8008140:	f000 f94a 	bl	80083d8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008144:	89fb      	ldrh	r3, [r7, #14]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	4619      	mov	r1, r3
 800814a:	20f5      	movs	r0, #245	@ 0xf5
 800814c:	f000 f944 	bl	80083d8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	3301      	adds	r3, #1
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800815a:	4619      	mov	r1, r3
 800815c:	480c      	ldr	r0, [pc, #48]	@ (8008190 <RadioSend+0x1f4>)
 800815e:	f001 f9a9 	bl	80094b4 <SUBGRF_SendPayload>
            break;
 8008162:	e000      	b.n	8008166 <RadioSend+0x1ca>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008164:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008166:	4b08      	ldr	r3, [pc, #32]	@ (8008188 <RadioSend+0x1ec>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	4619      	mov	r1, r3
 800816c:	4809      	ldr	r0, [pc, #36]	@ (8008194 <RadioSend+0x1f8>)
 800816e:	f003 fd5f 	bl	800bc30 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008172:	4808      	ldr	r0, [pc, #32]	@ (8008194 <RadioSend+0x1f8>)
 8008174:	f003 fc7e 	bl	800ba74 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	48000400 	.word	0x48000400
 8008188:	2000028c 	.word	0x2000028c
 800818c:	2000029a 	.word	0x2000029a
 8008190:	20000188 	.word	0x20000188
 8008194:	200002e8 	.word	0x200002e8

08008198 <RadioSleep>:

static void RadioSleep( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800819e:	2300      	movs	r3, #0
 80081a0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80081a2:	793b      	ldrb	r3, [r7, #4]
 80081a4:	f043 0304 	orr.w	r3, r3, #4
 80081a8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80081aa:	7938      	ldrb	r0, [r7, #4]
 80081ac:	f001 fa5e 	bl	800966c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80081b0:	2002      	movs	r0, #2
 80081b2:	f7f8 fca3 	bl	8000afc <HAL_Delay>
}
 80081b6:	bf00      	nop
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <RadioStandby>:

static void RadioStandby( void )
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80081c2:	2000      	movs	r0, #0
 80081c4:	f001 fa84 	bl	80096d0 <SUBGRF_SetStandby>
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}

080081cc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80081d4:	f002 fb07 	bl	800a7e6 <RFW_Is_Init>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d102      	bne.n	80081e4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80081de:	f002 fb2a 	bl	800a836 <RFW_ReceiveInit>
 80081e2:	e007      	b.n	80081f4 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80081e4:	2300      	movs	r3, #0
 80081e6:	2200      	movs	r2, #0
 80081e8:	f240 2162 	movw	r1, #610	@ 0x262
 80081ec:	f240 2062 	movw	r0, #610	@ 0x262
 80081f0:	f001 fc42 	bl	8009a78 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d006      	beq.n	8008208 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4813      	ldr	r0, [pc, #76]	@ (800824c <RadioRx+0x80>)
 80081fe:	f003 fd17 	bl	800bc30 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008202:	4812      	ldr	r0, [pc, #72]	@ (800824c <RadioRx+0x80>)
 8008204:	f003 fc36 	bl	800ba74 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008208:	4b11      	ldr	r3, [pc, #68]	@ (8008250 <RadioRx+0x84>)
 800820a:	2200      	movs	r2, #0
 800820c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 800820e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008212:	4810      	ldr	r0, [pc, #64]	@ (8008254 <RadioRx+0x88>)
 8008214:	f7ff f8de 	bl	80073d4 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008218:	4b0d      	ldr	r3, [pc, #52]	@ (8008250 <RadioRx+0x84>)
 800821a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800821e:	2100      	movs	r1, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f002 f8e7 	bl	800a3f4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008226:	4b0a      	ldr	r3, [pc, #40]	@ (8008250 <RadioRx+0x84>)
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800822e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008232:	f001 fa89 	bl	8009748 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008236:	e005      	b.n	8008244 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008238:	4b05      	ldr	r3, [pc, #20]	@ (8008250 <RadioRx+0x84>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	019b      	lsls	r3, r3, #6
 800823e:	4618      	mov	r0, r3
 8008240:	f001 fa82 	bl	8009748 <SUBGRF_SetRx>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20000300 	.word	0x20000300
 8008250:	2000028c 	.word	0x2000028c
 8008254:	48000400 	.word	0x48000400

08008258 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008260:	f002 fac1 	bl	800a7e6 <RFW_Is_Init>
 8008264:	4603      	mov	r3, r0
 8008266:	2b01      	cmp	r3, #1
 8008268:	d102      	bne.n	8008270 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800826a:	f002 fae4 	bl	800a836 <RFW_ReceiveInit>
 800826e:	e007      	b.n	8008280 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008270:	2300      	movs	r3, #0
 8008272:	2200      	movs	r2, #0
 8008274:	f240 2162 	movw	r1, #610	@ 0x262
 8008278:	f240 2062 	movw	r0, #610	@ 0x262
 800827c:	f001 fbfc 	bl	8009a78 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d006      	beq.n	8008294 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4813      	ldr	r0, [pc, #76]	@ (80082d8 <RadioRxBoosted+0x80>)
 800828a:	f003 fcd1 	bl	800bc30 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800828e:	4812      	ldr	r0, [pc, #72]	@ (80082d8 <RadioRxBoosted+0x80>)
 8008290:	f003 fbf0 	bl	800ba74 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008294:	4b11      	ldr	r3, [pc, #68]	@ (80082dc <RadioRxBoosted+0x84>)
 8008296:	2200      	movs	r2, #0
 8008298:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 800829a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800829e:	4810      	ldr	r0, [pc, #64]	@ (80082e0 <RadioRxBoosted+0x88>)
 80082a0:	f7ff f898 	bl	80073d4 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80082a4:	4b0d      	ldr	r3, [pc, #52]	@ (80082dc <RadioRxBoosted+0x84>)
 80082a6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80082aa:	2100      	movs	r1, #0
 80082ac:	4618      	mov	r0, r3
 80082ae:	f002 f8a1 	bl	800a3f4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80082b2:	4b0a      	ldr	r3, [pc, #40]	@ (80082dc <RadioRxBoosted+0x84>)
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d004      	beq.n	80082c4 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80082ba:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80082be:	f001 fa63 	bl	8009788 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80082c2:	e005      	b.n	80082d0 <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80082c4:	4b05      	ldr	r3, [pc, #20]	@ (80082dc <RadioRxBoosted+0x84>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	019b      	lsls	r3, r3, #6
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 fa5c 	bl	8009788 <SUBGRF_SetRxBoosted>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20000300 	.word	0x20000300
 80082dc:	2000028c 	.word	0x2000028c
 80082e0:	48000400 	.word	0x48000400

080082e4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	005a      	lsls	r2, r3, #1
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	4413      	add	r3, r2
 80082f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008328 <RadioSetRxDutyCycle+0x44>)
 80082f8:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80082fa:	2300      	movs	r3, #0
 80082fc:	2200      	movs	r2, #0
 80082fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008302:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008306:	f001 fbb7 	bl	8009a78 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800830a:	4b07      	ldr	r3, [pc, #28]	@ (8008328 <RadioSetRxDutyCycle+0x44>)
 800830c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f002 f86e 	bl	800a3f4 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fa58 	bl	80097d0 <SUBGRF_SetRxDutyCycle>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	2000028c 	.word	0x2000028c

0800832c <RadioStartCad>:

static void RadioStartCad( void )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008330:	4b09      	ldr	r3, [pc, #36]	@ (8008358 <RadioStartCad+0x2c>)
 8008332:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008336:	2100      	movs	r1, #0
 8008338:	4618      	mov	r0, r3
 800833a:	f002 f85b 	bl	800a3f4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800833e:	2300      	movs	r3, #0
 8008340:	2200      	movs	r2, #0
 8008342:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8008346:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800834a:	f001 fb95 	bl	8009a78 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800834e:	f001 fa6b 	bl	8009828 <SUBGRF_SetCad>
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	2000028c 	.word	0x2000028c

0800835c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
 8008368:	4613      	mov	r3, r2
 800836a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800836c:	883b      	ldrh	r3, [r7, #0]
 800836e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008372:	fb02 f303 	mul.w	r3, r2, r3
 8008376:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 fbd9 	bl	8009b30 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800837e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008382:	4618      	mov	r0, r3
 8008384:	f002 f85e 	bl	800a444 <SUBGRF_SetRfTxPower>
 8008388:	4603      	mov	r3, r0
 800838a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800838c:	210e      	movs	r1, #14
 800838e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008392:	f001 ff21 	bl	800a1d8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	2101      	movs	r1, #1
 800839a:	4618      	mov	r0, r3
 800839c:	f002 f82a 	bl	800a3f4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80083a0:	f001 fa50 	bl	8009844 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80083a4:	68f9      	ldr	r1, [r7, #12]
 80083a6:	4805      	ldr	r0, [pc, #20]	@ (80083bc <RadioSetTxContinuousWave+0x60>)
 80083a8:	f003 fc42 	bl	800bc30 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80083ac:	4803      	ldr	r0, [pc, #12]	@ (80083bc <RadioSetTxContinuousWave+0x60>)
 80083ae:	f003 fb61 	bl	800ba74 <UTIL_TIMER_Start>
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	200002e8 	.word	0x200002e8

080083c0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80083ca:	f001 fe72 	bl	800a0b2 <SUBGRF_GetRssiInst>
 80083ce:	4603      	mov	r3, r0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	460a      	mov	r2, r1
 80083e2:	80fb      	strh	r3, [r7, #6]
 80083e4:	4613      	mov	r3, r2
 80083e6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80083e8:	797a      	ldrb	r2, [r7, #5]
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	4611      	mov	r1, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 fef2 	bl	800a1d8 <SUBGRF_WriteRegister>
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	4618      	mov	r0, r3
 800840a:	f001 ff07 	bl	800a21c <SUBGRF_ReadRegister>
 800840e:	4603      	mov	r3, r0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	80fb      	strh	r3, [r7, #6]
 8008424:	4613      	mov	r3, r2
 8008426:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008428:	797b      	ldrb	r3, [r7, #5]
 800842a:	b29a      	uxth	r2, r3
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f001 ff13 	bl	800a25c <SUBGRF_WriteRegisters>
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	4603      	mov	r3, r0
 8008446:	6039      	str	r1, [r7, #0]
 8008448:	80fb      	strh	r3, [r7, #6]
 800844a:	4613      	mov	r3, r2
 800844c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800844e:	797b      	ldrb	r3, [r7, #5]
 8008450:	b29a      	uxth	r2, r3
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f001 ff22 	bl	800a2a0 <SUBGRF_ReadRegisters>
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	460a      	mov	r2, r1
 800846e:	71fb      	strb	r3, [r7, #7]
 8008470:	4613      	mov	r3, r2
 8008472:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d10a      	bne.n	8008490 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800847a:	4a0e      	ldr	r2, [pc, #56]	@ (80084b4 <RadioSetMaxPayloadLength+0x50>)
 800847c:	79bb      	ldrb	r3, [r7, #6]
 800847e:	7013      	strb	r3, [r2, #0]
 8008480:	4b0c      	ldr	r3, [pc, #48]	@ (80084b4 <RadioSetMaxPayloadLength+0x50>)
 8008482:	781a      	ldrb	r2, [r3, #0]
 8008484:	4b0c      	ldr	r3, [pc, #48]	@ (80084b8 <RadioSetMaxPayloadLength+0x54>)
 8008486:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008488:	480c      	ldr	r0, [pc, #48]	@ (80084bc <RadioSetMaxPayloadLength+0x58>)
 800848a:	f001 fd5d 	bl	8009f48 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800848e:	e00d      	b.n	80084ac <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008490:	4b09      	ldr	r3, [pc, #36]	@ (80084b8 <RadioSetMaxPayloadLength+0x54>)
 8008492:	7d5b      	ldrb	r3, [r3, #21]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d109      	bne.n	80084ac <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008498:	4a06      	ldr	r2, [pc, #24]	@ (80084b4 <RadioSetMaxPayloadLength+0x50>)
 800849a:	79bb      	ldrb	r3, [r7, #6]
 800849c:	7013      	strb	r3, [r2, #0]
 800849e:	4b05      	ldr	r3, [pc, #20]	@ (80084b4 <RadioSetMaxPayloadLength+0x50>)
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <RadioSetMaxPayloadLength+0x54>)
 80084a4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80084a6:	4805      	ldr	r0, [pc, #20]	@ (80084bc <RadioSetMaxPayloadLength+0x58>)
 80084a8:	f001 fd4e 	bl	8009f48 <SUBGRF_SetPacketParams>
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000008 	.word	0x20000008
 80084b8:	2000028c 	.word	0x2000028c
 80084bc:	2000029a 	.word	0x2000029a

080084c0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80084ca:	4a13      	ldr	r2, [pc, #76]	@ (8008518 <RadioSetPublicNetwork+0x58>)
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	7313      	strb	r3, [r2, #12]
 80084d0:	4b11      	ldr	r3, [pc, #68]	@ (8008518 <RadioSetPublicNetwork+0x58>)
 80084d2:	7b1a      	ldrb	r2, [r3, #12]
 80084d4:	4b10      	ldr	r3, [pc, #64]	@ (8008518 <RadioSetPublicNetwork+0x58>)
 80084d6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80084d8:	2001      	movs	r0, #1
 80084da:	f7ff f809 	bl	80074f0 <RadioSetModem>
    if( enable == true )
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80084e4:	2134      	movs	r1, #52	@ 0x34
 80084e6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80084ea:	f001 fe75 	bl	800a1d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80084ee:	2144      	movs	r1, #68	@ 0x44
 80084f0:	f240 7041 	movw	r0, #1857	@ 0x741
 80084f4:	f001 fe70 	bl	800a1d8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80084f8:	e009      	b.n	800850e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80084fa:	2114      	movs	r1, #20
 80084fc:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8008500:	f001 fe6a 	bl	800a1d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008504:	2124      	movs	r1, #36	@ 0x24
 8008506:	f240 7041 	movw	r0, #1857	@ 0x741
 800850a:	f001 fe65 	bl	800a1d8 <SUBGRF_WriteRegister>
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	2000028c 	.word	0x2000028c

0800851c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008520:	f001 ffc4 	bl	800a4ac <SUBGRF_GetRadioWakeUpTime>
 8008524:	4603      	mov	r3, r0
 8008526:	3303      	adds	r3, #3
}
 8008528:	4618      	mov	r0, r3
 800852a:	bd80      	pop	{r7, pc}

0800852c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008534:	f000 f80e 	bl	8008554 <RadioOnTxTimeoutProcess>
}
 8008538:	bf00      	nop
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008548:	f000 f81e 	bl	8008588 <RadioOnRxTimeoutProcess>
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 8008558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800855c:	4808      	ldr	r0, [pc, #32]	@ (8008580 <RadioOnTxTimeoutProcess+0x2c>)
 800855e:	f7fe ff46 	bl	80073ee <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008562:	4b08      	ldr	r3, [pc, #32]	@ (8008584 <RadioOnTxTimeoutProcess+0x30>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d008      	beq.n	800857c <RadioOnTxTimeoutProcess+0x28>
 800856a:	4b06      	ldr	r3, [pc, #24]	@ (8008584 <RadioOnTxTimeoutProcess+0x30>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8008574:	4b03      	ldr	r3, [pc, #12]	@ (8008584 <RadioOnTxTimeoutProcess+0x30>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	4798      	blx	r3
    }
}
 800857c:	bf00      	nop
 800857e:	bd80      	pop	{r7, pc}
 8008580:	48000400 	.word	0x48000400
 8008584:	20000288 	.word	0x20000288

08008588 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 800858c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008590:	4808      	ldr	r0, [pc, #32]	@ (80085b4 <RadioOnRxTimeoutProcess+0x2c>)
 8008592:	f7fe ff2c 	bl	80073ee <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008596:	4b08      	ldr	r3, [pc, #32]	@ (80085b8 <RadioOnRxTimeoutProcess+0x30>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <RadioOnRxTimeoutProcess+0x28>
 800859e:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <RadioOnRxTimeoutProcess+0x30>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 80085a8:	4b03      	ldr	r3, [pc, #12]	@ (80085b8 <RadioOnRxTimeoutProcess+0x30>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	4798      	blx	r3
    }
}
 80085b0:	bf00      	nop
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	48000400 	.word	0x48000400
 80085b8:	20000288 	.word	0x20000288

080085bc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80085c6:	4a05      	ldr	r2, [pc, #20]	@ (80085dc <RadioOnDioIrq+0x20>)
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80085ce:	f000 f807 	bl	80085e0 <RadioIrqProcess>
}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	2000028c 	.word	0x2000028c

080085e0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80085e0:	b5b0      	push	{r4, r5, r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80085ee:	4baf      	ldr	r3, [pc, #700]	@ (80088ac <RadioIrqProcess+0x2cc>)
 80085f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80085f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f8:	f000 8117 	beq.w	800882a <RadioIrqProcess+0x24a>
 80085fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008600:	f300 81d6 	bgt.w	80089b0 <RadioIrqProcess+0x3d0>
 8008604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008608:	f000 80fb 	beq.w	8008802 <RadioIrqProcess+0x222>
 800860c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008610:	f300 81ce 	bgt.w	80089b0 <RadioIrqProcess+0x3d0>
 8008614:	2b80      	cmp	r3, #128	@ 0x80
 8008616:	f000 80e0 	beq.w	80087da <RadioIrqProcess+0x1fa>
 800861a:	2b80      	cmp	r3, #128	@ 0x80
 800861c:	f300 81c8 	bgt.w	80089b0 <RadioIrqProcess+0x3d0>
 8008620:	2b20      	cmp	r3, #32
 8008622:	dc49      	bgt.n	80086b8 <RadioIrqProcess+0xd8>
 8008624:	2b00      	cmp	r3, #0
 8008626:	f340 81c3 	ble.w	80089b0 <RadioIrqProcess+0x3d0>
 800862a:	3b01      	subs	r3, #1
 800862c:	2b1f      	cmp	r3, #31
 800862e:	f200 81bf 	bhi.w	80089b0 <RadioIrqProcess+0x3d0>
 8008632:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <RadioIrqProcess+0x58>)
 8008634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008638:	080086c1 	.word	0x080086c1
 800863c:	08008705 	.word	0x08008705
 8008640:	080089b1 	.word	0x080089b1
 8008644:	080088cd 	.word	0x080088cd
 8008648:	080089b1 	.word	0x080089b1
 800864c:	080089b1 	.word	0x080089b1
 8008650:	080089b1 	.word	0x080089b1
 8008654:	0800893b 	.word	0x0800893b
 8008658:	080089b1 	.word	0x080089b1
 800865c:	080089b1 	.word	0x080089b1
 8008660:	080089b1 	.word	0x080089b1
 8008664:	080089b1 	.word	0x080089b1
 8008668:	080089b1 	.word	0x080089b1
 800866c:	080089b1 	.word	0x080089b1
 8008670:	080089b1 	.word	0x080089b1
 8008674:	080089b1 	.word	0x080089b1
 8008678:	080089b1 	.word	0x080089b1
 800867c:	080089b1 	.word	0x080089b1
 8008680:	080089b1 	.word	0x080089b1
 8008684:	080089b1 	.word	0x080089b1
 8008688:	080089b1 	.word	0x080089b1
 800868c:	080089b1 	.word	0x080089b1
 8008690:	080089b1 	.word	0x080089b1
 8008694:	080089b1 	.word	0x080089b1
 8008698:	080089b1 	.word	0x080089b1
 800869c:	080089b1 	.word	0x080089b1
 80086a0:	080089b1 	.word	0x080089b1
 80086a4:	080089b1 	.word	0x080089b1
 80086a8:	080089b1 	.word	0x080089b1
 80086ac:	080089b1 	.word	0x080089b1
 80086b0:	080089b1 	.word	0x080089b1
 80086b4:	0800894b 	.word	0x0800894b
 80086b8:	2b40      	cmp	r3, #64	@ 0x40
 80086ba:	f000 8161 	beq.w	8008980 <RadioIrqProcess+0x3a0>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80086be:	e177      	b.n	80089b0 <RadioIrqProcess+0x3d0>
        DBG_GPIO_RADIO_TX( RST );
 80086c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80086c4:	487a      	ldr	r0, [pc, #488]	@ (80088b0 <RadioIrqProcess+0x2d0>)
 80086c6:	f7fe fe92 	bl	80073ee <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 80086ca:	487a      	ldr	r0, [pc, #488]	@ (80088b4 <RadioIrqProcess+0x2d4>)
 80086cc:	f003 fa40 	bl	800bb50 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80086d0:	2000      	movs	r0, #0
 80086d2:	f000 fffd 	bl	80096d0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80086d6:	f002 f88d 	bl	800a7f4 <RFW_Is_LongPacketModeEnabled>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d101      	bne.n	80086e4 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 80086e0:	f002 f8b1 	bl	800a846 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80086e4:	4b74      	ldr	r3, [pc, #464]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 8163 	beq.w	80089b4 <RadioIrqProcess+0x3d4>
 80086ee:	4b72      	ldr	r3, [pc, #456]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 815d 	beq.w	80089b4 <RadioIrqProcess+0x3d4>
            RadioEvents->TxDone( );
 80086fa:	4b6f      	ldr	r3, [pc, #444]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4798      	blx	r3
        break;
 8008702:	e157      	b.n	80089b4 <RadioIrqProcess+0x3d4>
        DBG_GPIO_RADIO_RX( RST );
 8008704:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008708:	4869      	ldr	r0, [pc, #420]	@ (80088b0 <RadioIrqProcess+0x2d0>)
 800870a:	f7fe fe70 	bl	80073ee <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 800870e:	486b      	ldr	r0, [pc, #428]	@ (80088bc <RadioIrqProcess+0x2dc>)
 8008710:	f003 fa1e 	bl	800bb50 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008714:	4b65      	ldr	r3, [pc, #404]	@ (80088ac <RadioIrqProcess+0x2cc>)
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	f083 0301 	eor.w	r3, r3, #1
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d014      	beq.n	800874c <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8008722:	2000      	movs	r0, #0
 8008724:	f000 ffd4 	bl	80096d0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008728:	2100      	movs	r1, #0
 800872a:	f640 1002 	movw	r0, #2306	@ 0x902
 800872e:	f001 fd53 	bl	800a1d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008732:	f640 1044 	movw	r0, #2372	@ 0x944
 8008736:	f001 fd71 	bl	800a21c <SUBGRF_ReadRegister>
 800873a:	4603      	mov	r3, r0
 800873c:	f043 0302 	orr.w	r3, r3, #2
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	f640 1044 	movw	r0, #2372	@ 0x944
 8008748:	f001 fd46 	bl	800a1d8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800874c:	1dfb      	adds	r3, r7, #7
 800874e:	22ff      	movs	r2, #255	@ 0xff
 8008750:	4619      	mov	r1, r3
 8008752:	485b      	ldr	r0, [pc, #364]	@ (80088c0 <RadioIrqProcess+0x2e0>)
 8008754:	f000 fe8c 	bl	8009470 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008758:	485a      	ldr	r0, [pc, #360]	@ (80088c4 <RadioIrqProcess+0x2e4>)
 800875a:	f001 fceb 	bl	800a134 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800875e:	4b56      	ldr	r3, [pc, #344]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 8128 	beq.w	80089b8 <RadioIrqProcess+0x3d8>
 8008768:	4b53      	ldr	r3, [pc, #332]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 8122 	beq.w	80089b8 <RadioIrqProcess+0x3d8>
            switch( SubgRf.PacketStatus.packetType )
 8008774:	4b4d      	ldr	r3, [pc, #308]	@ (80088ac <RadioIrqProcess+0x2cc>)
 8008776:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800877a:	2b01      	cmp	r3, #1
 800877c:	d10e      	bne.n	800879c <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800877e:	4b4e      	ldr	r3, [pc, #312]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689c      	ldr	r4, [r3, #8]
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	4619      	mov	r1, r3
 8008788:	4b48      	ldr	r3, [pc, #288]	@ (80088ac <RadioIrqProcess+0x2cc>)
 800878a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800878e:	461a      	mov	r2, r3
 8008790:	4b46      	ldr	r3, [pc, #280]	@ (80088ac <RadioIrqProcess+0x2cc>)
 8008792:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8008796:	484a      	ldr	r0, [pc, #296]	@ (80088c0 <RadioIrqProcess+0x2e0>)
 8008798:	47a0      	blx	r4
                break;
 800879a:	e01d      	b.n	80087d8 <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800879c:	4b43      	ldr	r3, [pc, #268]	@ (80088ac <RadioIrqProcess+0x2cc>)
 800879e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a0:	463a      	mov	r2, r7
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 ff73 	bl	800a690 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80087aa:	4b43      	ldr	r3, [pc, #268]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689c      	ldr	r4, [r3, #8]
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	4619      	mov	r1, r3
 80087b4:	4b3d      	ldr	r3, [pc, #244]	@ (80088ac <RadioIrqProcess+0x2cc>)
 80087b6:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80087ba:	4618      	mov	r0, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80087c2:	4a41      	ldr	r2, [pc, #260]	@ (80088c8 <RadioIrqProcess+0x2e8>)
 80087c4:	fb82 5203 	smull	r5, r2, r2, r3
 80087c8:	1192      	asrs	r2, r2, #6
 80087ca:	17db      	asrs	r3, r3, #31
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	b25b      	sxtb	r3, r3
 80087d0:	4602      	mov	r2, r0
 80087d2:	483b      	ldr	r0, [pc, #236]	@ (80088c0 <RadioIrqProcess+0x2e0>)
 80087d4:	47a0      	blx	r4
                break;
 80087d6:	bf00      	nop
        break;
 80087d8:	e0ee      	b.n	80089b8 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 80087da:	2000      	movs	r0, #0
 80087dc:	f000 ff78 	bl	80096d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80087e0:	4b35      	ldr	r3, [pc, #212]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80e9 	beq.w	80089bc <RadioIrqProcess+0x3dc>
 80087ea:	4b33      	ldr	r3, [pc, #204]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 80e3 	beq.w	80089bc <RadioIrqProcess+0x3dc>
            RadioEvents->CadDone( false );
 80087f6:	4b30      	ldr	r3, [pc, #192]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	2000      	movs	r0, #0
 80087fe:	4798      	blx	r3
        break;
 8008800:	e0dc      	b.n	80089bc <RadioIrqProcess+0x3dc>
        SUBGRF_SetStandby( STDBY_RC );
 8008802:	2000      	movs	r0, #0
 8008804:	f000 ff64 	bl	80096d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008808:	4b2b      	ldr	r3, [pc, #172]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80d7 	beq.w	80089c0 <RadioIrqProcess+0x3e0>
 8008812:	4b29      	ldr	r3, [pc, #164]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80d1 	beq.w	80089c0 <RadioIrqProcess+0x3e0>
            RadioEvents->CadDone( true );
 800881e:	4b26      	ldr	r3, [pc, #152]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	2001      	movs	r0, #1
 8008826:	4798      	blx	r3
        break;
 8008828:	e0ca      	b.n	80089c0 <RadioIrqProcess+0x3e0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800882a:	f000 fe07 	bl	800943c <SUBGRF_GetOperatingMode>
 800882e:	4603      	mov	r3, r0
 8008830:	2b04      	cmp	r3, #4
 8008832:	d11a      	bne.n	800886a <RadioIrqProcess+0x28a>
            DBG_GPIO_RADIO_TX( RST );
 8008834:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008838:	481d      	ldr	r0, [pc, #116]	@ (80088b0 <RadioIrqProcess+0x2d0>)
 800883a:	f7fe fdd8 	bl	80073ee <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 800883e:	481d      	ldr	r0, [pc, #116]	@ (80088b4 <RadioIrqProcess+0x2d4>)
 8008840:	f003 f986 	bl	800bb50 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008844:	2000      	movs	r0, #0
 8008846:	f000 ff43 	bl	80096d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800884a:	4b1b      	ldr	r3, [pc, #108]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80b8 	beq.w	80089c4 <RadioIrqProcess+0x3e4>
 8008854:	4b18      	ldr	r3, [pc, #96]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 80b2 	beq.w	80089c4 <RadioIrqProcess+0x3e4>
                RadioEvents->TxTimeout( );
 8008860:	4b15      	ldr	r3, [pc, #84]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4798      	blx	r3
        break;
 8008868:	e0ac      	b.n	80089c4 <RadioIrqProcess+0x3e4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800886a:	f000 fde7 	bl	800943c <SUBGRF_GetOperatingMode>
 800886e:	4603      	mov	r3, r0
 8008870:	2b05      	cmp	r3, #5
 8008872:	f040 80a7 	bne.w	80089c4 <RadioIrqProcess+0x3e4>
            DBG_GPIO_RADIO_RX( RST );
 8008876:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800887a:	480d      	ldr	r0, [pc, #52]	@ (80088b0 <RadioIrqProcess+0x2d0>)
 800887c:	f7fe fdb7 	bl	80073ee <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8008880:	480e      	ldr	r0, [pc, #56]	@ (80088bc <RadioIrqProcess+0x2dc>)
 8008882:	f003 f965 	bl	800bb50 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008886:	2000      	movs	r0, #0
 8008888:	f000 ff22 	bl	80096d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800888c:	4b0a      	ldr	r3, [pc, #40]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8097 	beq.w	80089c4 <RadioIrqProcess+0x3e4>
 8008896:	4b08      	ldr	r3, [pc, #32]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 8091 	beq.w	80089c4 <RadioIrqProcess+0x3e4>
                RadioEvents->RxTimeout( );
 80088a2:	4b05      	ldr	r3, [pc, #20]	@ (80088b8 <RadioIrqProcess+0x2d8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	4798      	blx	r3
        break;
 80088aa:	e08b      	b.n	80089c4 <RadioIrqProcess+0x3e4>
 80088ac:	2000028c 	.word	0x2000028c
 80088b0:	48000400 	.word	0x48000400
 80088b4:	200002e8 	.word	0x200002e8
 80088b8:	20000288 	.word	0x20000288
 80088bc:	20000300 	.word	0x20000300
 80088c0:	20000188 	.word	0x20000188
 80088c4:	200002b0 	.word	0x200002b0
 80088c8:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80088cc:	4b44      	ldr	r3, [pc, #272]	@ (80089e0 <RadioIrqProcess+0x400>)
 80088ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d079      	beq.n	80089c8 <RadioIrqProcess+0x3e8>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80088d4:	4a43      	ldr	r2, [pc, #268]	@ (80089e4 <RadioIrqProcess+0x404>)
 80088d6:	4b42      	ldr	r3, [pc, #264]	@ (80089e0 <RadioIrqProcess+0x400>)
 80088d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088da:	0c1b      	lsrs	r3, r3, #16
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	4619      	mov	r1, r3
 80088e0:	f640 1003 	movw	r0, #2307	@ 0x903
 80088e4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80088e6:	4a3f      	ldr	r2, [pc, #252]	@ (80089e4 <RadioIrqProcess+0x404>)
 80088e8:	4b3d      	ldr	r3, [pc, #244]	@ (80089e0 <RadioIrqProcess+0x400>)
 80088ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ec:	0a1b      	lsrs	r3, r3, #8
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	4619      	mov	r1, r3
 80088f2:	f640 1004 	movw	r0, #2308	@ 0x904
 80088f6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80088f8:	4a3a      	ldr	r2, [pc, #232]	@ (80089e4 <RadioIrqProcess+0x404>)
 80088fa:	4b39      	ldr	r3, [pc, #228]	@ (80089e0 <RadioIrqProcess+0x400>)
 80088fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	4619      	mov	r1, r3
 8008902:	f640 1005 	movw	r0, #2309	@ 0x905
 8008906:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8008908:	4c36      	ldr	r4, [pc, #216]	@ (80089e4 <RadioIrqProcess+0x404>)
 800890a:	4b37      	ldr	r3, [pc, #220]	@ (80089e8 <RadioIrqProcess+0x408>)
 800890c:	f640 1002 	movw	r0, #2306	@ 0x902
 8008910:	4798      	blx	r3
 8008912:	4603      	mov	r3, r0
 8008914:	f043 0301 	orr.w	r3, r3, #1
 8008918:	b2db      	uxtb	r3, r3
 800891a:	4619      	mov	r1, r3
 800891c:	f640 1002 	movw	r0, #2306	@ 0x902
 8008920:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8008922:	4b2f      	ldr	r3, [pc, #188]	@ (80089e0 <RadioIrqProcess+0x400>)
 8008924:	2200      	movs	r2, #0
 8008926:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008928:	2300      	movs	r3, #0
 800892a:	2200      	movs	r2, #0
 800892c:	f240 2162 	movw	r1, #610	@ 0x262
 8008930:	f240 2062 	movw	r0, #610	@ 0x262
 8008934:	f001 f8a0 	bl	8009a78 <SUBGRF_SetDioIrqParams>
        break;
 8008938:	e046      	b.n	80089c8 <RadioIrqProcess+0x3e8>
        if( 1UL == RFW_Is_Init( ) )
 800893a:	f001 ff54 	bl	800a7e6 <RFW_Is_Init>
 800893e:	4603      	mov	r3, r0
 8008940:	2b01      	cmp	r3, #1
 8008942:	d143      	bne.n	80089cc <RadioIrqProcess+0x3ec>
            RFW_ReceivePayload( );
 8008944:	f001 ff85 	bl	800a852 <RFW_ReceivePayload>
        break;
 8008948:	e040      	b.n	80089cc <RadioIrqProcess+0x3ec>
        TimerStop( &RxTimeoutTimer );
 800894a:	4828      	ldr	r0, [pc, #160]	@ (80089ec <RadioIrqProcess+0x40c>)
 800894c:	f003 f900 	bl	800bb50 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008950:	4b23      	ldr	r3, [pc, #140]	@ (80089e0 <RadioIrqProcess+0x400>)
 8008952:	785b      	ldrb	r3, [r3, #1]
 8008954:	f083 0301 	eor.w	r3, r3, #1
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <RadioIrqProcess+0x384>
            SUBGRF_SetStandby( STDBY_RC );
 800895e:	2000      	movs	r0, #0
 8008960:	f000 feb6 	bl	80096d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008964:	4b22      	ldr	r3, [pc, #136]	@ (80089f0 <RadioIrqProcess+0x410>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d031      	beq.n	80089d0 <RadioIrqProcess+0x3f0>
 800896c:	4b20      	ldr	r3, [pc, #128]	@ (80089f0 <RadioIrqProcess+0x410>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d02c      	beq.n	80089d0 <RadioIrqProcess+0x3f0>
            RadioEvents->RxTimeout( );
 8008976:	4b1e      	ldr	r3, [pc, #120]	@ (80089f0 <RadioIrqProcess+0x410>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	4798      	blx	r3
        break;
 800897e:	e027      	b.n	80089d0 <RadioIrqProcess+0x3f0>
        if( SubgRf.RxContinuous == false )
 8008980:	4b17      	ldr	r3, [pc, #92]	@ (80089e0 <RadioIrqProcess+0x400>)
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	f083 0301 	eor.w	r3, r3, #1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <RadioIrqProcess+0x3b4>
            SUBGRF_SetStandby( STDBY_RC );
 800898e:	2000      	movs	r0, #0
 8008990:	f000 fe9e 	bl	80096d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008994:	4b16      	ldr	r3, [pc, #88]	@ (80089f0 <RadioIrqProcess+0x410>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01b      	beq.n	80089d4 <RadioIrqProcess+0x3f4>
 800899c:	4b14      	ldr	r3, [pc, #80]	@ (80089f0 <RadioIrqProcess+0x410>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d016      	beq.n	80089d4 <RadioIrqProcess+0x3f4>
            RadioEvents->RxError( );
 80089a6:	4b12      	ldr	r3, [pc, #72]	@ (80089f0 <RadioIrqProcess+0x410>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	4798      	blx	r3
        break;
 80089ae:	e011      	b.n	80089d4 <RadioIrqProcess+0x3f4>
        break;
 80089b0:	bf00      	nop
 80089b2:	e010      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089b4:	bf00      	nop
 80089b6:	e00e      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089b8:	bf00      	nop
 80089ba:	e00c      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089bc:	bf00      	nop
 80089be:	e00a      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089c0:	bf00      	nop
 80089c2:	e008      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089c4:	bf00      	nop
 80089c6:	e006      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089c8:	bf00      	nop
 80089ca:	e004      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089cc:	bf00      	nop
 80089ce:	e002      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089d0:	bf00      	nop
 80089d2:	e000      	b.n	80089d6 <RadioIrqProcess+0x3f6>
        break;
 80089d4:	bf00      	nop
    }
}
 80089d6:	bf00      	nop
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bdb0      	pop	{r4, r5, r7, pc}
 80089de:	bf00      	nop
 80089e0:	2000028c 	.word	0x2000028c
 80089e4:	080083d9 	.word	0x080083d9
 80089e8:	080083fd 	.word	0x080083fd
 80089ec:	20000300 	.word	0x20000300
 80089f0:	20000288 	.word	0x20000288

080089f4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80089f8:	4b09      	ldr	r3, [pc, #36]	@ (8008a20 <RadioTxPrbs+0x2c>)
 80089fa:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80089fe:	2101      	movs	r1, #1
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 fcf7 	bl	800a3f4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8008a06:	4b07      	ldr	r3, [pc, #28]	@ (8008a24 <RadioTxPrbs+0x30>)
 8008a08:	212d      	movs	r1, #45	@ 0x2d
 8008a0a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8008a0e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008a10:	f000 ff21 	bl	8009856 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008a14:	4804      	ldr	r0, [pc, #16]	@ (8008a28 <RadioTxPrbs+0x34>)
 8008a16:	f000 fe77 	bl	8009708 <SUBGRF_SetTx>
}
 8008a1a:	bf00      	nop
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	2000028c 	.word	0x2000028c
 8008a24:	080083d9 	.word	0x080083d9
 8008a28:	000fffff 	.word	0x000fffff

08008a2c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 fd02 	bl	800a444 <SUBGRF_SetRfTxPower>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008a44:	210e      	movs	r1, #14
 8008a46:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008a4a:	f001 fbc5 	bl	800a1d8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	2101      	movs	r1, #1
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 fcce 	bl	800a3f4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008a58:	f000 fef4 	bl	8009844 <SUBGRF_SetTxContinuousWave>
}
 8008a5c:	bf00      	nop
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b089      	sub	sp, #36	@ 0x24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	61bb      	str	r3, [r7, #24]
 8008a7e:	e011      	b.n	8008aa4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	4413      	add	r3, r2
 8008a86:	781a      	ldrb	r2, [r3, #0]
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	440b      	add	r3, r1
 8008a8e:	43d2      	mvns	r2, r2
 8008a90:	b2d2      	uxtb	r2, r2
 8008a92:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	61bb      	str	r3, [r7, #24]
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	dbe9      	blt.n	8008a80 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008aac:	2300      	movs	r3, #0
 8008aae:	61bb      	str	r3, [r7, #24]
 8008ab0:	e049      	b.n	8008b46 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	425a      	negs	r2, r3
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	f002 0207 	and.w	r2, r2, #7
 8008abe:	bf58      	it	pl
 8008ac0:	4253      	negpl	r3, r2
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f1c3 0307 	rsb	r3, r3, #7
 8008ac8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	da00      	bge.n	8008ad2 <payload_integration+0x6e>
 8008ad0:	3307      	adds	r3, #7
 8008ad2:	10db      	asrs	r3, r3, #3
 8008ad4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	425a      	negs	r2, r3
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	f002 0207 	and.w	r2, r2, #7
 8008ae4:	bf58      	it	pl
 8008ae6:	4253      	negpl	r3, r2
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f1c3 0307 	rsb	r3, r3, #7
 8008aee:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	3301      	adds	r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da00      	bge.n	8008afa <payload_integration+0x96>
 8008af8:	3307      	adds	r3, #7
 8008afa:	10db      	asrs	r3, r3, #3
 8008afc:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8008afe:	7dbb      	ldrb	r3, [r7, #22]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	4413      	add	r3, r2
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	fa42 f303 	asr.w	r3, r2, r3
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008b16:	7ffa      	ldrb	r2, [r7, #31]
 8008b18:	7cfb      	ldrb	r3, [r7, #19]
 8008b1a:	4053      	eors	r3, r2
 8008b1c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008b1e:	7d3b      	ldrb	r3, [r7, #20]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	b25a      	sxtb	r2, r3
 8008b28:	7ff9      	ldrb	r1, [r7, #31]
 8008b2a:	7d7b      	ldrb	r3, [r7, #21]
 8008b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b30:	b25b      	sxtb	r3, r3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	b259      	sxtb	r1, r3
 8008b36:	7d3b      	ldrb	r3, [r7, #20]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	b2ca      	uxtb	r2, r1
 8008b3e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	3301      	adds	r3, #1
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	dbb0      	blt.n	8008ab2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008b50:	7ffb      	ldrb	r3, [r7, #31]
 8008b52:	01db      	lsls	r3, r3, #7
 8008b54:	b25a      	sxtb	r2, r3
 8008b56:	7ffb      	ldrb	r3, [r7, #31]
 8008b58:	019b      	lsls	r3, r3, #6
 8008b5a:	b25b      	sxtb	r3, r3
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	b25b      	sxtb	r3, r3
 8008b60:	7ffa      	ldrb	r2, [r7, #31]
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	d101      	bne.n	8008b6a <payload_integration+0x106>
 8008b66:	2220      	movs	r2, #32
 8008b68:	e000      	b.n	8008b6c <payload_integration+0x108>
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	b259      	sxtb	r1, r3
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	b2ca      	uxtb	r2, r1
 8008b78:	701a      	strb	r2, [r3, #0]
}
 8008b7a:	bf00      	nop
 8008b7c:	3724      	adds	r7, #36	@ 0x24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr

08008b84 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08c      	sub	sp, #48	@ 0x30
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8008b98:	2300      	movs	r3, #0
 8008b9a:	623b      	str	r3, [r7, #32]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008ba0:	f001 fe1b 	bl	800a7da <RFW_DeInit>

    if( rxContinuous != 0 )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bf14      	ite	ne
 8008bb4:	2301      	movne	r3, #1
 8008bb6:	2300      	moveq	r3, #0
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	4ba4      	ldr	r3, [pc, #656]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008bbc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <RadioSetRxGenericConfig+0x48>
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	f000 80dc 	beq.w	8008d82 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8008bca:	e196      	b.n	8008efa <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <RadioSetRxGenericConfig+0x58>
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8008bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008be0:	e18c      	b.n	8008efc <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	7f9b      	ldrb	r3, [r3, #30]
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d902      	bls.n	8008bf0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8008bea:	f04f 33ff 	mov.w	r3, #4294967295
 8008bee:	e185      	b.n	8008efc <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6919      	ldr	r1, [r3, #16]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	7f9b      	ldrb	r3, [r3, #30]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f107 0320 	add.w	r3, r7, #32
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f002 fa52 	bl	800b0a8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bf14      	ite	ne
 8008c0c:	2301      	movne	r3, #1
 8008c0e:	2300      	moveq	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fe28 	bl	8009868 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008c18:	4b8c      	ldr	r3, [pc, #560]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	4a89      	ldr	r2, [pc, #548]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c26:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008c2e:	4b87      	ldr	r3, [pc, #540]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 fd01 	bl	800a640 <SUBGRF_GetFskBandwidthRegValue>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	461a      	mov	r2, r3
 8008c42:	4b82      	ldr	r3, [pc, #520]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008c48:	4b80      	ldr	r3, [pc, #512]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	4b7c      	ldr	r3, [pc, #496]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c5a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	7fda      	ldrb	r2, [r3, #31]
 8008c60:	4b7a      	ldr	r3, [pc, #488]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c62:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	7f9b      	ldrb	r3, [r3, #30]
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	4b77      	ldr	r3, [pc, #476]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c6e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008c76:	4b75      	ldr	r3, [pc, #468]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c78:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d105      	bne.n	8008c90 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b70      	ldr	r3, [pc, #448]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c8c:	759a      	strb	r2, [r3, #22]
 8008c8e:	e00b      	b.n	8008ca8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d103      	bne.n	8008ca2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008c9c:	22ff      	movs	r2, #255	@ 0xff
 8008c9e:	759a      	strb	r2, [r3, #22]
 8008ca0:	e002      	b.n	8008ca8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008ca4:	22ff      	movs	r2, #255	@ 0xff
 8008ca6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d004      	beq.n	8008cbc <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d12d      	bne.n	8008d18 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008cc2:	2bf1      	cmp	r3, #241	@ 0xf1
 8008cc4:	d00c      	beq.n	8008ce0 <RadioSetRxGenericConfig+0x15c>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008ccc:	2bf2      	cmp	r3, #242	@ 0xf2
 8008cce:	d007      	beq.n	8008ce0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d002      	beq.n	8008ce0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8008cda:	f04f 33ff 	mov.w	r3, #4294967295
 8008cde:	e10d      	b.n	8008efc <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008ce8:	4b59      	ldr	r3, [pc, #356]	@ (8008e50 <RadioSetRxGenericConfig+0x2cc>)
 8008cea:	6819      	ldr	r1, [r3, #0]
 8008cec:	f107 0314 	add.w	r3, r7, #20
 8008cf0:	4a58      	ldr	r2, [pc, #352]	@ (8008e54 <RadioSetRxGenericConfig+0x2d0>)
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 fd64 	bl	800a7c0 <RFW_Init>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <RadioSetRxGenericConfig+0x180>
                return -1;
 8008cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008d02:	e0fb      	b.n	8008efc <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008d04:	4b51      	ldr	r3, [pc, #324]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008d0a:	4b50      	ldr	r3, [pc, #320]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008d10:	4b4e      	ldr	r3, [pc, #312]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	755a      	strb	r2, [r3, #21]
        {
 8008d16:	e00e      	b.n	8008d36 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8008d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008d20:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8008d28:	4b48      	ldr	r3, [pc, #288]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008d2a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008d32:	4b46      	ldr	r3, [pc, #280]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008d34:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008d36:	f7ff fa42 	bl	80081be <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f7fe fbd8 	bl	80074f0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d40:	4845      	ldr	r0, [pc, #276]	@ (8008e58 <RadioSetRxGenericConfig+0x2d4>)
 8008d42:	f001 f82f 	bl	8009da4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d46:	4845      	ldr	r0, [pc, #276]	@ (8008e5c <RadioSetRxGenericConfig+0x2d8>)
 8008d48:	f001 f8fe 	bl	8009f48 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008d4c:	f107 0320 	add.w	r3, r7, #32
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fbc2 	bl	80094da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	8b9b      	ldrh	r3, [r3, #28]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 fc0c 	bl	8009578 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	8b1b      	ldrh	r3, [r3, #24]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fbe7 	bl	8009538 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008d70:	fb03 f202 	mul.w	r2, r3, r2
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7c:	4a33      	ldr	r2, [pc, #204]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008d7e:	6093      	str	r3, [r2, #8]
        break;
 8008d80:	e0bb      	b.n	8008efa <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d102      	bne.n	8008d90 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8e:	e0b5      	b.n	8008efc <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d105      	bne.n	8008da6 <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008da4:	e002      	b.n	8008dac <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 8008da6:	23ff      	movs	r3, #255	@ 0xff
 8008da8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fd54 	bl	8009868 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fd5e 	bl	8009886 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008dca:	4b20      	ldr	r3, [pc, #128]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8008de4:	4b19      	ldr	r3, [pc, #100]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008de6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8008df0:	4b16      	ldr	r3, [pc, #88]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008df2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d010      	beq.n	8008e22 <RadioSetRxGenericConfig+0x29e>
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	dc2d      	bgt.n	8008e60 <RadioSetRxGenericConfig+0x2dc>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <RadioSetRxGenericConfig+0x28a>
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d005      	beq.n	8008e18 <RadioSetRxGenericConfig+0x294>
            break;
 8008e0c:	e028      	b.n	8008e60 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008e16:	e024      	b.n	8008e62 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e18:	4b0c      	ldr	r3, [pc, #48]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008e20:	e01f      	b.n	8008e62 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e28:	2b0b      	cmp	r3, #11
 8008e2a:	d004      	beq.n	8008e36 <RadioSetRxGenericConfig+0x2b2>
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e32:	2b0c      	cmp	r3, #12
 8008e34:	d104      	bne.n	8008e40 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e36:	4b05      	ldr	r3, [pc, #20]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008e3e:	e010      	b.n	8008e62 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e40:	4b02      	ldr	r3, [pc, #8]	@ (8008e4c <RadioSetRxGenericConfig+0x2c8>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008e48:	e00b      	b.n	8008e62 <RadioSetRxGenericConfig+0x2de>
 8008e4a:	bf00      	nop
 8008e4c:	2000028c 	.word	0x2000028c
 8008e50:	20000288 	.word	0x20000288
 8008e54:	20000300 	.word	0x20000300
 8008e58:	200002c4 	.word	0x200002c4
 8008e5c:	2000029a 	.word	0x2000029a
            break;
 8008e60:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008e62:	4b28      	ldr	r3, [pc, #160]	@ (8008f04 <RadioSetRxGenericConfig+0x380>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8008e6c:	4b25      	ldr	r3, [pc, #148]	@ (8008f04 <RadioSetRxGenericConfig+0x380>)
 8008e6e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8008e76:	4b23      	ldr	r3, [pc, #140]	@ (8008f04 <RadioSetRxGenericConfig+0x380>)
 8008e78:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008e7a:	4a22      	ldr	r2, [pc, #136]	@ (8008f04 <RadioSetRxGenericConfig+0x380>)
 8008e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e80:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8008e88:	4b1e      	ldr	r3, [pc, #120]	@ (8008f04 <RadioSetRxGenericConfig+0x380>)
 8008e8a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8008e94:	4b1b      	ldr	r3, [pc, #108]	@ (8008f04 <RadioSetRxGenericConfig+0x380>)
 8008e96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8008e9a:	f7ff f990 	bl	80081be <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	f7fe fb26 	bl	80074f0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008ea4:	4818      	ldr	r0, [pc, #96]	@ (8008f08 <RadioSetRxGenericConfig+0x384>)
 8008ea6:	f000 ff7d 	bl	8009da4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008eaa:	4818      	ldr	r0, [pc, #96]	@ (8008f0c <RadioSetRxGenericConfig+0x388>)
 8008eac:	f001 f84c 	bl	8009f48 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008eb0:	4b14      	ldr	r3, [pc, #80]	@ (8008f04 <RadioSetRxGenericConfig+0x380>)
 8008eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d10d      	bne.n	8008ed6 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008eba:	f240 7036 	movw	r0, #1846	@ 0x736
 8008ebe:	f001 f9ad 	bl	800a21c <SUBGRF_ReadRegister>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	f023 0304 	bic.w	r3, r3, #4
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	4619      	mov	r1, r3
 8008ecc:	f240 7036 	movw	r0, #1846	@ 0x736
 8008ed0:	f001 f982 	bl	800a1d8 <SUBGRF_WriteRegister>
 8008ed4:	e00c      	b.n	8008ef0 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008ed6:	f240 7036 	movw	r0, #1846	@ 0x736
 8008eda:	f001 f99f 	bl	800a21c <SUBGRF_ReadRegister>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f043 0304 	orr.w	r3, r3, #4
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	f240 7036 	movw	r0, #1846	@ 0x736
 8008eec:	f001 f974 	bl	800a1d8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008ef0:	4b04      	ldr	r3, [pc, #16]	@ (8008f04 <RadioSetRxGenericConfig+0x380>)
 8008ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ef6:	609a      	str	r2, [r3, #8]
        break;
 8008ef8:	bf00      	nop
    }
    return status;
 8008efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3730      	adds	r7, #48	@ 0x30
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	2000028c 	.word	0x2000028c
 8008f08:	200002c4 	.word	0x200002c4
 8008f0c:	2000029a 	.word	0x2000029a

08008f10 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08e      	sub	sp, #56	@ 0x38
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607b      	str	r3, [r7, #4]
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008f22:	2300      	movs	r3, #0
 8008f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f26:	2300      	movs	r3, #0
 8008f28:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008f2a:	f001 fc56 	bl	800a7da <RFW_DeInit>
    switch( modem )
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	f200 8204 	bhi.w	800933e <RadioSetTxGenericConfig+0x42e>
 8008f36:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <RadioSetTxGenericConfig+0x2c>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	080090c1 	.word	0x080090c1
 8008f40:	08009209 	.word	0x08009209
 8008f44:	08009301 	.word	0x08009301
 8008f48:	08008f4d 	.word	0x08008f4d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	7c9b      	ldrb	r3, [r3, #18]
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d902      	bls.n	8008f5a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008f54:	f04f 33ff 	mov.w	r3, #4294967295
 8008f58:	e206      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	6899      	ldr	r1, [r3, #8]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	7c9b      	ldrb	r3, [r3, #18]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f002 f89d 	bl	800b0a8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d102      	bne.n	8008f7c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008f76:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7a:	e1f5      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d813      	bhi.n	8008fb0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008f8e:	4b99      	ldr	r3, [pc, #612]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008f90:	2203      	movs	r2, #3
 8008f92:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008f94:	4b97      	ldr	r3, [pc, #604]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008f96:	2203      	movs	r2, #3
 8008f98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a94      	ldr	r2, [pc, #592]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008fa2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	7cda      	ldrb	r2, [r3, #19]
 8008fa8:	4b92      	ldr	r3, [pc, #584]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008faa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fae:	e017      	b.n	8008fe0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008fb6:	4b8f      	ldr	r3, [pc, #572]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008fbc:	4b8d      	ldr	r3, [pc, #564]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a8a      	ldr	r2, [pc, #552]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008fca:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	7cda      	ldrb	r2, [r3, #19]
 8008fd0:	4b88      	ldr	r3, [pc, #544]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	089b      	lsrs	r3, r3, #2
 8008fdc:	4a85      	ldr	r2, [pc, #532]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008fde:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	4b82      	ldr	r3, [pc, #520]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008fec:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008fee:	4b81      	ldr	r3, [pc, #516]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	7c9b      	ldrb	r3, [r3, #18]
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	4b7d      	ldr	r3, [pc, #500]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8008ffe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009000:	4b7c      	ldr	r3, [pc, #496]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009002:	2200      	movs	r2, #0
 8009004:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	7d9b      	ldrb	r3, [r3, #22]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d003      	beq.n	8009016 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	7d1b      	ldrb	r3, [r3, #20]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d12b      	bne.n	800906e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	7d5b      	ldrb	r3, [r3, #21]
 800901a:	2bf1      	cmp	r3, #241	@ 0xf1
 800901c:	d00a      	beq.n	8009034 <RadioSetTxGenericConfig+0x124>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	7d5b      	ldrb	r3, [r3, #21]
 8009022:	2bf2      	cmp	r3, #242	@ 0xf2
 8009024:	d006      	beq.n	8009034 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	7d5b      	ldrb	r3, [r3, #21]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d002      	beq.n	8009034 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800902e:	f04f 33ff 	mov.w	r3, #4294967295
 8009032:	e199      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009038:	2301      	movs	r3, #1
 800903a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800903e:	4b6e      	ldr	r3, [pc, #440]	@ (80091f8 <RadioSetTxGenericConfig+0x2e8>)
 8009040:	6819      	ldr	r1, [r3, #0]
 8009042:	f107 0320 	add.w	r3, r7, #32
 8009046:	4a6d      	ldr	r2, [pc, #436]	@ (80091fc <RadioSetTxGenericConfig+0x2ec>)
 8009048:	4618      	mov	r0, r3
 800904a:	f001 fbb9 	bl	800a7c0 <RFW_Init>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009054:	f04f 33ff 	mov.w	r3, #4294967295
 8009058:	e186      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800905a:	4b66      	ldr	r3, [pc, #408]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 800905c:	2200      	movs	r2, #0
 800905e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009060:	4b64      	ldr	r3, [pc, #400]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009062:	2201      	movs	r2, #1
 8009064:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009066:	4b63      	ldr	r3, [pc, #396]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009068:	2200      	movs	r2, #0
 800906a:	755a      	strb	r2, [r3, #21]
        {
 800906c:	e00b      	b.n	8009086 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	7d5a      	ldrb	r2, [r3, #21]
 8009072:	4b60      	ldr	r3, [pc, #384]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009074:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	7d9a      	ldrb	r2, [r3, #22]
 800907a:	4b5e      	ldr	r3, [pc, #376]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 800907c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	7d1a      	ldrb	r2, [r3, #20]
 8009082:	4b5c      	ldr	r3, [pc, #368]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009084:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009086:	f7ff f89a 	bl	80081be <RadioStandby>
        RadioSetModem( radio_modem );
 800908a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fa2e 	bl	80074f0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009094:	485a      	ldr	r0, [pc, #360]	@ (8009200 <RadioSetTxGenericConfig+0x2f0>)
 8009096:	f000 fe85 	bl	8009da4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800909a:	485a      	ldr	r0, [pc, #360]	@ (8009204 <RadioSetTxGenericConfig+0x2f4>)
 800909c:	f000 ff54 	bl	8009f48 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80090a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 fa18 	bl	80094da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	8a1b      	ldrh	r3, [r3, #16]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fa62 	bl	8009578 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	899b      	ldrh	r3, [r3, #12]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fa3d 	bl	8009538 <SUBGRF_SetCrcPolynomial>
        break;
 80090be:	e13f      	b.n	8009340 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80090c8:	f04f 33ff 	mov.w	r3, #4294967295
 80090cc:	e14c      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	7c9b      	ldrb	r3, [r3, #18]
 80090d2:	2b08      	cmp	r3, #8
 80090d4:	d902      	bls.n	80090dc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80090d6:	f04f 33ff 	mov.w	r3, #4294967295
 80090da:	e145      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	6899      	ldr	r1, [r3, #8]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	7c9b      	ldrb	r3, [r3, #18]
 80090e4:	461a      	mov	r2, r3
 80090e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 ffdc 	bl	800b0a8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80090f0:	4b40      	ldr	r3, [pc, #256]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a3d      	ldr	r2, [pc, #244]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 80090fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	7cda      	ldrb	r2, [r3, #19]
 8009104:	4b3b      	ldr	r3, [pc, #236]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	4a39      	ldr	r2, [pc, #228]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009110:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009112:	4b38      	ldr	r3, [pc, #224]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009114:	2200      	movs	r2, #0
 8009116:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	b29b      	uxth	r3, r3
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	b29a      	uxth	r2, r3
 8009122:	4b34      	ldr	r3, [pc, #208]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009124:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009126:	4b33      	ldr	r3, [pc, #204]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009128:	2204      	movs	r2, #4
 800912a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	7c9b      	ldrb	r3, [r3, #18]
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	b2da      	uxtb	r2, r3
 8009134:	4b2f      	ldr	r3, [pc, #188]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009136:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009138:	4b2e      	ldr	r3, [pc, #184]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 800913a:	2200      	movs	r2, #0
 800913c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	7d9b      	ldrb	r3, [r3, #22]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d003      	beq.n	800914e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	7d1b      	ldrb	r3, [r3, #20]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d12a      	bne.n	80091a4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	7d5b      	ldrb	r3, [r3, #21]
 8009152:	2bf1      	cmp	r3, #241	@ 0xf1
 8009154:	d00a      	beq.n	800916c <RadioSetTxGenericConfig+0x25c>
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	7d5b      	ldrb	r3, [r3, #21]
 800915a:	2bf2      	cmp	r3, #242	@ 0xf2
 800915c:	d006      	beq.n	800916c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	7d5b      	ldrb	r3, [r3, #21]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d002      	beq.n	800916c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009166:	f04f 33ff 	mov.w	r3, #4294967295
 800916a:	e0fd      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800916c:	2301      	movs	r3, #1
 800916e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009174:	4b20      	ldr	r3, [pc, #128]	@ (80091f8 <RadioSetTxGenericConfig+0x2e8>)
 8009176:	6819      	ldr	r1, [r3, #0]
 8009178:	f107 0314 	add.w	r3, r7, #20
 800917c:	4a1f      	ldr	r2, [pc, #124]	@ (80091fc <RadioSetTxGenericConfig+0x2ec>)
 800917e:	4618      	mov	r0, r3
 8009180:	f001 fb1e 	bl	800a7c0 <RFW_Init>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800918a:	f04f 33ff 	mov.w	r3, #4294967295
 800918e:	e0eb      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009190:	4b18      	ldr	r3, [pc, #96]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009192:	2200      	movs	r2, #0
 8009194:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009196:	4b17      	ldr	r3, [pc, #92]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 8009198:	2201      	movs	r2, #1
 800919a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800919c:	4b15      	ldr	r3, [pc, #84]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 800919e:	2200      	movs	r2, #0
 80091a0:	755a      	strb	r2, [r3, #21]
        {
 80091a2:	e00b      	b.n	80091bc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	7d5a      	ldrb	r2, [r3, #21]
 80091a8:	4b12      	ldr	r3, [pc, #72]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 80091aa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	7d9a      	ldrb	r2, [r3, #22]
 80091b0:	4b10      	ldr	r3, [pc, #64]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 80091b2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	7d1a      	ldrb	r2, [r3, #20]
 80091b8:	4b0e      	ldr	r3, [pc, #56]	@ (80091f4 <RadioSetTxGenericConfig+0x2e4>)
 80091ba:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80091bc:	f7fe ffff 	bl	80081be <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80091c0:	2000      	movs	r0, #0
 80091c2:	f7fe f995 	bl	80074f0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80091c6:	480e      	ldr	r0, [pc, #56]	@ (8009200 <RadioSetTxGenericConfig+0x2f0>)
 80091c8:	f000 fdec 	bl	8009da4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80091cc:	480d      	ldr	r0, [pc, #52]	@ (8009204 <RadioSetTxGenericConfig+0x2f4>)
 80091ce:	f000 febb 	bl	8009f48 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80091d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 f97f 	bl	80094da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	8a1b      	ldrh	r3, [r3, #16]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 f9c9 	bl	8009578 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	899b      	ldrh	r3, [r3, #12]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 f9a4 	bl	8009538 <SUBGRF_SetCrcPolynomial>
        break;
 80091f0:	e0a6      	b.n	8009340 <RadioSetTxGenericConfig+0x430>
 80091f2:	bf00      	nop
 80091f4:	2000028c 	.word	0x2000028c
 80091f8:	20000288 	.word	0x20000288
 80091fc:	200002e8 	.word	0x200002e8
 8009200:	200002c4 	.word	0x200002c4
 8009204:	2000029a 	.word	0x2000029a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009208:	4b59      	ldr	r3, [pc, #356]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	4b56      	ldr	r3, [pc, #344]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	785a      	ldrb	r2, [r3, #1]
 800921e:	4b54      	ldr	r3, [pc, #336]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	789a      	ldrb	r2, [r3, #2]
 8009228:	4b51      	ldr	r3, [pc, #324]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 800922a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	78db      	ldrb	r3, [r3, #3]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d010      	beq.n	8009258 <RadioSetTxGenericConfig+0x348>
 8009236:	2b02      	cmp	r3, #2
 8009238:	dc20      	bgt.n	800927c <RadioSetTxGenericConfig+0x36c>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <RadioSetTxGenericConfig+0x334>
 800923e:	2b01      	cmp	r3, #1
 8009240:	d005      	beq.n	800924e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009242:	e01b      	b.n	800927c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009244:	4b4a      	ldr	r3, [pc, #296]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800924c:	e017      	b.n	800927e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800924e:	4b48      	ldr	r3, [pc, #288]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009256:	e012      	b.n	800927e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b0b      	cmp	r3, #11
 800925e:	d003      	beq.n	8009268 <RadioSetTxGenericConfig+0x358>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b0c      	cmp	r3, #12
 8009266:	d104      	bne.n	8009272 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009268:	4b41      	ldr	r3, [pc, #260]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009270:	e005      	b.n	800927e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009272:	4b3f      	ldr	r3, [pc, #252]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800927a:	e000      	b.n	800927e <RadioSetTxGenericConfig+0x36e>
            break;
 800927c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800927e:	4b3c      	ldr	r3, [pc, #240]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009280:	2201      	movs	r2, #1
 8009282:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	889a      	ldrh	r2, [r3, #4]
 8009288:	4b39      	ldr	r3, [pc, #228]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 800928a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	799a      	ldrb	r2, [r3, #6]
 8009290:	4b37      	ldr	r3, [pc, #220]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009292:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	79da      	ldrb	r2, [r3, #7]
 8009298:	4b35      	ldr	r3, [pc, #212]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 800929a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	7a1a      	ldrb	r2, [r3, #8]
 80092a2:	4b33      	ldr	r3, [pc, #204]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 80092a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80092a8:	f7fe ff89 	bl	80081be <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80092ac:	2001      	movs	r0, #1
 80092ae:	f7fe f91f 	bl	80074f0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80092b2:	4830      	ldr	r0, [pc, #192]	@ (8009374 <RadioSetTxGenericConfig+0x464>)
 80092b4:	f000 fd76 	bl	8009da4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80092b8:	482f      	ldr	r0, [pc, #188]	@ (8009378 <RadioSetTxGenericConfig+0x468>)
 80092ba:	f000 fe45 	bl	8009f48 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80092be:	4b2c      	ldr	r3, [pc, #176]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 80092c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092c4:	2b06      	cmp	r3, #6
 80092c6:	d10d      	bne.n	80092e4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80092c8:	f640 0089 	movw	r0, #2185	@ 0x889
 80092cc:	f000 ffa6 	bl	800a21c <SUBGRF_ReadRegister>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f023 0304 	bic.w	r3, r3, #4
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	4619      	mov	r1, r3
 80092da:	f640 0089 	movw	r0, #2185	@ 0x889
 80092de:	f000 ff7b 	bl	800a1d8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80092e2:	e02d      	b.n	8009340 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80092e4:	f640 0089 	movw	r0, #2185	@ 0x889
 80092e8:	f000 ff98 	bl	800a21c <SUBGRF_ReadRegister>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f043 0304 	orr.w	r3, r3, #4
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	4619      	mov	r1, r3
 80092f6:	f640 0089 	movw	r0, #2185	@ 0x889
 80092fa:	f000 ff6d 	bl	800a1d8 <SUBGRF_WriteRegister>
        break;
 80092fe:	e01f      	b.n	8009340 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <RadioSetTxGenericConfig+0x402>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009310:	d902      	bls.n	8009318 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009312:	f04f 33ff 	mov.w	r3, #4294967295
 8009316:	e027      	b.n	8009368 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009318:	2003      	movs	r0, #3
 800931a:	f7fe f8e9 	bl	80074f0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800931e:	4b14      	ldr	r3, [pc, #80]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009320:	2202      	movs	r2, #2
 8009322:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a11      	ldr	r2, [pc, #68]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 800932c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800932e:	4b10      	ldr	r3, [pc, #64]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009330:	2216      	movs	r2, #22
 8009332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009336:	480f      	ldr	r0, [pc, #60]	@ (8009374 <RadioSetTxGenericConfig+0x464>)
 8009338:	f000 fd34 	bl	8009da4 <SUBGRF_SetModulationParams>
        break;
 800933c:	e000      	b.n	8009340 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800933e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009344:	4618      	mov	r0, r3
 8009346:	f001 f87d 	bl	800a444 <SUBGRF_SetRfTxPower>
 800934a:	4603      	mov	r3, r0
 800934c:	461a      	mov	r2, r3
 800934e:	4b08      	ldr	r3, [pc, #32]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009350:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009354:	4b06      	ldr	r3, [pc, #24]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009356:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800935a:	4618      	mov	r0, r3
 800935c:	f001 fa51 	bl	800a802 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009360:	4a03      	ldr	r2, [pc, #12]	@ (8009370 <RadioSetTxGenericConfig+0x460>)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6053      	str	r3, [r2, #4]
    return 0;
 8009366:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009368:	4618      	mov	r0, r3
 800936a:	3738      	adds	r7, #56	@ 0x38
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	2000028c 	.word	0x2000028c
 8009374:	200002c4 	.word	0x200002c4
 8009378:	2000029a 	.word	0x2000029a

0800937c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009384:	2301      	movs	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	bc80      	pop	{r7}
 8009392:	4770      	bx	lr

08009394 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800939e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr
	...

080093ac <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80093ba:	4a1d      	ldr	r2, [pc, #116]	@ (8009430 <SUBGRF_Init+0x84>)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80093c0:	f7f7 fad6 	bl	8000970 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80093c4:	2002      	movs	r0, #2
 80093c6:	f001 f919 	bl	800a5fc <Radio_SMPS_Set>

    ImageCalibrated = false;
 80093ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009434 <SUBGRF_Init+0x88>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80093d0:	2000      	movs	r0, #0
 80093d2:	f000 f97d 	bl	80096d0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80093d6:	f001 fda5 	bl	800af24 <RBI_IsTCXO>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d10e      	bne.n	80093fe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80093e0:	2140      	movs	r1, #64	@ 0x40
 80093e2:	2001      	movs	r0, #1
 80093e4:	f000 fb82 	bl	8009aec <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80093e8:	2100      	movs	r1, #0
 80093ea:	f640 1011 	movw	r0, #2321	@ 0x911
 80093ee:	f000 fef3 	bl	800a1d8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80093f2:	237f      	movs	r3, #127	@ 0x7f
 80093f4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80093f6:	7b38      	ldrb	r0, [r7, #12]
 80093f8:	f000 fa8b 	bl	8009912 <SUBGRF_Calibrate>
 80093fc:	e009      	b.n	8009412 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80093fe:	2120      	movs	r1, #32
 8009400:	f640 1011 	movw	r0, #2321	@ 0x911
 8009404:	f000 fee8 	bl	800a1d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009408:	2120      	movs	r1, #32
 800940a:	f640 1012 	movw	r0, #2322	@ 0x912
 800940e:	f000 fee3 	bl	800a1d8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009412:	210e      	movs	r1, #14
 8009414:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009418:	f000 fede 	bl	800a1d8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800941c:	f001 fd66 	bl	800aeec <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009420:	4b05      	ldr	r3, [pc, #20]	@ (8009438 <SUBGRF_Init+0x8c>)
 8009422:	2201      	movs	r2, #1
 8009424:	701a      	strb	r2, [r3, #0]
}
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000324 	.word	0x20000324
 8009434:	20000320 	.word	0x20000320
 8009438:	20000318 	.word	0x20000318

0800943c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009440:	4b02      	ldr	r3, [pc, #8]	@ (800944c <SUBGRF_GetOperatingMode+0x10>)
 8009442:	781b      	ldrb	r3, [r3, #0]
}
 8009444:	4618      	mov	r0, r3
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr
 800944c:	20000318 	.word	0x20000318

08009450 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	461a      	mov	r2, r3
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	2000      	movs	r0, #0
 8009464:	f000 ff3e 	bl	800a2e4 <SUBGRF_WriteBuffer>
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009482:	f107 0317 	add.w	r3, r7, #23
 8009486:	4619      	mov	r1, r3
 8009488:	68b8      	ldr	r0, [r7, #8]
 800948a:	f000 fe27 	bl	800a0dc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	79fa      	ldrb	r2, [r7, #7]
 8009494:	429a      	cmp	r2, r3
 8009496:	d201      	bcs.n	800949c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009498:	2301      	movs	r3, #1
 800949a:	e007      	b.n	80094ac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800949c:	7df8      	ldrb	r0, [r7, #23]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	68f9      	ldr	r1, [r7, #12]
 80094a6:	f000 ff3f 	bl	800a328 <SUBGRF_ReadBuffer>

    return 0;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	460b      	mov	r3, r1
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80094c2:	7afb      	ldrb	r3, [r7, #11]
 80094c4:	4619      	mov	r1, r3
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff ffc2 	bl	8009450 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f91b 	bl	8009708 <SUBGRF_SetTx>
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80094e2:	2208      	movs	r2, #8
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80094ea:	f000 feb7 	bl	800a25c <SUBGRF_WriteRegisters>
    return 0;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	0a1b      	lsrs	r3, r3, #8
 8009506:	b29b      	uxth	r3, r3
 8009508:	b2db      	uxtb	r3, r3
 800950a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800950c:	88fb      	ldrh	r3, [r7, #6]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009512:	f000 fb6f 	bl	8009bf4 <SUBGRF_GetPacketType>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d108      	bne.n	800952e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	2202      	movs	r2, #2
 8009522:	4619      	mov	r1, r3
 8009524:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8009528:	f000 fe98 	bl	800a25c <SUBGRF_WriteRegisters>
            break;
 800952c:	e000      	b.n	8009530 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800952e:	bf00      	nop
    }
}
 8009530:	bf00      	nop
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	0a1b      	lsrs	r3, r3, #8
 8009546:	b29b      	uxth	r3, r3
 8009548:	b2db      	uxtb	r3, r3
 800954a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800954c:	88fb      	ldrh	r3, [r7, #6]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009552:	f000 fb4f 	bl	8009bf4 <SUBGRF_GetPacketType>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d108      	bne.n	800956e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	2202      	movs	r2, #2
 8009562:	4619      	mov	r1, r3
 8009564:	f240 60be 	movw	r0, #1726	@ 0x6be
 8009568:	f000 fe78 	bl	800a25c <SUBGRF_WriteRegisters>
            break;
 800956c:	e000      	b.n	8009570 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800956e:	bf00      	nop
    }
}
 8009570:	bf00      	nop
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009586:	f000 fb35 	bl	8009bf4 <SUBGRF_GetPacketType>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d121      	bne.n	80095d4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009590:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009594:	f000 fe42 	bl	800a21c <SUBGRF_ReadRegister>
 8009598:	4603      	mov	r3, r0
 800959a:	f023 0301 	bic.w	r3, r3, #1
 800959e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80095a0:	88fb      	ldrh	r3, [r7, #6]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	b25b      	sxtb	r3, r3
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	b25a      	sxtb	r2, r3
 80095ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	b25b      	sxtb	r3, r3
 80095b6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4619      	mov	r1, r3
 80095bc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80095c0:	f000 fe0a 	bl	800a1d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	4619      	mov	r1, r3
 80095ca:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80095ce:	f000 fe03 	bl	800a1d8 <SUBGRF_WriteRegister>
            break;
 80095d2:	e000      	b.n	80095d6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80095d4:	bf00      	nop
    }
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80095f0:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80095f4:	f000 fe12 	bl	800a21c <SUBGRF_ReadRegister>
 80095f8:	4603      	mov	r3, r0
 80095fa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	b2db      	uxtb	r3, r3
 8009604:	4619      	mov	r1, r3
 8009606:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800960a:	f000 fde5 	bl	800a1d8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800960e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009612:	f000 fe03 	bl	800a21c <SUBGRF_ReadRegister>
 8009616:	4603      	mov	r3, r0
 8009618:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800961a:	79bb      	ldrb	r3, [r7, #6]
 800961c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009620:	b2db      	uxtb	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009628:	f000 fdd6 	bl	800a1d8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800962c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009630:	f000 f88a 	bl	8009748 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009634:	463b      	mov	r3, r7
 8009636:	2204      	movs	r2, #4
 8009638:	4619      	mov	r1, r3
 800963a:	f640 0019 	movw	r0, #2073	@ 0x819
 800963e:	f000 fe2f 	bl	800a2a0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009642:	2000      	movs	r0, #0
 8009644:	f000 f844 	bl	80096d0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	4619      	mov	r1, r3
 800964c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009650:	f000 fdc2 	bl	800a1d8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009654:	79bb      	ldrb	r3, [r7, #6]
 8009656:	4619      	mov	r1, r3
 8009658:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800965c:	f000 fdbc 	bl	800a1d8 <SUBGRF_WriteRegister>

    return number;
 8009660:	683b      	ldr	r3, [r7, #0]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009674:	2000      	movs	r0, #0
 8009676:	f001 fc40 	bl	800aefa <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800967a:	2002      	movs	r0, #2
 800967c:	f000 ffbe 	bl	800a5fc <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009680:	793b      	ldrb	r3, [r7, #4]
 8009682:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009686:	b2db      	uxtb	r3, r3
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800968c:	793b      	ldrb	r3, [r7, #4]
 800968e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009692:	b2db      	uxtb	r3, r3
 8009694:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009696:	b25b      	sxtb	r3, r3
 8009698:	4313      	orrs	r3, r2
 800969a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800969c:	793b      	ldrb	r3, [r7, #4]
 800969e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80096a6:	4313      	orrs	r3, r2
 80096a8:	b25b      	sxtb	r3, r3
 80096aa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80096ac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80096ae:	f107 030f 	add.w	r3, r7, #15
 80096b2:	2201      	movs	r2, #1
 80096b4:	4619      	mov	r1, r3
 80096b6:	2084      	movs	r0, #132	@ 0x84
 80096b8:	f000 fe58 	bl	800a36c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80096bc:	4b03      	ldr	r3, [pc, #12]	@ (80096cc <SUBGRF_SetSleep+0x60>)
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
}
 80096c2:	bf00      	nop
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000318 	.word	0x20000318

080096d0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80096da:	1dfb      	adds	r3, r7, #7
 80096dc:	2201      	movs	r2, #1
 80096de:	4619      	mov	r1, r3
 80096e0:	2080      	movs	r0, #128	@ 0x80
 80096e2:	f000 fe43 	bl	800a36c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d103      	bne.n	80096f4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80096ec:	4b05      	ldr	r3, [pc, #20]	@ (8009704 <SUBGRF_SetStandby+0x34>)
 80096ee:	2201      	movs	r2, #1
 80096f0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80096f2:	e002      	b.n	80096fa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80096f4:	4b03      	ldr	r3, [pc, #12]	@ (8009704 <SUBGRF_SetStandby+0x34>)
 80096f6:	2202      	movs	r2, #2
 80096f8:	701a      	strb	r2, [r3, #0]
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20000318 	.word	0x20000318

08009708 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009710:	4b0c      	ldr	r3, [pc, #48]	@ (8009744 <SUBGRF_SetTx+0x3c>)
 8009712:	2204      	movs	r2, #4
 8009714:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	0c1b      	lsrs	r3, r3, #16
 800971a:	b2db      	uxtb	r3, r3
 800971c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	0a1b      	lsrs	r3, r3, #8
 8009722:	b2db      	uxtb	r3, r3
 8009724:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800972c:	f107 030c 	add.w	r3, r7, #12
 8009730:	2203      	movs	r2, #3
 8009732:	4619      	mov	r1, r3
 8009734:	2083      	movs	r0, #131	@ 0x83
 8009736:	f000 fe19 	bl	800a36c <SUBGRF_WriteCommand>
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000318 	.word	0x20000318

08009748 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009750:	4b0c      	ldr	r3, [pc, #48]	@ (8009784 <SUBGRF_SetRx+0x3c>)
 8009752:	2205      	movs	r2, #5
 8009754:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	b2db      	uxtb	r3, r3
 800975c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	0a1b      	lsrs	r3, r3, #8
 8009762:	b2db      	uxtb	r3, r3
 8009764:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	b2db      	uxtb	r3, r3
 800976a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800976c:	f107 030c 	add.w	r3, r7, #12
 8009770:	2203      	movs	r2, #3
 8009772:	4619      	mov	r1, r3
 8009774:	2082      	movs	r0, #130	@ 0x82
 8009776:	f000 fdf9 	bl	800a36c <SUBGRF_WriteCommand>
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000318 	.word	0x20000318

08009788 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009790:	4b0e      	ldr	r3, [pc, #56]	@ (80097cc <SUBGRF_SetRxBoosted+0x44>)
 8009792:	2205      	movs	r2, #5
 8009794:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009796:	2197      	movs	r1, #151	@ 0x97
 8009798:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800979c:	f000 fd1c 	bl	800a1d8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	0c1b      	lsrs	r3, r3, #16
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	0a1b      	lsrs	r3, r3, #8
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80097b6:	f107 030c 	add.w	r3, r7, #12
 80097ba:	2203      	movs	r2, #3
 80097bc:	4619      	mov	r1, r3
 80097be:	2082      	movs	r0, #130	@ 0x82
 80097c0:	f000 fdd4 	bl	800a36c <SUBGRF_WriteCommand>
}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000318 	.word	0x20000318

080097d0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	0c1b      	lsrs	r3, r3, #16
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	0a1b      	lsrs	r3, r3, #8
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	0c1b      	lsrs	r3, r3, #16
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	0a1b      	lsrs	r3, r3, #8
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009806:	f107 0308 	add.w	r3, r7, #8
 800980a:	2206      	movs	r2, #6
 800980c:	4619      	mov	r1, r3
 800980e:	2094      	movs	r0, #148	@ 0x94
 8009810:	f000 fdac 	bl	800a36c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009814:	4b03      	ldr	r3, [pc, #12]	@ (8009824 <SUBGRF_SetRxDutyCycle+0x54>)
 8009816:	2206      	movs	r2, #6
 8009818:	701a      	strb	r2, [r3, #0]
}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000318 	.word	0x20000318

08009828 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800982c:	2200      	movs	r2, #0
 800982e:	2100      	movs	r1, #0
 8009830:	20c5      	movs	r0, #197	@ 0xc5
 8009832:	f000 fd9b 	bl	800a36c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009836:	4b02      	ldr	r3, [pc, #8]	@ (8009840 <SUBGRF_SetCad+0x18>)
 8009838:	2207      	movs	r2, #7
 800983a:	701a      	strb	r2, [r3, #0]
}
 800983c:	bf00      	nop
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20000318 	.word	0x20000318

08009844 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009848:	2200      	movs	r2, #0
 800984a:	2100      	movs	r1, #0
 800984c:	20d1      	movs	r0, #209	@ 0xd1
 800984e:	f000 fd8d 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009852:	bf00      	nop
 8009854:	bd80      	pop	{r7, pc}

08009856 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009856:	b580      	push	{r7, lr}
 8009858:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800985a:	2200      	movs	r2, #0
 800985c:	2100      	movs	r1, #0
 800985e:	20d2      	movs	r0, #210	@ 0xd2
 8009860:	f000 fd84 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009864:	bf00      	nop
 8009866:	bd80      	pop	{r7, pc}

08009868 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009872:	1dfb      	adds	r3, r7, #7
 8009874:	2201      	movs	r2, #1
 8009876:	4619      	mov	r1, r3
 8009878:	209f      	movs	r0, #159	@ 0x9f
 800987a:	f000 fd77 	bl	800a36c <SUBGRF_WriteCommand>
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	4603      	mov	r3, r0
 800988e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009890:	1dfb      	adds	r3, r7, #7
 8009892:	2201      	movs	r2, #1
 8009894:	4619      	mov	r1, r3
 8009896:	20a0      	movs	r0, #160	@ 0xa0
 8009898:	f000 fd68 	bl	800a36c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	2b3f      	cmp	r3, #63	@ 0x3f
 80098a0:	d91c      	bls.n	80098dc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80098b0:	e005      	b.n	80098be <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
 80098b4:	089b      	lsrs	r3, r3, #2
 80098b6:	73fb      	strb	r3, [r7, #15]
            exp++;
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	3301      	adds	r3, #1
 80098bc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	2b1f      	cmp	r3, #31
 80098c2:	d8f6      	bhi.n	80098b2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	4413      	add	r3, r2
 80098ce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80098d0:	7b7b      	ldrb	r3, [r7, #13]
 80098d2:	4619      	mov	r1, r3
 80098d4:	f240 7006 	movw	r0, #1798	@ 0x706
 80098d8:	f000 fc7e 	bl	800a1d8 <SUBGRF_WriteRegister>
    }
}
 80098dc:	bf00      	nop
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80098ea:	f001 fb22 	bl	800af32 <RBI_IsDCDC>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d102      	bne.n	80098fa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80098f4:	2301      	movs	r3, #1
 80098f6:	71fb      	strb	r3, [r7, #7]
 80098f8:	e001      	b.n	80098fe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80098fa:	2300      	movs	r3, #0
 80098fc:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80098fe:	1dfb      	adds	r3, r7, #7
 8009900:	2201      	movs	r2, #1
 8009902:	4619      	mov	r1, r3
 8009904:	2096      	movs	r0, #150	@ 0x96
 8009906:	f000 fd31 	bl	800a36c <SUBGRF_WriteCommand>
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800991a:	793b      	ldrb	r3, [r7, #4]
 800991c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009920:	b2db      	uxtb	r3, r3
 8009922:	019b      	lsls	r3, r3, #6
 8009924:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009926:	793b      	ldrb	r3, [r7, #4]
 8009928:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800992c:	b2db      	uxtb	r3, r3
 800992e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009930:	b25b      	sxtb	r3, r3
 8009932:	4313      	orrs	r3, r2
 8009934:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009936:	793b      	ldrb	r3, [r7, #4]
 8009938:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800993c:	b2db      	uxtb	r3, r3
 800993e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009940:	b25b      	sxtb	r3, r3
 8009942:	4313      	orrs	r3, r2
 8009944:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009946:	793b      	ldrb	r3, [r7, #4]
 8009948:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800994c:	b2db      	uxtb	r3, r3
 800994e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009950:	b25b      	sxtb	r3, r3
 8009952:	4313      	orrs	r3, r2
 8009954:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009956:	793b      	ldrb	r3, [r7, #4]
 8009958:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800995c:	b2db      	uxtb	r3, r3
 800995e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009960:	b25b      	sxtb	r3, r3
 8009962:	4313      	orrs	r3, r2
 8009964:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009966:	793b      	ldrb	r3, [r7, #4]
 8009968:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800996c:	b2db      	uxtb	r3, r3
 800996e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009970:	b25b      	sxtb	r3, r3
 8009972:	4313      	orrs	r3, r2
 8009974:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009976:	793b      	ldrb	r3, [r7, #4]
 8009978:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800997c:	b2db      	uxtb	r3, r3
 800997e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009980:	4313      	orrs	r3, r2
 8009982:	b25b      	sxtb	r3, r3
 8009984:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009986:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009988:	f107 030f 	add.w	r3, r7, #15
 800998c:	2201      	movs	r2, #1
 800998e:	4619      	mov	r1, r3
 8009990:	2089      	movs	r0, #137	@ 0x89
 8009992:	f000 fceb 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009996:	bf00      	nop
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009a20 <SUBGRF_CalibrateImage+0x80>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d904      	bls.n	80099ba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80099b0:	23e1      	movs	r3, #225	@ 0xe1
 80099b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80099b4:	23e9      	movs	r3, #233	@ 0xe9
 80099b6:	737b      	strb	r3, [r7, #13]
 80099b8:	e027      	b.n	8009a0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a19      	ldr	r2, [pc, #100]	@ (8009a24 <SUBGRF_CalibrateImage+0x84>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d904      	bls.n	80099cc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80099c2:	23d7      	movs	r3, #215	@ 0xd7
 80099c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80099c6:	23db      	movs	r3, #219	@ 0xdb
 80099c8:	737b      	strb	r3, [r7, #13]
 80099ca:	e01e      	b.n	8009a0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a16      	ldr	r2, [pc, #88]	@ (8009a28 <SUBGRF_CalibrateImage+0x88>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d904      	bls.n	80099de <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80099d4:	23c1      	movs	r3, #193	@ 0xc1
 80099d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80099d8:	23c5      	movs	r3, #197	@ 0xc5
 80099da:	737b      	strb	r3, [r7, #13]
 80099dc:	e015      	b.n	8009a0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a12      	ldr	r2, [pc, #72]	@ (8009a2c <SUBGRF_CalibrateImage+0x8c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d904      	bls.n	80099f0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80099e6:	2375      	movs	r3, #117	@ 0x75
 80099e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80099ea:	2381      	movs	r3, #129	@ 0x81
 80099ec:	737b      	strb	r3, [r7, #13]
 80099ee:	e00c      	b.n	8009a0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a0f      	ldr	r2, [pc, #60]	@ (8009a30 <SUBGRF_CalibrateImage+0x90>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d904      	bls.n	8009a02 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80099f8:	236b      	movs	r3, #107	@ 0x6b
 80099fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80099fc:	236f      	movs	r3, #111	@ 0x6f
 80099fe:	737b      	strb	r3, [r7, #13]
 8009a00:	e003      	b.n	8009a0a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8009a02:	2329      	movs	r3, #41	@ 0x29
 8009a04:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8009a06:	232b      	movs	r3, #43	@ 0x2b
 8009a08:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009a0a:	f107 030c 	add.w	r3, r7, #12
 8009a0e:	2202      	movs	r2, #2
 8009a10:	4619      	mov	r1, r3
 8009a12:	2098      	movs	r0, #152	@ 0x98
 8009a14:	f000 fcaa 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009a18:	bf00      	nop
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	35a4e900 	.word	0x35a4e900
 8009a24:	32a9f880 	.word	0x32a9f880
 8009a28:	2de54480 	.word	0x2de54480
 8009a2c:	1b6b0b00 	.word	0x1b6b0b00
 8009a30:	1954fc40 	.word	0x1954fc40

08009a34 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	461a      	mov	r2, r3
 8009a42:	4623      	mov	r3, r4
 8009a44:	71fb      	strb	r3, [r7, #7]
 8009a46:	4603      	mov	r3, r0
 8009a48:	71bb      	strb	r3, [r7, #6]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	717b      	strb	r3, [r7, #5]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009a56:	79bb      	ldrb	r3, [r7, #6]
 8009a58:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009a5a:	797b      	ldrb	r3, [r7, #5]
 8009a5c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8009a5e:	793b      	ldrb	r3, [r7, #4]
 8009a60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009a62:	f107 030c 	add.w	r3, r7, #12
 8009a66:	2204      	movs	r2, #4
 8009a68:	4619      	mov	r1, r3
 8009a6a:	2095      	movs	r0, #149	@ 0x95
 8009a6c:	f000 fc7e 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009a70:	bf00      	nop
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd90      	pop	{r4, r7, pc}

08009a78 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4604      	mov	r4, r0
 8009a80:	4608      	mov	r0, r1
 8009a82:	4611      	mov	r1, r2
 8009a84:	461a      	mov	r2, r3
 8009a86:	4623      	mov	r3, r4
 8009a88:	80fb      	strh	r3, [r7, #6]
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	80bb      	strh	r3, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	807b      	strh	r3, [r7, #2]
 8009a92:	4613      	mov	r3, r2
 8009a94:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	0a1b      	lsrs	r3, r3, #8
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009aa0:	88fb      	ldrh	r3, [r7, #6]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009aa6:	88bb      	ldrh	r3, [r7, #4]
 8009aa8:	0a1b      	lsrs	r3, r3, #8
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009ab0:	88bb      	ldrh	r3, [r7, #4]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009ab6:	887b      	ldrh	r3, [r7, #2]
 8009ab8:	0a1b      	lsrs	r3, r3, #8
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009ac0:	887b      	ldrh	r3, [r7, #2]
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009ac6:	883b      	ldrh	r3, [r7, #0]
 8009ac8:	0a1b      	lsrs	r3, r3, #8
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009ad0:	883b      	ldrh	r3, [r7, #0]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009ad6:	f107 0308 	add.w	r3, r7, #8
 8009ada:	2208      	movs	r2, #8
 8009adc:	4619      	mov	r1, r3
 8009ade:	2008      	movs	r0, #8
 8009ae0:	f000 fc44 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd90      	pop	{r4, r7, pc}

08009aec <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	6039      	str	r1, [r7, #0]
 8009af6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	0c1b      	lsrs	r3, r3, #16
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	0a1b      	lsrs	r3, r3, #8
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009b18:	f107 030c 	add.w	r3, r7, #12
 8009b1c:	2204      	movs	r2, #4
 8009b1e:	4619      	mov	r1, r3
 8009b20:	2097      	movs	r0, #151	@ 0x97
 8009b22:	f000 fc23 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009b26:	bf00      	nop
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009b30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009b34:	b084      	sub	sp, #16
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb4 <SUBGRF_SetRfFrequency+0x84>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	f083 0301 	eor.w	r3, r3, #1
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff27 	bl	80099a0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009b52:	4b18      	ldr	r3, [pc, #96]	@ (8009bb4 <SUBGRF_SetRfFrequency+0x84>)
 8009b54:	2201      	movs	r2, #1
 8009b56:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	461c      	mov	r4, r3
 8009b5e:	4615      	mov	r5, r2
 8009b60:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009b64:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009b68:	4a13      	ldr	r2, [pc, #76]	@ (8009bb8 <SUBGRF_SetRfFrequency+0x88>)
 8009b6a:	f04f 0300 	mov.w	r3, #0
 8009b6e:	4640      	mov	r0, r8
 8009b70:	4649      	mov	r1, r9
 8009b72:	f7f6 fb09 	bl	8000188 <__aeabi_uldivmod>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	0e1b      	lsrs	r3, r3, #24
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	0c1b      	lsrs	r3, r3, #16
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	0a1b      	lsrs	r3, r3, #8
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009b9c:	f107 0308 	add.w	r3, r7, #8
 8009ba0:	2204      	movs	r2, #4
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	2086      	movs	r0, #134	@ 0x86
 8009ba6:	f000 fbe1 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009bb4:	20000320 	.word	0x20000320
 8009bb8:	01e84800 	.word	0x01e84800

08009bbc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009bc6:	79fa      	ldrb	r2, [r7, #7]
 8009bc8:	4b09      	ldr	r3, [pc, #36]	@ (8009bf0 <SUBGRF_SetPacketType+0x34>)
 8009bca:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d104      	bne.n	8009bdc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009bd8:	f000 fafe 	bl	800a1d8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009bdc:	1dfb      	adds	r3, r7, #7
 8009bde:	2201      	movs	r2, #1
 8009be0:	4619      	mov	r1, r3
 8009be2:	208a      	movs	r0, #138	@ 0x8a
 8009be4:	f000 fbc2 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20000319 	.word	0x20000319

08009bf4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
    return PacketType;
 8009bf8:	4b02      	ldr	r3, [pc, #8]	@ (8009c04 <SUBGRF_GetPacketType+0x10>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bc80      	pop	{r7}
 8009c02:	4770      	bx	lr
 8009c04:	20000319 	.word	0x20000319

08009c08 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
 8009c12:	460b      	mov	r3, r1
 8009c14:	71bb      	strb	r3, [r7, #6]
 8009c16:	4613      	mov	r3, r2
 8009c18:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d149      	bne.n	8009cb4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009c20:	2000      	movs	r0, #0
 8009c22:	f001 f98d 	bl	800af40 <RBI_GetRFOMaxPowerConfig>
 8009c26:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009c28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	da01      	bge.n	8009c36 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b0e      	cmp	r3, #14
 8009c3a:	d10e      	bne.n	8009c5a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	2201      	movs	r2, #1
 8009c40:	2100      	movs	r1, #0
 8009c42:	2004      	movs	r0, #4
 8009c44:	f7ff fef6 	bl	8009a34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009c48:	79ba      	ldrb	r2, [r7, #6]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	330e      	adds	r3, #14
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	71bb      	strb	r3, [r7, #6]
 8009c58:	e01f      	b.n	8009c9a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b0a      	cmp	r3, #10
 8009c5e:	d10e      	bne.n	8009c7e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009c60:	2301      	movs	r3, #1
 8009c62:	2201      	movs	r2, #1
 8009c64:	2100      	movs	r1, #0
 8009c66:	2001      	movs	r0, #1
 8009c68:	f7ff fee4 	bl	8009a34 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009c6c:	79ba      	ldrb	r2, [r7, #6]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	330d      	adds	r3, #13
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	71bb      	strb	r3, [r7, #6]
 8009c7c:	e00d      	b.n	8009c9a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009c7e:	2301      	movs	r3, #1
 8009c80:	2201      	movs	r2, #1
 8009c82:	2100      	movs	r1, #0
 8009c84:	2007      	movs	r0, #7
 8009c86:	f7ff fed5 	bl	8009a34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009c8a:	79ba      	ldrb	r2, [r7, #6]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	330e      	adds	r3, #14
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009c9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c9e:	f113 0f11 	cmn.w	r3, #17
 8009ca2:	da01      	bge.n	8009ca8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009ca4:	23ef      	movs	r3, #239	@ 0xef
 8009ca6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009ca8:	2118      	movs	r1, #24
 8009caa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009cae:	f000 fa93 	bl	800a1d8 <SUBGRF_WriteRegister>
 8009cb2:	e067      	b.n	8009d84 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009cb4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8009cb8:	f000 fab0 	bl	800a21c <SUBGRF_ReadRegister>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f043 031e 	orr.w	r3, r3, #30
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8009cca:	f000 fa85 	bl	800a1d8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009cce:	2001      	movs	r0, #1
 8009cd0:	f001 f936 	bl	800af40 <RBI_GetRFOMaxPowerConfig>
 8009cd4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009cd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	da01      	bge.n	8009ce4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b14      	cmp	r3, #20
 8009ce8:	d10e      	bne.n	8009d08 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009cea:	2301      	movs	r3, #1
 8009cec:	2200      	movs	r2, #0
 8009cee:	2105      	movs	r1, #5
 8009cf0:	2003      	movs	r0, #3
 8009cf2:	f7ff fe9f 	bl	8009a34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009cf6:	79ba      	ldrb	r2, [r7, #6]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	3316      	adds	r3, #22
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	71bb      	strb	r3, [r7, #6]
 8009d06:	e031      	b.n	8009d6c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b11      	cmp	r3, #17
 8009d0c:	d10e      	bne.n	8009d2c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009d0e:	2301      	movs	r3, #1
 8009d10:	2200      	movs	r2, #0
 8009d12:	2103      	movs	r1, #3
 8009d14:	2002      	movs	r0, #2
 8009d16:	f7ff fe8d 	bl	8009a34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009d1a:	79ba      	ldrb	r2, [r7, #6]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	3316      	adds	r3, #22
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	71bb      	strb	r3, [r7, #6]
 8009d2a:	e01f      	b.n	8009d6c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b0e      	cmp	r3, #14
 8009d30:	d10e      	bne.n	8009d50 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009d32:	2301      	movs	r3, #1
 8009d34:	2200      	movs	r2, #0
 8009d36:	2102      	movs	r1, #2
 8009d38:	2002      	movs	r0, #2
 8009d3a:	f7ff fe7b 	bl	8009a34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009d3e:	79ba      	ldrb	r2, [r7, #6]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	330e      	adds	r3, #14
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	71bb      	strb	r3, [r7, #6]
 8009d4e:	e00d      	b.n	8009d6c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009d50:	2301      	movs	r3, #1
 8009d52:	2200      	movs	r2, #0
 8009d54:	2107      	movs	r1, #7
 8009d56:	2004      	movs	r0, #4
 8009d58:	f7ff fe6c 	bl	8009a34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009d5c:	79ba      	ldrb	r2, [r7, #6]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	3316      	adds	r3, #22
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009d6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009d70:	f113 0f09 	cmn.w	r3, #9
 8009d74:	da01      	bge.n	8009d7a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009d76:	23f7      	movs	r3, #247	@ 0xf7
 8009d78:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009d7a:	2138      	movs	r1, #56	@ 0x38
 8009d7c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009d80:	f000 fa2a 	bl	800a1d8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009d84:	79bb      	ldrb	r3, [r7, #6]
 8009d86:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009d88:	797b      	ldrb	r3, [r7, #5]
 8009d8a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009d8c:	f107 0308 	add.w	r3, r7, #8
 8009d90:	2202      	movs	r2, #2
 8009d92:	4619      	mov	r1, r3
 8009d94:	208e      	movs	r0, #142	@ 0x8e
 8009d96:	f000 fae9 	bl	800a36c <SUBGRF_WriteCommand>
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009da4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009db2:	4a61      	ldr	r2, [pc, #388]	@ (8009f38 <SUBGRF_SetModulationParams+0x194>)
 8009db4:	f107 0308 	add.w	r3, r7, #8
 8009db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dbc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	781a      	ldrb	r2, [r3, #0]
 8009dc4:	4b5d      	ldr	r3, [pc, #372]	@ (8009f3c <SUBGRF_SetModulationParams+0x198>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d004      	beq.n	8009dd6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff fef3 	bl	8009bbc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	f200 80a5 	bhi.w	8009f2a <SUBGRF_SetModulationParams+0x186>
 8009de0:	a201      	add	r2, pc, #4	@ (adr r2, 8009de8 <SUBGRF_SetModulationParams+0x44>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009df9 	.word	0x08009df9
 8009dec:	08009eb9 	.word	0x08009eb9
 8009df0:	08009e7b 	.word	0x08009e7b
 8009df4:	08009ee7 	.word	0x08009ee7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009df8:	2308      	movs	r3, #8
 8009dfa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4a4f      	ldr	r2, [pc, #316]	@ (8009f40 <SUBGRF_SetModulationParams+0x19c>)
 8009e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e06:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	0c1b      	lsrs	r3, r3, #16
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7b1b      	ldrb	r3, [r3, #12]
 8009e22:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7b5b      	ldrb	r3, [r3, #13]
 8009e28:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	461c      	mov	r4, r3
 8009e32:	4615      	mov	r5, r2
 8009e34:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009e38:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009e3c:	4a41      	ldr	r2, [pc, #260]	@ (8009f44 <SUBGRF_SetModulationParams+0x1a0>)
 8009e3e:	f04f 0300 	mov.w	r3, #0
 8009e42:	4640      	mov	r0, r8
 8009e44:	4649      	mov	r1, r9
 8009e46:	f7f6 f99f 	bl	8000188 <__aeabi_uldivmod>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4613      	mov	r3, r2
 8009e50:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	0c1b      	lsrs	r3, r3, #16
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	0a1b      	lsrs	r3, r3, #8
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009e68:	7cfb      	ldrb	r3, [r7, #19]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	f107 0308 	add.w	r3, r7, #8
 8009e70:	4619      	mov	r1, r3
 8009e72:	208b      	movs	r0, #139	@ 0x8b
 8009e74:	f000 fa7a 	bl	800a36c <SUBGRF_WriteCommand>
        break;
 8009e78:	e058      	b.n	8009f2c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009e7a:	2304      	movs	r3, #4
 8009e7c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	4a2f      	ldr	r2, [pc, #188]	@ (8009f40 <SUBGRF_SetModulationParams+0x19c>)
 8009e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e88:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	0c1b      	lsrs	r3, r3, #16
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	0a1b      	lsrs	r3, r3, #8
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7d1b      	ldrb	r3, [r3, #20]
 8009ea4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009ea6:	7cfb      	ldrb	r3, [r7, #19]
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	f107 0308 	add.w	r3, r7, #8
 8009eae:	4619      	mov	r1, r3
 8009eb0:	208b      	movs	r0, #139	@ 0x8b
 8009eb2:	f000 fa5b 	bl	800a36c <SUBGRF_WriteCommand>
        break;
 8009eb6:	e039      	b.n	8009f2c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009eb8:	2304      	movs	r3, #4
 8009eba:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	7e1b      	ldrb	r3, [r3, #24]
 8009ec0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	7e5b      	ldrb	r3, [r3, #25]
 8009ec6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	7e9b      	ldrb	r3, [r3, #26]
 8009ecc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	7edb      	ldrb	r3, [r3, #27]
 8009ed2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009ed4:	7cfb      	ldrb	r3, [r7, #19]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	f107 0308 	add.w	r3, r7, #8
 8009edc:	4619      	mov	r1, r3
 8009ede:	208b      	movs	r0, #139	@ 0x8b
 8009ee0:	f000 fa44 	bl	800a36c <SUBGRF_WriteCommand>

        break;
 8009ee4:	e022      	b.n	8009f2c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009ee6:	2305      	movs	r3, #5
 8009ee8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4a14      	ldr	r2, [pc, #80]	@ (8009f40 <SUBGRF_SetModulationParams+0x19c>)
 8009ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	0c1b      	lsrs	r3, r3, #16
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	0a1b      	lsrs	r3, r3, #8
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	7b1b      	ldrb	r3, [r3, #12]
 8009f10:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7b5b      	ldrb	r3, [r3, #13]
 8009f16:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009f18:	7cfb      	ldrb	r3, [r7, #19]
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	f107 0308 	add.w	r3, r7, #8
 8009f20:	4619      	mov	r1, r3
 8009f22:	208b      	movs	r0, #139	@ 0x8b
 8009f24:	f000 fa22 	bl	800a36c <SUBGRF_WriteCommand>
        break;
 8009f28:	e000      	b.n	8009f2c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009f2a:	bf00      	nop
    }
}
 8009f2c:	bf00      	nop
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009f36:	bf00      	nop
 8009f38:	0800c4d8 	.word	0x0800c4d8
 8009f3c:	20000319 	.word	0x20000319
 8009f40:	3d090000 	.word	0x3d090000
 8009f44:	01e84800 	.word	0x01e84800

08009f48 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009f54:	4a48      	ldr	r2, [pc, #288]	@ (800a078 <SUBGRF_SetPacketParams+0x130>)
 8009f56:	f107 030c 	add.w	r3, r7, #12
 8009f5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f5c:	c303      	stmia	r3!, {r0, r1}
 8009f5e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	4b45      	ldr	r3, [pc, #276]	@ (800a07c <SUBGRF_SetPacketParams+0x134>)
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d004      	beq.n	8009f76 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff fe23 	bl	8009bbc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d878      	bhi.n	800a070 <SUBGRF_SetPacketParams+0x128>
 8009f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f84 <SUBGRF_SetPacketParams+0x3c>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	08009f95 	.word	0x08009f95
 8009f88:	0800a025 	.word	0x0800a025
 8009f8c:	0800a019 	.word	0x0800a019
 8009f90:	08009f95 	.word	0x08009f95
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	7a5b      	ldrb	r3, [r3, #9]
 8009f98:	2bf1      	cmp	r3, #241	@ 0xf1
 8009f9a:	d10a      	bne.n	8009fb2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009f9c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009fa0:	f7ff faaa 	bl	80094f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009fa4:	f248 0005 	movw	r0, #32773	@ 0x8005
 8009fa8:	f7ff fac6 	bl	8009538 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009fac:	2302      	movs	r3, #2
 8009fae:	75bb      	strb	r3, [r7, #22]
 8009fb0:	e011      	b.n	8009fd6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	7a5b      	ldrb	r3, [r3, #9]
 8009fb6:	2bf2      	cmp	r3, #242	@ 0xf2
 8009fb8:	d10a      	bne.n	8009fd0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009fba:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8009fbe:	f7ff fa9b 	bl	80094f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009fc2:	f241 0021 	movw	r0, #4129	@ 0x1021
 8009fc6:	f7ff fab7 	bl	8009538 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009fca:	2306      	movs	r3, #6
 8009fcc:	75bb      	strb	r3, [r7, #22]
 8009fce:	e002      	b.n	8009fd6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7a5b      	ldrb	r3, [r3, #9]
 8009fd4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009fd6:	2309      	movs	r3, #9
 8009fd8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	885b      	ldrh	r3, [r3, #2]
 8009fde:	0a1b      	lsrs	r3, r3, #8
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	885b      	ldrh	r3, [r3, #2]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	791b      	ldrb	r3, [r3, #4]
 8009ff2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	795b      	ldrb	r3, [r3, #5]
 8009ff8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	799b      	ldrb	r3, [r3, #6]
 8009ffe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	79db      	ldrb	r3, [r3, #7]
 800a004:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7a1b      	ldrb	r3, [r3, #8]
 800a00a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a00c:	7dbb      	ldrb	r3, [r7, #22]
 800a00e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7a9b      	ldrb	r3, [r3, #10]
 800a014:	753b      	strb	r3, [r7, #20]
        break;
 800a016:	e022      	b.n	800a05e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a018:	2301      	movs	r3, #1
 800a01a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	7b1b      	ldrb	r3, [r3, #12]
 800a020:	733b      	strb	r3, [r7, #12]
        break;
 800a022:	e01c      	b.n	800a05e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a024:	2306      	movs	r3, #6
 800a026:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	89db      	ldrh	r3, [r3, #14]
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	b29b      	uxth	r3, r3
 800a030:	b2db      	uxtb	r3, r3
 800a032:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	89db      	ldrh	r3, [r3, #14]
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	7c1a      	ldrb	r2, [r3, #16]
 800a040:	4b0f      	ldr	r3, [pc, #60]	@ (800a080 <SUBGRF_SetPacketParams+0x138>)
 800a042:	4611      	mov	r1, r2
 800a044:	7019      	strb	r1, [r3, #0]
 800a046:	4613      	mov	r3, r2
 800a048:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	7c5b      	ldrb	r3, [r3, #17]
 800a04e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	7c9b      	ldrb	r3, [r3, #18]
 800a054:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7cdb      	ldrb	r3, [r3, #19]
 800a05a:	747b      	strb	r3, [r7, #17]
        break;
 800a05c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	b29a      	uxth	r2, r3
 800a062:	f107 030c 	add.w	r3, r7, #12
 800a066:	4619      	mov	r1, r3
 800a068:	208c      	movs	r0, #140	@ 0x8c
 800a06a:	f000 f97f 	bl	800a36c <SUBGRF_WriteCommand>
 800a06e:	e000      	b.n	800a072 <SUBGRF_SetPacketParams+0x12a>
        return;
 800a070:	bf00      	nop
}
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	0800c4e0 	.word	0x0800c4e0
 800a07c:	20000319 	.word	0x20000319
 800a080:	2000031a 	.word	0x2000031a

0800a084 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	460a      	mov	r2, r1
 800a08e:	71fb      	strb	r3, [r7, #7]
 800a090:	4613      	mov	r3, r2
 800a092:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a098:	79bb      	ldrb	r3, [r7, #6]
 800a09a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a09c:	f107 030c 	add.w	r3, r7, #12
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	208f      	movs	r0, #143	@ 0x8f
 800a0a6:	f000 f961 	bl	800a36c <SUBGRF_WriteCommand>
}
 800a0aa:	bf00      	nop
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a0bc:	1d3b      	adds	r3, r7, #4
 800a0be:	2201      	movs	r2, #1
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	2015      	movs	r0, #21
 800a0c4:	f000 f974 	bl	800a3b0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a0c8:	793b      	ldrb	r3, [r7, #4]
 800a0ca:	425b      	negs	r3, r3
 800a0cc:	105b      	asrs	r3, r3, #1
 800a0ce:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a0d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a0e6:	f107 030c 	add.w	r3, r7, #12
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	2013      	movs	r0, #19
 800a0f0:	f000 f95e 	bl	800a3b0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a0f4:	f7ff fd7e 	bl	8009bf4 <SUBGRF_GetPacketType>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d10d      	bne.n	800a11a <SUBGRF_GetRxBufferStatus+0x3e>
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <SUBGRF_GetRxBufferStatus+0x54>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b01      	cmp	r3, #1
 800a106:	d108      	bne.n	800a11a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a108:	f240 7002 	movw	r0, #1794	@ 0x702
 800a10c:	f000 f886 	bl	800a21c <SUBGRF_ReadRegister>
 800a110:	4603      	mov	r3, r0
 800a112:	461a      	mov	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	701a      	strb	r2, [r3, #0]
 800a118:	e002      	b.n	800a120 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a11a:	7b3a      	ldrb	r2, [r7, #12]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a120:	7b7a      	ldrb	r2, [r7, #13]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	701a      	strb	r2, [r3, #0]
}
 800a126:	bf00      	nop
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	2000031a 	.word	0x2000031a

0800a134 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a13c:	f107 030c 	add.w	r3, r7, #12
 800a140:	2203      	movs	r2, #3
 800a142:	4619      	mov	r1, r3
 800a144:	2014      	movs	r0, #20
 800a146:	f000 f933 	bl	800a3b0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a14a:	f7ff fd53 	bl	8009bf4 <SUBGRF_GetPacketType>
 800a14e:	4603      	mov	r3, r0
 800a150:	461a      	mov	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <SUBGRF_GetPacketStatus+0x30>
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d013      	beq.n	800a18a <SUBGRF_GetPacketStatus+0x56>
 800a162:	e02a      	b.n	800a1ba <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a164:	7b3a      	ldrb	r2, [r7, #12]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a16a:	7b7b      	ldrb	r3, [r7, #13]
 800a16c:	425b      	negs	r3, r3
 800a16e:	105b      	asrs	r3, r3, #1
 800a170:	b25a      	sxtb	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	425b      	negs	r3, r3
 800a17a:	105b      	asrs	r3, r3, #1
 800a17c:	b25a      	sxtb	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	609a      	str	r2, [r3, #8]
            break;
 800a188:	e020      	b.n	800a1cc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a18a:	7b3b      	ldrb	r3, [r7, #12]
 800a18c:	425b      	negs	r3, r3
 800a18e:	105b      	asrs	r3, r3, #1
 800a190:	b25a      	sxtb	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a196:	7b7b      	ldrb	r3, [r7, #13]
 800a198:	b25b      	sxtb	r3, r3
 800a19a:	3302      	adds	r3, #2
 800a19c:	109b      	asrs	r3, r3, #2
 800a19e:	b25a      	sxtb	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	425b      	negs	r3, r3
 800a1a8:	105b      	asrs	r3, r3, #1
 800a1aa:	b25a      	sxtb	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a1b0:	4b08      	ldr	r3, [pc, #32]	@ (800a1d4 <SUBGRF_GetPacketStatus+0xa0>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	611a      	str	r2, [r3, #16]
            break;
 800a1b8:	e008      	b.n	800a1cc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a1ba:	2214      	movs	r2, #20
 800a1bc:	2100      	movs	r1, #0
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 ff91 	bl	800b0e6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	220f      	movs	r2, #15
 800a1c8:	701a      	strb	r2, [r3, #0]
            break;
 800a1ca:	bf00      	nop
    }
}
 800a1cc:	bf00      	nop
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	2000031c 	.word	0x2000031c

0800a1d8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	460a      	mov	r2, r1
 800a1e2:	80fb      	strh	r3, [r7, #6]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a1f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1f2:	b672      	cpsid	i
}
 800a1f4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a1f6:	1d7a      	adds	r2, r7, #5
 800a1f8:	88f9      	ldrh	r1, [r7, #6]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4806      	ldr	r0, [pc, #24]	@ (800a218 <SUBGRF_WriteRegister+0x40>)
 800a1fe:	f7fa faeb 	bl	80047d8 <HAL_SUBGHZ_WriteRegisters>
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f383 8810 	msr	PRIMASK, r3
}
 800a20c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a20e:	bf00      	nop
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20000074 	.word	0x20000074

0800a21c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a226:	f3ef 8310 	mrs	r3, PRIMASK
 800a22a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a22c:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 800a22e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a230:	b672      	cpsid	i
}
 800a232:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a234:	f107 020b 	add.w	r2, r7, #11
 800a238:	88f9      	ldrh	r1, [r7, #6]
 800a23a:	2301      	movs	r3, #1
 800a23c:	4806      	ldr	r0, [pc, #24]	@ (800a258 <SUBGRF_ReadRegister+0x3c>)
 800a23e:	f7fa fb2a 	bl	8004896 <HAL_SUBGHZ_ReadRegisters>
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f383 8810 	msr	PRIMASK, r3
}
 800a24c:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 800a24e:	7afb      	ldrb	r3, [r7, #11]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20000074 	.word	0x20000074

0800a25c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	6039      	str	r1, [r7, #0]
 800a266:	80fb      	strh	r3, [r7, #6]
 800a268:	4613      	mov	r3, r2
 800a26a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a26c:	f3ef 8310 	mrs	r3, PRIMASK
 800a270:	60fb      	str	r3, [r7, #12]
  return(result);
 800a272:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a276:	b672      	cpsid	i
}
 800a278:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a27a:	88bb      	ldrh	r3, [r7, #4]
 800a27c:	88f9      	ldrh	r1, [r7, #6]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4806      	ldr	r0, [pc, #24]	@ (800a29c <SUBGRF_WriteRegisters+0x40>)
 800a282:	f7fa faa9 	bl	80047d8 <HAL_SUBGHZ_WriteRegisters>
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f383 8810 	msr	PRIMASK, r3
}
 800a290:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a292:	bf00      	nop
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000074 	.word	0x20000074

0800a2a0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	6039      	str	r1, [r7, #0]
 800a2aa:	80fb      	strh	r3, [r7, #6]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a2b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ba:	b672      	cpsid	i
}
 800a2bc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a2be:	88bb      	ldrh	r3, [r7, #4]
 800a2c0:	88f9      	ldrh	r1, [r7, #6]
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	4806      	ldr	r0, [pc, #24]	@ (800a2e0 <SUBGRF_ReadRegisters+0x40>)
 800a2c6:	f7fa fae6 	bl	8004896 <HAL_SUBGHZ_ReadRegisters>
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f383 8810 	msr	PRIMASK, r3
}
 800a2d4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a2d6:	bf00      	nop
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000074 	.word	0x20000074

0800a2e4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	6039      	str	r1, [r7, #0]
 800a2ee:	71fb      	strb	r3, [r7, #7]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a2f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a2fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2fe:	b672      	cpsid	i
}
 800a300:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a302:	79bb      	ldrb	r3, [r7, #6]
 800a304:	b29b      	uxth	r3, r3
 800a306:	79f9      	ldrb	r1, [r7, #7]
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	4806      	ldr	r0, [pc, #24]	@ (800a324 <SUBGRF_WriteBuffer+0x40>)
 800a30c:	f7fa fbd7 	bl	8004abe <HAL_SUBGHZ_WriteBuffer>
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f383 8810 	msr	PRIMASK, r3
}
 800a31a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a31c:	bf00      	nop
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000074 	.word	0x20000074

0800a328 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	6039      	str	r1, [r7, #0]
 800a332:	71fb      	strb	r3, [r7, #7]
 800a334:	4613      	mov	r3, r2
 800a336:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a338:	f3ef 8310 	mrs	r3, PRIMASK
 800a33c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a33e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a340:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a342:	b672      	cpsid	i
}
 800a344:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a346:	79bb      	ldrb	r3, [r7, #6]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	79f9      	ldrb	r1, [r7, #7]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	4806      	ldr	r0, [pc, #24]	@ (800a368 <SUBGRF_ReadBuffer+0x40>)
 800a350:	f7fa fc08 	bl	8004b64 <HAL_SUBGHZ_ReadBuffer>
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f383 8810 	msr	PRIMASK, r3
}
 800a35e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a360:	bf00      	nop
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000074 	.word	0x20000074

0800a36c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	6039      	str	r1, [r7, #0]
 800a376:	71fb      	strb	r3, [r7, #7]
 800a378:	4613      	mov	r3, r2
 800a37a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a37c:	f3ef 8310 	mrs	r3, PRIMASK
 800a380:	60fb      	str	r3, [r7, #12]
  return(result);
 800a382:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a384:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a386:	b672      	cpsid	i
}
 800a388:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a38a:	88bb      	ldrh	r3, [r7, #4]
 800a38c:	79f9      	ldrb	r1, [r7, #7]
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	4806      	ldr	r0, [pc, #24]	@ (800a3ac <SUBGRF_WriteCommand+0x40>)
 800a392:	f7fa fae1 	bl	8004958 <HAL_SUBGHZ_ExecSetCmd>
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f383 8810 	msr	PRIMASK, r3
}
 800a3a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a3a2:	bf00      	nop
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20000074 	.word	0x20000074

0800a3b0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	71fb      	strb	r3, [r7, #7]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a3c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3ca:	b672      	cpsid	i
}
 800a3cc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a3ce:	88bb      	ldrh	r3, [r7, #4]
 800a3d0:	79f9      	ldrb	r1, [r7, #7]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	4806      	ldr	r0, [pc, #24]	@ (800a3f0 <SUBGRF_ReadCommand+0x40>)
 800a3d6:	f7fa fb1e 	bl	8004a16 <HAL_SUBGHZ_ExecGetCmd>
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f383 8810 	msr	PRIMASK, r3
}
 800a3e4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a3e6:	bf00      	nop
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000074 	.word	0x20000074

0800a3f4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	460a      	mov	r2, r1
 800a3fe:	71fb      	strb	r3, [r7, #7]
 800a400:	4613      	mov	r3, r2
 800a402:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a404:	2301      	movs	r3, #1
 800a406:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a408:	79bb      	ldrb	r3, [r7, #6]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d10d      	bne.n	800a42a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d104      	bne.n	800a41e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a414:	2302      	movs	r3, #2
 800a416:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a418:	2004      	movs	r0, #4
 800a41a:	f000 f8ef 	bl	800a5fc <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d107      	bne.n	800a434 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a424:	2303      	movs	r3, #3
 800a426:	73fb      	strb	r3, [r7, #15]
 800a428:	e004      	b.n	800a434 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a42a:	79bb      	ldrb	r3, [r7, #6]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a430:	2301      	movs	r3, #1
 800a432:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fd5f 	bl	800aefa <RBI_ConfigRFSwitch>
}
 800a43c:	bf00      	nop
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a44e:	2301      	movs	r3, #1
 800a450:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a452:	f000 fd60 	bl	800af16 <RBI_GetTxConfig>
 800a456:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d016      	beq.n	800a48c <SUBGRF_SetRfTxPower+0x48>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b02      	cmp	r3, #2
 800a462:	dc16      	bgt.n	800a492 <SUBGRF_SetRfTxPower+0x4e>
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <SUBGRF_SetRfTxPower+0x2e>
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d00a      	beq.n	800a486 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a470:	e00f      	b.n	800a492 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a476:	2b0f      	cmp	r3, #15
 800a478:	dd02      	ble.n	800a480 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a47a:	2302      	movs	r3, #2
 800a47c:	73fb      	strb	r3, [r7, #15]
            break;
 800a47e:	e009      	b.n	800a494 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a480:	2301      	movs	r3, #1
 800a482:	73fb      	strb	r3, [r7, #15]
            break;
 800a484:	e006      	b.n	800a494 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a486:	2301      	movs	r3, #1
 800a488:	73fb      	strb	r3, [r7, #15]
            break;
 800a48a:	e003      	b.n	800a494 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a48c:	2302      	movs	r3, #2
 800a48e:	73fb      	strb	r3, [r7, #15]
            break;
 800a490:	e000      	b.n	800a494 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a492:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a494:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	2202      	movs	r2, #2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff fbb3 	bl	8009c08 <SUBGRF_SetTxParams>

    return paSelect;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a4b0:	2301      	movs	r3, #1
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc80      	pop	{r7}
 800a4b8:	4770      	bx	lr
	...

0800a4bc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a4c4:	4b03      	ldr	r3, [pc, #12]	@ (800a4d4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2001      	movs	r0, #1
 800a4ca:	4798      	blx	r3
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	20000324 	.word	0x20000324

0800a4d8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a4e0:	4b03      	ldr	r3, [pc, #12]	@ (800a4f0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2002      	movs	r0, #2
 800a4e6:	4798      	blx	r3
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000324 	.word	0x20000324

0800a4f4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a4fc:	4b03      	ldr	r3, [pc, #12]	@ (800a50c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2040      	movs	r0, #64	@ 0x40
 800a502:	4798      	blx	r3
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	20000324 	.word	0x20000324

0800a510 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a51c:	78fb      	ldrb	r3, [r7, #3]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a522:	2b01      	cmp	r3, #1
 800a524:	d005      	beq.n	800a532 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a526:	e00a      	b.n	800a53e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a528:	4b07      	ldr	r3, [pc, #28]	@ (800a548 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2080      	movs	r0, #128	@ 0x80
 800a52e:	4798      	blx	r3
            break;
 800a530:	e005      	b.n	800a53e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a532:	4b05      	ldr	r3, [pc, #20]	@ (800a548 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a53a:	4798      	blx	r3
            break;
 800a53c:	bf00      	nop
    }
}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20000324 	.word	0x20000324

0800a54c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a554:	4b04      	ldr	r3, [pc, #16]	@ (800a568 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a55c:	4798      	blx	r3
}
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20000324 	.word	0x20000324

0800a56c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a574:	4b03      	ldr	r3, [pc, #12]	@ (800a584 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2020      	movs	r0, #32
 800a57a:	4798      	blx	r3
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20000324 	.word	0x20000324

0800a588 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a590:	4b03      	ldr	r3, [pc, #12]	@ (800a5a0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2004      	movs	r0, #4
 800a596:	4798      	blx	r3
}
 800a598:	bf00      	nop
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20000324 	.word	0x20000324

0800a5a4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a5ac:	4b03      	ldr	r3, [pc, #12]	@ (800a5bc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2008      	movs	r0, #8
 800a5b2:	4798      	blx	r3
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000324 	.word	0x20000324

0800a5c0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a5c8:	4b03      	ldr	r3, [pc, #12]	@ (800a5d8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2010      	movs	r0, #16
 800a5ce:	4798      	blx	r3
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20000324 	.word	0x20000324

0800a5dc <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a5e4:	4b04      	ldr	r3, [pc, #16]	@ (800a5f8 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a5ec:	4798      	blx	r3
}
 800a5ee:	bf00      	nop
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000324 	.word	0x20000324

0800a5fc <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a606:	f000 fc94 	bl	800af32 <RBI_IsDCDC>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d112      	bne.n	800a636 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a610:	f640 1023 	movw	r0, #2339	@ 0x923
 800a614:	f7ff fe02 	bl	800a21c <SUBGRF_ReadRegister>
 800a618:	4603      	mov	r3, r0
 800a61a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	f023 0306 	bic.w	r3, r3, #6
 800a622:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a624:	7bfa      	ldrb	r2, [r7, #15]
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	4313      	orrs	r3, r2
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	4619      	mov	r1, r3
 800a62e:	f640 1023 	movw	r0, #2339	@ 0x923
 800a632:	f7ff fdd1 	bl	800a1d8 <SUBGRF_WriteRegister>
  }
}
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a64e:	231f      	movs	r3, #31
 800a650:	e017      	b.n	800a682 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]
 800a656:	e00f      	b.n	800a678 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a658:	7bfb      	ldrb	r3, [r7, #15]
 800a65a:	4a0c      	ldr	r2, [pc, #48]	@ (800a68c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a65c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	429a      	cmp	r2, r3
 800a664:	d205      	bcs.n	800a672 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	4a08      	ldr	r2, [pc, #32]	@ (800a68c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	4413      	add	r3, r2
 800a66e:	791b      	ldrb	r3, [r3, #4]
 800a670:	e007      	b.n	800a682 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a672:	7bfb      	ldrb	r3, [r7, #15]
 800a674:	3301      	adds	r3, #1
 800a676:	73fb      	strb	r3, [r7, #15]
 800a678:	7bfb      	ldrb	r3, [r7, #15]
 800a67a:	2b15      	cmp	r3, #21
 800a67c:	d9ec      	bls.n	800a658 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a67e:	bf00      	nop
 800a680:	e7fd      	b.n	800a67e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	bc80      	pop	{r7}
 800a68a:	4770      	bx	lr
 800a68c:	0800c9a4 	.word	0x0800c9a4

0800a690 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08a      	sub	sp, #40	@ 0x28
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a69a:	4b35      	ldr	r3, [pc, #212]	@ (800a770 <SUBGRF_GetCFO+0xe0>)
 800a69c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a69e:	f640 0007 	movw	r0, #2055	@ 0x807
 800a6a2:	f7ff fdbb 	bl	800a21c <SUBGRF_ReadRegister>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a6aa:	7ffb      	ldrb	r3, [r7, #31]
 800a6ac:	08db      	lsrs	r3, r3, #3
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 0303 	and.w	r3, r3, #3
 800a6b4:	3328      	adds	r3, #40	@ 0x28
 800a6b6:	443b      	add	r3, r7
 800a6b8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a6bc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a6be:	7ffb      	ldrb	r3, [r7, #31]
 800a6c0:	f003 0307 	and.w	r3, r3, #7
 800a6c4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a6c6:	7fba      	ldrb	r2, [r7, #30]
 800a6c8:	7f7b      	ldrb	r3, [r7, #29]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b28      	ldr	r3, [pc, #160]	@ (800a774 <SUBGRF_GetCFO+0xe4>)
 800a6d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6d8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a6ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	fb02 f303 	mul.w	r3, r2, r3
 800a6f4:	2b07      	cmp	r3, #7
 800a6f6:	d802      	bhi.n	800a6fe <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800a6fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	fb02 f303 	mul.w	r3, r2, r3
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d802      	bhi.n	800a712 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a70c:	2304      	movs	r3, #4
 800a70e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a712:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	fb02 f303 	mul.w	r3, r2, r3
 800a71c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a71e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800a722:	f7ff fd7b 	bl	800a21c <SUBGRF_ReadRegister>
 800a726:	4603      	mov	r3, r0
 800a728:	021b      	lsls	r3, r3, #8
 800a72a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a72e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a730:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800a734:	f7ff fd72 	bl	800a21c <SUBGRF_ReadRegister>
 800a738:	4603      	mov	r3, r0
 800a73a:	461a      	mov	r2, r3
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	4313      	orrs	r3, r2
 800a740:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d005      	beq.n	800a758 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a752:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a756:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	095b      	lsrs	r3, r3, #5
 800a75c:	6a3a      	ldr	r2, [r7, #32]
 800a75e:	fb02 f303 	mul.w	r3, r2, r3
 800a762:	11da      	asrs	r2, r3, #7
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	601a      	str	r2, [r3, #0]
}
 800a768:	bf00      	nop
 800a76a:	3728      	adds	r7, #40	@ 0x28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	0c0a0804 	.word	0x0c0a0804
 800a774:	01e84800 	.word	0x01e84800

0800a778 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a78a:	f04f 33ff 	mov.w	r3, #4294967295
 800a78e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a790:	697b      	ldr	r3, [r7, #20]
}
 800a792:	4618      	mov	r0, r3
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	bc80      	pop	{r7}
 800a79a:	4770      	bx	lr

0800a79c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a7b4:	697b      	ldr	r3, [r7, #20]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	371c      	adds	r7, #28
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bc80      	pop	{r7}
 800a7be:	4770      	bx	lr

0800a7c0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a7cc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bc80      	pop	{r7}
 800a7d8:	4770      	bx	lr

0800a7da <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a7da:	b480      	push	{r7}
 800a7dc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a7de:	bf00      	nop
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bc80      	pop	{r7}
 800a7e4:	4770      	bx	lr

0800a7e6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a7ea:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bc80      	pop	{r7}
 800a7f2:	4770      	bx	lr

0800a7f4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a7f8:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bc80      	pop	{r7}
 800a800:	4770      	bx	lr

0800a802 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	4603      	mov	r3, r0
 800a80a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	bc80      	pop	{r7}
 800a814:	4770      	bx	lr

0800a816 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a816:	b480      	push	{r7}
 800a818:	b087      	sub	sp, #28
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	460b      	mov	r3, r1
 800a820:	607a      	str	r2, [r7, #4]
 800a822:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a82a:	697b      	ldr	r3, [r7, #20]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	371c      	adds	r7, #28
 800a830:	46bd      	mov	sp, r7
 800a832:	bc80      	pop	{r7}
 800a834:	4770      	bx	lr

0800a836 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a836:	b480      	push	{r7}
 800a838:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a83a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a83e:	4618      	mov	r0, r3
 800a840:	46bd      	mov	sp, r7
 800a842:	bc80      	pop	{r7}
 800a844:	4770      	bx	lr

0800a846 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a846:	b480      	push	{r7}
 800a848:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a84a:	bf00      	nop
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bc80      	pop	{r7}
 800a850:	4770      	bx	lr

0800a852 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a852:	b480      	push	{r7}
 800a854:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a856:	bf00      	nop
 800a858:	46bd      	mov	sp, r7
 800a85a:	bc80      	pop	{r7}
 800a85c:	4770      	bx	lr

0800a85e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	4603      	mov	r3, r0
 800a866:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bc80      	pop	{r7}
 800a870:	4770      	bx	lr

0800a872 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a876:	f7f6 f8b3 	bl	80009e0 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a87a:	f000 f80b 	bl	800a894 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a87e:	bf00      	nop
 800a880:	bd80      	pop	{r7, pc}

0800a882 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
	UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a886:	f04f 30ff 	mov.w	r0, #4294967295
 800a88a:	f000 ff1f 	bl	800b6cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800a88e:	bf00      	nop
 800a890:	bd80      	pop	{r7, pc}
	...

0800a894 <SubghzApp_Init>:
static void createPayload(void);
static bool isDuplicate(uint64_t payload);
static void storePayload(uint64_t payload);

void SubghzApp_Init(void)
{
 800a894:	b590      	push	{r4, r7, lr}
 800a896:	b08b      	sub	sp, #44	@ 0x2c
 800a898:	af0a      	add	r7, sp, #40	@ 0x28
  /* Radio initialization */
  RadioEvents.RxDone = OnRxDone;
 800a89a:	4b42      	ldr	r3, [pc, #264]	@ (800a9a4 <SubghzApp_Init+0x110>)
 800a89c:	4a42      	ldr	r2, [pc, #264]	@ (800a9a8 <SubghzApp_Init+0x114>)
 800a89e:	609a      	str	r2, [r3, #8]
  RadioEvents.TxDone = OnTxDone;
 800a8a0:	4b40      	ldr	r3, [pc, #256]	@ (800a9a4 <SubghzApp_Init+0x110>)
 800a8a2:	4a42      	ldr	r2, [pc, #264]	@ (800a9ac <SubghzApp_Init+0x118>)
 800a8a4:	601a      	str	r2, [r3, #0]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a8a6:	4b3f      	ldr	r3, [pc, #252]	@ (800a9a4 <SubghzApp_Init+0x110>)
 800a8a8:	4a41      	ldr	r2, [pc, #260]	@ (800a9b0 <SubghzApp_Init+0x11c>)
 800a8aa:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a8ac:	4b3d      	ldr	r3, [pc, #244]	@ (800a9a4 <SubghzApp_Init+0x110>)
 800a8ae:	4a41      	ldr	r2, [pc, #260]	@ (800a9b4 <SubghzApp_Init+0x120>)
 800a8b0:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a8b2:	4b3c      	ldr	r3, [pc, #240]	@ (800a9a4 <SubghzApp_Init+0x110>)
 800a8b4:	4a40      	ldr	r2, [pc, #256]	@ (800a9b8 <SubghzApp_Init+0x124>)
 800a8b6:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a8b8:	4b40      	ldr	r3, [pc, #256]	@ (800a9bc <SubghzApp_Init+0x128>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4839      	ldr	r0, [pc, #228]	@ (800a9a4 <SubghzApp_Init+0x110>)
 800a8be:	4798      	blx	r3

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800a8c0:	4b3e      	ldr	r3, [pc, #248]	@ (800a9bc <SubghzApp_Init+0x128>)
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	483e      	ldr	r0, [pc, #248]	@ (800a9c0 <SubghzApp_Init+0x12c>)
 800a8c6:	4798      	blx	r3

  /* Radio configuration */
  APP_LOG(TS_OFF, VLEVEL_L, "==========================================\n\r");
 800a8c8:	4b3e      	ldr	r3, [pc, #248]	@ (800a9c4 <SubghzApp_Init+0x130>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	f001 fb36 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "Capstone - BioSensor Solutions - LORA Test\n\r");
 800a8d4:	4b3c      	ldr	r3, [pc, #240]	@ (800a9c8 <SubghzApp_Init+0x134>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2001      	movs	r0, #1
 800a8dc:	f001 fb30 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800a8e0:	237d      	movs	r3, #125	@ 0x7d
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	4b39      	ldr	r3, [pc, #228]	@ (800a9cc <SubghzApp_Init+0x138>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	f001 fb28 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800a8f0:	230a      	movs	r3, #10
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	4b36      	ldr	r3, [pc, #216]	@ (800a9d0 <SubghzApp_Init+0x13c>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	f001 fb20 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "==========================================\n\r");
 800a900:	4b30      	ldr	r3, [pc, #192]	@ (800a9c4 <SubghzApp_Init+0x130>)
 800a902:	2200      	movs	r2, #0
 800a904:	2100      	movs	r1, #0
 800a906:	2001      	movs	r0, #1
 800a908:	f001 fb1a 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800a90c:	4b2b      	ldr	r3, [pc, #172]	@ (800a9bc <SubghzApp_Init+0x128>)
 800a90e:	69dc      	ldr	r4, [r3, #28]
 800a910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a914:	9308      	str	r3, [sp, #32]
 800a916:	2300      	movs	r3, #0
 800a918:	9307      	str	r3, [sp, #28]
 800a91a:	2300      	movs	r3, #0
 800a91c:	9306      	str	r3, [sp, #24]
 800a91e:	2300      	movs	r3, #0
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	2301      	movs	r3, #1
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	2300      	movs	r3, #0
 800a928:	9303      	str	r3, [sp, #12]
 800a92a:	2308      	movs	r3, #8
 800a92c:	9302      	str	r3, [sp, #8]
 800a92e:	2301      	movs	r3, #1
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	230a      	movs	r3, #10
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	2300      	movs	r3, #0
 800a938:	2200      	movs	r2, #0
 800a93a:	210f      	movs	r1, #15
 800a93c:	2001      	movs	r0, #1
 800a93e:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800a940:	4b1e      	ldr	r3, [pc, #120]	@ (800a9bc <SubghzApp_Init+0x128>)
 800a942:	699c      	ldr	r4, [r3, #24]
 800a944:	2301      	movs	r3, #1
 800a946:	9309      	str	r3, [sp, #36]	@ 0x24
 800a948:	2300      	movs	r3, #0
 800a94a:	9308      	str	r3, [sp, #32]
 800a94c:	2300      	movs	r3, #0
 800a94e:	9307      	str	r3, [sp, #28]
 800a950:	2300      	movs	r3, #0
 800a952:	9306      	str	r3, [sp, #24]
 800a954:	2301      	movs	r3, #1
 800a956:	9305      	str	r3, [sp, #20]
 800a958:	2300      	movs	r3, #0
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	2300      	movs	r3, #0
 800a95e:	9303      	str	r3, [sp, #12]
 800a960:	2305      	movs	r3, #5
 800a962:	9302      	str	r3, [sp, #8]
 800a964:	2308      	movs	r3, #8
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	2300      	movs	r3, #0
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	2301      	movs	r3, #1
 800a96e:	220a      	movs	r2, #10
 800a970:	2100      	movs	r1, #0
 800a972:	2001      	movs	r0, #1
 800a974:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, PAYLOAD_SIZE);
 800a976:	4b11      	ldr	r3, [pc, #68]	@ (800a9bc <SubghzApp_Init+0x128>)
 800a978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a97a:	2108      	movs	r1, #8
 800a97c:	2001      	movs	r0, #1
 800a97e:	4798      	blx	r3

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_RX), UTIL_SEQ_RFU, RX_Process);
 800a980:	4a14      	ldr	r2, [pc, #80]	@ (800a9d4 <SubghzApp_Init+0x140>)
 800a982:	2100      	movs	r1, #0
 800a984:	2001      	movs	r0, #1
 800a986:	f000 ff9d 	bl	800b8c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_TX), UTIL_SEQ_RFU, TX_Process);
 800a98a:	4a13      	ldr	r2, [pc, #76]	@ (800a9d8 <SubghzApp_Init+0x144>)
 800a98c:	2100      	movs	r1, #0
 800a98e:	2002      	movs	r0, #2
 800a990:	f000 ff98 	bl	800b8c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800a994:	2102      	movs	r1, #2
 800a996:	2001      	movs	r0, #1
 800a998:	f000 ffb6 	bl	800b908 <UTIL_SEQ_SetTask>
}
 800a99c:	bf00      	nop
 800a99e:	3704      	adds	r7, #4
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd90      	pop	{r4, r7, pc}
 800a9a4:	20000328 	.word	0x20000328
 800a9a8:	0800aa15 	.word	0x0800aa15
 800a9ac:	0800a9dd 	.word	0x0800a9dd
 800a9b0:	0800abed 	.word	0x0800abed
 800a9b4:	0800ac0d 	.word	0x0800ac0d
 800a9b8:	0800ac2d 	.word	0x0800ac2d
 800a9bc:	0800c914 	.word	0x0800c914
 800a9c0:	3689cac0 	.word	0x3689cac0
 800a9c4:	0800c4ec 	.word	0x0800c4ec
 800a9c8:	0800c51c 	.word	0x0800c51c
 800a9cc:	0800c54c 	.word	0x0800c54c
 800a9d0:	0800c560 	.word	0x0800c560
 800a9d4:	0800ac4d 	.word	0x0800ac4d
 800a9d8:	0800ac75 	.word	0x0800ac75

0800a9dc <OnTxDone>:

static void OnTxDone(void)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	af00      	add	r7, sp, #0
    APP_LOG(TS_ON, VLEVEL_M, "TX Done: Successfully sent packet\n\r");
 800a9e0:	4b09      	ldr	r3, [pc, #36]	@ (800aa08 <OnTxDone+0x2c>)
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	2002      	movs	r0, #2
 800a9e8:	f001 faaa 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
    TX_InProgress = false;
 800a9ec:	4b07      	ldr	r3, [pc, #28]	@ (800aa0c <OnTxDone+0x30>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_Port, LED_Pin, GPIO_PIN_SET);
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	2120      	movs	r1, #32
 800a9f6:	4806      	ldr	r0, [pc, #24]	@ (800aa10 <OnTxDone+0x34>)
 800a9f8:	f7f7 feaa 	bl	8002750 <HAL_GPIO_WritePin>
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800a9fc:	2102      	movs	r1, #2
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f000 ff82 	bl	800b908 <UTIL_SEQ_SetTask>
}
 800aa04:	bf00      	nop
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	0800c570 	.word	0x0800c570
 800aa0c:	20000344 	.word	0x20000344
 800aa10:	48000400 	.word	0x48000400

0800aa14 <OnRxDone>:

static void OnRxDone(uint8_t *pay, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b088      	sub	sp, #32
 800aa18:	af02      	add	r7, sp, #8
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	4608      	mov	r0, r1
 800aa1e:	4611      	mov	r1, r2
 800aa20:	461a      	mov	r2, r3
 800aa22:	4603      	mov	r3, r0
 800aa24:	817b      	strh	r3, [r7, #10]
 800aa26:	460b      	mov	r3, r1
 800aa28:	813b      	strh	r3, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	71fb      	strb	r3, [r7, #7]
	payload = *(uint64_t*)pay;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	495d      	ldr	r1, [pc, #372]	@ (800abac <OnRxDone+0x198>)
 800aa36:	e9c1 2300 	strd	r2, r3, [r1]
	conf = (uint8_t)(payload >> 56);
 800aa3a:	4b5c      	ldr	r3, [pc, #368]	@ (800abac <OnRxDone+0x198>)
 800aa3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa40:	f04f 0200 	mov.w	r2, #0
 800aa44:	f04f 0300 	mov.w	r3, #0
 800aa48:	0e0a      	lsrs	r2, r1, #24
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	b2d2      	uxtb	r2, r2
 800aa4e:	4b58      	ldr	r3, [pc, #352]	@ (800abb0 <OnRxDone+0x19c>)
 800aa50:	701a      	strb	r2, [r3, #0]
    deviceNum = (uint32_t)(payload >> 24);
 800aa52:	4b56      	ldr	r3, [pc, #344]	@ (800abac <OnRxDone+0x198>)
 800aa54:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	f04f 0300 	mov.w	r3, #0
 800aa60:	0e02      	lsrs	r2, r0, #24
 800aa62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800aa66:	0e0b      	lsrs	r3, r1, #24
 800aa68:	4b52      	ldr	r3, [pc, #328]	@ (800abb4 <OnRxDone+0x1a0>)
 800aa6a:	601a      	str	r2, [r3, #0]
    data = ((uint32_t)(payload << 8)) >> 8;
 800aa6c:	4b4f      	ldr	r3, [pc, #316]	@ (800abac <OnRxDone+0x198>)
 800aa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa72:	4613      	mov	r3, r2
 800aa74:	021b      	lsls	r3, r3, #8
 800aa76:	0a1b      	lsrs	r3, r3, #8
 800aa78:	4a4f      	ldr	r2, [pc, #316]	@ (800abb8 <OnRxDone+0x1a4>)
 800aa7a:	6013      	str	r3, [r2, #0]
	APP_LOG(TS_OFF, VLEVEL_L, "------------------------------------\n\r");
 800aa7c:	4b4f      	ldr	r3, [pc, #316]	@ (800abbc <OnRxDone+0x1a8>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2100      	movs	r1, #0
 800aa82:	2001      	movs	r0, #1
 800aa84:	f001 fa5c 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "RX Packet Successfully Received!\n\r");
 800aa88:	4b4d      	ldr	r3, [pc, #308]	@ (800abc0 <OnRxDone+0x1ac>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	2001      	movs	r0, #1
 800aa90:	f001 fa56 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800aa94:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aa98:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800aa9c:	9201      	str	r2, [sp, #4]
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4b48      	ldr	r3, [pc, #288]	@ (800abc4 <OnRxDone+0x1b0>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	f001 fa4a 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	bool duplicate = isDuplicate(payload);
 800aaac:	4b3f      	ldr	r3, [pc, #252]	@ (800abac <OnRxDone+0x198>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	4610      	mov	r0, r2
 800aab4:	4619      	mov	r1, r3
 800aab6:	f000 f9ad 	bl	800ae14 <isDuplicate>
 800aaba:	4603      	mov	r3, r0
 800aabc:	75fb      	strb	r3, [r7, #23]
    if(conf == CONF && !duplicate){
 800aabe:	4b3c      	ldr	r3, [pc, #240]	@ (800abb0 <OnRxDone+0x19c>)
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2bce      	cmp	r3, #206	@ 0xce
 800aac4:	d140      	bne.n	800ab48 <OnRxDone+0x134>
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	f083 0301 	eor.w	r3, r3, #1
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d03a      	beq.n	800ab48 <OnRxDone+0x134>
		APP_LOG(TS_OFF, VLEVEL_L, "Confirmation - %02X\n\r", conf);
 800aad2:	4b37      	ldr	r3, [pc, #220]	@ (800abb0 <OnRxDone+0x19c>)
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	4b3b      	ldr	r3, [pc, #236]	@ (800abc8 <OnRxDone+0x1b4>)
 800aada:	2200      	movs	r2, #0
 800aadc:	2100      	movs	r1, #0
 800aade:	2001      	movs	r0, #1
 800aae0:	f001 fa2e 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_L, "Device Number - %08X\n\r", deviceNum);
 800aae4:	4b33      	ldr	r3, [pc, #204]	@ (800abb4 <OnRxDone+0x1a0>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	4b38      	ldr	r3, [pc, #224]	@ (800abcc <OnRxDone+0x1b8>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	2001      	movs	r0, #1
 800aaf2:	f001 fa25 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_L, "Data - %06X\n\r", data);
 800aaf6:	4b30      	ldr	r3, [pc, #192]	@ (800abb8 <OnRxDone+0x1a4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	4b34      	ldr	r3, [pc, #208]	@ (800abd0 <OnRxDone+0x1bc>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	2100      	movs	r1, #0
 800ab02:	2001      	movs	r0, #1
 800ab04:	f001 fa1c 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_L, "Payload - %08X%08X\n\r", (uint32_t)(payload >> 32), (uint32_t)payload);
 800ab08:	4b28      	ldr	r3, [pc, #160]	@ (800abac <OnRxDone+0x198>)
 800ab0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	f04f 0300 	mov.w	r3, #0
 800ab16:	000a      	movs	r2, r1
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4b23      	ldr	r3, [pc, #140]	@ (800abac <OnRxDone+0x198>)
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	4613      	mov	r3, r2
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	9100      	str	r1, [sp, #0]
 800ab28:	4b2a      	ldr	r3, [pc, #168]	@ (800abd4 <OnRxDone+0x1c0>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	2001      	movs	r0, #1
 800ab30:	f001 fa06 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_L, "Unique Packet! Repeating Now\n\r");
 800ab34:	4b28      	ldr	r3, [pc, #160]	@ (800abd8 <OnRxDone+0x1c4>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	2100      	movs	r1, #0
 800ab3a:	2001      	movs	r0, #1
 800ab3c:	f001 fa00 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
		repeater = true;
 800ab40:	4b26      	ldr	r3, [pc, #152]	@ (800abdc <OnRxDone+0x1c8>)
 800ab42:	2201      	movs	r2, #1
 800ab44:	701a      	strb	r2, [r3, #0]
 800ab46:	e015      	b.n	800ab74 <OnRxDone+0x160>
    }
    else if (duplicate){
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d009      	beq.n	800ab62 <OnRxDone+0x14e>
	 	APP_LOG(TS_OFF, VLEVEL_L, "Duplicate packet detected! Not repeating.\n\r");
 800ab4e:	4b24      	ldr	r3, [pc, #144]	@ (800abe0 <OnRxDone+0x1cc>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	2100      	movs	r1, #0
 800ab54:	2001      	movs	r0, #1
 800ab56:	f001 f9f3 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	 	repeater = false;
 800ab5a:	4b20      	ldr	r3, [pc, #128]	@ (800abdc <OnRxDone+0x1c8>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	e008      	b.n	800ab74 <OnRxDone+0x160>
    }
    else{
    	APP_LOG(TS_OFF, VLEVEL_L, "Incorrect Confirmation Number\n\r");
 800ab62:	4b20      	ldr	r3, [pc, #128]	@ (800abe4 <OnRxDone+0x1d0>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	2100      	movs	r1, #0
 800ab68:	2001      	movs	r0, #1
 800ab6a:	f001 f9e9 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
    	repeater = false;
 800ab6e:	4b1b      	ldr	r3, [pc, #108]	@ (800abdc <OnRxDone+0x1c8>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	701a      	strb	r2, [r3, #0]
    }
	APP_LOG(TS_OFF, VLEVEL_L, "------------------------------------\n\r");
 800ab74:	4b11      	ldr	r3, [pc, #68]	@ (800abbc <OnRxDone+0x1a8>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	2100      	movs	r1, #0
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	f001 f9e0 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	memset(BufferRx, 0, PAYLOAD_SIZE);
 800ab80:	2208      	movs	r2, #8
 800ab82:	2100      	movs	r1, #0
 800ab84:	4818      	ldr	r0, [pc, #96]	@ (800abe8 <OnRxDone+0x1d4>)
 800ab86:	f001 fc53 	bl	800c430 <memset>
	if(repeater)
 800ab8a:	4b14      	ldr	r3, [pc, #80]	@ (800abdc <OnRxDone+0x1c8>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d004      	beq.n	800ab9c <OnRxDone+0x188>
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_TX), CFG_SEQ_Prio_TX);
 800ab92:	2101      	movs	r1, #1
 800ab94:	2002      	movs	r0, #2
 800ab96:	f000 feb7 	bl	800b908 <UTIL_SEQ_SetTask>
	else
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
}
 800ab9a:	e003      	b.n	800aba4 <OnRxDone+0x190>
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800ab9c:	2102      	movs	r1, #2
 800ab9e:	2001      	movs	r0, #1
 800aba0:	f000 feb2 	bl	800b908 <UTIL_SEQ_SetTask>
}
 800aba4:	bf00      	nop
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	20000368 	.word	0x20000368
 800abb0:	20000358 	.word	0x20000358
 800abb4:	2000035c 	.word	0x2000035c
 800abb8:	20000360 	.word	0x20000360
 800abbc:	0800c594 	.word	0x0800c594
 800abc0:	0800c5bc 	.word	0x0800c5bc
 800abc4:	0800c5e0 	.word	0x0800c5e0
 800abc8:	0800c604 	.word	0x0800c604
 800abcc:	0800c61c 	.word	0x0800c61c
 800abd0:	0800c634 	.word	0x0800c634
 800abd4:	0800c644 	.word	0x0800c644
 800abd8:	0800c65c 	.word	0x0800c65c
 800abdc:	20000345 	.word	0x20000345
 800abe0:	0800c67c 	.word	0x0800c67c
 800abe4:	0800c6a8 	.word	0x0800c6a8
 800abe8:	20000348 	.word	0x20000348

0800abec <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
	APP_LOG(TS_OFF, VLEVEL_M, "TX Timeout: Retrying TX\n\r");
 800abf0:	4b05      	ldr	r3, [pc, #20]	@ (800ac08 <OnTxTimeout+0x1c>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	2100      	movs	r1, #0
 800abf6:	2002      	movs	r0, #2
 800abf8:	f001 f9a2 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_TX), CFG_SEQ_Prio_TX);
 800abfc:	2101      	movs	r1, #1
 800abfe:	2002      	movs	r0, #2
 800ac00:	f000 fe82 	bl	800b908 <UTIL_SEQ_SetTask>
}
 800ac04:	bf00      	nop
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	0800c6c8 	.word	0x0800c6c8

0800ac0c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
	APP_LOG(TS_ON, VLEVEL_M, "RX Timeout: Retrying RX\n\r");
 800ac10:	4b05      	ldr	r3, [pc, #20]	@ (800ac28 <OnRxTimeout+0x1c>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	2100      	movs	r1, #0
 800ac16:	2002      	movs	r0, #2
 800ac18:	f001 f992 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800ac1c:	2102      	movs	r1, #2
 800ac1e:	2001      	movs	r0, #1
 800ac20:	f000 fe72 	bl	800b908 <UTIL_SEQ_SetTask>
}
 800ac24:	bf00      	nop
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	0800c6e4 	.word	0x0800c6e4

0800ac2c <OnRxError>:

static void OnRxError(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0
	APP_LOG(TS_ON, VLEVEL_M, "RX Error: Retrying RX\n\r");
 800ac30:	4b05      	ldr	r3, [pc, #20]	@ (800ac48 <OnRxError+0x1c>)
 800ac32:	2201      	movs	r2, #1
 800ac34:	2100      	movs	r1, #0
 800ac36:	2002      	movs	r0, #2
 800ac38:	f001 f982 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RX), CFG_SEQ_Prio_RX);
 800ac3c:	2102      	movs	r1, #2
 800ac3e:	2001      	movs	r0, #1
 800ac40:	f000 fe62 	bl	800b908 <UTIL_SEQ_SetTask>
}
 800ac44:	bf00      	nop
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	0800c700 	.word	0x0800c700

0800ac4c <RX_Process>:

static void RX_Process(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
	APP_LOG(TS_ON, VLEVEL_M, "RX Start\n\r");
 800ac50:	4b06      	ldr	r3, [pc, #24]	@ (800ac6c <RX_Process+0x20>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	2100      	movs	r1, #0
 800ac56:	2002      	movs	r0, #2
 800ac58:	f001 f972 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	Radio.Rx(RX_TIMEOUT_VALUE);
 800ac5c:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <RX_Process+0x24>)
 800ac5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac60:	f241 3088 	movw	r0, #5000	@ 0x1388
 800ac64:	4798      	blx	r3
}
 800ac66:	bf00      	nop
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	0800c718 	.word	0x0800c718
 800ac70:	0800c914 	.word	0x0800c914

0800ac74 <TX_Process>:

static void TX_Process(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Port, LED_Pin, GPIO_PIN_RESET);
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2120      	movs	r1, #32
 800ac7c:	480f      	ldr	r0, [pc, #60]	@ (800acbc <TX_Process+0x48>)
 800ac7e:	f7f7 fd67 	bl	8002750 <HAL_GPIO_WritePin>
	APP_LOG(TS_ON, VLEVEL_M, "TX Start: Attempting to send payload\n\r");
 800ac82:	4b0f      	ldr	r3, [pc, #60]	@ (800acc0 <TX_Process+0x4c>)
 800ac84:	2201      	movs	r2, #1
 800ac86:	2100      	movs	r1, #0
 800ac88:	2002      	movs	r0, #2
 800ac8a:	f001 f959 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	TX_InProgress = true;
 800ac8e:	4b0d      	ldr	r3, [pc, #52]	@ (800acc4 <TX_Process+0x50>)
 800ac90:	2201      	movs	r2, #1
 800ac92:	701a      	strb	r2, [r3, #0]
	storePayload(payload);
 800ac94:	4b0c      	ldr	r3, [pc, #48]	@ (800acc8 <TX_Process+0x54>)
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	f000 f8e1 	bl	800ae64 <storePayload>
	memcpy(BufferTx, &payload, PAYLOAD_SIZE);
 800aca2:	4b0a      	ldr	r3, [pc, #40]	@ (800accc <TX_Process+0x58>)
 800aca4:	4a08      	ldr	r2, [pc, #32]	@ (800acc8 <TX_Process+0x54>)
 800aca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800acaa:	e883 0003 	stmia.w	r3, {r0, r1}
    Radio.Send(BufferTx, PAYLOAD_SIZE);
 800acae:	4b08      	ldr	r3, [pc, #32]	@ (800acd0 <TX_Process+0x5c>)
 800acb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb2:	2108      	movs	r1, #8
 800acb4:	4805      	ldr	r0, [pc, #20]	@ (800accc <TX_Process+0x58>)
 800acb6:	4798      	blx	r3
}
 800acb8:	bf00      	nop
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	48000400 	.word	0x48000400
 800acc0:	0800c724 	.word	0x0800c724
 800acc4:	20000344 	.word	0x20000344
 800acc8:	20000368 	.word	0x20000368
 800accc:	20000350 	.word	0x20000350
 800acd0:	0800c914 	.word	0x0800c914

0800acd4 <createPayload>:

static void createPayload(void){
 800acd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acd8:	b088      	sub	sp, #32
 800acda:	af02      	add	r7, sp, #8
	conf = CONF;
 800acdc:	4a42      	ldr	r2, [pc, #264]	@ (800ade8 <createPayload+0x114>)
 800acde:	23ce      	movs	r3, #206	@ 0xce
 800ace0:	7013      	strb	r3, [r2, #0]
	deviceNum = UID_GetDeviceNumber();
 800ace2:	f7f6 fc87 	bl	80015f4 <UID_GetDeviceNumber>
 800ace6:	4603      	mov	r3, r0
 800ace8:	4a40      	ldr	r2, [pc, #256]	@ (800adec <createPayload+0x118>)
 800acea:	6013      	str	r3, [r2, #0]
	data = (Radio.Random()) >> 8;
 800acec:	4b40      	ldr	r3, [pc, #256]	@ (800adf0 <createPayload+0x11c>)
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	4798      	blx	r3
 800acf2:	4603      	mov	r3, r0
 800acf4:	0a1b      	lsrs	r3, r3, #8
 800acf6:	4a3f      	ldr	r2, [pc, #252]	@ (800adf4 <createPayload+0x120>)
 800acf8:	6013      	str	r3, [r2, #0]
	payload = ((uint64_t)conf << 56)
 800acfa:	4b3b      	ldr	r3, [pc, #236]	@ (800ade8 <createPayload+0x114>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2200      	movs	r2, #0
 800ad02:	613b      	str	r3, [r7, #16]
 800ad04:	617a      	str	r2, [r7, #20]
 800ad06:	f04f 0200 	mov.w	r2, #0
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	6939      	ldr	r1, [r7, #16]
 800ad10:	060b      	lsls	r3, r1, #24
 800ad12:	2200      	movs	r2, #0
                     | ((uint64_t)deviceNum << 24)
 800ad14:	4935      	ldr	r1, [pc, #212]	@ (800adec <createPayload+0x118>)
 800ad16:	6809      	ldr	r1, [r1, #0]
 800ad18:	2000      	movs	r0, #0
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad22:	4684      	mov	ip, r0
 800ad24:	ea4f 291c 	mov.w	r9, ip, lsr #8
 800ad28:	4601      	mov	r1, r0
 800ad2a:	ea4f 6801 	mov.w	r8, r1, lsl #24
 800ad2e:	ea42 0408 	orr.w	r4, r2, r8
 800ad32:	ea43 0509 	orr.w	r5, r3, r9
                     | ((uint64_t)data);
 800ad36:	4b2f      	ldr	r3, [pc, #188]	@ (800adf4 <createPayload+0x120>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	469a      	mov	sl, r3
 800ad3e:	4693      	mov	fp, r2
 800ad40:	ea44 030a 	orr.w	r3, r4, sl
 800ad44:	603b      	str	r3, [r7, #0]
 800ad46:	ea45 030b 	orr.w	r3, r5, fp
 800ad4a:	607b      	str	r3, [r7, #4]
	payload = ((uint64_t)conf << 56)
 800ad4c:	4b2a      	ldr	r3, [pc, #168]	@ (800adf8 <createPayload+0x124>)
 800ad4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ad52:	e9c3 1200 	strd	r1, r2, [r3]

	APP_LOG(TS_OFF, VLEVEL_L, "------------------------------------\n\r");
 800ad56:	4b29      	ldr	r3, [pc, #164]	@ (800adfc <createPayload+0x128>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	f001 f8ef 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Payload Created:\n\r");
 800ad62:	4b27      	ldr	r3, [pc, #156]	@ (800ae00 <createPayload+0x12c>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	2100      	movs	r1, #0
 800ad68:	2001      	movs	r0, #1
 800ad6a:	f001 f8e9 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Confirmation - %02X\n\r", conf);
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <createPayload+0x114>)
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	4b23      	ldr	r3, [pc, #140]	@ (800ae04 <createPayload+0x130>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	2100      	movs	r1, #0
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	f001 f8e0 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Device Number - %08X\n\r", deviceNum);
 800ad80:	4b1a      	ldr	r3, [pc, #104]	@ (800adec <createPayload+0x118>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	4b20      	ldr	r3, [pc, #128]	@ (800ae08 <createPayload+0x134>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	f001 f8d7 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Data - %06X\n\r", data);
 800ad92:	4b18      	ldr	r3, [pc, #96]	@ (800adf4 <createPayload+0x120>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	4b1c      	ldr	r3, [pc, #112]	@ (800ae0c <createPayload+0x138>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	2001      	movs	r0, #1
 800ada0:	f001 f8ce 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "Payload - %08X%08X\n\r", (uint32_t)(payload >> 32), (uint32_t)payload);
 800ada4:	4b14      	ldr	r3, [pc, #80]	@ (800adf8 <createPayload+0x124>)
 800ada6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800adaa:	f04f 0200 	mov.w	r2, #0
 800adae:	f04f 0300 	mov.w	r3, #0
 800adb2:	000a      	movs	r2, r1
 800adb4:	2300      	movs	r3, #0
 800adb6:	4611      	mov	r1, r2
 800adb8:	4b0f      	ldr	r3, [pc, #60]	@ (800adf8 <createPayload+0x124>)
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	4613      	mov	r3, r2
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	9100      	str	r1, [sp, #0]
 800adc4:	4b12      	ldr	r3, [pc, #72]	@ (800ae10 <createPayload+0x13c>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	2100      	movs	r1, #0
 800adca:	2001      	movs	r0, #1
 800adcc:	f001 f8b8 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, "------------------------------------\n\r");
 800add0:	4b0a      	ldr	r3, [pc, #40]	@ (800adfc <createPayload+0x128>)
 800add2:	2200      	movs	r2, #0
 800add4:	2100      	movs	r1, #0
 800add6:	2001      	movs	r0, #1
 800add8:	f001 f8b2 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
}
 800addc:	bf00      	nop
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ade6:	bf00      	nop
 800ade8:	20000358 	.word	0x20000358
 800adec:	2000035c 	.word	0x2000035c
 800adf0:	0800c914 	.word	0x0800c914
 800adf4:	20000360 	.word	0x20000360
 800adf8:	20000368 	.word	0x20000368
 800adfc:	0800c594 	.word	0x0800c594
 800ae00:	0800c74c 	.word	0x0800c74c
 800ae04:	0800c604 	.word	0x0800c604
 800ae08:	0800c61c 	.word	0x0800c61c
 800ae0c:	0800c634 	.word	0x0800c634
 800ae10:	0800c644 	.word	0x0800c644

0800ae14 <isDuplicate>:


static bool isDuplicate(uint64_t payload)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	e9c7 0100 	strd	r0, r1, [r7]
    for (uint16_t i = 0; i < bufferIndex; i++) {
 800ae1e:	2300      	movs	r3, #0
 800ae20:	81fb      	strh	r3, [r7, #14]
 800ae22:	e010      	b.n	800ae46 <isDuplicate+0x32>
        if (BufferData[i] == payload)
 800ae24:	89fb      	ldrh	r3, [r7, #14]
 800ae26:	4a0d      	ldr	r2, [pc, #52]	@ (800ae5c <isDuplicate+0x48>)
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	4413      	add	r3, r2
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae34:	4299      	cmp	r1, r3
 800ae36:	bf08      	it	eq
 800ae38:	4290      	cmpeq	r0, r2
 800ae3a:	d101      	bne.n	800ae40 <isDuplicate+0x2c>
            return true;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e008      	b.n	800ae52 <isDuplicate+0x3e>
    for (uint16_t i = 0; i < bufferIndex; i++) {
 800ae40:	89fb      	ldrh	r3, [r7, #14]
 800ae42:	3301      	adds	r3, #1
 800ae44:	81fb      	strh	r3, [r7, #14]
 800ae46:	4b06      	ldr	r3, [pc, #24]	@ (800ae60 <isDuplicate+0x4c>)
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	89fa      	ldrh	r2, [r7, #14]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d3e9      	bcc.n	800ae24 <isDuplicate+0x10>
    }
    return false;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr
 800ae5c:	20000370 	.word	0x20000370
 800ae60:	20000690 	.word	0x20000690

0800ae64 <storePayload>:

static void storePayload(uint64_t payload)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	e9c7 0100 	strd	r0, r1, [r7]
    if (bufferIndex < NUM_PAYLOADS_STORE) {
 800ae6e:	4b0e      	ldr	r3, [pc, #56]	@ (800aea8 <storePayload+0x44>)
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	2b63      	cmp	r3, #99	@ 0x63
 800ae74:	d80d      	bhi.n	800ae92 <storePayload+0x2e>
        BufferData[bufferIndex++] = payload;
 800ae76:	4b0c      	ldr	r3, [pc, #48]	@ (800aea8 <storePayload+0x44>)
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	b291      	uxth	r1, r2
 800ae7e:	4a0a      	ldr	r2, [pc, #40]	@ (800aea8 <storePayload+0x44>)
 800ae80:	8011      	strh	r1, [r2, #0]
 800ae82:	4a0a      	ldr	r2, [pc, #40]	@ (800aeac <storePayload+0x48>)
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	18d1      	adds	r1, r2, r3
 800ae88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae8c:	e9c1 2300 	strd	r2, r3, [r1]
    } else {
        APP_LOG(TS_OFF, VLEVEL_L, "Buffer full! Cannot store new payloads.\n\r");
    }
}
 800ae90:	e005      	b.n	800ae9e <storePayload+0x3a>
        APP_LOG(TS_OFF, VLEVEL_L, "Buffer full! Cannot store new payloads.\n\r");
 800ae92:	4b07      	ldr	r3, [pc, #28]	@ (800aeb0 <storePayload+0x4c>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	2001      	movs	r0, #1
 800ae9a:	f001 f851 	bl	800bf40 <UTIL_ADV_TRACE_COND_FSend>
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000690 	.word	0x20000690
 800aeac:	20000370 	.word	0x20000370
 800aeb0:	0800c760 	.word	0x0800c760

0800aeb4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUT_Pin && !TX_InProgress){
 800aebe:	88fb      	ldrh	r3, [r7, #6]
 800aec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aec4:	d10c      	bne.n	800aee0 <HAL_GPIO_EXTI_Callback+0x2c>
 800aec6:	4b08      	ldr	r3, [pc, #32]	@ (800aee8 <HAL_GPIO_EXTI_Callback+0x34>)
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	f083 0301 	eor.w	r3, r3, #1
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d005      	beq.n	800aee0 <HAL_GPIO_EXTI_Callback+0x2c>
	  createPayload();
 800aed4:	f7ff fefe 	bl	800acd4 <createPayload>
   	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_TX), CFG_SEQ_Prio_TX);
 800aed8:	2101      	movs	r1, #1
 800aeda:	2002      	movs	r0, #2
 800aedc:	f000 fd14 	bl	800b908 <UTIL_SEQ_SetTask>
  }
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20000344 	.word	0x20000344

0800aeec <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800aef0:	f7f6 fbcc 	bl	800168c <BSP_RADIO_Init>
 800aef4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	4603      	mov	r3, r0
 800af02:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	4618      	mov	r0, r3
 800af08:	f7f6 fbfe 	bl	8001708 <BSP_RADIO_ConfigRFSwitch>
 800af0c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800af1a:	f7f6 fc51 	bl	80017c0 <BSP_RADIO_GetTxConfig>
 800af1e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800af20:	4618      	mov	r0, r3
 800af22:	bd80      	pop	{r7, pc}

0800af24 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800af28:	f7f6 fc51 	bl	80017ce <BSP_RADIO_IsTCXO>
 800af2c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800af2e:	4618      	mov	r0, r3
 800af30:	bd80      	pop	{r7, pc}

0800af32 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800af36:	f7f6 fc51 	bl	80017dc <BSP_RADIO_IsDCDC>
 800af3a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800af4a:	79fb      	ldrb	r3, [r7, #7]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f6 fc4c 	bl	80017ea <BSP_RADIO_GetRFOMaxPowerConfig>
 800af52:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800af54:	4618      	mov	r0, r3
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800af5c:	b480      	push	{r7}
 800af5e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800af60:	4b04      	ldr	r3, [pc, #16]	@ (800af74 <UTIL_LPM_Init+0x18>)
 800af62:	2200      	movs	r2, #0
 800af64:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800af66:	4b04      	ldr	r3, [pc, #16]	@ (800af78 <UTIL_LPM_Init+0x1c>)
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800af6c:	bf00      	nop
 800af6e:	46bd      	mov	sp, r7
 800af70:	bc80      	pop	{r7}
 800af72:	4770      	bx	lr
 800af74:	20000694 	.word	0x20000694
 800af78:	20000698 	.word	0x20000698

0800af7c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af88:	f3ef 8310 	mrs	r3, PRIMASK
 800af8c:	613b      	str	r3, [r7, #16]
  return(result);
 800af8e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800af90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af92:	b672      	cpsid	i
}
 800af94:	bf00      	nop
  
  switch( state )
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d008      	beq.n	800afae <UTIL_LPM_SetStopMode+0x32>
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d10e      	bne.n	800afbe <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800afa0:	4b0d      	ldr	r3, [pc, #52]	@ (800afd8 <UTIL_LPM_SetStopMode+0x5c>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	4a0b      	ldr	r2, [pc, #44]	@ (800afd8 <UTIL_LPM_SetStopMode+0x5c>)
 800afaa:	6013      	str	r3, [r2, #0]
      break;
 800afac:	e008      	b.n	800afc0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	43da      	mvns	r2, r3
 800afb2:	4b09      	ldr	r3, [pc, #36]	@ (800afd8 <UTIL_LPM_SetStopMode+0x5c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4013      	ands	r3, r2
 800afb8:	4a07      	ldr	r2, [pc, #28]	@ (800afd8 <UTIL_LPM_SetStopMode+0x5c>)
 800afba:	6013      	str	r3, [r2, #0]
      break;
 800afbc:	e000      	b.n	800afc0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800afbe:	bf00      	nop
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f383 8810 	msr	PRIMASK, r3
}
 800afca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800afcc:	bf00      	nop
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bc80      	pop	{r7}
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	20000694 	.word	0x20000694

0800afdc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800afdc:	b480      	push	{r7}
 800afde:	b087      	sub	sp, #28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afe8:	f3ef 8310 	mrs	r3, PRIMASK
 800afec:	613b      	str	r3, [r7, #16]
  return(result);
 800afee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800aff0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aff2:	b672      	cpsid	i
}
 800aff4:	bf00      	nop
  
  switch(state)
 800aff6:	78fb      	ldrb	r3, [r7, #3]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d008      	beq.n	800b00e <UTIL_LPM_SetOffMode+0x32>
 800affc:	2b01      	cmp	r3, #1
 800affe:	d10e      	bne.n	800b01e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b000:	4b0d      	ldr	r3, [pc, #52]	@ (800b038 <UTIL_LPM_SetOffMode+0x5c>)
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4313      	orrs	r3, r2
 800b008:	4a0b      	ldr	r2, [pc, #44]	@ (800b038 <UTIL_LPM_SetOffMode+0x5c>)
 800b00a:	6013      	str	r3, [r2, #0]
      break;
 800b00c:	e008      	b.n	800b020 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	43da      	mvns	r2, r3
 800b012:	4b09      	ldr	r3, [pc, #36]	@ (800b038 <UTIL_LPM_SetOffMode+0x5c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4013      	ands	r3, r2
 800b018:	4a07      	ldr	r2, [pc, #28]	@ (800b038 <UTIL_LPM_SetOffMode+0x5c>)
 800b01a:	6013      	str	r3, [r2, #0]
      break;
 800b01c:	e000      	b.n	800b020 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b01e:	bf00      	nop
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f383 8810 	msr	PRIMASK, r3
}
 800b02a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b02c:	bf00      	nop
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	bc80      	pop	{r7}
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	20000698 	.word	0x20000698

0800b03c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b042:	f3ef 8310 	mrs	r3, PRIMASK
 800b046:	60bb      	str	r3, [r7, #8]
  return(result);
 800b048:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800b04a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b04c:	b672      	cpsid	i
}
 800b04e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b050:	4b12      	ldr	r3, [pc, #72]	@ (800b09c <UTIL_LPM_EnterLowPower+0x60>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d006      	beq.n	800b066 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b058:	4b11      	ldr	r3, [pc, #68]	@ (800b0a0 <UTIL_LPM_EnterLowPower+0x64>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b05e:	4b10      	ldr	r3, [pc, #64]	@ (800b0a0 <UTIL_LPM_EnterLowPower+0x64>)
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	4798      	blx	r3
 800b064:	e010      	b.n	800b088 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b066:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a4 <UTIL_LPM_EnterLowPower+0x68>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d006      	beq.n	800b07c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800b06e:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a0 <UTIL_LPM_EnterLowPower+0x64>)
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b074:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a0 <UTIL_LPM_EnterLowPower+0x64>)
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	4798      	blx	r3
 800b07a:	e005      	b.n	800b088 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800b07c:	4b08      	ldr	r3, [pc, #32]	@ (800b0a0 <UTIL_LPM_EnterLowPower+0x64>)
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b082:	4b07      	ldr	r3, [pc, #28]	@ (800b0a0 <UTIL_LPM_EnterLowPower+0x64>)
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	4798      	blx	r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f383 8810 	msr	PRIMASK, r3
}
 800b092:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b094:	bf00      	nop
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	20000694 	.word	0x20000694
 800b0a0:	0800c7e4 	.word	0x0800c7e4
 800b0a4:	20000698 	.word	0x20000698

0800b0a8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b0be:	e007      	b.n	800b0d0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	1c53      	adds	r3, r2, #1
 800b0c4:	613b      	str	r3, [r7, #16]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	1c59      	adds	r1, r3, #1
 800b0ca:	6179      	str	r1, [r7, #20]
 800b0cc:	7812      	ldrb	r2, [r2, #0]
 800b0ce:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b0d0:	88fb      	ldrh	r3, [r7, #6]
 800b0d2:	1e5a      	subs	r2, r3, #1
 800b0d4:	80fa      	strh	r2, [r7, #6]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1f2      	bne.n	800b0c0 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b0da:	bf00      	nop
 800b0dc:	bf00      	nop
 800b0de:	371c      	adds	r7, #28
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc80      	pop	{r7}
 800b0e4:	4770      	bx	lr

0800b0e6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b0fa:	e004      	b.n	800b106 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	60fa      	str	r2, [r7, #12]
 800b102:	78fa      	ldrb	r2, [r7, #3]
 800b104:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b106:	883b      	ldrh	r3, [r7, #0]
 800b108:	1e5a      	subs	r2, r3, #1
 800b10a:	803a      	strh	r2, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1f5      	bne.n	800b0fc <UTIL_MEM_set_8+0x16>
  }
}
 800b110:	bf00      	nop
 800b112:	bf00      	nop
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	bc80      	pop	{r7}
 800b11a:	4770      	bx	lr

0800b11c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b11c:	b082      	sub	sp, #8
 800b11e:	b480      	push	{r7}
 800b120:	b087      	sub	sp, #28
 800b122:	af00      	add	r7, sp, #0
 800b124:	60f8      	str	r0, [r7, #12]
 800b126:	1d38      	adds	r0, r7, #4
 800b128:	e880 0006 	stmia.w	r0, {r1, r2}
 800b12c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800b12e:	2300      	movs	r3, #0
 800b130:	613b      	str	r3, [r7, #16]
 800b132:	2300      	movs	r3, #0
 800b134:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13a:	4413      	add	r3, r2
 800b13c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b13e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b142:	b29a      	uxth	r2, r3
 800b144:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800b148:	b29b      	uxth	r3, r3
 800b14a:	4413      	add	r3, r2
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	b21b      	sxth	r3, r3
 800b150:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800b152:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b15a:	db0a      	blt.n	800b172 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	3301      	adds	r3, #1
 800b160:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800b162:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b166:	b29b      	uxth	r3, r3
 800b168:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	b21b      	sxth	r3, r3
 800b170:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	461a      	mov	r2, r3
 800b176:	f107 0310 	add.w	r3, r7, #16
 800b17a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b17e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	371c      	adds	r7, #28
 800b186:	46bd      	mov	sp, r7
 800b188:	bc80      	pop	{r7}
 800b18a:	b002      	add	sp, #8
 800b18c:	4770      	bx	lr
	...

0800b190 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08a      	sub	sp, #40	@ 0x28
 800b194:	af02      	add	r7, sp, #8
 800b196:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b198:	2300      	movs	r3, #0
 800b19a:	61bb      	str	r3, [r7, #24]
 800b19c:	2300      	movs	r3, #0
 800b19e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	613b      	str	r3, [r7, #16]
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b1a8:	4b14      	ldr	r3, [pc, #80]	@ (800b1fc <SysTimeGet+0x6c>)
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	f107 0218 	add.w	r2, r7, #24
 800b1b0:	3204      	adds	r2, #4
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	4798      	blx	r3
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b1ba:	4b10      	ldr	r3, [pc, #64]	@ (800b1fc <SysTimeGet+0x6c>)
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	4798      	blx	r3
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	b21b      	sxth	r3, r3
 800b1c4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <SysTimeGet+0x6c>)
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	4798      	blx	r3
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b1d0:	f107 0010 	add.w	r0, r7, #16
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	f107 0208 	add.w	r2, r7, #8
 800b1de:	ca06      	ldmia	r2, {r1, r2}
 800b1e0:	f7ff ff9c 	bl	800b11c <SysTimeAdd>

  return sysTime;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f107 0310 	add.w	r3, r7, #16
 800b1ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1f0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	3720      	adds	r7, #32
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	0800c8c8 	.word	0x0800c8c8

0800b200 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b20c:	e00e      	b.n	800b22c <ee_skip_atoi+0x2c>
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	4618      	mov	r0, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	1c59      	adds	r1, r3, #1
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6011      	str	r1, [r2, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	4403      	add	r3, r0
 800b228:	3b30      	subs	r3, #48	@ 0x30
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	2b2f      	cmp	r3, #47	@ 0x2f
 800b234:	d904      	bls.n	800b240 <ee_skip_atoi+0x40>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b39      	cmp	r3, #57	@ 0x39
 800b23e:	d9e6      	bls.n	800b20e <ee_skip_atoi+0xe>
  return i;
 800b240:	68fb      	ldr	r3, [r7, #12]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3714      	adds	r7, #20
 800b246:	46bd      	mov	sp, r7
 800b248:	bc80      	pop	{r7}
 800b24a:	4770      	bx	lr

0800b24c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b099      	sub	sp, #100	@ 0x64
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
 800b258:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800b25a:	4b71      	ldr	r3, [pc, #452]	@ (800b420 <ee_number+0x1d4>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <ee_number+0x24>
 800b26a:	4b6e      	ldr	r3, [pc, #440]	@ (800b424 <ee_number+0x1d8>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b01      	cmp	r3, #1
 800b274:	dd02      	ble.n	800b27c <ee_number+0x30>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b24      	cmp	r3, #36	@ 0x24
 800b27a:	dd01      	ble.n	800b280 <ee_number+0x34>
 800b27c:	2300      	movs	r3, #0
 800b27e:	e0ca      	b.n	800b416 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800b280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <ee_number+0x42>
 800b28a:	2330      	movs	r3, #48	@ 0x30
 800b28c:	e000      	b.n	800b290 <ee_number+0x44>
 800b28e:	2320      	movs	r3, #32
 800b290:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800b29a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b29c:	f003 0302 	and.w	r3, r3, #2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00b      	beq.n	800b2bc <ee_number+0x70>
  {
    if (num < 0)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	da08      	bge.n	800b2bc <ee_number+0x70>
    {
      sign = '-';
 800b2aa:	232d      	movs	r3, #45	@ 0x2d
 800b2ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	425b      	negs	r3, r3
 800b2b4:	607b      	str	r3, [r7, #4]
      size--;
 800b2b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d11e      	bne.n	800b304 <ee_number+0xb8>
    tmp[i++] = '0';
 800b2c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	657a      	str	r2, [r7, #84]	@ 0x54
 800b2cc:	3360      	adds	r3, #96	@ 0x60
 800b2ce:	443b      	add	r3, r7
 800b2d0:	2230      	movs	r2, #48	@ 0x30
 800b2d2:	f803 2c50 	strb.w	r2, [r3, #-80]
 800b2d6:	e018      	b.n	800b30a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2e0:	fb01 f202 	mul.w	r2, r1, r2
 800b2e4:	1a9b      	subs	r3, r3, r2
 800b2e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2e8:	441a      	add	r2, r3
 800b2ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2ec:	1c59      	adds	r1, r3, #1
 800b2ee:	6579      	str	r1, [r7, #84]	@ 0x54
 800b2f0:	7812      	ldrb	r2, [r2, #0]
 800b2f2:	3360      	adds	r3, #96	@ 0x60
 800b2f4:	443b      	add	r3, r7
 800b2f6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b302:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1e6      	bne.n	800b2d8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800b30a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b30c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b30e:	429a      	cmp	r2, r3
 800b310:	dd01      	ble.n	800b316 <ee_number+0xca>
 800b312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b314:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800b316:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800b31e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	2b00      	cmp	r3, #0
 800b326:	d112      	bne.n	800b34e <ee_number+0x102>
 800b328:	e00c      	b.n	800b344 <ee_number+0xf8>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	60fa      	str	r2, [r7, #12]
 800b330:	2220      	movs	r2, #32
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	3b01      	subs	r3, #1
 800b338:	60bb      	str	r3, [r7, #8]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <ee_number+0xf8>
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	e068      	b.n	800b416 <ee_number+0x1ca>
 800b344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b346:	1e5a      	subs	r2, r3, #1
 800b348:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	dced      	bgt.n	800b32a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800b34e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b352:	2b00      	cmp	r3, #0
 800b354:	d01b      	beq.n	800b38e <ee_number+0x142>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	60fa      	str	r2, [r7, #12]
 800b35c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800b360:	701a      	strb	r2, [r3, #0]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	3b01      	subs	r3, #1
 800b366:	60bb      	str	r3, [r7, #8]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10f      	bne.n	800b38e <ee_number+0x142>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	e051      	b.n	800b416 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	1c5a      	adds	r2, r3, #1
 800b376:	60fa      	str	r2, [r7, #12]
 800b378:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800b37c:	701a      	strb	r2, [r3, #0]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	3b01      	subs	r3, #1
 800b382:	60bb      	str	r3, [r7, #8]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <ee_number+0x142>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	e043      	b.n	800b416 <ee_number+0x1ca>
 800b38e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b390:	1e5a      	subs	r2, r3, #1
 800b392:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b394:	2b00      	cmp	r3, #0
 800b396:	dcec      	bgt.n	800b372 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800b398:	e00c      	b.n	800b3b4 <ee_number+0x168>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	60fa      	str	r2, [r7, #12]
 800b3a0:	2230      	movs	r2, #48	@ 0x30
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	60bb      	str	r3, [r7, #8]
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <ee_number+0x168>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	e030      	b.n	800b416 <ee_number+0x1ca>
 800b3b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b6:	1e5a      	subs	r2, r3, #1
 800b3b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b3ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	dbec      	blt.n	800b39a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800b3c0:	e010      	b.n	800b3e4 <ee_number+0x198>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	60fa      	str	r2, [r7, #12]
 800b3c8:	f107 0110 	add.w	r1, r7, #16
 800b3cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3ce:	440a      	add	r2, r1
 800b3d0:	7812      	ldrb	r2, [r2, #0]
 800b3d2:	701a      	strb	r2, [r3, #0]
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	60bb      	str	r3, [r7, #8]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <ee_number+0x198>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	e018      	b.n	800b416 <ee_number+0x1ca>
 800b3e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3e6:	1e5a      	subs	r2, r3, #1
 800b3e8:	657a      	str	r2, [r7, #84]	@ 0x54
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	dce9      	bgt.n	800b3c2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800b3ee:	e00c      	b.n	800b40a <ee_number+0x1be>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	60fa      	str	r2, [r7, #12]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	701a      	strb	r2, [r3, #0]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	60bb      	str	r3, [r7, #8]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <ee_number+0x1be>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	e005      	b.n	800b416 <ee_number+0x1ca>
 800b40a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b40c:	1e5a      	subs	r2, r3, #1
 800b40e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b410:	2b00      	cmp	r3, #0
 800b412:	dced      	bgt.n	800b3f0 <ee_number+0x1a4>

  return str;
 800b414:	68fb      	ldr	r3, [r7, #12]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3764      	adds	r7, #100	@ 0x64
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bc80      	pop	{r7}
 800b41e:	4770      	bx	lr
 800b420:	2000000c 	.word	0x2000000c
 800b424:	20000010 	.word	0x20000010

0800b428 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b092      	sub	sp, #72	@ 0x48
 800b42c:	af04      	add	r7, sp, #16
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	dc01      	bgt.n	800b440 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	e13e      	b.n	800b6be <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b444:	e128      	b.n	800b698 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800b446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	1ad2      	subs	r2, r2, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	3b01      	subs	r3, #1
 800b450:	429a      	cmp	r2, r3
 800b452:	f280 812e 	bge.w	800b6b2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b25      	cmp	r3, #37	@ 0x25
 800b45c:	d006      	beq.n	800b46c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b462:	1c59      	adds	r1, r3, #1
 800b464:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b466:	7812      	ldrb	r2, [r2, #0]
 800b468:	701a      	strb	r2, [r3, #0]
      continue;
 800b46a:	e112      	b.n	800b692 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	3301      	adds	r3, #1
 800b474:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b30      	cmp	r3, #48	@ 0x30
 800b47c:	d103      	bne.n	800b486 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800b47e:	6a3b      	ldr	r3, [r7, #32]
 800b480:	f043 0301 	orr.w	r3, r3, #1
 800b484:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800b486:	f04f 33ff 	mov.w	r3, #4294967295
 800b48a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b2f      	cmp	r3, #47	@ 0x2f
 800b492:	d908      	bls.n	800b4a6 <tiny_vsnprintf_like+0x7e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b39      	cmp	r3, #57	@ 0x39
 800b49a:	d804      	bhi.n	800b4a6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800b49c:	1d3b      	adds	r3, r7, #4
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7ff feae 	bl	800b200 <ee_skip_atoi>
 800b4a4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800b4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4aa:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800b4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800b4b2:	230a      	movs	r3, #10
 800b4b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	3b58      	subs	r3, #88	@ 0x58
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	f200 8094 	bhi.w	800b5ea <tiny_vsnprintf_like+0x1c2>
 800b4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c8 <tiny_vsnprintf_like+0xa0>)
 800b4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c8:	0800b5d3 	.word	0x0800b5d3
 800b4cc:	0800b5eb 	.word	0x0800b5eb
 800b4d0:	0800b5eb 	.word	0x0800b5eb
 800b4d4:	0800b5eb 	.word	0x0800b5eb
 800b4d8:	0800b5eb 	.word	0x0800b5eb
 800b4dc:	0800b5eb 	.word	0x0800b5eb
 800b4e0:	0800b5eb 	.word	0x0800b5eb
 800b4e4:	0800b5eb 	.word	0x0800b5eb
 800b4e8:	0800b5eb 	.word	0x0800b5eb
 800b4ec:	0800b5eb 	.word	0x0800b5eb
 800b4f0:	0800b5eb 	.word	0x0800b5eb
 800b4f4:	0800b557 	.word	0x0800b557
 800b4f8:	0800b5e1 	.word	0x0800b5e1
 800b4fc:	0800b5eb 	.word	0x0800b5eb
 800b500:	0800b5eb 	.word	0x0800b5eb
 800b504:	0800b5eb 	.word	0x0800b5eb
 800b508:	0800b5eb 	.word	0x0800b5eb
 800b50c:	0800b5e1 	.word	0x0800b5e1
 800b510:	0800b5eb 	.word	0x0800b5eb
 800b514:	0800b5eb 	.word	0x0800b5eb
 800b518:	0800b5eb 	.word	0x0800b5eb
 800b51c:	0800b5eb 	.word	0x0800b5eb
 800b520:	0800b5eb 	.word	0x0800b5eb
 800b524:	0800b5eb 	.word	0x0800b5eb
 800b528:	0800b5eb 	.word	0x0800b5eb
 800b52c:	0800b5eb 	.word	0x0800b5eb
 800b530:	0800b5eb 	.word	0x0800b5eb
 800b534:	0800b577 	.word	0x0800b577
 800b538:	0800b5eb 	.word	0x0800b5eb
 800b53c:	0800b637 	.word	0x0800b637
 800b540:	0800b5eb 	.word	0x0800b5eb
 800b544:	0800b5eb 	.word	0x0800b5eb
 800b548:	0800b5db 	.word	0x0800b5db
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b552:	2220      	movs	r2, #32
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	3b01      	subs	r3, #1
 800b55a:	61fb      	str	r3, [r7, #28]
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	dcf4      	bgt.n	800b54c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	1d1a      	adds	r2, r3, #4
 800b566:	603a      	str	r2, [r7, #0]
 800b568:	6819      	ldr	r1, [r3, #0]
 800b56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b570:	b2ca      	uxtb	r2, r1
 800b572:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b574:	e08d      	b.n	800b692 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	1d1a      	adds	r2, r3, #4
 800b57a:	603a      	str	r2, [r7, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800b580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <tiny_vsnprintf_like+0x162>
 800b586:	4b50      	ldr	r3, [pc, #320]	@ (800b6c8 <tiny_vsnprintf_like+0x2a0>)
 800b588:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b58a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b58c:	f7f4 fdf4 	bl	8000178 <strlen>
 800b590:	4603      	mov	r3, r0
 800b592:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b594:	e004      	b.n	800b5a0 <tiny_vsnprintf_like+0x178>
 800b596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b59c:	2220      	movs	r2, #32
 800b59e:	701a      	strb	r2, [r3, #0]
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	1e5a      	subs	r2, r3, #1
 800b5a4:	61fa      	str	r2, [r7, #28]
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	dbf4      	blt.n	800b596 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5b0:	e00a      	b.n	800b5c8 <tiny_vsnprintf_like+0x1a0>
 800b5b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5b4:	1c53      	adds	r3, r2, #1
 800b5b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ba:	1c59      	adds	r1, r3, #1
 800b5bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b5be:	7812      	ldrb	r2, [r2, #0]
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	dbf0      	blt.n	800b5b2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b5d0:	e05f      	b.n	800b692 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5d8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b5da:	2310      	movs	r3, #16
 800b5dc:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800b5de:	e02b      	b.n	800b638 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	f043 0302 	orr.w	r3, r3, #2
 800b5e6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b5e8:	e025      	b.n	800b636 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	2b25      	cmp	r3, #37	@ 0x25
 800b5f0:	d004      	beq.n	800b5fc <tiny_vsnprintf_like+0x1d4>
 800b5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5f8:	2225      	movs	r2, #37	@ 0x25
 800b5fa:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b5fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1ad2      	subs	r2, r2, r3
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	3b01      	subs	r3, #1
 800b606:	429a      	cmp	r2, r3
 800b608:	da16      	bge.n	800b638 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d006      	beq.n	800b620 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b616:	1c59      	adds	r1, r3, #1
 800b618:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b61a:	7812      	ldrb	r2, [r2, #0]
 800b61c:	701a      	strb	r2, [r3, #0]
 800b61e:	e002      	b.n	800b626 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3b01      	subs	r3, #1
 800b624:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	1ad2      	subs	r2, r2, r3
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	3b01      	subs	r3, #1
 800b630:	429a      	cmp	r2, r3
 800b632:	db2d      	blt.n	800b690 <tiny_vsnprintf_like+0x268>
 800b634:	e000      	b.n	800b638 <tiny_vsnprintf_like+0x210>
        break;
 800b636:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2b6c      	cmp	r3, #108	@ 0x6c
 800b63c:	d105      	bne.n	800b64a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	1d1a      	adds	r2, r3, #4
 800b642:	603a      	str	r2, [r7, #0]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	637b      	str	r3, [r7, #52]	@ 0x34
 800b648:	e00f      	b.n	800b66a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800b64a:	6a3b      	ldr	r3, [r7, #32]
 800b64c:	f003 0302 	and.w	r3, r3, #2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d005      	beq.n	800b660 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	1d1a      	adds	r2, r3, #4
 800b658:	603a      	str	r2, [r7, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65e:	e004      	b.n	800b66a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	1d1a      	adds	r2, r3, #4
 800b664:	603a      	str	r2, [r7, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	1e5a      	subs	r2, r3, #1
 800b66e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	1acb      	subs	r3, r1, r3
 800b674:	1ad1      	subs	r1, r2, r3
 800b676:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	9302      	str	r3, [sp, #8]
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b686:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b688:	f7ff fde0 	bl	800b24c <ee_number>
 800b68c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b68e:	e000      	b.n	800b692 <tiny_vsnprintf_like+0x26a>
        continue;
 800b690:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	3301      	adds	r3, #1
 800b696:	607b      	str	r3, [r7, #4]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f47f aed2 	bne.w	800b446 <tiny_vsnprintf_like+0x1e>
 800b6a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	1ad2      	subs	r2, r2, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	f6bf aeca 	bge.w	800b446 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800b6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b6b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	1ad3      	subs	r3, r2, r3
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3738      	adds	r7, #56	@ 0x38
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	0800c7dc 	.word	0x0800c7dc

0800b6cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b090      	sub	sp, #64	@ 0x40
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b6d4:	4b73      	ldr	r3, [pc, #460]	@ (800b8a4 <UTIL_SEQ_Run+0x1d8>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800b6da:	4b72      	ldr	r3, [pc, #456]	@ (800b8a4 <UTIL_SEQ_Run+0x1d8>)
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	4a70      	ldr	r2, [pc, #448]	@ (800b8a4 <UTIL_SEQ_Run+0x1d8>)
 800b6e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b6e6:	4b70      	ldr	r3, [pc, #448]	@ (800b8a8 <UTIL_SEQ_Run+0x1dc>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b6ec:	4b6f      	ldr	r3, [pc, #444]	@ (800b8ac <UTIL_SEQ_Run+0x1e0>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b6f2:	4b6f      	ldr	r3, [pc, #444]	@ (800b8b0 <UTIL_SEQ_Run+0x1e4>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800b6f8:	4b6e      	ldr	r3, [pc, #440]	@ (800b8b4 <UTIL_SEQ_Run+0x1e8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b6fe:	e08d      	b.n	800b81c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b704:	e002      	b.n	800b70c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b708:	3301      	adds	r3, #1
 800b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b70c:	4a6a      	ldr	r2, [pc, #424]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b710:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	401a      	ands	r2, r3
 800b718:	4b62      	ldr	r3, [pc, #392]	@ (800b8a4 <UTIL_SEQ_Run+0x1d8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4013      	ands	r3, r2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0f1      	beq.n	800b706 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b722:	4a65      	ldr	r2, [pc, #404]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b726:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72c:	401a      	ands	r2, r3
 800b72e:	4b5d      	ldr	r3, [pc, #372]	@ (800b8a4 <UTIL_SEQ_Run+0x1d8>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4013      	ands	r3, r2
 800b734:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b736:	4a60      	ldr	r2, [pc, #384]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b73a:	00db      	lsls	r3, r3, #3
 800b73c:	4413      	add	r3, r2
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b742:	4013      	ands	r3, r2
 800b744:	2b00      	cmp	r3, #0
 800b746:	d106      	bne.n	800b756 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b748:	4a5b      	ldr	r2, [pc, #364]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	4413      	add	r3, r2
 800b750:	f04f 32ff 	mov.w	r2, #4294967295
 800b754:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b756:	4a58      	ldr	r2, [pc, #352]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b75a:	00db      	lsls	r3, r3, #3
 800b75c:	4413      	add	r3, r2
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b762:	4013      	ands	r3, r2
 800b764:	4618      	mov	r0, r3
 800b766:	f000 f907 	bl	800b978 <SEQ_BitPosition>
 800b76a:	4603      	mov	r3, r0
 800b76c:	461a      	mov	r2, r3
 800b76e:	4b53      	ldr	r3, [pc, #332]	@ (800b8bc <UTIL_SEQ_Run+0x1f0>)
 800b770:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b772:	4a51      	ldr	r2, [pc, #324]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b776:	00db      	lsls	r3, r3, #3
 800b778:	4413      	add	r3, r2
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	4b4f      	ldr	r3, [pc, #316]	@ (800b8bc <UTIL_SEQ_Run+0x1f0>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2101      	movs	r1, #1
 800b782:	fa01 f303 	lsl.w	r3, r1, r3
 800b786:	43db      	mvns	r3, r3
 800b788:	401a      	ands	r2, r3
 800b78a:	494b      	ldr	r1, [pc, #300]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	440b      	add	r3, r1
 800b792:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b794:	f3ef 8310 	mrs	r3, PRIMASK
 800b798:	61bb      	str	r3, [r7, #24]
  return(result);
 800b79a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b79c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b79e:	b672      	cpsid	i
}
 800b7a0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b7a2:	4b46      	ldr	r3, [pc, #280]	@ (800b8bc <UTIL_SEQ_Run+0x1f0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ac:	43da      	mvns	r2, r3
 800b7ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b8a8 <UTIL_SEQ_Run+0x1dc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	4a3c      	ldr	r2, [pc, #240]	@ (800b8a8 <UTIL_SEQ_Run+0x1dc>)
 800b7b6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7bc:	e013      	b.n	800b7e6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	4a3d      	ldr	r2, [pc, #244]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b7c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b7c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b8bc <UTIL_SEQ_Run+0x1f0>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d2:	43da      	mvns	r2, r3
 800b7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	400a      	ands	r2, r1
 800b7da:	4937      	ldr	r1, [pc, #220]	@ (800b8b8 <UTIL_SEQ_Run+0x1ec>)
 800b7dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b7e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e8      	bne.n	800b7be <UTIL_SEQ_Run+0xf2>
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	f383 8810 	msr	PRIMASK, r3
}
 800b7f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b7f8:	4b30      	ldr	r3, [pc, #192]	@ (800b8bc <UTIL_SEQ_Run+0x1f0>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a30      	ldr	r2, [pc, #192]	@ (800b8c0 <UTIL_SEQ_Run+0x1f4>)
 800b7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b802:	4798      	blx	r3

    local_taskset = TaskSet;
 800b804:	4b28      	ldr	r3, [pc, #160]	@ (800b8a8 <UTIL_SEQ_Run+0x1dc>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800b80a:	4b28      	ldr	r3, [pc, #160]	@ (800b8ac <UTIL_SEQ_Run+0x1e0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800b810:	4b27      	ldr	r3, [pc, #156]	@ (800b8b0 <UTIL_SEQ_Run+0x1e4>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800b816:	4b27      	ldr	r3, [pc, #156]	@ (800b8b4 <UTIL_SEQ_Run+0x1e8>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b81c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b820:	401a      	ands	r2, r3
 800b822:	4b20      	ldr	r3, [pc, #128]	@ (800b8a4 <UTIL_SEQ_Run+0x1d8>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4013      	ands	r3, r2
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d005      	beq.n	800b838 <UTIL_SEQ_Run+0x16c>
 800b82c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b830:	4013      	ands	r3, r2
 800b832:	2b00      	cmp	r3, #0
 800b834:	f43f af64 	beq.w	800b700 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b838:	4b20      	ldr	r3, [pc, #128]	@ (800b8bc <UTIL_SEQ_Run+0x1f0>)
 800b83a:	f04f 32ff 	mov.w	r2, #4294967295
 800b83e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b840:	f000 f88e 	bl	800b960 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b844:	f3ef 8310 	mrs	r3, PRIMASK
 800b848:	613b      	str	r3, [r7, #16]
  return(result);
 800b84a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b84c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b84e:	b672      	cpsid	i
}
 800b850:	bf00      	nop
  local_taskset = TaskSet;
 800b852:	4b15      	ldr	r3, [pc, #84]	@ (800b8a8 <UTIL_SEQ_Run+0x1dc>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800b858:	4b14      	ldr	r3, [pc, #80]	@ (800b8ac <UTIL_SEQ_Run+0x1e0>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800b85e:	4b14      	ldr	r3, [pc, #80]	@ (800b8b0 <UTIL_SEQ_Run+0x1e4>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b868:	401a      	ands	r2, r3
 800b86a:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a4 <UTIL_SEQ_Run+0x1d8>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4013      	ands	r3, r2
 800b870:	2b00      	cmp	r3, #0
 800b872:	d107      	bne.n	800b884 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b874:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b4 <UTIL_SEQ_Run+0x1e8>)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b87a:	4013      	ands	r3, r2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b880:	f7f5 f8d2 	bl	8000a28 <UTIL_SEQ_Idle>
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f383 8810 	msr	PRIMASK, r3
}
 800b88e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b890:	f000 f86c 	bl	800b96c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b894:	4a03      	ldr	r2, [pc, #12]	@ (800b8a4 <UTIL_SEQ_Run+0x1d8>)
 800b896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b898:	6013      	str	r3, [r2, #0]

  return;
 800b89a:	bf00      	nop
}
 800b89c:	3740      	adds	r7, #64	@ 0x40
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000018 	.word	0x20000018
 800b8a8:	2000069c 	.word	0x2000069c
 800b8ac:	200006a0 	.word	0x200006a0
 800b8b0:	20000014 	.word	0x20000014
 800b8b4:	200006a4 	.word	0x200006a4
 800b8b8:	200006b4 	.word	0x200006b4
 800b8bc:	200006a8 	.word	0x200006a8
 800b8c0:	200006ac 	.word	0x200006ac

0800b8c4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b088      	sub	sp, #32
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d4:	617b      	str	r3, [r7, #20]
  return(result);
 800b8d6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b8d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8da:	b672      	cpsid	i
}
 800b8dc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 f84a 	bl	800b978 <SEQ_BitPosition>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4a06      	ldr	r2, [pc, #24]	@ (800b904 <UTIL_SEQ_RegTask+0x40>)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	f383 8810 	msr	PRIMASK, r3
}
 800b8fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b8fc:	bf00      	nop
}
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	200006ac 	.word	0x200006ac

0800b908 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b912:	f3ef 8310 	mrs	r3, PRIMASK
 800b916:	60fb      	str	r3, [r7, #12]
  return(result);
 800b918:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b91a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b91c:	b672      	cpsid	i
}
 800b91e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b920:	4b0d      	ldr	r3, [pc, #52]	@ (800b958 <UTIL_SEQ_SetTask+0x50>)
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4313      	orrs	r3, r2
 800b928:	4a0b      	ldr	r2, [pc, #44]	@ (800b958 <UTIL_SEQ_SetTask+0x50>)
 800b92a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b92c:	4a0b      	ldr	r2, [pc, #44]	@ (800b95c <UTIL_SEQ_SetTask+0x54>)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	431a      	orrs	r2, r3
 800b938:	4908      	ldr	r1, [pc, #32]	@ (800b95c <UTIL_SEQ_SetTask+0x54>)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f383 8810 	msr	PRIMASK, r3
}
 800b94a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b94c:	bf00      	nop
}
 800b94e:	371c      	adds	r7, #28
 800b950:	46bd      	mov	sp, r7
 800b952:	bc80      	pop	{r7}
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	2000069c 	.word	0x2000069c
 800b95c:	200006b4 	.word	0x200006b4

0800b960 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b960:	b480      	push	{r7}
 800b962:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b964:	bf00      	nop
}
 800b966:	46bd      	mov	sp, r7
 800b968:	bc80      	pop	{r7}
 800b96a:	4770      	bx	lr

0800b96c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b970:	bf00      	nop
}
 800b972:	46bd      	mov	sp, r7
 800b974:	bc80      	pop	{r7}
 800b976:	4770      	bx	lr

0800b978 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b98e:	d204      	bcs.n	800b99a <SEQ_BitPosition+0x22>
 800b990:	2310      	movs	r3, #16
 800b992:	73fb      	strb	r3, [r7, #15]
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	041b      	lsls	r3, r3, #16
 800b998:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9a0:	d205      	bcs.n	800b9ae <SEQ_BitPosition+0x36>
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	73fb      	strb	r3, [r7, #15]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	021b      	lsls	r3, r3, #8
 800b9ac:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9b4:	d205      	bcs.n	800b9c2 <SEQ_BitPosition+0x4a>
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	73fb      	strb	r3, [r7, #15]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	011b      	lsls	r3, r3, #4
 800b9c0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	0f1b      	lsrs	r3, r3, #28
 800b9c6:	4a07      	ldr	r2, [pc, #28]	@ (800b9e4 <SEQ_BitPosition+0x6c>)
 800b9c8:	5cd2      	ldrb	r2, [r2, r3]
 800b9ca:	7bfb      	ldrb	r3, [r7, #15]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
 800b9d2:	f1c3 031f 	rsb	r3, r3, #31
 800b9d6:	b2db      	uxtb	r3, r3
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bc80      	pop	{r7}
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	0800ca54 	.word	0x0800ca54

0800b9e8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b9ec:	4b04      	ldr	r3, [pc, #16]	@ (800ba00 <UTIL_TIMER_Init+0x18>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b9f2:	4b04      	ldr	r3, [pc, #16]	@ (800ba04 <UTIL_TIMER_Init+0x1c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4798      	blx	r3
 800b9f8:	4603      	mov	r3, r0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	200006cc 	.word	0x200006cc
 800ba04:	0800c89c 	.word	0x0800c89c

0800ba08 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	4613      	mov	r3, r2
 800ba16:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d023      	beq.n	800ba66 <UTIL_TIMER_Create+0x5e>
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d020      	beq.n	800ba66 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800ba2a:	4b11      	ldr	r3, [pc, #68]	@ (800ba70 <UTIL_TIMER_Create+0x68>)
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba2e:	68b8      	ldr	r0, [r7, #8]
 800ba30:	4798      	blx	r3
 800ba32:	4602      	mov	r2, r0
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	79fa      	ldrb	r2, [r7, #7]
 800ba5a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	e000      	b.n	800ba68 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800ba66:	2301      	movs	r3, #1
  }
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	0800c89c 	.word	0x0800c89c

0800ba74 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08a      	sub	sp, #40	@ 0x28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d056      	beq.n	800bb36 <UTIL_TIMER_Start+0xc2>
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f9a9 	bl	800bde0 <TimerExists>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f083 0301 	eor.w	r3, r3, #1
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d04d      	beq.n	800bb36 <UTIL_TIMER_Start+0xc2>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	7a5b      	ldrb	r3, [r3, #9]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d149      	bne.n	800bb36 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baa2:	f3ef 8310 	mrs	r3, PRIMASK
 800baa6:	613b      	str	r3, [r7, #16]
  return(result);
 800baa8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800baaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800baac:	b672      	cpsid	i
}
 800baae:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800bab6:	4b24      	ldr	r3, [pc, #144]	@ (800bb48 <UTIL_TIMER_Start+0xd4>)
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	4798      	blx	r3
 800babc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800babe:	6a3a      	ldr	r2, [r7, #32]
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d201      	bcs.n	800baca <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a3a      	ldr	r2, [r7, #32]
 800bace:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800bae2:	4b1a      	ldr	r3, [pc, #104]	@ (800bb4c <UTIL_TIMER_Start+0xd8>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d106      	bne.n	800baf8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800baea:	4b17      	ldr	r3, [pc, #92]	@ (800bb48 <UTIL_TIMER_Start+0xd4>)
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 f9eb 	bl	800becc <TimerInsertNewHeadTimer>
 800baf6:	e017      	b.n	800bb28 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800baf8:	4b13      	ldr	r3, [pc, #76]	@ (800bb48 <UTIL_TIMER_Start+0xd4>)
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	4798      	blx	r3
 800bafe:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	441a      	add	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	4b0e      	ldr	r3, [pc, #56]	@ (800bb4c <UTIL_TIMER_Start+0xd8>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d203      	bcs.n	800bb22 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f9d6 	bl	800becc <TimerInsertNewHeadTimer>
 800bb20:	e002      	b.n	800bb28 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9a2 	bl	800be6c <TimerInsertTimer>
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f383 8810 	msr	PRIMASK, r3
}
 800bb32:	bf00      	nop
  {
 800bb34:	e002      	b.n	800bb3c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800bb36:	2301      	movs	r3, #1
 800bb38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800bb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3728      	adds	r7, #40	@ 0x28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	0800c89c 	.word	0x0800c89c
 800bb4c:	200006cc 	.word	0x200006cc

0800bb50 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b088      	sub	sp, #32
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d05b      	beq.n	800bc1a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb62:	f3ef 8310 	mrs	r3, PRIMASK
 800bb66:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb68:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bb6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb6c:	b672      	cpsid	i
}
 800bb6e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800bb70:	4b2d      	ldr	r3, [pc, #180]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800bb76:	4b2c      	ldr	r3, [pc, #176]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800bb82:	4b29      	ldr	r3, [pc, #164]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d041      	beq.n	800bc0e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800bb90:	4b25      	ldr	r3, [pc, #148]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d134      	bne.n	800bc04 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800bb9a:	4b23      	ldr	r3, [pc, #140]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800bba2:	4b21      	ldr	r3, [pc, #132]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00a      	beq.n	800bbc2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800bbac:	4b1e      	ldr	r3, [pc, #120]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	4a1d      	ldr	r2, [pc, #116]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bbb4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800bbb6:	4b1c      	ldr	r3, [pc, #112]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 f92c 	bl	800be18 <TimerSetTimeout>
 800bbc0:	e023      	b.n	800bc0a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800bbc2:	4b1a      	ldr	r3, [pc, #104]	@ (800bc2c <UTIL_TIMER_Stop+0xdc>)
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	4798      	blx	r3
            TimerListHead = NULL;
 800bbc8:	4b17      	ldr	r3, [pc, #92]	@ (800bc28 <UTIL_TIMER_Stop+0xd8>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	e01c      	b.n	800bc0a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d110      	bne.n	800bbfa <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d006      	beq.n	800bbee <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	695b      	ldr	r3, [r3, #20]
 800bbe4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800bbec:	e00d      	b.n	800bc0a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	615a      	str	r2, [r3, #20]
            break;
 800bbf8:	e007      	b.n	800bc0a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1e2      	bne.n	800bbd0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	77fb      	strb	r3, [r7, #31]
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f383 8810 	msr	PRIMASK, r3
}
 800bc18:	e001      	b.n	800bc1e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800bc1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3720      	adds	r7, #32
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	200006cc 	.word	0x200006cc
 800bc2c:	0800c89c 	.word	0x0800c89c

0800bc30 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d102      	bne.n	800bc4a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800bc44:	2301      	movs	r3, #1
 800bc46:	73fb      	strb	r3, [r7, #15]
 800bc48:	e014      	b.n	800bc74 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800bc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc80 <UTIL_TIMER_SetPeriod+0x50>)
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc4e:	6838      	ldr	r0, [r7, #0]
 800bc50:	4798      	blx	r3
 800bc52:	4602      	mov	r2, r0
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f8c1 	bl	800bde0 <TimerExists>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff ff73 	bl	800bb50 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7ff ff02 	bl	800ba74 <UTIL_TIMER_Start>
 800bc70:	4603      	mov	r3, r0
 800bc72:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	0800c89c 	.word	0x0800c89c

0800bc84 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800bc84:	b590      	push	{r4, r7, lr}
 800bc86:	b089      	sub	sp, #36	@ 0x24
 800bc88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc8a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc8e:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc90:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bc92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc94:	b672      	cpsid	i
}
 800bc96:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800bc98:	4b38      	ldr	r3, [pc, #224]	@ (800bd7c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	4798      	blx	r3
 800bc9e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800bca0:	4b36      	ldr	r3, [pc, #216]	@ (800bd7c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	4798      	blx	r3
 800bca6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800bcb0:	4b33      	ldr	r3, [pc, #204]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d037      	beq.n	800bd28 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800bcb8:	4b31      	ldr	r3, [pc, #196]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d206      	bcs.n	800bcd6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	1ad2      	subs	r2, r2, r3
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	e002      	b.n	800bcdc <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1ea      	bne.n	800bcbe <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bce8:	e01e      	b.n	800bd28 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800bcea:	4b25      	ldr	r3, [pc, #148]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800bcf0:	4b23      	ldr	r3, [pc, #140]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	4a22      	ldr	r2, [pc, #136]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcf8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	2200      	movs	r2, #0
 800bd04:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	69fa      	ldr	r2, [r7, #28]
 800bd0c:	6912      	ldr	r2, [r2, #16]
 800bd0e:	4610      	mov	r0, r2
 800bd10:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	7adb      	ldrb	r3, [r3, #11]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d106      	bne.n	800bd28 <UTIL_TIMER_IRQ_Handler+0xa4>
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	7a9b      	ldrb	r3, [r3, #10]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d102      	bne.n	800bd28 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800bd22:	69f8      	ldr	r0, [r7, #28]
 800bd24:	f7ff fea6 	bl	800ba74 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bd28:	4b15      	ldr	r3, [pc, #84]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00d      	beq.n	800bd4c <UTIL_TIMER_IRQ_Handler+0xc8>
 800bd30:	4b13      	ldr	r3, [pc, #76]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0d7      	beq.n	800bcea <UTIL_TIMER_IRQ_Handler+0x66>
 800bd3a:	4b11      	ldr	r3, [pc, #68]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681c      	ldr	r4, [r3, #0]
 800bd40:	4b0e      	ldr	r3, [pc, #56]	@ (800bd7c <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	4798      	blx	r3
 800bd46:	4603      	mov	r3, r0
 800bd48:	429c      	cmp	r4, r3
 800bd4a:	d3ce      	bcc.n	800bcea <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800bd4c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d009      	beq.n	800bd68 <UTIL_TIMER_IRQ_Handler+0xe4>
 800bd54:	4b0a      	ldr	r3, [pc, #40]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	7a1b      	ldrb	r3, [r3, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d104      	bne.n	800bd68 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800bd5e:	4b08      	ldr	r3, [pc, #32]	@ (800bd80 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 f858 	bl	800be18 <TimerSetTimeout>
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f383 8810 	msr	PRIMASK, r3
}
 800bd72:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800bd74:	bf00      	nop
 800bd76:	3724      	adds	r7, #36	@ 0x24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd90      	pop	{r4, r7, pc}
 800bd7c:	0800c89c 	.word	0x0800c89c
 800bd80:	200006cc 	.word	0x200006cc

0800bd84 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800bd8a:	4b06      	ldr	r3, [pc, #24]	@ (800bda4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	4798      	blx	r3
 800bd90:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800bd92:	4b04      	ldr	r3, [pc, #16]	@ (800bda4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bd94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
 800bd9a:	4603      	mov	r3, r0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	0800c89c 	.word	0x0800c89c

0800bda8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bddc <UTIL_TIMER_GetElapsedTime+0x34>)
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	4798      	blx	r3
 800bdb6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800bdb8:	4b08      	ldr	r3, [pc, #32]	@ (800bddc <UTIL_TIMER_GetElapsedTime+0x34>)
 800bdba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	4798      	blx	r3
 800bdc0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800bdc2:	4b06      	ldr	r3, [pc, #24]	@ (800bddc <UTIL_TIMER_GetElapsedTime+0x34>)
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc6:	68f9      	ldr	r1, [r7, #12]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	1a8a      	subs	r2, r1, r2
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
 800bdd0:	4603      	mov	r3, r0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	0800c89c 	.word	0x0800c89c

0800bde0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bde8:	4b0a      	ldr	r3, [pc, #40]	@ (800be14 <TimerExists+0x34>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800bdee:	e008      	b.n	800be02 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d101      	bne.n	800bdfc <TimerExists+0x1c>
    {
      return true;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e006      	b.n	800be0a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1f3      	bne.n	800bdf0 <TimerExists+0x10>
  }
  return false;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	bc80      	pop	{r7}
 800be12:	4770      	bx	lr
 800be14:	200006cc 	.word	0x200006cc

0800be18 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800be18:	b590      	push	{r4, r7, lr}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800be20:	4b11      	ldr	r3, [pc, #68]	@ (800be68 <TimerSetTimeout+0x50>)
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	4798      	blx	r3
 800be26:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681c      	ldr	r4, [r3, #0]
 800be32:	4b0d      	ldr	r3, [pc, #52]	@ (800be68 <TimerSetTimeout+0x50>)
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	4798      	blx	r3
 800be38:	4602      	mov	r2, r0
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	4413      	add	r3, r2
 800be3e:	429c      	cmp	r4, r3
 800be40:	d207      	bcs.n	800be52 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800be42:	4b09      	ldr	r3, [pc, #36]	@ (800be68 <TimerSetTimeout+0x50>)
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	4798      	blx	r3
 800be48:	4602      	mov	r2, r0
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	441a      	add	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800be52:	4b05      	ldr	r3, [pc, #20]	@ (800be68 <TimerSetTimeout+0x50>)
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	4610      	mov	r0, r2
 800be5c:	4798      	blx	r3
}
 800be5e:	bf00      	nop
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	bd90      	pop	{r4, r7, pc}
 800be66:	bf00      	nop
 800be68:	0800c89c 	.word	0x0800c89c

0800be6c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800be74:	4b14      	ldr	r3, [pc, #80]	@ (800bec8 <TimerInsertTimer+0x5c>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800be7a:	4b13      	ldr	r3, [pc, #76]	@ (800bec8 <TimerInsertTimer+0x5c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	695b      	ldr	r3, [r3, #20]
 800be80:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800be82:	e012      	b.n	800beaa <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d905      	bls.n	800be9c <TimerInsertTimer+0x30>
    {
        cur = next;
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	60bb      	str	r3, [r7, #8]
 800be9a:	e006      	b.n	800beaa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	615a      	str	r2, [r3, #20]
        return;
 800bea8:	e009      	b.n	800bebe <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e8      	bne.n	800be84 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	615a      	str	r2, [r3, #20]
}
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bc80      	pop	{r7}
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	200006cc 	.word	0x200006cc

0800becc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bed4:	4b0b      	ldr	r3, [pc, #44]	@ (800bf04 <TimerInsertNewHeadTimer+0x38>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800beec:	4a05      	ldr	r2, [pc, #20]	@ (800bf04 <TimerInsertNewHeadTimer+0x38>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bef2:	4b04      	ldr	r3, [pc, #16]	@ (800bf04 <TimerInsertNewHeadTimer+0x38>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7ff ff8e 	bl	800be18 <TimerSetTimeout>
}
 800befc:	bf00      	nop
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	200006cc 	.word	0x200006cc

0800bf08 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800bf0c:	2218      	movs	r2, #24
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4807      	ldr	r0, [pc, #28]	@ (800bf30 <UTIL_ADV_TRACE_Init+0x28>)
 800bf12:	f7ff f8e8 	bl	800b0e6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800bf16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	4805      	ldr	r0, [pc, #20]	@ (800bf34 <UTIL_ADV_TRACE_Init+0x2c>)
 800bf1e:	f7ff f8e2 	bl	800b0e6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800bf22:	4b05      	ldr	r3, [pc, #20]	@ (800bf38 <UTIL_ADV_TRACE_Init+0x30>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4805      	ldr	r0, [pc, #20]	@ (800bf3c <UTIL_ADV_TRACE_Init+0x34>)
 800bf28:	4798      	blx	r3
 800bf2a:	4603      	mov	r3, r0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	200006d0 	.word	0x200006d0
 800bf34:	200006e8 	.word	0x200006e8
 800bf38:	0800c8dc 	.word	0x0800c8dc
 800bf3c:	0800c185 	.word	0x0800c185

0800bf40 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800bf40:	b408      	push	{r3}
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b08d      	sub	sp, #52	@ 0x34
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	60f8      	str	r0, [r7, #12]
 800bf4a:	60b9      	str	r1, [r7, #8]
 800bf4c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800bf52:	2300      	movs	r3, #0
 800bf54:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bf56:	4b37      	ldr	r3, [pc, #220]	@ (800c034 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bf58:	7a1b      	ldrb	r3, [r3, #8]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d902      	bls.n	800bf68 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800bf62:	f06f 0304 	mvn.w	r3, #4
 800bf66:	e05e      	b.n	800c026 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800bf68:	4b32      	ldr	r3, [pc, #200]	@ (800c034 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	4013      	ands	r3, r2
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d002      	beq.n	800bf7c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800bf76:	f06f 0305 	mvn.w	r3, #5
 800bf7a:	e054      	b.n	800c026 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800bf7c:	4b2d      	ldr	r3, [pc, #180]	@ (800c034 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00a      	beq.n	800bf9a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d007      	beq.n	800bf9a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800bf8a:	4b2a      	ldr	r3, [pc, #168]	@ (800c034 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	f107 0116 	add.w	r1, r7, #22
 800bf92:	f107 0218 	add.w	r2, r7, #24
 800bf96:	4610      	mov	r0, r2
 800bf98:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800bf9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bf9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bfa8:	4823      	ldr	r0, [pc, #140]	@ (800c038 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800bfaa:	f7ff fa3d 	bl	800b428 <tiny_vsnprintf_like>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800bfb2:	f000 f9f1 	bl	800c398 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800bfb6:	8afa      	ldrh	r2, [r7, #22]
 800bfb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bfba:	4413      	add	r3, r2
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	f107 0214 	add.w	r2, r7, #20
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 f969 	bl	800c29c <TRACE_AllocateBufer>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd0:	d025      	beq.n	800c01e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bfd6:	e00e      	b.n	800bff6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800bfd8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bfda:	8aba      	ldrh	r2, [r7, #20]
 800bfdc:	3330      	adds	r3, #48	@ 0x30
 800bfde:	443b      	add	r3, r7
 800bfe0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800bfe4:	4b15      	ldr	r3, [pc, #84]	@ (800c03c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800bfe6:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800bfe8:	8abb      	ldrh	r3, [r7, #20]
 800bfea:	3301      	adds	r3, #1
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800bff0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bff2:	3301      	adds	r3, #1
 800bff4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bff6:	8afb      	ldrh	r3, [r7, #22]
 800bff8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d3ec      	bcc.n	800bfd8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bffe:	8abb      	ldrh	r3, [r7, #20]
 800c000:	461a      	mov	r2, r3
 800c002:	4b0e      	ldr	r3, [pc, #56]	@ (800c03c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c004:	18d0      	adds	r0, r2, r3
 800c006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c00a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c00e:	f7ff fa0b 	bl	800b428 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800c012:	f000 f9df 	bl	800c3d4 <TRACE_UnLock>

    return TRACE_Send();
 800c016:	f000 f831 	bl	800c07c <TRACE_Send>
 800c01a:	4603      	mov	r3, r0
 800c01c:	e003      	b.n	800c026 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800c01e:	f000 f9d9 	bl	800c3d4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800c022:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800c026:	4618      	mov	r0, r3
 800c028:	3734      	adds	r7, #52	@ 0x34
 800c02a:	46bd      	mov	sp, r7
 800c02c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c030:	b001      	add	sp, #4
 800c032:	4770      	bx	lr
 800c034:	200006d0 	.word	0x200006d0
 800c038:	200008e8 	.word	0x200008e8
 800c03c:	200006e8 	.word	0x200006e8

0800c040 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800c048:	4a03      	ldr	r2, [pc, #12]	@ (800c058 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6053      	str	r3, [r2, #4]
}
 800c04e:	bf00      	nop
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	bc80      	pop	{r7}
 800c056:	4770      	bx	lr
 800c058:	200006d0 	.word	0x200006d0

0800c05c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	4603      	mov	r3, r0
 800c064:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800c066:	4a04      	ldr	r2, [pc, #16]	@ (800c078 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800c068:	79fb      	ldrb	r3, [r7, #7]
 800c06a:	7213      	strb	r3, [r2, #8]
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	bc80      	pop	{r7}
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	200006d0 	.word	0x200006d0

0800c07c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b088      	sub	sp, #32
 800c080:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800c086:	2300      	movs	r3, #0
 800c088:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c08a:	f3ef 8310 	mrs	r3, PRIMASK
 800c08e:	613b      	str	r3, [r7, #16]
  return(result);
 800c090:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c092:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c094:	b672      	cpsid	i
}
 800c096:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800c098:	f000 f9ba 	bl	800c410 <TRACE_IsLocked>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d15d      	bne.n	800c15e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800c0a2:	f000 f979 	bl	800c398 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800c0a6:	4b34      	ldr	r3, [pc, #208]	@ (800c178 <TRACE_Send+0xfc>)
 800c0a8:	8a1a      	ldrh	r2, [r3, #16]
 800c0aa:	4b33      	ldr	r3, [pc, #204]	@ (800c178 <TRACE_Send+0xfc>)
 800c0ac:	8a5b      	ldrh	r3, [r3, #18]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d04d      	beq.n	800c14e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c0b2:	4b31      	ldr	r3, [pc, #196]	@ (800c178 <TRACE_Send+0xfc>)
 800c0b4:	789b      	ldrb	r3, [r3, #2]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d117      	bne.n	800c0ea <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800c0ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c178 <TRACE_Send+0xfc>)
 800c0bc:	881a      	ldrh	r2, [r3, #0]
 800c0be:	4b2e      	ldr	r3, [pc, #184]	@ (800c178 <TRACE_Send+0xfc>)
 800c0c0:	8a1b      	ldrh	r3, [r3, #16]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	4b2c      	ldr	r3, [pc, #176]	@ (800c178 <TRACE_Send+0xfc>)
 800c0c8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c0ca:	4b2b      	ldr	r3, [pc, #172]	@ (800c178 <TRACE_Send+0xfc>)
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c0d0:	4b29      	ldr	r3, [pc, #164]	@ (800c178 <TRACE_Send+0xfc>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c0d6:	4b28      	ldr	r3, [pc, #160]	@ (800c178 <TRACE_Send+0xfc>)
 800c0d8:	8a9b      	ldrh	r3, [r3, #20]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d105      	bne.n	800c0ea <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c0de:	4b26      	ldr	r3, [pc, #152]	@ (800c178 <TRACE_Send+0xfc>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c0e4:	4b24      	ldr	r3, [pc, #144]	@ (800c178 <TRACE_Send+0xfc>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c0ea:	4b23      	ldr	r3, [pc, #140]	@ (800c178 <TRACE_Send+0xfc>)
 800c0ec:	789b      	ldrb	r3, [r3, #2]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d115      	bne.n	800c11e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c0f2:	4b21      	ldr	r3, [pc, #132]	@ (800c178 <TRACE_Send+0xfc>)
 800c0f4:	8a5a      	ldrh	r2, [r3, #18]
 800c0f6:	4b20      	ldr	r3, [pc, #128]	@ (800c178 <TRACE_Send+0xfc>)
 800c0f8:	8a1b      	ldrh	r3, [r3, #16]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d908      	bls.n	800c110 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c178 <TRACE_Send+0xfc>)
 800c100:	8a5a      	ldrh	r2, [r3, #18]
 800c102:	4b1d      	ldr	r3, [pc, #116]	@ (800c178 <TRACE_Send+0xfc>)
 800c104:	8a1b      	ldrh	r3, [r3, #16]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	b29a      	uxth	r2, r3
 800c10a:	4b1b      	ldr	r3, [pc, #108]	@ (800c178 <TRACE_Send+0xfc>)
 800c10c:	829a      	strh	r2, [r3, #20]
 800c10e:	e006      	b.n	800c11e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c110:	4b19      	ldr	r3, [pc, #100]	@ (800c178 <TRACE_Send+0xfc>)
 800c112:	8a1b      	ldrh	r3, [r3, #16]
 800c114:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c118:	b29a      	uxth	r2, r3
 800c11a:	4b17      	ldr	r3, [pc, #92]	@ (800c178 <TRACE_Send+0xfc>)
 800c11c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c11e:	4b16      	ldr	r3, [pc, #88]	@ (800c178 <TRACE_Send+0xfc>)
 800c120:	8a1b      	ldrh	r3, [r3, #16]
 800c122:	461a      	mov	r2, r3
 800c124:	4b15      	ldr	r3, [pc, #84]	@ (800c17c <TRACE_Send+0x100>)
 800c126:	4413      	add	r3, r2
 800c128:	61bb      	str	r3, [r7, #24]
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f383 8810 	msr	PRIMASK, r3
}
 800c134:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800c136:	f7f4 fc9d 	bl	8000a74 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c13a:	4b11      	ldr	r3, [pc, #68]	@ (800c180 <TRACE_Send+0x104>)
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	4a0e      	ldr	r2, [pc, #56]	@ (800c178 <TRACE_Send+0xfc>)
 800c140:	8a92      	ldrh	r2, [r2, #20]
 800c142:	4611      	mov	r1, r2
 800c144:	69b8      	ldr	r0, [r7, #24]
 800c146:	4798      	blx	r3
 800c148:	4603      	mov	r3, r0
 800c14a:	77fb      	strb	r3, [r7, #31]
 800c14c:	e00d      	b.n	800c16a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800c14e:	f000 f941 	bl	800c3d4 <TRACE_UnLock>
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	f383 8810 	msr	PRIMASK, r3
}
 800c15c:	e005      	b.n	800c16a <TRACE_Send+0xee>
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f383 8810 	msr	PRIMASK, r3
}
 800c168:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800c16a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3720      	adds	r7, #32
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	200006d0 	.word	0x200006d0
 800c17c:	200006e8 	.word	0x200006e8
 800c180:	0800c8dc 	.word	0x0800c8dc

0800c184 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c18c:	2300      	movs	r3, #0
 800c18e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c190:	f3ef 8310 	mrs	r3, PRIMASK
 800c194:	617b      	str	r3, [r7, #20]
  return(result);
 800c196:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c198:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c19a:	b672      	cpsid	i
}
 800c19c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c19e:	4b3c      	ldr	r3, [pc, #240]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1a0:	789b      	ldrb	r3, [r3, #2]
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d106      	bne.n	800c1b4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c1a6:	4b3a      	ldr	r3, [pc, #232]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c1ac:	4b38      	ldr	r3, [pc, #224]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	821a      	strh	r2, [r3, #16]
 800c1b2:	e00a      	b.n	800c1ca <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c1b4:	4b36      	ldr	r3, [pc, #216]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1b6:	8a1a      	ldrh	r2, [r3, #16]
 800c1b8:	4b35      	ldr	r3, [pc, #212]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1ba:	8a9b      	ldrh	r3, [r3, #20]
 800c1bc:	4413      	add	r3, r2
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	4b32      	ldr	r3, [pc, #200]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1c8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c1ca:	4b31      	ldr	r3, [pc, #196]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1cc:	8a1a      	ldrh	r2, [r3, #16]
 800c1ce:	4b30      	ldr	r3, [pc, #192]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1d0:	8a5b      	ldrh	r3, [r3, #18]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d04d      	beq.n	800c272 <TRACE_TxCpltCallback+0xee>
 800c1d6:	4b2e      	ldr	r3, [pc, #184]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1d8:	8adb      	ldrh	r3, [r3, #22]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d149      	bne.n	800c272 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c1de:	4b2c      	ldr	r3, [pc, #176]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1e0:	789b      	ldrb	r3, [r3, #2]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d117      	bne.n	800c216 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c1e6:	4b2a      	ldr	r3, [pc, #168]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1e8:	881a      	ldrh	r2, [r3, #0]
 800c1ea:	4b29      	ldr	r3, [pc, #164]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1ec:	8a1b      	ldrh	r3, [r3, #16]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	4b27      	ldr	r3, [pc, #156]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1f4:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c1f6:	4b26      	ldr	r3, [pc, #152]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c1fc:	4b24      	ldr	r3, [pc, #144]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c202:	4b23      	ldr	r3, [pc, #140]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c204:	8a9b      	ldrh	r3, [r3, #20]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d105      	bne.n	800c216 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c20a:	4b21      	ldr	r3, [pc, #132]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c20c:	2200      	movs	r2, #0
 800c20e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c210:	4b1f      	ldr	r3, [pc, #124]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c212:	2200      	movs	r2, #0
 800c214:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c216:	4b1e      	ldr	r3, [pc, #120]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c218:	789b      	ldrb	r3, [r3, #2]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d115      	bne.n	800c24a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c21e:	4b1c      	ldr	r3, [pc, #112]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c220:	8a5a      	ldrh	r2, [r3, #18]
 800c222:	4b1b      	ldr	r3, [pc, #108]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c224:	8a1b      	ldrh	r3, [r3, #16]
 800c226:	429a      	cmp	r2, r3
 800c228:	d908      	bls.n	800c23c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c22a:	4b19      	ldr	r3, [pc, #100]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c22c:	8a5a      	ldrh	r2, [r3, #18]
 800c22e:	4b18      	ldr	r3, [pc, #96]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c230:	8a1b      	ldrh	r3, [r3, #16]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	b29a      	uxth	r2, r3
 800c236:	4b16      	ldr	r3, [pc, #88]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c238:	829a      	strh	r2, [r3, #20]
 800c23a:	e006      	b.n	800c24a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c23c:	4b14      	ldr	r3, [pc, #80]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c23e:	8a1b      	ldrh	r3, [r3, #16]
 800c240:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c244:	b29a      	uxth	r2, r3
 800c246:	4b12      	ldr	r3, [pc, #72]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c248:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c24a:	4b11      	ldr	r3, [pc, #68]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c24c:	8a1b      	ldrh	r3, [r3, #16]
 800c24e:	461a      	mov	r2, r3
 800c250:	4b10      	ldr	r3, [pc, #64]	@ (800c294 <TRACE_TxCpltCallback+0x110>)
 800c252:	4413      	add	r3, r2
 800c254:	61fb      	str	r3, [r7, #28]
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	f383 8810 	msr	PRIMASK, r3
}
 800c260:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c262:	4b0d      	ldr	r3, [pc, #52]	@ (800c298 <TRACE_TxCpltCallback+0x114>)
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	4a0a      	ldr	r2, [pc, #40]	@ (800c290 <TRACE_TxCpltCallback+0x10c>)
 800c268:	8a92      	ldrh	r2, [r2, #20]
 800c26a:	4611      	mov	r1, r2
 800c26c:	69f8      	ldr	r0, [r7, #28]
 800c26e:	4798      	blx	r3
 800c270:	e00a      	b.n	800c288 <TRACE_TxCpltCallback+0x104>
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f383 8810 	msr	PRIMASK, r3
}
 800c27c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c27e:	f7f4 fc01 	bl	8000a84 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c282:	f000 f8a7 	bl	800c3d4 <TRACE_UnLock>
  }
}
 800c286:	bf00      	nop
 800c288:	bf00      	nop
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200006d0 	.word	0x200006d0
 800c294:	200006e8 	.word	0x200006e8
 800c298:	0800c8dc 	.word	0x0800c8dc

0800c29c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	6039      	str	r1, [r7, #0]
 800c2a6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800c2a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c2ac:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c2b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2b4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c2b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2b8:	b672      	cpsid	i
}
 800c2ba:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800c2bc:	4b35      	ldr	r3, [pc, #212]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2be:	8a5a      	ldrh	r2, [r3, #18]
 800c2c0:	4b34      	ldr	r3, [pc, #208]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2c2:	8a1b      	ldrh	r3, [r3, #16]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d11b      	bne.n	800c300 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c2c8:	4b32      	ldr	r3, [pc, #200]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2ca:	8a5b      	ldrh	r3, [r3, #18]
 800c2cc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c2d0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c2d2:	88fa      	ldrh	r2, [r7, #6]
 800c2d4:	8afb      	ldrh	r3, [r7, #22]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d33a      	bcc.n	800c350 <TRACE_AllocateBufer+0xb4>
 800c2da:	4b2e      	ldr	r3, [pc, #184]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2dc:	8a1b      	ldrh	r3, [r3, #16]
 800c2de:	88fa      	ldrh	r2, [r7, #6]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d235      	bcs.n	800c350 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c2e4:	4b2b      	ldr	r3, [pc, #172]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c2ea:	4b2a      	ldr	r3, [pc, #168]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2ec:	8a5a      	ldrh	r2, [r3, #18]
 800c2ee:	4b29      	ldr	r3, [pc, #164]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2f0:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c2f2:	4b28      	ldr	r3, [pc, #160]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2f4:	8a1b      	ldrh	r3, [r3, #16]
 800c2f6:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c2f8:	4b26      	ldr	r3, [pc, #152]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	825a      	strh	r2, [r3, #18]
 800c2fe:	e027      	b.n	800c350 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c300:	4b24      	ldr	r3, [pc, #144]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c302:	8a5a      	ldrh	r2, [r3, #18]
 800c304:	4b23      	ldr	r3, [pc, #140]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c306:	8a1b      	ldrh	r3, [r3, #16]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d91b      	bls.n	800c344 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c30c:	4b21      	ldr	r3, [pc, #132]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c30e:	8a5b      	ldrh	r3, [r3, #18]
 800c310:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c314:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c316:	88fa      	ldrh	r2, [r7, #6]
 800c318:	8afb      	ldrh	r3, [r7, #22]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d318      	bcc.n	800c350 <TRACE_AllocateBufer+0xb4>
 800c31e:	4b1d      	ldr	r3, [pc, #116]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c320:	8a1b      	ldrh	r3, [r3, #16]
 800c322:	88fa      	ldrh	r2, [r7, #6]
 800c324:	429a      	cmp	r2, r3
 800c326:	d213      	bcs.n	800c350 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c328:	4b1a      	ldr	r3, [pc, #104]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c32a:	2201      	movs	r2, #1
 800c32c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c32e:	4b19      	ldr	r3, [pc, #100]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c330:	8a5a      	ldrh	r2, [r3, #18]
 800c332:	4b18      	ldr	r3, [pc, #96]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c334:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c336:	4b17      	ldr	r3, [pc, #92]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c338:	8a1b      	ldrh	r3, [r3, #16]
 800c33a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c33c:	4b15      	ldr	r3, [pc, #84]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c33e:	2200      	movs	r2, #0
 800c340:	825a      	strh	r2, [r3, #18]
 800c342:	e005      	b.n	800c350 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c344:	4b13      	ldr	r3, [pc, #76]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c346:	8a1a      	ldrh	r2, [r3, #16]
 800c348:	4b12      	ldr	r3, [pc, #72]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c34a:	8a5b      	ldrh	r3, [r3, #18]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800c350:	8afa      	ldrh	r2, [r7, #22]
 800c352:	88fb      	ldrh	r3, [r7, #6]
 800c354:	429a      	cmp	r2, r3
 800c356:	d90f      	bls.n	800c378 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800c358:	4b0e      	ldr	r3, [pc, #56]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c35a:	8a5a      	ldrh	r2, [r3, #18]
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c360:	4b0c      	ldr	r3, [pc, #48]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c362:	8a5a      	ldrh	r2, [r3, #18]
 800c364:	88fb      	ldrh	r3, [r7, #6]
 800c366:	4413      	add	r3, r2
 800c368:	b29b      	uxth	r3, r3
 800c36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36e:	b29a      	uxth	r2, r3
 800c370:	4b08      	ldr	r3, [pc, #32]	@ (800c394 <TRACE_AllocateBufer+0xf8>)
 800c372:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	82bb      	strh	r3, [r7, #20]
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	f383 8810 	msr	PRIMASK, r3
}
 800c382:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c384:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	371c      	adds	r7, #28
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bc80      	pop	{r7}
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	200006d0 	.word	0x200006d0

0800c398 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c39e:	f3ef 8310 	mrs	r3, PRIMASK
 800c3a2:	607b      	str	r3, [r7, #4]
  return(result);
 800c3a4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c3a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3a8:	b672      	cpsid	i
}
 800c3aa:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c3ac:	4b08      	ldr	r3, [pc, #32]	@ (800c3d0 <TRACE_Lock+0x38>)
 800c3ae:	8adb      	ldrh	r3, [r3, #22]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	4b06      	ldr	r3, [pc, #24]	@ (800c3d0 <TRACE_Lock+0x38>)
 800c3b6:	82da      	strh	r2, [r3, #22]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	f383 8810 	msr	PRIMASK, r3
}
 800c3c2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c3c4:	bf00      	nop
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bc80      	pop	{r7}
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	200006d0 	.word	0x200006d0

0800c3d4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3da:	f3ef 8310 	mrs	r3, PRIMASK
 800c3de:	607b      	str	r3, [r7, #4]
  return(result);
 800c3e0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c3e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3e4:	b672      	cpsid	i
}
 800c3e6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c3e8:	4b08      	ldr	r3, [pc, #32]	@ (800c40c <TRACE_UnLock+0x38>)
 800c3ea:	8adb      	ldrh	r3, [r3, #22]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	4b06      	ldr	r3, [pc, #24]	@ (800c40c <TRACE_UnLock+0x38>)
 800c3f2:	82da      	strh	r2, [r3, #22]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	f383 8810 	msr	PRIMASK, r3
}
 800c3fe:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c400:	bf00      	nop
 800c402:	3714      	adds	r7, #20
 800c404:	46bd      	mov	sp, r7
 800c406:	bc80      	pop	{r7}
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	200006d0 	.word	0x200006d0

0800c410 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c410:	b480      	push	{r7}
 800c412:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c414:	4b05      	ldr	r3, [pc, #20]	@ (800c42c <TRACE_IsLocked+0x1c>)
 800c416:	8adb      	ldrh	r3, [r3, #22]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bf14      	ite	ne
 800c41c:	2301      	movne	r3, #1
 800c41e:	2300      	moveq	r3, #0
 800c420:	b2db      	uxtb	r3, r3
}
 800c422:	4618      	mov	r0, r3
 800c424:	46bd      	mov	sp, r7
 800c426:	bc80      	pop	{r7}
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	200006d0 	.word	0x200006d0

0800c430 <memset>:
 800c430:	4402      	add	r2, r0
 800c432:	4603      	mov	r3, r0
 800c434:	4293      	cmp	r3, r2
 800c436:	d100      	bne.n	800c43a <memset+0xa>
 800c438:	4770      	bx	lr
 800c43a:	f803 1b01 	strb.w	r1, [r3], #1
 800c43e:	e7f9      	b.n	800c434 <memset+0x4>

0800c440 <__libc_init_array>:
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	4d0d      	ldr	r5, [pc, #52]	@ (800c478 <__libc_init_array+0x38>)
 800c444:	4c0d      	ldr	r4, [pc, #52]	@ (800c47c <__libc_init_array+0x3c>)
 800c446:	1b64      	subs	r4, r4, r5
 800c448:	10a4      	asrs	r4, r4, #2
 800c44a:	2600      	movs	r6, #0
 800c44c:	42a6      	cmp	r6, r4
 800c44e:	d109      	bne.n	800c464 <__libc_init_array+0x24>
 800c450:	4d0b      	ldr	r5, [pc, #44]	@ (800c480 <__libc_init_array+0x40>)
 800c452:	4c0c      	ldr	r4, [pc, #48]	@ (800c484 <__libc_init_array+0x44>)
 800c454:	f000 f818 	bl	800c488 <_init>
 800c458:	1b64      	subs	r4, r4, r5
 800c45a:	10a4      	asrs	r4, r4, #2
 800c45c:	2600      	movs	r6, #0
 800c45e:	42a6      	cmp	r6, r4
 800c460:	d105      	bne.n	800c46e <__libc_init_array+0x2e>
 800c462:	bd70      	pop	{r4, r5, r6, pc}
 800c464:	f855 3b04 	ldr.w	r3, [r5], #4
 800c468:	4798      	blx	r3
 800c46a:	3601      	adds	r6, #1
 800c46c:	e7ee      	b.n	800c44c <__libc_init_array+0xc>
 800c46e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c472:	4798      	blx	r3
 800c474:	3601      	adds	r6, #1
 800c476:	e7f2      	b.n	800c45e <__libc_init_array+0x1e>
 800c478:	0800ca6c 	.word	0x0800ca6c
 800c47c:	0800ca6c 	.word	0x0800ca6c
 800c480:	0800ca6c 	.word	0x0800ca6c
 800c484:	0800ca70 	.word	0x0800ca70

0800c488 <_init>:
 800c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48a:	bf00      	nop
 800c48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c48e:	bc08      	pop	{r3}
 800c490:	469e      	mov	lr, r3
 800c492:	4770      	bx	lr

0800c494 <_fini>:
 800c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c496:	bf00      	nop
 800c498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c49a:	bc08      	pop	{r3}
 800c49c:	469e      	mov	lr, r3
 800c49e:	4770      	bx	lr
