
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000374c  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003884  08003884  00004884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003968  08003968  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003968  08003968  00004968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003970  08003970  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003970  08003970  00004970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003974  08003974  00004974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003978  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000000c  08003984  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08003984  00005218  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137d0  00000000  00000000  00005036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002956  00000000  00000000  00018806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0001b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001056  00000000  00000000  0001c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019faa  00000000  00000000  0001d6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156e9  00000000  00000000  00037690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1553  00000000  00000000  0004cd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee2cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  000ee310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000f3d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800386c 	.word	0x0800386c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	0800386c 	.word	0x0800386c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800018c:	f000 b96a 	b.w	8000464 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	460c      	mov	r4, r1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d14e      	bne.n	8000252 <__udivmoddi4+0xaa>
 80001b4:	4694      	mov	ip, r2
 80001b6:	458c      	cmp	ip, r1
 80001b8:	4686      	mov	lr, r0
 80001ba:	fab2 f282 	clz	r2, r2
 80001be:	d962      	bls.n	8000286 <__udivmoddi4+0xde>
 80001c0:	b14a      	cbz	r2, 80001d6 <__udivmoddi4+0x2e>
 80001c2:	f1c2 0320 	rsb	r3, r2, #32
 80001c6:	4091      	lsls	r1, r2
 80001c8:	fa20 f303 	lsr.w	r3, r0, r3
 80001cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d0:	4319      	orrs	r1, r3
 80001d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001da:	fa1f f68c 	uxth.w	r6, ip
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001e6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001ee:	fb04 f106 	mul.w	r1, r4, r6
 80001f2:	4299      	cmp	r1, r3
 80001f4:	d90a      	bls.n	800020c <__udivmoddi4+0x64>
 80001f6:	eb1c 0303 	adds.w	r3, ip, r3
 80001fa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80001fe:	f080 8112 	bcs.w	8000426 <__udivmoddi4+0x27e>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 810f 	bls.w	8000426 <__udivmoddi4+0x27e>
 8000208:	3c02      	subs	r4, #2
 800020a:	4463      	add	r3, ip
 800020c:	1a59      	subs	r1, r3, r1
 800020e:	fa1f f38e 	uxth.w	r3, lr
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800021e:	fb00 f606 	mul.w	r6, r0, r6
 8000222:	429e      	cmp	r6, r3
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x94>
 8000226:	eb1c 0303 	adds.w	r3, ip, r3
 800022a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800022e:	f080 80fc 	bcs.w	800042a <__udivmoddi4+0x282>
 8000232:	429e      	cmp	r6, r3
 8000234:	f240 80f9 	bls.w	800042a <__udivmoddi4+0x282>
 8000238:	4463      	add	r3, ip
 800023a:	3802      	subs	r0, #2
 800023c:	1b9b      	subs	r3, r3, r6
 800023e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000242:	2100      	movs	r1, #0
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa6>
 8000246:	40d3      	lsrs	r3, r2
 8000248:	2200      	movs	r2, #0
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xba>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb4>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa6>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x150>
 800026a:	42a3      	cmp	r3, r4
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xcc>
 800026e:	4290      	cmp	r0, r2
 8000270:	f0c0 80f0 	bcc.w	8000454 <__udivmoddi4+0x2ac>
 8000274:	1a86      	subs	r6, r0, r2
 8000276:	eb64 0303 	sbc.w	r3, r4, r3
 800027a:	2001      	movs	r0, #1
 800027c:	2d00      	cmp	r5, #0
 800027e:	d0e6      	beq.n	800024e <__udivmoddi4+0xa6>
 8000280:	e9c5 6300 	strd	r6, r3, [r5]
 8000284:	e7e3      	b.n	800024e <__udivmoddi4+0xa6>
 8000286:	2a00      	cmp	r2, #0
 8000288:	f040 8090 	bne.w	80003ac <__udivmoddi4+0x204>
 800028c:	eba1 040c 	sub.w	r4, r1, ip
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	fa1f f78c 	uxth.w	r7, ip
 8000298:	2101      	movs	r1, #1
 800029a:	fbb4 f6f8 	udiv	r6, r4, r8
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002aa:	fb07 f006 	mul.w	r0, r7, r6
 80002ae:	4298      	cmp	r0, r3
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0x11c>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x11a>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f200 80cd 	bhi.w	800045c <__udivmoddi4+0x2b4>
 80002c2:	4626      	mov	r6, r4
 80002c4:	1a1c      	subs	r4, r3, r0
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002d6:	fb00 f707 	mul.w	r7, r0, r7
 80002da:	429f      	cmp	r7, r3
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x148>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x146>
 80002e8:	429f      	cmp	r7, r3
 80002ea:	f200 80b0 	bhi.w	800044e <__udivmoddi4+0x2a6>
 80002ee:	4620      	mov	r0, r4
 80002f0:	1bdb      	subs	r3, r3, r7
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x9c>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa20 fc06 	lsr.w	ip, r0, r6
 8000308:	fa04 f301 	lsl.w	r3, r4, r1
 800030c:	ea43 030c 	orr.w	r3, r3, ip
 8000310:	40f4      	lsrs	r4, r6
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	0c38      	lsrs	r0, r7, #16
 8000318:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800031c:	fbb4 fef0 	udiv	lr, r4, r0
 8000320:	fa1f fc87 	uxth.w	ip, r7
 8000324:	fb00 441e 	mls	r4, r0, lr, r4
 8000328:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800032c:	fb0e f90c 	mul.w	r9, lr, ip
 8000330:	45a1      	cmp	r9, r4
 8000332:	fa02 f201 	lsl.w	r2, r2, r1
 8000336:	d90a      	bls.n	800034e <__udivmoddi4+0x1a6>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800033e:	f080 8084 	bcs.w	800044a <__udivmoddi4+0x2a2>
 8000342:	45a1      	cmp	r9, r4
 8000344:	f240 8081 	bls.w	800044a <__udivmoddi4+0x2a2>
 8000348:	f1ae 0e02 	sub.w	lr, lr, #2
 800034c:	443c      	add	r4, r7
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	fa1f f983 	uxth.w	r9, r3
 8000356:	fbb4 f3f0 	udiv	r3, r4, r0
 800035a:	fb00 4413 	mls	r4, r0, r3, r4
 800035e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000362:	fb03 fc0c 	mul.w	ip, r3, ip
 8000366:	45a4      	cmp	ip, r4
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x1d2>
 800036a:	193c      	adds	r4, r7, r4
 800036c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000370:	d267      	bcs.n	8000442 <__udivmoddi4+0x29a>
 8000372:	45a4      	cmp	ip, r4
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0x29a>
 8000376:	3b02      	subs	r3, #2
 8000378:	443c      	add	r4, r7
 800037a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800037e:	fba0 9302 	umull	r9, r3, r0, r2
 8000382:	eba4 040c 	sub.w	r4, r4, ip
 8000386:	429c      	cmp	r4, r3
 8000388:	46ce      	mov	lr, r9
 800038a:	469c      	mov	ip, r3
 800038c:	d351      	bcc.n	8000432 <__udivmoddi4+0x28a>
 800038e:	d04e      	beq.n	800042e <__udivmoddi4+0x286>
 8000390:	b155      	cbz	r5, 80003a8 <__udivmoddi4+0x200>
 8000392:	ebb8 030e 	subs.w	r3, r8, lr
 8000396:	eb64 040c 	sbc.w	r4, r4, ip
 800039a:	fa04 f606 	lsl.w	r6, r4, r6
 800039e:	40cb      	lsrs	r3, r1
 80003a0:	431e      	orrs	r6, r3
 80003a2:	40cc      	lsrs	r4, r1
 80003a4:	e9c5 6400 	strd	r6, r4, [r5]
 80003a8:	2100      	movs	r1, #0
 80003aa:	e750      	b.n	800024e <__udivmoddi4+0xa6>
 80003ac:	f1c2 0320 	rsb	r3, r2, #32
 80003b0:	fa20 f103 	lsr.w	r1, r0, r3
 80003b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b8:	fa24 f303 	lsr.w	r3, r4, r3
 80003bc:	4094      	lsls	r4, r2
 80003be:	430c      	orrs	r4, r1
 80003c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c8:	fa1f f78c 	uxth.w	r7, ip
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3110 	mls	r1, r8, r0, r3
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x24c>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29e>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29e>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x276>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x296>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x296>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e739      	b.n	800029a <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f0      	b.n	800020c <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e706      	b.n	800023c <__udivmoddi4+0x94>
 800042e:	45c8      	cmp	r8, r9
 8000430:	d2ae      	bcs.n	8000390 <__udivmoddi4+0x1e8>
 8000432:	ebb9 0e02 	subs.w	lr, r9, r2
 8000436:	eb63 0c07 	sbc.w	ip, r3, r7
 800043a:	3801      	subs	r0, #1
 800043c:	e7a8      	b.n	8000390 <__udivmoddi4+0x1e8>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x276>
 8000442:	4603      	mov	r3, r0
 8000444:	e799      	b.n	800037a <__udivmoddi4+0x1d2>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x24c>
 800044a:	46d6      	mov	lr, sl
 800044c:	e77f      	b.n	800034e <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74d      	b.n	80002f0 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e70f      	b.n	800027c <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e730      	b.n	80002c4 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048c:	68fb      	ldr	r3, [r7, #12]
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 fb88 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f80e 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f000 f988 	bl	80007b8 <MX_GPIO_Init>
  MX_I2C3_Init();
 80004a8:	f000 f85c 	bl	8000564 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80004ac:	f000 f89a 	bl	80005e4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80004b0:	f000 f8e6 	bl	8000680 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80004b4:	f000 f930 	bl	8000718 <MX_SPI1_Init>
  MX_SUBGHZ_Init();
 80004b8:	f000 f96c 	bl	8000794 <MX_SUBGHZ_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <main+0x24>

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b09a      	sub	sp, #104	@ 0x68
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0320 	add.w	r3, r7, #32
 80004ca:	2248      	movs	r2, #72	@ 0x48
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 f9a0 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	f107 0308 	add.w	r3, r7, #8
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000560 <SystemClock_Config+0xa0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80004ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000560 <SystemClock_Config+0xa0>)
 80004f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <SystemClock_Config+0xa0>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000502:	2320      	movs	r3, #32
 8000504:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000506:	2301      	movs	r3, #1
 8000508:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800050a:	2300      	movs	r3, #0
 800050c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800050e:	2360      	movs	r3, #96	@ 0x60
 8000510:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000512:	2300      	movs	r3, #0
 8000514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	4618      	mov	r0, r3
 800051c:	f001 f9da 	bl	80018d4 <HAL_RCC_OscConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000526:	f000 f954 	bl	80007d2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800052a:	234f      	movs	r3, #79	@ 0x4f
 800052c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fd45 	bl	8001fd8 <HAL_RCC_ClockConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000554:	f000 f93d 	bl	80007d2 <Error_Handler>
  }
}
 8000558:	bf00      	nop
 800055a:	3768      	adds	r7, #104	@ 0x68
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	58000400 	.word	0x58000400

08000564 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_I2C3_Init+0x74>)
 800056a:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <MX_I2C3_Init+0x78>)
 800056c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_I2C3_Init+0x74>)
 8000570:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <MX_I2C3_Init+0x7c>)
 8000572:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <MX_I2C3_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_I2C3_Init+0x74>)
 800057c:	2201      	movs	r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_I2C3_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_I2C3_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <MX_I2C3_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_I2C3_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_I2C3_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800059e:	480e      	ldr	r0, [pc, #56]	@ (80005d8 <MX_I2C3_Init+0x74>)
 80005a0:	f000 fdbe 	bl	8001120 <HAL_I2C_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80005aa:	f000 f912 	bl	80007d2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_I2C3_Init+0x74>)
 80005b2:	f000 fe50 	bl	8001256 <HAL_I2CEx_ConfigAnalogFilter>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80005bc:	f000 f909 	bl	80007d2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <MX_I2C3_Init+0x74>)
 80005c4:	f000 fe91 	bl	80012ea <HAL_I2CEx_ConfigDigitalFilter>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f900 	bl	80007d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40005c00 	.word	0x40005c00
 80005e0:	00100d14 	.word	0x00100d14

080005e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 80005ea:	4a23      	ldr	r2, [pc, #140]	@ (8000678 <MX_LPUART1_UART_Init+0x94>)
 80005ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 80005f0:	4a22      	ldr	r2, [pc, #136]	@ (800067c <MX_LPUART1_UART_Init+0x98>)
 80005f2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 8000608:	220c      	movs	r2, #12
 800060a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 8000626:	2200      	movs	r2, #0
 8000628:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062a:	4812      	ldr	r0, [pc, #72]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 800062c:	f002 fb6f 	bl	8002d0e <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000636:	f000 f8cc 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 800063e:	f003 f820 	bl	8003682 <HAL_UARTEx_SetTxFifoThreshold>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000648:	f000 f8c3 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4809      	ldr	r0, [pc, #36]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 8000650:	f003 f855 	bl	80036fe <HAL_UARTEx_SetRxFifoThreshold>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800065a:	f000 f8ba 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_LPUART1_UART_Init+0x90>)
 8000660:	f002 ffd7 	bl	8003612 <HAL_UARTEx_DisableFifoMode>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800066a:	f000 f8b2 	bl	80007d2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000007c 	.word	0x2000007c
 8000678:	40008000 	.word	0x40008000
 800067c:	00033324 	.word	0x00033324

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 8000686:	4a23      	ldr	r2, [pc, #140]	@ (8000714 <MX_USART1_UART_Init+0x94>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068a:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c8:	4811      	ldr	r0, [pc, #68]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006ca:	f002 fb20 	bl	8002d0e <HAL_UART_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006d4:	f000 f87d 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	480d      	ldr	r0, [pc, #52]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006dc:	f002 ffd1 	bl	8003682 <HAL_UARTEx_SetTxFifoThreshold>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006e6:	f000 f874 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ea:	2100      	movs	r1, #0
 80006ec:	4808      	ldr	r0, [pc, #32]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006ee:	f003 f806 	bl	80036fe <HAL_UARTEx_SetRxFifoThreshold>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006f8:	f000 f86b 	bl	80007d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_USART1_UART_Init+0x90>)
 80006fe:	f002 ff88 	bl	8003612 <HAL_UARTEx_DisableFifoMode>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000708:	f000 f863 	bl	80007d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000110 	.word	0x20000110
 8000714:	40013800 	.word	0x40013800

08000718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_SPI1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_SPI1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_SPI1_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_SPI1_Init+0x74>)
 8000732:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_SPI1_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_SPI1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_SPI1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_SPI1_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_SPI1_Init+0x74>)
 8000772:	2208      	movs	r2, #8
 8000774:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_SPI1_Init+0x74>)
 8000778:	f002 f8ea 	bl	8002950 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 f826 	bl	80007d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001a4 	.word	0x200001a4
 8000790:	40013000 	.word	0x40013000

08000794 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_SUBGHZ_Init+0x20>)
 800079a:	2210      	movs	r2, #16
 800079c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_SUBGHZ_Init+0x20>)
 80007a0:	f002 fa10 	bl	8002bc4 <HAL_SUBGHZ_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80007aa:	f000 f812 	bl	80007d2 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000208 	.word	0x20000208

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff fe53 	bl	8000468 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff fe50 	bl	8000468 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c8:	2004      	movs	r0, #4
 80007ca:	f7ff fe4d 	bl	8000468 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d6:	b672      	cpsid	i
}
 80007d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007da:	bf00      	nop
 80007dc:	e7fd      	b.n	80007da <Error_Handler+0x8>

080007de <LL_AHB2_GRP1_EnableClock>:
{
 80007de:	b480      	push	{r7}
 80007e0:	b085      	sub	sp, #20
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4013      	ands	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800080e:	b480      	push	{r7}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800081a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800081c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4313      	orrs	r3, r2
 8000824:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800082a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4013      	ands	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800083e:	b480      	push	{r7}
 8000840:	b085      	sub	sp, #20
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800084a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800084c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4313      	orrs	r3, r2
 8000854:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800085a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4013      	ands	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800087a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800087c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4313      	orrs	r3, r2
 8000884:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800088a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4013      	ands	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800089e:	b480      	push	{r7}
 80008a0:	b085      	sub	sp, #20
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80008a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80008ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80008b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4013      	ands	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
	...

080008dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b096      	sub	sp, #88	@ 0x58
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2238      	movs	r2, #56	@ 0x38
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 ff89 	bl	8003814 <memset>
  if(hi2c->Instance==I2C3)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <HAL_I2C_MspInit+0x88>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d127      	bne.n	800095c <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800090c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000910:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000912:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fefd 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000928:	f7ff ff53 	bl	80007d2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	2002      	movs	r0, #2
 800092e:	f7ff ff56 	bl	80007de <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB4     ------> I2C3_SDA
    PB13     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13;
 8000932:	f242 0310 	movw	r3, #8208	@ 0x2010
 8000936:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000944:	2304      	movs	r3, #4
 8000946:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	@ (8000968 <HAL_I2C_MspInit+0x8c>)
 8000950:	f000 fa86 	bl	8000e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000954:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000958:	f7ff ff59 	bl	800080e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800095c:	bf00      	nop
 800095e:	3758      	adds	r7, #88	@ 0x58
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005c00 	.word	0x40005c00
 8000968:	48000400 	.word	0x48000400

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	@ 0x58
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2238      	movs	r2, #56	@ 0x38
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f002 ff41 	bl	8003814 <memset>
  if(huart->Instance==LPUART1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a2b      	ldr	r2, [pc, #172]	@ (8000a44 <HAL_UART_MspInit+0xd8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d124      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800099c:	2320      	movs	r3, #32
 800099e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 feb7 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b4:	f7ff ff0d 	bl	80007d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff ff40 	bl	800083e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2004      	movs	r0, #4
 80009c0:	f7ff ff0d 	bl	80007de <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80009c4:	2303      	movs	r3, #3
 80009c6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009d4:	2308      	movs	r3, #8
 80009d6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009dc:	4619      	mov	r1, r3
 80009de:	481a      	ldr	r0, [pc, #104]	@ (8000a48 <HAL_UART_MspInit+0xdc>)
 80009e0:	f000 fa3e 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009e4:	e02a      	b.n	8000a3c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART1)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a18      	ldr	r2, [pc, #96]	@ (8000a4c <HAL_UART_MspInit+0xe0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d125      	bne.n	8000a3c <HAL_UART_MspInit+0xd0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009f4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80009f8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fe8c 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8000a0a:	f7ff fee2 	bl	80007d2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a0e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a12:	f7ff ff2c 	bl	800086e <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff fee1 	bl	80007de <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a1c:	23c0      	movs	r3, #192	@ 0xc0
 8000a1e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	@ (8000a50 <HAL_UART_MspInit+0xe4>)
 8000a38:	f000 fa12 	bl	8000e60 <HAL_GPIO_Init>
}
 8000a3c:	bf00      	nop
 8000a3e:	3758      	adds	r7, #88	@ 0x58
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40008000 	.word	0x40008000
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	48000400 	.word	0x48000400

08000a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <HAL_SPI_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12b      	bne.n	8000ace <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a76:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000a7a:	f7ff fef8 	bl	800086e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff fead 	bl	80007de <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	2002      	movs	r0, #2
 8000a86:	f7ff feaa 	bl	80007de <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000a8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aaa:	f000 f9d9 	bl	8000e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4804      	ldr	r0, [pc, #16]	@ (8000adc <HAL_SPI_MspInit+0x88>)
 8000aca:	f000 f9c9 	bl	8000e60 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40013000 	.word	0x40013000
 8000adc:	48000400 	.word	0x48000400

08000ae0 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff fed8 	bl	800089e <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afa:	bf00      	nop
 8000afc:	e7fd      	b.n	8000afa <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <HardFault_Handler+0x4>

08000b06 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0a:	bf00      	nop
 8000b0c:	e7fd      	b.n	8000b0a <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	bf00      	nop
 8000b14:	e7fd      	b.n	8000b12 <BusFault_Handler+0x4>

08000b16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1a:	bf00      	nop
 8000b1c:	e7fd      	b.n	8000b1a <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f88d 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b60:	f7ff fff5 	bl	8000b4e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba8 <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b8a:	f002 fe4b 	bl	8003824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8e:	f7ff fc83 	bl	8000498 <main>

08000b92 <LoopForever>:

LoopForever:
    b LoopForever
 8000b92:	e7fe      	b.n	8000b92 <LoopForever>
  ldr   r0, =_estack
 8000b94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba0:	08003978 	.word	0x08003978
  ldr r2, =_sbss
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba8:	20000218 	.word	0x20000218

08000bac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f000 f91e 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000bc0:	f001 fbce 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <HAL_Init+0x3c>)
 8000bc8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bca:	200f      	movs	r0, #15
 8000bcc:	f000 f810 	bl	8000bf0 <HAL_InitTick>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	e001      	b.n	8000be0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bdc:	f7ff fe77 	bl	80008ce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be0:	79fb      	ldrb	r3, [r7, #7]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000000 	.word	0x20000000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_InitTick+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d024      	beq.n	8000c4e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c04:	f001 fbac 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HAL_InitTick+0x6c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c14:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f912 	bl	8000e46 <HAL_SYSTICK_Config>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10f      	bne.n	8000c48 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d809      	bhi.n	8000c42 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c36:	f000 f8ec 	bl	8000e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <HAL_InitTick+0x70>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e004      	b.n	8000c52 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e001      	b.n	8000c52 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000214 	.word	0x20000214

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	@ (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000214 	.word	0x20000214

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ddc:	f7ff ff90 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff49 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff60 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff92 	bl	8000d54 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffb2 	bl	8000db8 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	e140      	b.n	80010f2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2101      	movs	r1, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 8132 	beq.w	80010ec <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d005      	beq.n	8000ea0 <HAL_GPIO_Init+0x40>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d130      	bne.n	8000f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	f003 0201 	and.w	r2, r3, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d017      	beq.n	8000f3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 808c 	beq.w	80010ec <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001110 <HAL_GPIO_Init+0x2b0>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	2207      	movs	r2, #7
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1bc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a44      	ldr	r2, [pc, #272]	@ (8001114 <HAL_GPIO_Init+0x2b4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1b8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a43      	ldr	r2, [pc, #268]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1b4>
 8001010:	2302      	movs	r3, #2
 8001012:	e004      	b.n	800101e <HAL_GPIO_Init+0x1be>
 8001014:	2307      	movs	r3, #7
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x1be>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_GPIO_Init+0x1be>
 800101c:	2300      	movs	r3, #0
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4093      	lsls	r3, r2
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800102e:	4938      	ldr	r1, [pc, #224]	@ (8001110 <HAL_GPIO_Init+0x2b0>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800103c:	4b37      	ldr	r3, [pc, #220]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001060:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001066:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800108a:	4a24      	ldr	r2, [pc, #144]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 8001092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001096:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 80010c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010c4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f47f aeb7 	bne.w	8000e70 <HAL_GPIO_Init+0x10>
  }
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40010000 	.word	0x40010000
 8001114:	48000400 	.word	0x48000400
 8001118:	48000800 	.word	0x48000800
 800111c:	58000800 	.word	0x58000800

08001120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e08d      	b.n	800124e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fbc8 	bl	80008dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2224      	movs	r2, #36	@ 0x24
 8001150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d107      	bne.n	800119a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	e006      	b.n	80011a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80011a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d108      	bne.n	80011c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	e007      	b.n	80011d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69d9      	ldr	r1, [r3, #28]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2220      	movs	r2, #32
 800123a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b20      	cmp	r3, #32
 800126a:	d138      	bne.n	80012de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001276:	2302      	movs	r3, #2
 8001278:	e032      	b.n	80012e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2224      	movs	r2, #36	@ 0x24
 8001286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0201 	bic.w	r2, r2, #1
 8001298:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6819      	ldr	r1, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2220      	movs	r2, #32
 80012ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012de:	2302      	movs	r3, #2
  }
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	d139      	bne.n	8001374 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800130a:	2302      	movs	r3, #2
 800130c:	e033      	b.n	8001376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2224      	movs	r2, #36	@ 0x24
 800131a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800133c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2220      	movs	r2, #32
 8001364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	e000      	b.n	8001376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001374:	2302      	movs	r3, #2
  }
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a03      	ldr	r2, [pc, #12]	@ (8001398 <HAL_PWR_EnableBkUpAccess+0x18>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	58000400 	.word	0x58000400

0800139c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_PWREx_GetVoltageRange+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	58000400 	.word	0x58000400

080013b4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013c4:	d101      	bne.n	80013ca <LL_PWR_IsEnabledBkUpAccess+0x16>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	58000400 	.word	0x58000400

080013d8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001402:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001422:	d101      	bne.n	8001428 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800145c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800147c:	d101      	bne.n	8001482 <LL_RCC_HSE_IsReady+0x18>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_RCC_HSE_IsReady+0x1a>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d6:	d101      	bne.n	80014dc <LL_RCC_HSI_IsReady+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_RCC_HSI_IsReady+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	061b      	lsls	r3, r3, #24
 80014fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b02      	cmp	r3, #2
 8001520:	d101      	bne.n	8001526 <LL_RCC_LSE_IsReady+0x18>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_RCC_LSE_IsReady+0x1a>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800153c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b02      	cmp	r3, #2
 8001582:	d101      	bne.n	8001588 <LL_RCC_LSI_IsReady+0x18>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <LL_RCC_LSI_IsReady+0x1a>
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80015b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d101      	bne.n	80015e0 <LL_RCC_MSI_IsReady+0x16>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_RCC_MSI_IsReady+0x18>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80015ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d101      	bne.n	8001600 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016d2:	f023 020f 	bic.w	r2, r3, #15
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016de:	4313      	orrs	r3, r2
 80016e0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001700:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001726:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001758:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800179a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017a8:	6013      	str	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80017b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017c4:	6013      	str	r3, [r2, #0]
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017e0:	d101      	bne.n	80017e6 <LL_RCC_PLL_IsReady+0x18>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_RCC_PLL_IsReady+0x1a>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f003 0303 	and.w	r3, r3, #3
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800185c:	d101      	bne.n	8001862 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001874:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001880:	d101      	bne.n	8001886 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80018a2:	d101      	bne.n	80018a8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80018b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018c4:	d101      	bne.n	80018ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e36f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e6:	f7ff fece 	bl	8001686 <LL_RCC_GetSysClkSource>
 80018ea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ec:	f7ff ffa2 	bl	8001834 <LL_RCC_PLL_GetMainSource>
 80018f0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80c4 	beq.w	8001a88 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x3e>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d176      	bne.n	80019fa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d173      	bne.n	80019fa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e353      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_OscConfig+0x68>
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800193a:	e006      	b.n	800194a <HAL_RCC_OscConfig+0x76>
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800194a:	4293      	cmp	r3, r2
 800194c:	d222      	bcs.n	8001994 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fd3c 	bl	80023d0 <RCC_SetFlashLatencyFromMSIRange>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e331      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe53 	bl	8001638 <LL_RCC_MSI_SetCalibTrimming>
 8001992:	e021      	b.n	80019d8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fe3a 	bl	8001638 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fd01 	bl	80023d0 <RCC_SetFlashLatencyFromMSIRange>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e2f6      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80019d8:	f000 fcc2 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80019dc:	4603      	mov	r3, r0
 80019de:	4aa7      	ldr	r2, [pc, #668]	@ (8001c7c <HAL_RCC_OscConfig+0x3a8>)
 80019e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80019e2:	4ba7      	ldr	r3, [pc, #668]	@ (8001c80 <HAL_RCC_OscConfig+0x3ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f902 	bl	8000bf0 <HAL_InitTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80019f0:	7cfb      	ldrb	r3, [r7, #19]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d047      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	e2e5      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d02c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a02:	f7ff fdc6 	bl	8001592 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a06:	f7ff f93f 	bl	8000c88 <HAL_GetTick>
 8001a0a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f93b 	bl	8000c88 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e2d2      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001a20:	f7ff fdd3 	bl	80015ca <LL_RCC_MSI_IsReady>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f1      	beq.n	8001a0e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fdef 	bl	8001638 <LL_RCC_MSI_SetCalibTrimming>
 8001a5a:	e015      	b.n	8001a88 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a5c:	f7ff fda7 	bl	80015ae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f912 	bl	8000c88 <HAL_GetTick>
 8001a64:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a68:	f7ff f90e 	bl	8000c88 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e2a5      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001a7a:	f7ff fda6 	bl	80015ca <LL_RCC_MSI_IsReady>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f1      	bne.n	8001a68 <HAL_RCC_OscConfig+0x194>
 8001a84:	e000      	b.n	8001a88 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a86:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d058      	beq.n	8001b46 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d005      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1d2>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	d108      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d105      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d14b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e289      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad0:	d102      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x204>
 8001ad2:	f7ff fcae 	bl	8001432 <LL_RCC_HSE_Enable>
 8001ad6:	e00d      	b.n	8001af4 <HAL_RCC_OscConfig+0x220>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001ae0:	d104      	bne.n	8001aec <HAL_RCC_OscConfig+0x218>
 8001ae2:	f7ff fc79 	bl	80013d8 <LL_RCC_HSE_EnableTcxo>
 8001ae6:	f7ff fca4 	bl	8001432 <LL_RCC_HSE_Enable>
 8001aea:	e003      	b.n	8001af4 <HAL_RCC_OscConfig+0x220>
 8001aec:	f7ff fcaf 	bl	800144e <LL_RCC_HSE_Disable>
 8001af0:	f7ff fc80 	bl	80013f4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d012      	beq.n	8001b22 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff f8c4 	bl	8000c88 <HAL_GetTick>
 8001b00:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff f8c0 	bl	8000c88 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e257      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001b16:	f7ff fca8 	bl	800146a <LL_RCC_HSE_IsReady>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f1      	beq.n	8001b04 <HAL_RCC_OscConfig+0x230>
 8001b20:	e011      	b.n	8001b46 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f8b1 	bl	8000c88 <HAL_GetTick>
 8001b26:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f8ad 	bl	8000c88 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	@ 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e244      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001b3c:	f7ff fc95 	bl	800146a <LL_RCC_HSE_IsReady>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f1      	bne.n	8001b2a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d046      	beq.n	8001be0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_OscConfig+0x290>
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d10e      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d10b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e22a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fcb6 	bl	80014e6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b7a:	e031      	b.n	8001be0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d019      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b84:	f7ff fc82 	bl	800148c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f87e 	bl	8000c88 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff f87a 	bl	8000c88 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e211      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ba2:	f7ff fc8f 	bl	80014c4 <LL_RCC_HSI_IsReady>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f1      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fc98 	bl	80014e6 <LL_RCC_HSI_SetCalibTrimming>
 8001bb6:	e013      	b.n	8001be0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	f7ff fc76 	bl	80014a8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f864 	bl	8000c88 <HAL_GetTick>
 8001bc0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f860 	bl	8000c88 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1f7      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001bd6:	f7ff fc75 	bl	80014c4 <LL_RCC_HSI_IsReady>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f1      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d06e      	beq.n	8001cca <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d056      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d031      	beq.n	8001c70 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e1d0      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d013      	beq.n	8001c56 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001c2e:	f7ff fc8f 	bl	8001550 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c32:	f7ff f829 	bl	8000c88 <HAL_GetTick>
 8001c36:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7ff f825 	bl	8000c88 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b11      	cmp	r3, #17
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1bc      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001c4c:	f7ff fc90 	bl	8001570 <LL_RCC_LSI_IsReady>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f1      	bne.n	8001c3a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c5e:	f023 0210 	bic.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c70:	f7ff fc5e 	bl	8001530 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff f808 	bl	8000c88 <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001c7a:	e00c      	b.n	8001c96 <HAL_RCC_OscConfig+0x3c2>
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff f800 	bl	8000c88 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b11      	cmp	r3, #17
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e197      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001c96:	f7ff fc6b 	bl	8001570 <LL_RCC_LSI_IsReady>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f1      	beq.n	8001c84 <HAL_RCC_OscConfig+0x3b0>
 8001ca0:	e013      	b.n	8001cca <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca2:	f7ff fc55 	bl	8001550 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7fe ffef 	bl	8000c88 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cae:	f7fe ffeb 	bl	8000c88 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b11      	cmp	r3, #17
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e182      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001cc0:	f7ff fc56 	bl	8001570 <LL_RCC_LSI_IsReady>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f1      	bne.n	8001cae <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80d8 	beq.w	8001e88 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001cd8:	f7ff fb6c 	bl	80013b4 <LL_PWR_IsEnabledBkUpAccess>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d113      	bne.n	8001d0a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001ce2:	f7ff fb4d 	bl	8001380 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce6:	f7fe ffcf 	bl	8000c88 <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7fe ffcb 	bl	8000c88 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e162      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001d00:	f7ff fb58 	bl	80013b4 <LL_PWR_IsEnabledBkUpAccess>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f1      	beq.n	8001cee <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d07b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b85      	cmp	r3, #133	@ 0x85
 8001d18:	d003      	beq.n	8001d22 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7fe ffa7 	bl	8000c88 <HAL_GetTick>
 8001d3a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe ff99 	bl	8000c88 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e12e      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001d68:	f7ff fbd1 	bl	800150e <LL_RCC_LSE_IsReady>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ef      	beq.n	8001d52 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b81      	cmp	r3, #129	@ 0x81
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b85      	cmp	r3, #133	@ 0x85
 8001d80:	d121      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7fe ff81 	bl	8000c88 <HAL_GetTick>
 8001d86:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe ff73 	bl	8000c88 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e108      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ec      	beq.n	8001d9e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001dc4:	e060      	b.n	8001e88 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7fe ff5f 	bl	8000c88 <HAL_GetTick>
 8001dca:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe ff51 	bl	8000c88 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0e6      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ec      	bne.n	8001de2 <HAL_RCC_OscConfig+0x50e>
 8001e08:	e03e      	b.n	8001e88 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe ff3d 	bl	8000c88 <HAL_GetTick>
 8001e0e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7fe ff2f 	bl	8000c88 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e0c4      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ec      	bne.n	8001e26 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7fe ff1c 	bl	8000c88 <HAL_GetTick>
 8001e50:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7fe ff0e 	bl	8000c88 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0a3      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001e7e:	f7ff fb46 	bl	800150e <LL_RCC_LSE_IsReady>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ef      	bne.n	8001e68 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8099 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	d06c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d14b      	bne.n	8001f38 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	f7ff fc87 	bl	80017b2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fef0 	bl	8000c88 <HAL_GetTick>
 8001ea8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7fe feec 	bl	8000c88 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b0a      	cmp	r3, #10
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e083      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ebe:	f7ff fc86 	bl	80017ce <LL_RCC_PLL_IsReady>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f1      	bne.n	8001eac <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4b40      	ldr	r3, [pc, #256]	@ (8001fd0 <HAL_RCC_OscConfig+0x6fc>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001eda:	4311      	orrs	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ee0:	0212      	lsls	r2, r2, #8
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efe:	f7ff fc4a 	bl	8001796 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe feb9 	bl	8000c88 <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe feb5 	bl	8000c88 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b0a      	cmp	r3, #10
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e04c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001f2c:	f7ff fc4f 	bl	80017ce <LL_RCC_PLL_IsReady>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f1      	beq.n	8001f1a <HAL_RCC_OscConfig+0x646>
 8001f36:	e045      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	f7ff fc3b 	bl	80017b2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fea4 	bl	8000c88 <HAL_GetTick>
 8001f40:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe fea0 	bl	8000c88 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b0a      	cmp	r3, #10
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e037      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f56:	f7ff fc3a 	bl	80017ce <LL_RCC_PLL_IsReady>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f1      	bne.n	8001f44 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <HAL_RCC_OscConfig+0x700>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
 8001f70:	e028      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e023      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	11c1808c 	.word	0x11c1808c
 8001fd4:	eefefffc 	.word	0xeefefffc

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e10f      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b89      	ldr	r3, [pc, #548]	@ (8002214 <HAL_RCC_ClockConfig+0x23c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d91b      	bls.n	8002032 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b86      	ldr	r3, [pc, #536]	@ (8002214 <HAL_RCC_ClockConfig+0x23c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4984      	ldr	r1, [pc, #528]	@ (8002214 <HAL_RCC_ClockConfig+0x23c>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200a:	f7fe fe3d 	bl	8000c88 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002010:	e008      	b.n	8002024 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002012:	f7fe fe39 	bl	8000c88 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0f3      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002024:	4b7b      	ldr	r3, [pc, #492]	@ (8002214 <HAL_RCC_ClockConfig+0x23c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d1ef      	bne.n	8002012 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fb2a 	bl	800169c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002048:	f7fe fe1e 	bl	8000c88 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002050:	f7fe fe1a 	bl	8000c88 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0d4      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002062:	f7ff fbf2 	bl	800184a <LL_RCC_IsActiveFlag_HPRE>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f1      	beq.n	8002050 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fb20 	bl	80016c2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002082:	f7fe fe01 	bl	8000c88 <HAL_GetTick>
 8002086:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800208a:	f7fe fdfd 	bl	8000c88 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0b7      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800209c:	f7ff fbe6 	bl	800186c <LL_RCC_IsActiveFlag_SHDHPRE>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f1      	beq.n	800208a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fb19 	bl	80016ee <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020bc:	f7fe fde4 	bl	8000c88 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020c4:	f7fe fde0 	bl	8000c88 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e09a      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80020d6:	f7ff fbdb 	bl	8001890 <LL_RCC_IsActiveFlag_PPRE1>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f1      	beq.n	80020c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d017      	beq.n	800211c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fb0e 	bl	8001714 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fdc6 	bl	8000c88 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002100:	f7fe fdc2 	bl	8000c88 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e07c      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002112:	f7ff fbce 	bl	80018b2 <LL_RCC_IsActiveFlag_PPRE2>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f1      	beq.n	8002100 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d043      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d106      	bne.n	800213e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002130:	f7ff f99b 	bl	800146a <LL_RCC_HSE_IsReady>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11e      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e066      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d106      	bne.n	8002154 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002146:	f7ff fb42 	bl	80017ce <LL_RCC_PLL_IsReady>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d113      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e05b      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800215c:	f7ff fa35 	bl	80015ca <LL_RCC_MSI_IsReady>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d108      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e050      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800216a:	f7ff f9ab 	bl	80014c4 <LL_RCC_HSI_IsReady>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e049      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fa6f 	bl	8001660 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002182:	f7fe fd81 	bl	8000c88 <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7fe fd7d 	bl	8000c88 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e035      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	f7ff fa71 	bl	8001686 <LL_RCC_GetSysClkSource>
 80021a4:	4602      	mov	r2, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1ec      	bne.n	800218a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <HAL_RCC_ClockConfig+0x23c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d21b      	bcs.n	80021f6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <HAL_RCC_ClockConfig+0x23c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4913      	ldr	r1, [pc, #76]	@ (8002214 <HAL_RCC_ClockConfig+0x23c>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ce:	f7fe fd5b 	bl	8000c88 <HAL_GetTick>
 80021d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021d6:	f7fe fd57 	bl	8000c88 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e011      	b.n	800220c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_RCC_ClockConfig+0x23c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d1ef      	bne.n	80021d6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021f6:	f000 f8b3 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <HAL_RCC_ClockConfig+0x240>)
 80021fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_RCC_ClockConfig+0x244>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fcf3 	bl	8000bf0 <HAL_InitTick>
 800220a:	4603      	mov	r3, r0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	58004000 	.word	0x58004000
 8002218:	20000000 	.word	0x20000000
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222e:	f7ff fa2a 	bl	8001686 <LL_RCC_GetSysClkSource>
 8002232:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002234:	f7ff fafe 	bl	8001834 <LL_RCC_PLL_GetMainSource>
 8002238:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x2c>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d139      	bne.n	80022ba <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d136      	bne.n	80022ba <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800224c:	f7ff f9cd 	bl	80015ea <LL_RCC_MSI_IsEnabledRangeSelect>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_GetSysClockFreq+0x62>
 8002256:	f7ff f9c8 	bl	80015ea <LL_RCC_MSI_IsEnabledRangeSelect>
 800225a:	4603      	mov	r3, r0
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x4e>
 8002260:	f7ff f9d3 	bl	800160a <LL_RCC_MSI_GetRange>
 8002264:	4603      	mov	r3, r0
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	e005      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x5a>
 800226e:	f7ff f9d7 	bl	8001620 <LL_RCC_MSI_GetRangeAfterStandby>
 8002272:	4603      	mov	r3, r0
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	4a36      	ldr	r2, [pc, #216]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x134>)
 800227c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002280:	e014      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x8c>
 8002282:	f7ff f9b2 	bl	80015ea <LL_RCC_MSI_IsEnabledRangeSelect>
 8002286:	4603      	mov	r3, r0
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_GetSysClockFreq+0x7a>
 800228c:	f7ff f9bd 	bl	800160a <LL_RCC_MSI_GetRange>
 8002290:	4603      	mov	r3, r0
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	e005      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x86>
 800229a:	f7ff f9c1 	bl	8001620 <LL_RCC_MSI_GetRangeAfterStandby>
 800229e:	4603      	mov	r3, r0
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x134>)
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d115      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022b8:	e012      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022c0:	4b25      	ldr	r3, [pc, #148]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x138>)
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e00c      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d109      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80022cc:	f7ff f8a0 	bl	8001410 <LL_RCC_HSE_IsEnabledDiv2>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x138>)
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e001      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <HAL_RCC_GetSysClockFreq+0x13c>)
 80022de:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	f7ff f9d1 	bl	8001686 <LL_RCC_GetSysClkSource>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d12f      	bne.n	800234a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80022ea:	f7ff faa3 	bl	8001834 <LL_RCC_PLL_GetMainSource>
 80022ee:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0xde>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d003      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0xe4>
 80022fc:	e00d      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x138>)
 8002300:	60fb      	str	r3, [r7, #12]
        break;
 8002302:	e00d      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002304:	f7ff f884 	bl	8001410 <LL_RCC_HSE_IsEnabledDiv2>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d102      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x138>)
 8002310:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002312:	e005      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002316:	60fb      	str	r3, [r7, #12]
        break;
 8002318:	e002      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	60fb      	str	r3, [r7, #12]
        break;
 800231e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002320:	f7ff fa66 	bl	80017f0 <LL_RCC_PLL_GetN>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	fb03 f402 	mul.w	r4, r3, r2
 800232c:	f7ff fa77 	bl	800181e <LL_RCC_PLL_GetDivider>
 8002330:	4603      	mov	r3, r0
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	3301      	adds	r3, #1
 8002336:	fbb4 f4f3 	udiv	r4, r4, r3
 800233a:	f7ff fa65 	bl	8001808 <LL_RCC_PLL_GetR>
 800233e:	4603      	mov	r3, r0
 8002340:	0f5b      	lsrs	r3, r3, #29
 8002342:	3301      	adds	r3, #1
 8002344:	fbb4 f3f3 	udiv	r3, r4, r3
 8002348:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800234a:	697b      	ldr	r3, [r7, #20]
}
 800234c:	4618      	mov	r0, r3
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd90      	pop	{r4, r7, pc}
 8002354:	08003900 	.word	0x08003900
 8002358:	00f42400 	.word	0x00f42400
 800235c:	01e84800 	.word	0x01e84800

08002360 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b598      	push	{r3, r4, r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002364:	f7ff ff5c 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8002368:	4604      	mov	r4, r0
 800236a:	f7ff f9e6 	bl	800173a <LL_RCC_GetAHBPrescaler>
 800236e:	4603      	mov	r3, r0
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	4a03      	ldr	r2, [pc, #12]	@ (8002384 <HAL_RCC_GetHCLKFreq+0x24>)
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd98      	pop	{r3, r4, r7, pc}
 8002384:	080038a0 	.word	0x080038a0

08002388 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b598      	push	{r3, r4, r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800238c:	f7ff ffe8 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8002390:	4604      	mov	r4, r0
 8002392:	f7ff f9ea 	bl	800176a <LL_RCC_GetAPB1Prescaler>
 8002396:	4603      	mov	r3, r0
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd98      	pop	{r3, r4, r7, pc}
 80023a8:	080038e0 	.word	0x080038e0

080023ac <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ac:	b598      	push	{r3, r4, r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80023b0:	f7ff ffd6 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023b4:	4604      	mov	r4, r0
 80023b6:	f7ff f9e3 	bl	8001780 <LL_RCC_GetAPB2Prescaler>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0adb      	lsrs	r3, r3, #11
 80023be:	4a03      	ldr	r2, [pc, #12]	@ (80023cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd98      	pop	{r3, r4, r7, pc}
 80023cc:	080038e0 	.word	0x080038e0

080023d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	4a10      	ldr	r2, [pc, #64]	@ (8002424 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80023e8:	f7ff f9b2 	bl	8001750 <LL_RCC_GetAHB3Prescaler>
 80023ec:	4603      	mov	r3, r0
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002428 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4a09      	ldr	r2, [pc, #36]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9c      	lsrs	r4, r3, #18
 800240c:	f7fe ffc6 	bl	800139c <HAL_PWREx_GetVoltageRange>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f000 f80b 	bl	8002430 <RCC_SetFlashLatency>
 800241a:	4603      	mov	r3, r0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	08003900 	.word	0x08003900
 8002428:	080038a0 	.word	0x080038a0
 800242c:	431bde83 	.word	0x431bde83

08002430 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	@ 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800243a:	4a3a      	ldr	r2, [pc, #232]	@ (8002524 <RCC_SetFlashLatency+0xf4>)
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002444:	6018      	str	r0, [r3, #0]
 8002446:	3304      	adds	r3, #4
 8002448:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800244a:	4a37      	ldr	r2, [pc, #220]	@ (8002528 <RCC_SetFlashLatency+0xf8>)
 800244c:	f107 0318 	add.w	r3, r7, #24
 8002450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002454:	6018      	str	r0, [r3, #0]
 8002456:	3304      	adds	r3, #4
 8002458:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800245a:	4a34      	ldr	r2, [pc, #208]	@ (800252c <RCC_SetFlashLatency+0xfc>)
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	ca07      	ldmia	r2, {r0, r1, r2}
 8002462:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002470:	d11b      	bne.n	80024aa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002472:	2300      	movs	r3, #0
 8002474:	633b      	str	r3, [r7, #48]	@ 0x30
 8002476:	e014      	b.n	80024a2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	3338      	adds	r3, #56	@ 0x38
 800247e:	443b      	add	r3, r7
 8002480:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4293      	cmp	r3, r2
 800248a:	d807      	bhi.n	800249c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	3338      	adds	r3, #56	@ 0x38
 8002492:	443b      	add	r3, r7
 8002494:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002498:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800249a:	e021      	b.n	80024e0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800249c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249e:	3301      	adds	r3, #1
 80024a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d9e7      	bls.n	8002478 <RCC_SetFlashLatency+0x48>
 80024a8:	e01a      	b.n	80024e0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024ae:	e014      	b.n	80024da <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80024b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	3338      	adds	r3, #56	@ 0x38
 80024b6:	443b      	add	r3, r7
 80024b8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d807      	bhi.n	80024d4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80024c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	3338      	adds	r3, #56	@ 0x38
 80024ca:	443b      	add	r3, r7
 80024cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024d2:	e005      	b.n	80024e0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d6:	3301      	adds	r3, #1
 80024d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d9e7      	bls.n	80024b0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024e0:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <RCC_SetFlashLatency+0x100>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 0207 	bic.w	r2, r3, #7
 80024e8:	4911      	ldr	r1, [pc, #68]	@ (8002530 <RCC_SetFlashLatency+0x100>)
 80024ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80024f0:	f7fe fbca 	bl	8000c88 <HAL_GetTick>
 80024f4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80024f6:	e008      	b.n	800250a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024f8:	f7fe fbc6 	bl	8000c88 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e007      	b.n	800251a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <RCC_SetFlashLatency+0x100>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002514:	429a      	cmp	r2, r3
 8002516:	d1ef      	bne.n	80024f8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3738      	adds	r7, #56	@ 0x38
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	08003884 	.word	0x08003884
 8002528:	0800388c 	.word	0x0800388c
 800252c:	08003894 	.word	0x08003894
 8002530:	58004000 	.word	0x58004000

08002534 <LL_RCC_LSE_IsReady>:
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b02      	cmp	r3, #2
 8002546:	d101      	bne.n	800254c <LL_RCC_LSE_IsReady+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_RCC_LSE_IsReady+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <LL_RCC_SetUSARTClockSource>:
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002562:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	b29b      	uxth	r3, r3
 8002572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <LL_RCC_SetI2SClockSource>:
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002596:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800259a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <LL_RCC_SetLPUARTClockSource>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <LL_RCC_SetI2CClockSource>:
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80025f2:	43db      	mvns	r3, r3
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80025fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <LL_RCC_SetLPTIMClockSource>:
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	041b      	lsls	r3, r3, #16
 8002630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <LL_RCC_SetRNGClockSource>:
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002654:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002658:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <LL_RCC_SetADCClockSource>:
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002682:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <LL_RCC_SetRTCClockSource>:
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <LL_RCC_GetRTCClockSource>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <LL_RCC_ForceBackupDomainReset>:
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_ReleaseBackupDomainReset>:
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800270a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
	...

0800271c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d058      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800273c:	f7fe fe20 	bl	8001380 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002740:	f7fe faa2 	bl	8000c88 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002746:	e009      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002748:	f7fe fa9e 	bl	8000c88 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	74fb      	strb	r3, [r7, #19]
        break;
 800275a:	e006      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800275c:	4b7b      	ldr	r3, [pc, #492]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002768:	d1ee      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d13c      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002770:	f7ff ffa7 	bl	80026c2 <LL_RCC_GetRTCClockSource>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277a:	429a      	cmp	r2, r3
 800277c:	d00f      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800278c:	f7ff ffa5 	bl	80026da <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002790:	f7ff ffb3 	bl	80026fa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d014      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fa6e 	bl	8000c88 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80027ae:	e00b      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe fa6a 	bl	8000c88 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d902      	bls.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	74fb      	strb	r3, [r7, #19]
            break;
 80027c6:	e004      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80027c8:	f7ff feb4 	bl	8002534 <LL_RCC_LSE_IsReady>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d1ee      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff5b 	bl	8002698 <LL_RCC_SetRTCClockSource>
 80027e2:	e004      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
 80027e8:	e001      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fea9 	bl	8002556 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fe9e 	bl	8002556 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fec0 	bl	80025b0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fee6 	bl	8002612 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fedb 	bl	8002612 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fed0 	bl	8002612 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fea9 	bl	80025da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002890:	2b00      	cmp	r3, #0
 8002892:	d004      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fe9e 	bl	80025da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fe93 	bl	80025da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d011      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fe5e 	bl	8002586 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d2:	d107      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fea5 	bl	8002644 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800290c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002910:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d011      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fea3 	bl	800266e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002930:	d107      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800293c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002940:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002942:	7cbb      	ldrb	r3, [r7, #18]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	58000400 	.word	0x58000400

08002950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0c6      	b.n	8002af0 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002972:	d009      	beq.n	8002988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
 800297a:	e005      	b.n	8002988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fe f859 	bl	8000a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029c2:	d902      	bls.n	80029ca <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e002      	b.n	80029d0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029d8:	d007      	beq.n	80029ea <HAL_SPI_Init+0x9a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029e2:	d002      	beq.n	80029ea <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2c:	ea42 0103 	orr.w	r1, r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a48:	d11b      	bne.n	8002a82 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10b      	bne.n	8002a6a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a5a:	d903      	bls.n	8002a64 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a62:	e002      	b.n	8002a6a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d107      	bne.n	8002a82 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	f003 0204 	and.w	r2, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002aa8:	ea42 0103 	orr.w	r1, r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac2:	d105      	bne.n	8002ad0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b292      	uxth	r2, r2
 8002ace:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ade:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b08:	4904      	ldr	r1, [pc, #16]	@ (8002b1c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	58000400 	.word	0x58000400

08002b20 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002b24:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	58000400 	.word	0x58000400

08002b40 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b4a:	619a      	str	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	58000400 	.word	0x58000400

08002b58 <LL_RCC_RF_DisableReset>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <LL_RCC_IsRFUnderReset>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b8c:	d101      	bne.n	8002b92 <LL_RCC_IsRFUnderReset+0x1a>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_RCC_IsRFUnderReset+0x1c>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002ba6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002baa:	4905      	ldr	r1, [pc, #20]	@ (8002bc0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	58000800 	.word	0x58000800

08002bc4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
    return status;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	e052      	b.n	8002c80 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	799b      	ldrb	r3, [r3, #6]
 8002be2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_SUBGHZ_Init+0x2c>
 8002bea:	7bbb      	ldrb	r3, [r7, #14]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d109      	bne.n	8002c04 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fd ff72 	bl	8000ae0 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002bfc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c00:	f7ff ffcc 	bl	8002b9c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002c04:	7bbb      	ldrb	r3, [r7, #14]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d126      	bne.n	8002c58 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002c10:	f7ff ffa2 	bl	8002b58 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002c14:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <HAL_SUBGHZ_Init+0xc4>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	0cdb      	lsrs	r3, r3, #19
 8002c22:	2264      	movs	r2, #100	@ 0x64
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	609a      	str	r2, [r3, #8]
        break;
 8002c3a:	e007      	b.n	8002c4c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002c42:	f7ff ff99 	bl	8002b78 <LL_RCC_IsRFUnderReset>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002c4c:	f7ff ff68 	bl	8002b20 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002c50:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002c54:	f7ff ff50 	bl	8002af8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002c58:	f7ff ff72 	bl	8002b40 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f810 	bl	8002c8c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	719a      	strb	r2, [r3, #6]

  return status;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000000 	.word	0x20000000

08002c8c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002c94:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <SUBGHZSPI_Init+0x3c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc8 <SUBGHZSPI_Init+0x3c>)
 8002c9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c9e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002ca0:	4a09      	ldr	r2, [pc, #36]	@ (8002cc8 <SUBGHZSPI_Init+0x3c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8002ca8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002caa:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <SUBGHZSPI_Init+0x3c>)
 8002cac:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8002cb0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002cb2:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <SUBGHZSPI_Init+0x3c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <SUBGHZSPI_Init+0x3c>)
 8002cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cbc:	6013      	str	r3, [r2, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	58010000 	.word	0x58010000

08002ccc <LL_RCC_GetUSARTClockSource>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	4313      	orrs	r3, r2
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_GetLPUARTClockSource>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4013      	ands	r3, r2
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e042      	b.n	8002da6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fe1a 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	@ 0x24
 8002d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa9d 	bl	8003298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f826 	bl	8002db0 <UART_SetConfig>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e01b      	b.n	8002da6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fb1b 	bl	80033da <UART_CheckIdleState>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db4:	b08c      	sub	sp, #48	@ 0x30
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b94      	ldr	r3, [pc, #592]	@ (8003030 <UART_SetConfig+0x280>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a89      	ldr	r2, [pc, #548]	@ (8003034 <UART_SetConfig+0x284>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002e26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	f023 010f 	bic.w	r1, r3, #15
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7a      	ldr	r2, [pc, #488]	@ (8003038 <UART_SetConfig+0x288>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d127      	bne.n	8002ea4 <UART_SetConfig+0xf4>
 8002e54:	2003      	movs	r0, #3
 8002e56:	f7ff ff39 	bl	8002ccc <LL_RCC_GetUSARTClockSource>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d81b      	bhi.n	8002e9c <UART_SetConfig+0xec>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <UART_SetConfig+0xbc>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e8d 	.word	0x08002e8d
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e95 	.word	0x08002e95
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e82:	e080      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002e84:	2302      	movs	r3, #2
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e8a:	e07c      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e92:	e078      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002e94:	2308      	movs	r3, #8
 8002e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e9a:	e074      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea2:	e070      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a64      	ldr	r2, [pc, #400]	@ (800303c <UART_SetConfig+0x28c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d138      	bne.n	8002f20 <UART_SetConfig+0x170>
 8002eae:	200c      	movs	r0, #12
 8002eb0:	f7ff ff0c 	bl	8002ccc <LL_RCC_GetUSARTClockSource>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d82c      	bhi.n	8002f18 <UART_SetConfig+0x168>
 8002ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <UART_SetConfig+0x114>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	08002f19 	.word	0x08002f19
 8002ecc:	08002f19 	.word	0x08002f19
 8002ed0:	08002f19 	.word	0x08002f19
 8002ed4:	08002f09 	.word	0x08002f09
 8002ed8:	08002f19 	.word	0x08002f19
 8002edc:	08002f19 	.word	0x08002f19
 8002ee0:	08002f19 	.word	0x08002f19
 8002ee4:	08002f01 	.word	0x08002f01
 8002ee8:	08002f19 	.word	0x08002f19
 8002eec:	08002f19 	.word	0x08002f19
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	08002f11 	.word	0x08002f11
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efe:	e042      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f00:	2302      	movs	r3, #2
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f06:	e03e      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0e:	e03a      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f10:	2308      	movs	r3, #8
 8002f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f16:	e036      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1e:	e032      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a43      	ldr	r2, [pc, #268]	@ (8003034 <UART_SetConfig+0x284>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d12a      	bne.n	8002f80 <UART_SetConfig+0x1d0>
 8002f2a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002f2e:	f7ff fedf 	bl	8002cf0 <LL_RCC_GetLPUARTClockSource>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f38:	d01a      	beq.n	8002f70 <UART_SetConfig+0x1c0>
 8002f3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f3e:	d81b      	bhi.n	8002f78 <UART_SetConfig+0x1c8>
 8002f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f44:	d00c      	beq.n	8002f60 <UART_SetConfig+0x1b0>
 8002f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f4a:	d815      	bhi.n	8002f78 <UART_SetConfig+0x1c8>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <UART_SetConfig+0x1a8>
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f54:	d008      	beq.n	8002f68 <UART_SetConfig+0x1b8>
 8002f56:	e00f      	b.n	8002f78 <UART_SetConfig+0x1c8>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5e:	e012      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f60:	2302      	movs	r3, #2
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f66:	e00e      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6e:	e00a      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f70:	2308      	movs	r3, #8
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f76:	e006      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7e:	e002      	b.n	8002f86 <UART_SetConfig+0x1d6>
 8002f80:	2310      	movs	r3, #16
 8002f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003034 <UART_SetConfig+0x284>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	f040 80a4 	bne.w	80030da <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d823      	bhi.n	8002fe2 <UART_SetConfig+0x232>
 8002f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa0 <UART_SetConfig+0x1f0>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fc5 	.word	0x08002fc5
 8002fa4:	08002fe3 	.word	0x08002fe3
 8002fa8:	08002fcd 	.word	0x08002fcd
 8002fac:	08002fe3 	.word	0x08002fe3
 8002fb0:	08002fd3 	.word	0x08002fd3
 8002fb4:	08002fe3 	.word	0x08002fe3
 8002fb8:	08002fe3 	.word	0x08002fe3
 8002fbc:	08002fe3 	.word	0x08002fe3
 8002fc0:	08002fdb 	.word	0x08002fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f7ff f9e0 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fca:	e010      	b.n	8002fee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8003040 <UART_SetConfig+0x290>)
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fd0:	e00d      	b.n	8002fee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd2:	f7ff f925 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8002fd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fd8:	e009      	b.n	8002fee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fe0:	e005      	b.n	8002fee <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8137 	beq.w	8003264 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	4a12      	ldr	r2, [pc, #72]	@ (8003044 <UART_SetConfig+0x294>)
 8002ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003000:	461a      	mov	r2, r3
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	fbb3 f3f2 	udiv	r3, r3, r2
 8003008:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	429a      	cmp	r2, r3
 8003018:	d305      	bcc.n	8003026 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	429a      	cmp	r2, r3
 8003024:	d910      	bls.n	8003048 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800302c:	e11a      	b.n	8003264 <UART_SetConfig+0x4b4>
 800302e:	bf00      	nop
 8003030:	cfff69f3 	.word	0xcfff69f3
 8003034:	40008000 	.word	0x40008000
 8003038:	40013800 	.word	0x40013800
 800303c:	40004400 	.word	0x40004400
 8003040:	00f42400 	.word	0x00f42400
 8003044:	08003940 	.word	0x08003940
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	2200      	movs	r2, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	60fa      	str	r2, [r7, #12]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	4a8e      	ldr	r2, [pc, #568]	@ (8003290 <UART_SetConfig+0x4e0>)
 8003056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800305a:	b29b      	uxth	r3, r3
 800305c:	2200      	movs	r2, #0
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003066:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800306a:	f7fd f885 	bl	8000178 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	020b      	lsls	r3, r1, #8
 8003080:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003084:	0202      	lsls	r2, r0, #8
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	6849      	ldr	r1, [r1, #4]
 800308a:	0849      	lsrs	r1, r1, #1
 800308c:	2000      	movs	r0, #0
 800308e:	460c      	mov	r4, r1
 8003090:	4605      	mov	r5, r0
 8003092:	eb12 0804 	adds.w	r8, r2, r4
 8003096:	eb43 0905 	adc.w	r9, r3, r5
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	469a      	mov	sl, r3
 80030a2:	4693      	mov	fp, r2
 80030a4:	4652      	mov	r2, sl
 80030a6:	465b      	mov	r3, fp
 80030a8:	4640      	mov	r0, r8
 80030aa:	4649      	mov	r1, r9
 80030ac:	f7fd f864 	bl	8000178 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030be:	d308      	bcc.n	80030d2 <UART_SetConfig+0x322>
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030c6:	d204      	bcs.n	80030d2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	60da      	str	r2, [r3, #12]
 80030d0:	e0c8      	b.n	8003264 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030d8:	e0c4      	b.n	8003264 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030e2:	d167      	bne.n	80031b4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80030e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d828      	bhi.n	800313e <UART_SetConfig+0x38e>
 80030ec:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <UART_SetConfig+0x344>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003119 	.word	0x08003119
 80030f8:	08003121 	.word	0x08003121
 80030fc:	08003129 	.word	0x08003129
 8003100:	0800313f 	.word	0x0800313f
 8003104:	0800312f 	.word	0x0800312f
 8003108:	0800313f 	.word	0x0800313f
 800310c:	0800313f 	.word	0x0800313f
 8003110:	0800313f 	.word	0x0800313f
 8003114:	08003137 	.word	0x08003137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7ff f936 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 800311c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800311e:	e014      	b.n	800314a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003120:	f7ff f944 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 8003124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003126:	e010      	b.n	800314a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003128:	4b5a      	ldr	r3, [pc, #360]	@ (8003294 <UART_SetConfig+0x4e4>)
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800312c:	e00d      	b.n	800314a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312e:	f7ff f877 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8003132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003134:	e009      	b.n	800314a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800313a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800313c:	e005      	b.n	800314a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8089 	beq.w	8003264 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	4a4e      	ldr	r2, [pc, #312]	@ (8003290 <UART_SetConfig+0x4e0>)
 8003158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800315c:	461a      	mov	r2, r3
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	fbb3 f3f2 	udiv	r3, r3, r2
 8003164:	005a      	lsls	r2, r3, #1
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	441a      	add	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	d916      	bls.n	80031ac <UART_SetConfig+0x3fc>
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003184:	d212      	bcs.n	80031ac <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f023 030f 	bic.w	r3, r3, #15
 800318e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	b29a      	uxth	r2, r3
 800319c:	8bfb      	ldrh	r3, [r7, #30]
 800319e:	4313      	orrs	r3, r2
 80031a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	8bfa      	ldrh	r2, [r7, #30]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	e05b      	b.n	8003264 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031b2:	e057      	b.n	8003264 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d828      	bhi.n	800320e <UART_SetConfig+0x45e>
 80031bc:	a201      	add	r2, pc, #4	@ (adr r2, 80031c4 <UART_SetConfig+0x414>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031e9 	.word	0x080031e9
 80031c8:	080031f1 	.word	0x080031f1
 80031cc:	080031f9 	.word	0x080031f9
 80031d0:	0800320f 	.word	0x0800320f
 80031d4:	080031ff 	.word	0x080031ff
 80031d8:	0800320f 	.word	0x0800320f
 80031dc:	0800320f 	.word	0x0800320f
 80031e0:	0800320f 	.word	0x0800320f
 80031e4:	08003207 	.word	0x08003207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e8:	f7ff f8ce 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 80031ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031ee:	e014      	b.n	800321a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031f0:	f7ff f8dc 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 80031f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031f6:	e010      	b.n	800321a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f8:	4b26      	ldr	r3, [pc, #152]	@ (8003294 <UART_SetConfig+0x4e4>)
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031fc:	e00d      	b.n	800321a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fe:	f7ff f80f 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8003202:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003204:	e009      	b.n	800321a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800320c:	e005      	b.n	800321a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003218:	bf00      	nop
    }

    if (pclk != 0U)
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	2b00      	cmp	r3, #0
 800321e:	d021      	beq.n	8003264 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	4a1a      	ldr	r2, [pc, #104]	@ (8003290 <UART_SetConfig+0x4e0>)
 8003226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800322a:	461a      	mov	r2, r3
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	441a      	add	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2b0f      	cmp	r3, #15
 8003248:	d909      	bls.n	800325e <UART_SetConfig+0x4ae>
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003250:	d205      	bcs.n	800325e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	b29a      	uxth	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	e002      	b.n	8003264 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2201      	movs	r2, #1
 8003268:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2201      	movs	r2, #1
 8003270:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2200      	movs	r2, #0
 8003278:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003280:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003284:	4618      	mov	r0, r3
 8003286:	3730      	adds	r7, #48	@ 0x30
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328e:	bf00      	nop
 8003290:	08003940 	.word	0x08003940
 8003294:	00f42400 	.word	0x00f42400

08003298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01a      	beq.n	80033ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003396:	d10a      	bne.n	80033ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af02      	add	r7, sp, #8
 80033e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033ea:	f7fd fc4d 	bl	8000c88 <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d10e      	bne.n	800341c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f832 	bl	8003476 <UART_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e028      	b.n	800346e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d10e      	bne.n	8003448 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f81c 	bl	8003476 <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e012      	b.n	800346e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b09c      	sub	sp, #112	@ 0x70
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	4613      	mov	r3, r2
 8003484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003486:	e0af      	b.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800348e:	f000 80ab 	beq.w	80035e8 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7fd fbf9 	bl	8000c88 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80034a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d140      	bne.n	800352a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80034b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80034bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80034cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80034d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e6      	bne.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3308      	adds	r3, #8
 80034e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3308      	adds	r3, #8
 80034f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80034fa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80034fc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e5      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e06f      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d057      	beq.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x172>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b80      	cmp	r3, #128	@ 0x80
 800353c:	d054      	beq.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x172>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	d051      	beq.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003552:	d149      	bne.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800355c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003572:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800357c:	637b      	str	r3, [r7, #52]	@ 0x34
 800357e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003582:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e6      	bne.n	800355e <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3308      	adds	r3, #8
 8003596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	613b      	str	r3, [r7, #16]
   return(result);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3308      	adds	r3, #8
 80035ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80035b0:	623a      	str	r2, [r7, #32]
 80035b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	69f9      	ldr	r1, [r7, #28]
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e010      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	429a      	cmp	r2, r3
 8003604:	f43f af40 	beq.w	8003488 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3770      	adds	r7, #112	@ 0x70
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_UARTEx_DisableFifoMode+0x16>
 8003624:	2302      	movs	r3, #2
 8003626:	e027      	b.n	8003678 <HAL_UARTEx_DisableFifoMode+0x66>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	@ 0x24
 8003634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003656:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003696:	2302      	movs	r3, #2
 8003698:	e02d      	b.n	80036f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2224      	movs	r2, #36	@ 0x24
 80036a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f850 	bl	800377c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003712:	2302      	movs	r3, #2
 8003714:	e02d      	b.n	8003772 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2224      	movs	r2, #36	@ 0x24
 8003722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f812 	bl	800377c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003788:	2b00      	cmp	r3, #0
 800378a:	d108      	bne.n	800379e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800379c:	e031      	b.n	8003802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800379e:	2308      	movs	r3, #8
 80037a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037a2:	2308      	movs	r3, #8
 80037a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	0e5b      	lsrs	r3, r3, #25
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	0f5b      	lsrs	r3, r3, #29
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037c6:	7bbb      	ldrb	r3, [r7, #14]
 80037c8:	7b3a      	ldrb	r2, [r7, #12]
 80037ca:	4910      	ldr	r1, [pc, #64]	@ (800380c <UARTEx_SetNbDataToProcess+0x90>)
 80037cc:	5c8a      	ldrb	r2, [r1, r2]
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80037d2:	7b3a      	ldrb	r2, [r7, #12]
 80037d4:	490e      	ldr	r1, [pc, #56]	@ (8003810 <UARTEx_SetNbDataToProcess+0x94>)
 80037d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80037dc:	b29a      	uxth	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	7b7a      	ldrb	r2, [r7, #13]
 80037e8:	4908      	ldr	r1, [pc, #32]	@ (800380c <UARTEx_SetNbDataToProcess+0x90>)
 80037ea:	5c8a      	ldrb	r2, [r1, r2]
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80037f0:	7b7a      	ldrb	r2, [r7, #13]
 80037f2:	4907      	ldr	r1, [pc, #28]	@ (8003810 <UARTEx_SetNbDataToProcess+0x94>)
 80037f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	08003958 	.word	0x08003958
 8003810:	08003960 	.word	0x08003960

08003814 <memset>:
 8003814:	4402      	add	r2, r0
 8003816:	4603      	mov	r3, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <__libc_init_array>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	4d0d      	ldr	r5, [pc, #52]	@ (800385c <__libc_init_array+0x38>)
 8003828:	4c0d      	ldr	r4, [pc, #52]	@ (8003860 <__libc_init_array+0x3c>)
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	2600      	movs	r6, #0
 8003830:	42a6      	cmp	r6, r4
 8003832:	d109      	bne.n	8003848 <__libc_init_array+0x24>
 8003834:	4d0b      	ldr	r5, [pc, #44]	@ (8003864 <__libc_init_array+0x40>)
 8003836:	4c0c      	ldr	r4, [pc, #48]	@ (8003868 <__libc_init_array+0x44>)
 8003838:	f000 f818 	bl	800386c <_init>
 800383c:	1b64      	subs	r4, r4, r5
 800383e:	10a4      	asrs	r4, r4, #2
 8003840:	2600      	movs	r6, #0
 8003842:	42a6      	cmp	r6, r4
 8003844:	d105      	bne.n	8003852 <__libc_init_array+0x2e>
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	f855 3b04 	ldr.w	r3, [r5], #4
 800384c:	4798      	blx	r3
 800384e:	3601      	adds	r6, #1
 8003850:	e7ee      	b.n	8003830 <__libc_init_array+0xc>
 8003852:	f855 3b04 	ldr.w	r3, [r5], #4
 8003856:	4798      	blx	r3
 8003858:	3601      	adds	r6, #1
 800385a:	e7f2      	b.n	8003842 <__libc_init_array+0x1e>
 800385c:	08003970 	.word	0x08003970
 8003860:	08003970 	.word	0x08003970
 8003864:	08003970 	.word	0x08003970
 8003868:	08003974 	.word	0x08003974

0800386c <_init>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr

08003878 <_fini>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr
